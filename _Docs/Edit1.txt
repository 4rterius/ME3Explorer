<Window.CommandBindings>
		<!-- Commands -->
		<CommandBinding Command="local:Commands.Exit" CanExecute="ExitCommand_OnCanExecute" Executed="ExitCommand_OnExecuted" />
		<CommandBinding Command="local:Commands.GoTo" CanExecute="GoToCommand_OnCanExecute" Executed="GoToCommand_OnExecuted" />
		<CommandBinding Command="local:Commands.New" CanExecute="NewCommand_OnCanExecute" Executed="NewCommand_OnExecuted" />
		<CommandBinding Command="local:Commands.Open" CanExecute="OpenCommand_OnCanExecute" Executed="OpenCommand_OnExecuted" />
		<CommandBinding Command="local:Commands.Save" CanExecute="SaveCommand_OnCanExecute" Executed="SaveCommand_OnExecuted" />

		<!-- Codex Map Commands -->
		<CommandBinding Command="local:CodexMapCommands.AddCodexEntry" Executed="AddCodexEntryCommand_OnExecuted" />
		<CommandBinding Command="local:CodexMapCommands.AddCodexPage" Executed="AddCodexPageCommand_OnExecuted" />
		<CommandBinding Command="local:CodexMapCommands.AddCodexSection" Executed="AddCodexSectionCommand_OnExecuted" />
		<CommandBinding Command="local:CodexMapCommands.RemoveCodexEntry" Executed="RemoveCodexEntryCommand_OnExecuted" />
		<CommandBinding Command="local:CodexMapCommands.RemoveCodexPage" Executed="RemoveCodexPageCommand_OnExecuted" />
		<CommandBinding Command="local:CodexMapCommands.RemoveCodexSection" Executed="RemoveCodexSectionCommand_OnExecuted" />

		<!-- Quest Map Commands -->
		<CommandBinding Command="local:QuestMapCommands.AddQuest" Executed="AddQuestCommand_OnExecuted" />
		<CommandBinding Command="local:QuestMapCommands.AddQuestEntry" Executed="AddQuestEntryCommand_OnExecuted" />
		<CommandBinding Command="local:QuestMapCommands.AddQuestGoal" Executed="AddQuestGoalCommand_OnExecuted" />
		<CommandBinding Command="local:QuestMapCommands.AddQuestPlotItem" Executed="AddQuestPlotItemCommand_OnExecuted" />
		<CommandBinding Command="local:QuestMapCommands.AddQuestTask" Executed="AddQuestTaskCommand_OnExecuted" />
		<CommandBinding Command="local:QuestMapCommands.RemoveQuest" Executed="RemoveQuestCommand_OnExecuted" />
		<CommandBinding Command="local:QuestMapCommands.RemoveQuestEntry" Executed="RemoveQuestEntryCommand_OnExecuted" />
		<CommandBinding Command="local:QuestMapCommands.RemoveQuestGoal" Executed="RemoveQuestGoalCommand_OnExecuted" />
		<CommandBinding Command="local:QuestMapCommands.RemoveQuestPlotItem" Executed="RemoveQuestPlotItemCommand_OnExecuted" />
		<CommandBinding Command="local:QuestMapCommands.RemoveQuestTask" Executed="RemoveQuestTaskCommand_OnExecuted" />

		<!-- State Event Map Commands -->
		<CommandBinding Command="local:StateEventMapCommands.AddStateEvent" Executed="AddStateEventCommand_OnExecuted" />
		<CommandBinding Command="local:StateEventMapCommands.AddStateEventElement" Executed="AddStateEventElementCommand_OnExecuted" />
		<CommandBinding Command="local:StateEventMapCommands.RemoveStateEvent" Executed="RemoveStateEventCommand_OnExecuted" />
		<CommandBinding Command="local:StateEventMapCommands.RemoveStateEventElement" Executed="RemoveStateEventElementCommand_OnExecuted" />
	</Window.CommandBindings>
	
		<!-- Main Menu -->
		<Menu x:Name="MainMenu" Margin="0" Grid.Row="0" Grid.Column="0">
			<MenuItem Header="_File">
				<MenuItem Header="_New" Command="local:Commands.New" />
				<MenuItem Header="_Open" Command="local:Commands.Open" />
				<MenuItem Header="_Save" Command="local:Commands.Save" />
				<Separator />
				<MenuItem Header="E_xit" Command="local:Commands.Exit" />
			</MenuItem>
			<MenuItem Header="_Edit">
				<MenuItem Header="_Go To..." Command="local:Commands.GoTo" />
			</MenuItem>
		</Menu>

		<!-- Main Tab Control -->
		<TabControl x:Name="MainTabControl" 
			Grid.Column="0" Grid.Row="1">
			<!-- Codex Map Tab -->
			<TabItem x:Name="CodexMapTabItem" 
				Header="Codex Map" 
				IsSelected="True"
				DataContext="{Binding Path=CodexMap}">
				<Grid 
					Margin="5">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="*" />
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="*" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>

					<!-- Codex Map ComboBox -->
					<ComboBox x:Name="CodexMapComboBox" 
						Grid.Column="0" Grid.Row="0">
						<ComboBoxItem Content="Codex Pages" Tag="{Binding Path=Pages}" />
						<ComboBoxItem Content="Codex Sections" Tag="{Binding Path=Sections}" IsSelected="True" />
					</ComboBox>

					<!-- Codex Map ListBox -->
					<ListBox x:Name="CodexMapListBox" 
						Grid.Column="0" Grid.Row="1" 
						Margin="0,5,0,0" SelectedIndex="0" SelectionMode="Single" Width="150"
						DataContext="{Binding ElementName=CodexMapComboBox, Path=SelectedItem.(FrameworkElement.Tag), 
							Mode=OneWay, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged}"
						ItemsSource="{Binding}">
						<!-- Resources -->
						<ListBox.Resources>
							<DataTemplate DataType="{x:Type codexMap:BioCodexPage}">
								<TextBlock Text="{Binding Id, StringFormat='Page: \{0\}'}" />
							</DataTemplate>
							<DataTemplate DataType="{x:Type codexMap:BioCodexSection}">
								<TextBlock Text="{Binding Id, StringFormat='Section: \{0\}'}" />
							</DataTemplate>
						</ListBox.Resources>

						<!-- Interaction Triggers -->
						<i:Interaction.Triggers>
							<!-- Selection Changed -->
							<i:EventTrigger EventName="SelectionChanged">
								<i:Interaction.Behaviors>
									<ei:ConditionBehavior>
										<ei:ConditionalExpression ForwardChaining="And">
											<ei:ComparisonCondition 
												LeftOperand="{Binding ElementName=CodexMapListBox, Path=SelectedIndex}" 
												Operator="GreaterThanOrEqual"
												RightOperand="0" />
											
											<ei:ComparisonCondition 
												LeftOperand="{Binding ElementName=RemoveCodexEntryButton, Path=IsEnabled}" 
												Operator="Equal"
												RightOperand="False" />
										</ei:ConditionalExpression>
									</ei:ConditionBehavior>
								</i:Interaction.Behaviors>
								<ei:ChangePropertyAction TargetName="RemoveCodexEntryButton" PropertyName="IsEnabled" Value="True" />
							</i:EventTrigger>

							<!-- Target Updated -->
							<i:EventTrigger EventName="TargetUpdated">
								<i:Interaction.Behaviors>
									<ei:ConditionBehavior>
										<ei:ConditionalExpression>
											<ei:ComparisonCondition 
												LeftOperand="{Binding ElementName=CodexMapListBox, Path=HasItems}" 
												Operator="Equal" 
												RightOperand="False" />
										</ei:ConditionalExpression>
									</ei:ConditionBehavior>
								</i:Interaction.Behaviors>
								<ei:ChangePropertyAction TargetName="RemoveCodexEntryButton" PropertyName="IsEnabled" Value="False" />
								<ei:ChangePropertyAction TargetName="CodexMapListBox" PropertyName="SelectedIndex" Value="-1" />
							</i:EventTrigger>

							<!-- Target Updated -->
							<i:EventTrigger EventName="TargetUpdated">
								<i:Interaction.Behaviors>
									<ei:ConditionBehavior>
										<ei:ConditionalExpression>
											<ei:ComparisonCondition 
												LeftOperand="{Binding ElementName=CodexMapListBox, Path=HasItems}" 
												Operator="Equal" 
												RightOperand="True" />
										</ei:ConditionalExpression>
									</ei:ConditionBehavior>
								</i:Interaction.Behaviors>
								<ei:ChangePropertyAction TargetName="CodexMapListBox" PropertyName="SelectedIndex" Value="0" />
							</i:EventTrigger>
						</i:Interaction.Triggers>
					</ListBox>

					<!-- Codex Map Buttons Grid -->
					<Grid x:Name="CodexMapButtonsGrid"
						Grid.Column="0" Grid.Row="2" 
						Margin="0,5,0,0">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="5" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						
						<Button x:Name="AddCodexEntryButton" 
							Grid.Column="0" Grid.Row="0" 
							Content="Add" 
							Command="local:CodexMapCommands.AddCodexEntry" />
						
						<Button x:Name="RemoveCodexEntryButton" 
							Grid.Column="2" Grid.Row="0" 
							Content="Remove" 
							Command="local:CodexMapCommands.RemoveCodexEntry" />
					</Grid>

					<StackPanel Grid.Column="1" Grid.Row="1"
						DataContext="{Binding ElementName=CodexMapListBox, Path=SelectedItem, 
							Mode=OneWay, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged}">
						
						<!-- Codex Map Pages -->
						<Grid Panel.ZIndex="0" 
							DataContext="{Binding}"
							Visibility="{Binding Converter={data:TypeOfVisibiltyConverter {x:Type codexMap:BioCodexPage}}, FallbackValue=Collapsed}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>

							<!-- Codex Id -->
							<Label 
								Content="Codex Id:" Grid.Column="0" Grid.Row="0" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=Id, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="0" />

							<!-- Codex Sound -->
							<Label 
								Content="Codex Sound:" Grid.Column="0" Grid.Row="1" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=CodexSound, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="1" />

							<!-- Description -->
							<Label 
								Content="Description:" Grid.Column="0" Grid.Row="2" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=Description.Index, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="2" />

							<!-- Id -->
							<Label 
								Content="Id:" Grid.Column="0" Grid.Row="3" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=Id, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="3" />

							<!-- Priority -->
							<Label 
								Content="Priority:" Grid.Column="0" Grid.Row="4" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=Priority, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="4" />

							<!-- Section -->
							<Label 
								Content="Section:" Grid.Column="0" Grid.Row="5" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=Section, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="5" />

							<!-- Texture Index -->
							<Label 
								Content="Texture Index:" Grid.Column="0" Grid.Row="6" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=TextureIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="6" />

							<!-- Title -->
							<Label 
								Content="Title:" Grid.Column="0" Grid.Row="7" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=Title.Index, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="7" />

							<!-- Instance Version -->
							<Label 
								Content="Instance Version:" Grid.Column="0" Grid.Row="8" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=InstanceVersion, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="8" />
						</Grid>

						<!-- Codex Map Sections -->
						<Grid Panel.ZIndex="1" 
							DataContext="{Binding}"
							Visibility="{Binding Converter={data:TypeOfVisibiltyConverter {x:Type codexMap:BioCodexSection}}, FallbackValue=Collapsed}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>

							<!-- Codex Id -->
							<Label 
								Content="Codex Id:" Grid.Column="0" Grid.Row="0" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=Id, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="0" />

							<!-- Codex Sound -->
							<Label 
								Content="Codex Sound:" Grid.Column="0" Grid.Row="1" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=CodexSound, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="1" />

							<!-- Description -->
							<Label 
								Content="Description:" Grid.Column="0" Grid.Row="2" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=Description.Index, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="2" />

							<!-- Id -->
							<Label 
								Content="Id:" Grid.Column="0" Grid.Row="3" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=Id, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="3" />

							<!-- Is Primary -->
							<Label 
								Content="Is Primary:" Grid.Column="0" Grid.Row="4" />
							<CheckBox 
								IsChecked="{Binding Path=IsPrimary, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="4" />

							<!-- Priority -->
							<Label 
								Content="Priority:" Grid.Column="0" Grid.Row="5" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=Priority, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="5" />

							<!-- Texture Index -->
							<Label 
								Content="Texture Index:" Grid.Column="0" Grid.Row="6" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=TextureIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="6" />

							<!-- Title -->
							<Label 
								Content="Title:" Grid.Column="0" Grid.Row="7" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=Title.Index, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="7" />

							<!-- Instance Version -->
							<Label 
								Content="Instance Version:" Grid.Column="0" Grid.Row="8" />
							<xtlk:IntegerUpDown 
								Text="{Binding Path=InstanceVersion, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="8" />
						</Grid>
					</StackPanel>
				</Grid>
			</TabItem>

			<!-- Quest Map Tab -->
			<TabItem x:Name="QuestMapTab"
				Header="Quest Map" 
				DataContext="{Binding Path=QuestMap}">
				<Grid x:Name="QuestMapGrid"
					Margin="5">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="*" />
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="*" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>

					<!-- Quest Map ComboBox -->
					<ComboBox x:Name="QuestMapComboBox" 
						Grid.Column="0" Grid.Row="0">
						<ComboBoxItem Content="Bool State Tasks" Tag="{Binding BoolTaskEvals}" />
						<ComboBoxItem Content="Float State Tasks" Tag="{Binding FloatTaskEvals}" />
						<ComboBoxItem Content="Int State Tasks" Tag="{Binding IntTaskEvals}" />
						<ComboBoxItem Content="Quests" Tag="{Binding Quests}" IsSelected="True" />
					</ComboBox>

					<!-- Quest Map ListBox -->
					<ListBox x:Name="QuestMapListBox" 
						Grid.Column="0" Grid.Row="1" 
						Margin="0,5,0,0" SelectedIndex="0" SelectionMode="Single" Width="150"
						DataContext="{Binding ElementName=QuestMapComboBox, Path=SelectedItem.(FrameworkElement.Tag), 
							Mode=OneWay, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged}"
						ItemsSource="{Binding}">
						<!-- Resources -->
						<ListBox.Resources>
							<DataTemplate DataType="{x:Type questMap:BioQuest}">
								<TextBlock Text="{Binding Id, StringFormat='Quest: \{0\}'}" />
							</DataTemplate>
							<DataTemplate DataType="{x:Type questMap:BioStateTaskList}">
								<TextBlock Text="{Binding Id, StringFormat='State Task:\{0\}'}" />
							</DataTemplate>
						</ListBox.Resources>

						<!-- Interaction Triggers -->
						<i:Interaction.Triggers>
							<!-- Selection Changed -->
							<i:EventTrigger EventName="SelectionChanged">
								<i:Interaction.Behaviors>
									<ei:ConditionBehavior>
										<ei:ConditionalExpression ForwardChaining="And">
											<ei:ComparisonCondition 
												LeftOperand="{Binding ElementName=QuestMapListBox, Path=SelectedIndex}" 
												Operator="GreaterThanOrEqual"
												RightOperand="0" />
											
											<ei:ComparisonCondition 
												LeftOperand="{Binding ElementName=RemoveFromQuestMapButton, Path=IsEnabled}" 
												Operator="Equal"
												RightOperand="False" />
										</ei:ConditionalExpression>
									</ei:ConditionBehavior>
								</i:Interaction.Behaviors>
								<ei:ChangePropertyAction TargetName="RemoveFromQuestMapButton" PropertyName="IsEnabled" Value="True" />
							</i:EventTrigger>

							<!-- Target Updated -->
							<i:EventTrigger EventName="TargetUpdated">
								<i:Interaction.Behaviors>
									<ei:ConditionBehavior>
										<ei:ConditionalExpression>
											<ei:ComparisonCondition 
												LeftOperand="{Binding ElementName=QuestMapListBox, Path=HasItems}" 
												Operator="Equal" 
												RightOperand="False" />
										</ei:ConditionalExpression>
									</ei:ConditionBehavior>
								</i:Interaction.Behaviors>
								<ei:ChangePropertyAction TargetName="RemoveFromQuestMapButton" PropertyName="IsEnabled" Value="False" />
								<ei:ChangePropertyAction TargetName="QuestMapListBox" PropertyName="SelectedIndex" Value="-1" />
							</i:EventTrigger>

							<!-- Target Updated -->
							<i:EventTrigger EventName="TargetUpdated">
								<i:Interaction.Behaviors>
									<ei:ConditionBehavior>
										<ei:ConditionalExpression>
											<ei:ComparisonCondition 
												LeftOperand="{Binding ElementName=QuestMapListBox, Path=HasItems}" 
												Operator="Equal" 
												RightOperand="True" />
										</ei:ConditionalExpression>
									</ei:ConditionBehavior>
								</i:Interaction.Behaviors>
								<ei:ChangePropertyAction TargetName="QuestMapListBox" PropertyName="SelectedIndex" Value="0" />
							</i:EventTrigger>
						</i:Interaction.Triggers>
					</ListBox>

					<!-- Quest Map Buttons -->
					<Grid x:Name="QuestMapButtonsGrid"
						Grid.Column="0" Grid.Row="2" 
						Margin="0,5,0,0">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="5" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>

						<!-- Add Quest Map Entry -->
						<Button x:Name="AddToQuestMapButton" 
							Grid.Column="0" Grid.Row="0" 
							Content="Add" 
							Command="local:QuestMapCommands.AddQuest" 
							CommandParameter="" />

						<!-- Remove Quest Map Entry -->
						<Button x:Name="RemoveFromQuestMapButton" 
							Grid.Column="2" Grid.Row="0"
							Content="Remove" 
							Command="local:QuestMapCommands.RemoveQuest"
							CommandParameter="" />
					</Grid>

					<!-- Quest Map Entry Grid -->
					<Grid x:Name="QuestMapEntryGrid" 
						Grid.Column="1" Grid.Row="0" Grid.RowSpan="3" 
						Margin="5,0,5,0"
						DataContext="{Binding ElementName=QuestMapListBox, Path=SelectedItem, 
							Mode=OneWay, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged}">

						<!-- Quest Map Quest -->
						<Grid Panel.ZIndex="0" 
							DataContext="{Binding}"
							Visibility="{Binding Converter={data:TypeOfVisibiltyConverter {x:Type questMap:BioQuest}}, FallbackValue=Collapsed}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="*" />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>

							<!-- Quest Entry ComboBox -->
							<ComboBox x:Name="QuestEntryComboBox" 
								Grid.Column="0" Grid.Row="0" 
								Margin="0" SelectedIndex="0" Width="100"
								DataContext="{Binding}">
								<ComboBoxItem Content="Goals" DataContext="{Binding Path=Goals}" Tag="Goals" />
								<ComboBoxItem Content="Plot Items" DataContext="{Binding Path=PlotItems}" Tag="PlotItems" />
								<ComboBoxItem Content="Tasks" DataContext="{Binding Path=Tasks}" Tag="Tasks" />
							</ComboBox>

							<!-- Quest Entry ListBox -->
							<ListBox x:Name="QuestEntryListBox" Grid.Column="0" Grid.Row="1" Margin="0,5,0,0"
								DataContext="{Binding ElementName=QuestEntryComboBox, Path=SelectedItem.(ComboBoxItem.DataContext), 
									Mode=OneWay, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged}"
								ItemsSource="{Binding}" 
								SelectedIndex="0">
								<!-- Resources -->
								<ListBox.Resources>
									<!-- Quest Goal -->
									<DataTemplate DataType="{x:Type questMap:BioQuestGoal}">
										<TextBlock Text="Goal" />
									</DataTemplate>
									
									<!-- Quest Plot Item -->
									<DataTemplate DataType="{x:Type questMap:BioQuestPlotItem}">
										<TextBlock Text="Plot Item" />
									</DataTemplate>
									
									<!-- Quest Task -->
									<DataTemplate DataType="{x:Type questMap:BioQuestTask}">
										<TextBlock Text="Task" />
									</DataTemplate>
								</ListBox.Resources>

								<!-- Interaction Triggers -->
								<i:Interaction.Triggers>
									<!-- Selection Changed -->
									<i:EventTrigger EventName="SelectionChanged">
										<i:Interaction.Behaviors>
											<ei:ConditionBehavior>
												<ei:ConditionalExpression ForwardChaining="And">
													<ei:ComparisonCondition 
														LeftOperand="{Binding ElementName=QuestEntryListBox, Path=SelectedIndex}"
														Operator="GreaterThanOrEqual" 
														RightOperand="0" />
													
													<ei:ComparisonCondition 
														LeftOperand="{Binding ElementName=RemoveQuestEntryButton, Path=IsEnabled}" 
														Operator="Equal" 
														RightOperand="False" />
												</ei:ConditionalExpression>
											</ei:ConditionBehavior>
										</i:Interaction.Behaviors>
										<ei:ChangePropertyAction TargetName="RemoveQuestEntryButton" PropertyName="IsEnabled" Value="True" />
									</i:EventTrigger>

									<!-- Target Updated -->
									<i:EventTrigger EventName="TargetUpdated">
										<i:Interaction.Behaviors>
											<ei:ConditionBehavior>
												<ei:ConditionalExpression>
													<ei:ComparisonCondition 
														LeftOperand="{Binding ElementName=QuestEntryListBox, Path=HasItems}" 
														Operator="Equal"
														RightOperand="False" />
												</ei:ConditionalExpression>
											</ei:ConditionBehavior>
										</i:Interaction.Behaviors>
										<ei:ChangePropertyAction TargetName="RemoveQuestEntryButton" PropertyName="IsEnabled" Value="False" />
										<ei:ChangePropertyAction TargetName="QuestEntryListBox" PropertyName="SelectedIndex" Value="-1" />
									</i:EventTrigger>

									<!-- Target Updated -->
									<i:EventTrigger EventName="TargetUpdated">
										<i:Interaction.Behaviors>
											<ei:ConditionBehavior>
												<ei:ConditionalExpression>
													<ei:ComparisonCondition 
														LeftOperand="{Binding ElementName=QuestEntryListBox, Path=HasItems}" 
														Operator="Equal"
														RightOperand="True" />
												</ei:ConditionalExpression>
											</ei:ConditionBehavior>
										</i:Interaction.Behaviors>
										<ei:ChangePropertyAction TargetName="QuestEntryListBox" PropertyName="SelectedIndex" Value="0" />
									</i:EventTrigger>
								</i:Interaction.Triggers>
							</ListBox>

							<!-- Quest Entry Buttons -->
							<Grid Grid.Column="0" Grid.Row="2" 
								Margin="0,5,0,0">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="5" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
								</Grid.RowDefinitions>

								<!-- Add Quest Entry -->
								<Button x:Name="AddQuestEntryButton" 
									Grid.Column="0" Grid.Row="0" 
									Content="Add" Margin="0" 
									Tag="{Binding ElementName=QuestEntryComboBox, Path=DataContext}"
									Command="local:QuestMapCommands.AddQuestEntry" 
									CommandParameter="{Binding ElementName=QuestEntryComboBox, Path=SelectedItem.(ComboBoxItem.Tag)}" />

								<!-- Remove Quest Entry -->
								<Button x:Name="RemoveQuestEntryButton" 
									Grid.Column="2" Grid.Row="0" 
									Content="Remove" Margin="0"
									Command="local:QuestMapCommands.RemoveQuestEntry" 
									CommandParameter="{Binding ElementName=QuestEntryListBox, Path=SelectedItem}" />
							</Grid>
							
							<!-- Selected Quest Entry StackPanel -->
							<StackPanel Grid.Column="1" Grid.Row="0" Grid.RowSpan="3" Margin="5,0,5,0"
								DataContext="{Binding ElementName=QuestEntryListBox, Path=SelectedItem, Mode=OneWay, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged}">
								<!-- Quest Goal -->
								<Grid Panel.ZIndex="0" x:Name="QuestGoalGrid" DataContext="{Binding}">
									<Grid.Visibility>
										<Binding Converter="{data:TypeOfVisibiltyConverter {x:Type questMap:BioQuestGoal}}" FallbackValue="Collapsed" />
									</Grid.Visibility>

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<Label Content="Condtional" Grid.Column="0" Grid.Row="0" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=Conditional, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="0" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Description" Grid.Column="0" Grid.Row="1" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=Description.Index, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="1" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Name" Grid.Column="0" Grid.Row="2" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=Name.Index, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="2" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="State" Grid.Column="0" Grid.Row="3" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=State, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="3" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Instance Version" Grid.Column="0" Grid.Row="4" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=InstanceVersion, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="4" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />
								</Grid>

								<!-- Quest Plot Item -->
								<Grid Panel.ZIndex="1" DataContext="{Binding}">
									<Grid.Visibility>
										<Binding Converter="{data:TypeOfVisibiltyConverter {x:Type questMap:BioQuestPlotItem}}" FallbackValue="Collapsed" />
									</Grid.Visibility>

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<Label Content="Condtional" Grid.Column="0" Grid.Row="0" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=Conditional, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="0" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Icon Index" Grid.Column="0" Grid.Row="1" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=IconIndex, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="1" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Name" Grid.Column="0" Grid.Row="2" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=Name.Index, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="2" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="State" Grid.Column="0" Grid.Row="3" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=State, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="3" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Target Items" Grid.Column="0" Grid.Row="4" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=TargetItems, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="4" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Instance Version" Grid.Column="0" Grid.Row="5" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=InstanceVersion, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="5" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />
								</Grid>

								<!-- Quest Task -->
								<Grid Panel.ZIndex="2" DataContext="{Binding}">
									<Grid.Visibility>
										<Binding Converter="{data:TypeOfVisibiltyConverter {x:Type questMap:BioQuestTask}}" FallbackValue="Collapsed" />
									</Grid.Visibility>

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<Label Content="Description" Grid.Column="0" Grid.Row="0" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=Description.Index, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Grid.Column="1" Grid.Row="0" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Name" Grid.Column="0" Grid.Row="1" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=Name.Index, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="1" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Planet" Grid.Column="0" Grid.Row="2" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=Planet.Index, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="2" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Plot Item Indices" Grid.Column="0" Grid.Row="3" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<ListBox ItemsSource="{Binding Path=PlotItemIndices}" Width="100" Grid.Column="1" Grid.Row="3" Margin="5,5"
										HorizontalAlignment="Left"
										VerticalAlignment="Center" />

									<Label Content="Task Completes Quest" Grid.Column="0" Grid.Row="4" Margin="0,5" HorizontalAlignment="Left"
										VerticalAlignment="Center" />
									<CheckBox IsChecked="{Binding Path=QuestCompleteTask, Mode=TwoWay}" Grid.Column="1" Grid.Row="4" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Waypoint Tag" Grid.Column="0" Grid.Row="5" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<TextBox Text="{Binding Path=WaypointTag, Mode=TwoWay}" Width="200" Grid.Column="1" Grid.Row="5" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Instance Version" Grid.Column="0" Grid.Row="6" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=InstanceVersion, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="6" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />
								</Grid>
							</StackPanel>
						</Grid>
					</Grid>
				</Grid>
			</TabItem>

			<!-- State Event Map Tab -->
			<TabItem x:Name="StateEventMapTab"
				Header="State Event Map"
				DataContext="{Binding Path=StateEventMap}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="*" />
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="*" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>

					<!-- State Event Map ComboBox -->
					<ComboBox x:Name="StateEventMapComboBox" Grid.Column="0" Grid.Row="0" Margin="0">
						<ComboBoxItem Content="State Events" DataContext="{Binding Path=StateEvents}" IsSelected="True">
							
						</ComboBoxItem>
					</ComboBox>

					<!-- State Event Map ListBox -->
					<ListBox x:Name="StateEventMapListBox" 
						Grid.Column="0" Grid.Row="1" 
						Margin="0,5,0,0" SelectedIndex="0" SelectionMode="Single" Width="150" 
						DataContext="{Binding ElementName=StateEventMapComboBox, Path=SelectedItem.(ComboBox.DataContext), 
							Mode=OneWay, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged}"
						ItemsSource="{Binding}">
						<!-- Resources -->
						<ListBox.Resources>
							<DataTemplate DataType="{x:Type stateEventMap:BioStateEvent}">
								<TextBlock Text="{Binding Id, StringFormat='State Event: \{0\}'}" />
							</DataTemplate>
						</ListBox.Resources>

						<!-- Interaction Triggers -->
						<i:Interaction.Triggers>
							<!-- Selection Changed -->
							<i:EventTrigger EventName="SelectionChanged">
								<i:Interaction.Behaviors>
									<ei:ConditionBehavior>
										<ei:ConditionalExpression ForwardChaining="And">
											<ei:ComparisonCondition LeftOperand="{Binding ElementName=StateEventMapListBox, Path=SelectedIndex}" Operator="GreaterThanOrEqual"
												RightOperand="0" />
											<ei:ComparisonCondition LeftOperand="{Binding ElementName=RemoveStateEventButton, Path=IsEnabled}" Operator="Equal"
												RightOperand="False" />
										</ei:ConditionalExpression>
									</ei:ConditionBehavior>
								</i:Interaction.Behaviors>
								<ei:ChangePropertyAction TargetName="RemoveStateEventButton" PropertyName="IsEnabled" Value="True" />
							</i:EventTrigger>

							<!-- Target Updated -->
							<i:EventTrigger EventName="TargetUpdated">
								<i:Interaction.Behaviors>
									<ei:ConditionBehavior>
										<ei:ConditionalExpression>
											<ei:ComparisonCondition LeftOperand="{Binding ElementName=StateEventMapListBox, Path=HasItems}" Operator="Equal" RightOperand="False" />
										</ei:ConditionalExpression>
									</ei:ConditionBehavior>
								</i:Interaction.Behaviors>
								<ei:ChangePropertyAction TargetName="RemoveStateEventButton" PropertyName="IsEnabled" Value="False" />
								<ei:ChangePropertyAction TargetName="StateEventMapListBox" PropertyName="SelectedIndex" Value="-1" />
							</i:EventTrigger>

							<!-- Target Updated -->
							<i:EventTrigger EventName="TargetUpdated">
								<i:Interaction.Behaviors>
									<ei:ConditionBehavior>
										<ei:ConditionalExpression>
											<ei:ComparisonCondition LeftOperand="{Binding ElementName=StateEventMapListBox, Path=HasItems}" Operator="Equal" RightOperand="True" />
										</ei:ConditionalExpression>
									</ei:ConditionBehavior>
								</i:Interaction.Behaviors>
								<ei:ChangePropertyAction TargetName="StateEventMapListBox" PropertyName="SelectedIndex" Value="0" />
							</i:EventTrigger>
						</i:Interaction.Triggers>
					</ListBox>

					<!-- State Event Map Buttons -->
					<Grid Grid.Column="0" Grid.Row="2" Margin="0,5,0,0">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="5" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>

						<!-- Add State Event Element -->
						<Button x:Name="AddStateEventButton" 
							Grid.Column="0" Grid.Row="0" 
							Content="Add" 
							Margin="0"
							DataContext="{Binding ElementName=StateEventMapComboBox, Path=DataContext}"
							Command="local:StateEventMapCommands.AddStateEvent"
							CommandParameter="{Binding ElementName=StateEventMapListBox, Path=DataContext}" />

						<!-- Remove State Event Element -->
						<Button x:Name="RemoveStateEventButton" 
							Grid.Column="2" Grid.Row="0" 
							Content="Remove" 
							Margin="0"
							DataContext="{Binding ElementName=StateEventMapComboBox, Path=DataContext}"
							Command="local:StateEventMapCommands.RemoveStateEvent" 
							CommandParameter="{Binding ElementName=StateEventMapListBox, Path=SelectedItem}" />
					</Grid>

					<!-- State Event Map Entry Grid -->
					<Grid x:Name="StateEventMapEntryGrid" Grid.Column="1" Grid.Row="0" Grid.RowSpan="3" Margin="5,0,5,0"
						DataContext="{Binding ElementName=StateEventMapListBox, Path=SelectedItem, 
							Mode=OneWay, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged}">
						<!-- Data Contex -->

						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>
						
						<!-- State Event Properties -->
						<Grid Grid.Column="0" Grid.Row="0" 
							DataContext="{Binding}"
							d:DataContext="{d:DesignInstance stateEventMap:BioStateEvent}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>
							
							<Label Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="2"
								Content="State Event Properties:" />

							<Label Grid.Column="0" Grid.Row="1"
								Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" 
								Content="State Event Id:" />
							<xtlk:IntegerUpDown Grid.Column="1" Grid.Row="1"
								Margin="5,5" Minimum="0" Width="100"
								HorizontalAlignment="Left" VerticalAlignment="Center" 
								Text="{Binding Path=Id, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
						</Grid>

						<!-- State Event Map State Event -->
						<Grid Grid.Column="0" Grid.Row="1" 
							Panel.ZIndex="0" 
							DataContext="{Binding}"
							Visibility="{Binding Converter={data:TypeOfVisibiltyConverter {x:Type stateEventMap:BioStateEvent}}, FallbackValue=Collapsed}">
							<!-- Column / Row Definitions -->
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="*" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>
							
							<!-- State Event Elements ListBox -->
							<ListBox x:Name="StateEventElementsListBox"
								Grid.Column="0" Grid.Row="0" 
								Margin="0" Width="150"
								SelectedIndex="0" SelectionMode="Single"
								DataContext="{Binding Mode=OneWay, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged}"
								ItemsSource="{Binding Path=Elements}"
								d:DataContext="{d:DesignInstance stateEventMap:BioStateEvent}">
								<!-- Resources -->
								<ListBox.Resources>
									<DataTemplate DataType="{x:Type stateEventMap:BioStateEventElementBool}">
										<TextBlock Text="Bool" />
									</DataTemplate>
									<DataTemplate DataType="{x:Type stateEventMap:BioStateEventElementConsequence}">
										<TextBlock Text="Consequence" />
									</DataTemplate>
									<DataTemplate DataType="{x:Type stateEventMap:BioStateEventElementFloat}">
										<TextBlock Text="Float" />
									</DataTemplate>
									<DataTemplate DataType="{x:Type stateEventMap:BioStateEventElementFunction}">
										<TextBlock Text="Function" />
									</DataTemplate>
									<DataTemplate DataType="{x:Type stateEventMap:BioStateEventElementInt}">
										<TextBlock Text="Int" />
									</DataTemplate>
									<DataTemplate DataType="{x:Type stateEventMap:BioStateEventElementLocalBool}">
										<TextBlock Text="Local Bool" />
									</DataTemplate>
									<DataTemplate DataType="{x:Type stateEventMap:BioStateEventElementLocalFloat}">
										<TextBlock Text="Local Float" />
									</DataTemplate>
									<DataTemplate DataType="{x:Type stateEventMap:BioStateEventElementLocalInt}">
										<TextBlock Text="Local Int" />
									</DataTemplate>
									<DataTemplate DataType="{x:Type stateEventMap:BioStateEventElementSubstate}">
										<TextBlock Text="Substate" />
									</DataTemplate>
								</ListBox.Resources>

								<!-- Interaction Triggers -->
								<i:Interaction.Triggers>
									<!-- Selection Changed -->
									<i:EventTrigger EventName="SelectionChanged">
										<i:Interaction.Behaviors>
											<ei:ConditionBehavior>
												<ei:ConditionalExpression ForwardChaining="And">
													<ei:ComparisonCondition 
														LeftOperand="{Binding ElementName=StateEventElementsListBox, Path=SelectedIndex}"
														Operator="GreaterThanOrEqual" 
														RightOperand="0" />
													
													<ei:ComparisonCondition 
														LeftOperand="{Binding ElementName=RemoveStateEventElementButton, Path=IsEnabled}" 
														Operator="Equal" 
														RightOperand="False" />
												</ei:ConditionalExpression>
											</ei:ConditionBehavior>
										</i:Interaction.Behaviors>
										<ei:ChangePropertyAction TargetName="RemoveStateEventElementButton" PropertyName="IsEnabled" Value="True" />
									</i:EventTrigger>

									<!-- Target Updated -->
									<i:EventTrigger EventName="TargetUpdated">
										<i:Interaction.Behaviors>
											<ei:ConditionBehavior>
												<ei:ConditionalExpression>
													<ei:ComparisonCondition 
														LeftOperand="{Binding ElementName=StateEventElementsListBox, Path=HasItems}" 
														Operator="Equal" 
														RightOperand="False" />
												</ei:ConditionalExpression>
											</ei:ConditionBehavior>
										</i:Interaction.Behaviors>
										<ei:ChangePropertyAction TargetName="RemoveStateEventElementButton" PropertyName="IsEnabled" Value="False" />
										<ei:ChangePropertyAction TargetName="StateEventElementsListBox" PropertyName="SelectedIndex" Value="-1" />
									</i:EventTrigger>

									<!-- Target Updated -->
									<i:EventTrigger EventName="TargetUpdated">
										<i:Interaction.Behaviors>
											<ei:ConditionBehavior>
												<ei:ConditionalExpression>
													<ei:ComparisonCondition 
														LeftOperand="{Binding ElementName=StateEventElementsListBox, Path=HasItems}" 
														Operator="Equal" 
														RightOperand="True" />
												</ei:ConditionalExpression>
											</ei:ConditionBehavior>
										</i:Interaction.Behaviors>
										<ei:ChangePropertyAction TargetName="StateEventElementsListBox" PropertyName="SelectedIndex" Value="0" />
									</i:EventTrigger>
								</i:Interaction.Triggers>
							</ListBox>

							<!-- New State Event Element ComboBox -->
							<ComboBox x:Name="NewStateEventElementComboBox" 
								Grid.Column="0" Grid.Row="1" 
								Margin="0,5,0,0">
								<ComboBoxItem Content="Bool" Tag="{x:Static stateEventMap:BioStateEventElementType.Bool}" IsSelected="True" />
								<ComboBoxItem Content="Consequence" Tag="{x:Static stateEventMap:BioStateEventElementType.Consequence}" />
								<ComboBoxItem Content="Float" Tag="{x:Static stateEventMap:BioStateEventElementType.Float}" />
								<ComboBoxItem Content="Function" Tag="{x:Static stateEventMap:BioStateEventElementType.Function}" />
								<ComboBoxItem Content="Int" Tag="{x:Static stateEventMap:BioStateEventElementType.Int}" />
								<ComboBoxItem Content="Local Bool" Tag="{x:Static stateEventMap:BioStateEventElementType.LocalBool}" />
								<ComboBoxItem Content="Local Float" Tag="{x:Static stateEventMap:BioStateEventElementType.LocalFloat}" />
								<ComboBoxItem Content="Local Int" Tag="{x:Static stateEventMap:BioStateEventElementType.LocalInt}" />
								<ComboBoxItem Content="Substate" Tag="{x:Static stateEventMap:BioStateEventElementType.Substate}" />
							</ComboBox>
							
							<!-- State Event Element Buttons -->
							<Grid Grid.Column="0" Grid.Row="2" 
								Margin="0,5,0,0">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="5" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
								</Grid.RowDefinitions>

								<!-- Add State Event Element -->
								<Button x:Name="AddStateEventElementButton" 
									Grid.Column="0" Grid.Row="0" 
									Content="Add" 
									Margin="0"
									DataContext="{Binding ElementName=StateEventElementsListBox, Path=DataContext}"
									Command="local:StateEventMapCommands.AddStateEventElement" 
									CommandParameter="{Binding ElementName=NewStateEventElementComboBox, Path=SelectedItem.(FrameworkElement.Tag)}" />

								<!-- Remove State Event Element -->
								<Button x:Name="RemoveStateEventElementButton" 
									Grid.Column="2" Grid.Row="0" 
									Content="Remove" 
									Margin="0"
									DataContext="{Binding ElementName=StateEventElementsListBox, Path=DataContext}"
									Command="local:StateEventMapCommands.RemoveStateEventElement" 
									CommandParameter="{Binding ElementName=StateEventElementsListBox, Path=SelectedItem}" />
							</Grid>

							<!-- Selected State Event Element StackPanel -->
							<StackPanel Grid.Column="1" Grid.Row="0" Grid.RowSpan="3" 
								DataContext="{Binding ElementName=StateEventElementsListBox, Path=SelectedItem, 
									Mode=OneWay, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged}"
								Margin="5,0,5,0">
								<!-- State Event Element Bool -->
								<Grid x:Name="StateEventElementGrid"
									Panel.ZIndex="0" 
									d:DataContext="{d:DesignInstance stateEventMap:BioStateEventElementBool}"
									DataContext="{Binding}" 
									Visibility="{Binding Converter={data:TypeOfVisibiltyConverter {x:Type stateEventMap:BioStateEventElementBool}}, FallbackValue=Collapsed}">

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<!-- Global Bool -->
									<Label Grid.Column="0" Grid.Row="0"
										Content="Global Bool"
										HorizontalAlignment="Left" Margin="0,5" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Grid.Column="1" Grid.Row="0" 
										Text="{Binding Path=GlobalBool, Mode=TwoWay}" 
										HorizontalAlignment="Left" Margin="5,5" Minimum="0" VerticalAlignment="Center" Width="100" />

									<!-- New State -->
									<Label Grid.Column="0" Grid.Row="1"
										Content="New Value" 
										HorizontalAlignment="Left" Margin="0,5" VerticalAlignment="Center" />
									<ComboBox Grid.Column="1" Grid.Row="1"
										SelectedIndex="{Binding Path=NewState, Mode=TwoWay, Converter={markup:TypeConverter system:Boolean, system:Int32}}"
										HorizontalAlignment="Left" Margin="5,5" VerticalAlignment="Center" Width="100">
										
										<ComboBoxItem Content="False" />
										<ComboBoxItem Content="True" />
									</ComboBox>

									<!-- Use Param -->
									<Label Grid.Column="0" Grid.Row="2" 
										Content="Use Param" 
										HorizontalAlignment="Left" Margin="0,5" VerticalAlignment="Center" />
									<CheckBox Grid.Column="1" Grid.Row="2" 
										IsChecked="{Binding Path=UseParam, Mode=TwoWay}"
										HorizontalAlignment="Left" Margin="5,5" VerticalAlignment="Center" Width="100" />

									<!-- Instance Version -->
									<Label Grid.Column="0" Grid.Row="3" 
										Content="Instance Version" 
										HorizontalAlignment="Left" Margin="0,5" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Grid.Column="1" Grid.Row="3" 
										Text="{Binding Path=InstanceVersion, Mode=TwoWay}" 
										HorizontalAlignment="Left" Margin="5,5" VerticalAlignment="Center" Width="100" />
								</Grid>

								<!-- State Event Element Consequence -->
								<Grid x:Name="StateEventElementConsequenceGrid"
									Panel.ZIndex="1" 
									d:DataContext="{d:DesignInstance stateEventMap:BioStateEventElementConsequence}"
									DataContext="{Binding}" 
									Visibility="{Binding Converter={data:TypeOfVisibiltyConverter {x:Type stateEventMap:BioStateEventElementConsequence}}, FallbackValue=Collapsed}">

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<Label Content="Consequence" Grid.Column="0" Grid.Row="0" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=Consequence, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="0" Margin="5,5" Minimum="0"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Instance Version" Grid.Column="0" Grid.Row="1" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=InstanceVersion, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="1" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />
								</Grid>

								<!-- State Event Element Float -->
								<Grid x:Name="StateEventElementFloatGrid"
									Panel.ZIndex="2" 
									d:DataContext="{d:DesignInstance stateEventMap:BioStateEventElementFloat}"
									DataContext="{Binding}"
									Visibility="{Binding Converter={data:TypeOfVisibiltyConverter {x:Type stateEventMap:BioStateEventElementFloat}}, FallbackValue=Collapsed}">

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<Label Content="Global Float" Grid.Column="0" Grid.Row="0" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=GlobalFloat, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="0" Margin="5,5" Minimum="0"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="New Value" Grid.Column="0" Grid.Row="1" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:SingleUpDown Text="{Binding Path=NewValue, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="1" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Increment" Grid.Column="0" Grid.Row="2" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<CheckBox IsChecked="{Binding Path=Increment, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="2" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Use Param" Grid.Column="0" Grid.Row="3" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<CheckBox IsChecked="{Binding Path=UseParam, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="3" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Instance Version" Grid.Column="0" Grid.Row="4" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=InstanceVersion, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="4" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />
								</Grid>

								<!-- State Event Element Function -->
								<Grid x:Name="StateEventElementFunctionGrid"
									Panel.ZIndex="2" 
									d:DataContext="{d:DesignInstance stateEventMap:BioStateEventElementFunction}"
									DataContext="{Binding}"
									Visibility="{Binding Converter={data:TypeOfVisibiltyConverter {x:Type stateEventMap:BioStateEventElementFunction}}, FallbackValue=Collapsed}">

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<Label Content="Function Package (Index)" Grid.Column="0" Grid.Row="0" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=FunctionPackage.Index, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="0" Margin="5,5" Minimum="0"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Function Class (Index)" Grid.Column="0" Grid.Row="1" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=FunctionClass.Index, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="1" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Function Name (Index)" Grid.Column="0" Grid.Row="2" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=FunctionName.Index, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="2" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Parameter" Grid.Column="0" Grid.Row="3" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=Parameter, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="3" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Instance Version" Grid.Column="0" Grid.Row="4" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=InstanceVersion, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="4" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />
								</Grid>

								<!-- State Event Element Int -->
								<Grid x:Name="StateEventElementIntGrid"
									Panel.ZIndex="2" 
									d:DataContext="{d:DesignInstance stateEventMap:BioStateEventElementInt}"
									DataContext="{Binding}"
									Visibility="{Binding Converter={data:TypeOfVisibiltyConverter {x:Type stateEventMap:BioStateEventElementInt}}, FallbackValue=Collapsed}">

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<Label Content="Global Int" Grid.Column="0" Grid.Row="0" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=GlobalInt, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="0" Margin="5,5" Minimum="0"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="New Value" Grid.Column="0" Grid.Row="1" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=NewValue, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="1" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Increment" Grid.Column="0" Grid.Row="2" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<CheckBox IsChecked="{Binding Path=Increment, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="2" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Use Param" Grid.Column="0" Grid.Row="3" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<CheckBox IsChecked="{Binding Path=UseParam, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="3" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Instance Version" Grid.Column="0" Grid.Row="4" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=InstanceVersion, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="4" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />
								</Grid>

								<!-- State Event Element Local Bool -->
								<Grid x:Name="StateEventElementLocalBoolGrid"
									Panel.ZIndex="2" 
									d:DataContext="{d:DesignInstance stateEventMap:BioStateEventElementLocalBool}"
									DataContext="{Binding}"
									Visibility="{Binding Converter={data:TypeOfVisibiltyConverter {x:Type stateEventMap:BioStateEventElementLocalBool}}, FallbackValue=Collapsed}">

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<Label Content="Function Name (Index)" Grid.Column="0" Grid.Row="0" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=FunctionName.Index, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="0" Margin="5,5" Minimum="0"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="New Value" Grid.Column="0" Grid.Row="1" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<ComboBox Grid.Column="1" Grid.Row="1"
										Width="100" Margin="5,5" HorizontalAlignment="Left" VerticalAlignment="Center"
										SelectedIndex="{Binding Path=NewValue, Mode=TwoWay, Converter={markup:TypeConverter system:Boolean, system:Int32}}">
										<ComboBoxItem Content="False" />
										<ComboBoxItem Content="True" />
									</ComboBox>

									<Label Content="Object Tag (Index)" Grid.Column="0" Grid.Row="2" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<CheckBox IsChecked="{Binding Path=ObjectTag.Index, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="2" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Object Type (Index)" Grid.Column="0" Grid.Row="3" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=ObjectType, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="3" Margin="5,5" 
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Use Param" Grid.Column="0" Grid.Row="4" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<CheckBox IsChecked="{Binding Path=UseParam, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="4" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Instance Version" Grid.Column="0" Grid.Row="5" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=InstanceVersion, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="5" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />
								</Grid>
								
								<!-- State Event Element Local Float -->
								<Grid x:Name="StateEventElementLocalFloatGrid"
									Panel.ZIndex="2" 
									d:DataContext="{d:DesignInstance stateEventMap:BioStateEventElementLocalFloat}"
									DataContext="{Binding}"
									Visibility="{Binding Converter={data:TypeOfVisibiltyConverter {x:Type stateEventMap:BioStateEventElementLocalFloat}}, FallbackValue=Collapsed}">

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<Label Content="Function Name (Index)" Grid.Column="0" Grid.Row="0" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=FunctionName.Index, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="0" Margin="5,5" Minimum="0"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="New Value" Grid.Column="0" Grid.Row="1" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:SingleUpDown Text="{Binding Path=NewValue, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="1" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Object Tag (Index)" Grid.Column="0" Grid.Row="2" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<CheckBox IsChecked="{Binding Path=ObjectTag.Index, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="2" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Object Type (Index)" Grid.Column="0" Grid.Row="3" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=ObjectType, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="3" Margin="5,5" 
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Use Param" Grid.Column="0" Grid.Row="4" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<CheckBox IsChecked="{Binding Path=UseParam, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="4" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Instance Version" Grid.Column="0" Grid.Row="5" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=InstanceVersion, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="5" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />
								</Grid>
								
								<!-- State Event Element Local Int -->
								<Grid x:Name="StateEventElementLocalIntGrid"
									Panel.ZIndex="2" 
									d:DataContext="{d:DesignInstance stateEventMap:BioStateEventElementLocalInt}"
									DataContext="{Binding}"
									Visibility="{Binding Converter={data:TypeOfVisibiltyConverter {x:Type stateEventMap:BioStateEventElementLocalInt}}, FallbackValue=Collapsed}">

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<Label Content="Function Name (Index)" Grid.Column="0" Grid.Row="0" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=FunctionName.Index, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="0" Margin="5,5" Minimum="0"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="New Value" Grid.Column="0" Grid.Row="1" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=NewValue, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="1" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Object Tag (Index)" Grid.Column="0" Grid.Row="2" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<CheckBox IsChecked="{Binding Path=ObjectTag.Index, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="2" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Object Type (Index)" Grid.Column="0" Grid.Row="3" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=ObjectType, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="3" Margin="5,5" 
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Use Param" Grid.Column="0" Grid.Row="4" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<CheckBox IsChecked="{Binding Path=UseParam, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="4" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />

									<Label Content="Instance Version" Grid.Column="0" Grid.Row="5" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Text="{Binding Path=InstanceVersion, Mode=TwoWay}" Width="100" Grid.Column="1" Grid.Row="5" Margin="5,5"
										HorizontalAlignment="Left" VerticalAlignment="Center" />
								</Grid>
								
								<!-- State Event Element Substate -->
								<Grid x:Name="StateEventElementSubstateGrid"
									Panel.ZIndex="2" 
									d:DataContext="{d:DesignInstance stateEventMap:BioStateEventElementSubstate}"
									DataContext="{Binding}"
									Visibility="{Binding Converter={data:TypeOfVisibiltyConverter {x:Type stateEventMap:BioStateEventElementSubstate}}, FallbackValue=Collapsed}">

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<!-- Global Bool -->
									<Label Content="Global Bool" 
										Grid.Column="0" Grid.Row="0" 
										Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Grid.Column="1" Grid.Row="0" 
										Margin="5,5" Width="100" Minimum="0" HorizontalAlignment="Left" VerticalAlignment="Center"
										Text="{Binding Path=GlobalBool, Mode=TwoWay}" />

									<Label Content="New State" 
										Grid.Column="0" Grid.Row="1" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<ComboBox Grid.Column="1" Grid.Row="1"
										Width="100" Margin="5,5" HorizontalAlignment="Left" VerticalAlignment="Center"
										SelectedIndex="{Binding Path=NewState, Mode=TwoWay, Converter={markup:TypeConverter system:Boolean, system:Int32}}">
										<ComboBoxItem Content="False" />
										<ComboBoxItem Content="True" />
									</ComboBox>

									<!-- Parent Index -->
									<Label Content="Parent Index" 
										Grid.Column="0" Grid.Row="2" 
										Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Grid.Column="1" Grid.Row="2" 
										Margin="5,5" Width="100" HorizontalAlignment="Left" VerticalAlignment="Center" 
										Text="{Binding Path=ParentIndex, Mode=TwoWay}" />

									<!-- Parent Type Or (Needs new name) -->
									<Label Content="Parent Type Or" 
										Grid.Column="0" Grid.Row="3" 
										Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<CheckBox Grid.Column="1" Grid.Row="3" 
										Margin="5,5" Width="100" HorizontalAlignment="Left" VerticalAlignment="Center"
										IsChecked="{Binding Path=ParentTypeOr, Mode=TwoWay}" />

									<!-- Use Param -->
									<Label Content="Use Param" 
										Grid.Column="0" Grid.Row="4" 
										Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<CheckBox Grid.Column="1" Grid.Row="4"
										Margin="5,5" Width="100" HorizontalAlignment="Left" VerticalAlignment="Center"
										IsChecked="{Binding Path=UseParam, Mode=TwoWay}" />

									<!-- Instance Version -->
									<Label Content="Instance Version" 
										Grid.Column="0" Grid.Row="5" 
										Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<xtlk:IntegerUpDown Grid.Column="1" Grid.Row="5"
										Margin="5,5" Width="100" HorizontalAlignment="Left" VerticalAlignment="Center"
										Text="{Binding Path=InstanceVersion, Mode=TwoWay}" />

									<!-- Sibling Indicies -->
									<Label Content="Sibling Indicies" 
										Grid.Column="0" Grid.Row="6" 
										Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center" />
									<ListBox Grid.Column="1" Grid.Row="6"
										Width="100" Margin="5,5" HorizontalAlignment="Left" VerticalAlignment="Center"
										DataContext="{Binding Path=SiblingIndices, Mode=TwoWay}" ItemsSource="{Binding}" />
								</Grid>
							</StackPanel>
						</Grid>
					</Grid>
				</Grid>
			</TabItem>
		</TabControl>