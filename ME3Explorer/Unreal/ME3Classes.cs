using Unreal.ME3Enums;
using Unreal.ME3Structs;
using NameReference = ME3Explorer.Unreal.NameReference;

namespace Unreal.ME3Classes
{
    public class Level
    {
        public float ShadowmapTotalSize;
        public float LightmapTotalSize;
    }
    public class SFXCharacterClass_Content : SFXCharacterClass
    {
    }
    public class SFXCustomAction_ActivateWeaponFlashlight : SFXCustomAction_SingleAnim
    {
        public int AnimInfo;
    }
    public class SFXCustomAction_SyncCoverGrab : SFXCustomAction_ClassMelee
    {
        public BodyStance BS_AttackerMirror;
        public BodyStance BS_VictimMirror;
        public BasedPosition VictimLocation;
        public int PlaceholderCylinder;
    }
    public class SFXCustomAction_AdeptSyncCoverGrab : SFXCustomAction_SyncCoverGrab
    {
    }
    public class SFXCustomAction_CoverMeleeRight : SFXCustomAction_PlayerMeleeBase
    {
    }
    public class SFXCustomAction_CoverMeleeLeft : SFXCustomAction_CoverMeleeRight
    {
    }
    public class SFXCustomAction_CoverSlipLookAt : SFXCustomAction_LookAtLoop
    {
        public BodyStance BS_Mid_Cov_Right_Start;
        public BodyStance BS_Mid_Cov_Right_Loop;
        public BodyStance BS_Mid_Cov_Right_End;
        public BodyStance BS_Mid_Cov_Left_Start;
        public BodyStance BS_Mid_Cov_Left_Loop;
        public BodyStance BS_Mid_Cov_Left_End;
    }
    public class SFXCustomAction_FlinchBase : SFXCustomAction_SingleAnim
    {
        public BodyStance BS_Reaction;
        public BodyStance BS_ReactionAlt;
        public BodyStance BS_ReactionMidRight;
        public BodyStance BS_ReactionAltMidRight;
        public BodyStance BS_ReactionMidLeft;
        public BodyStance BS_ReactionAltMidLeft;
        public BodyStance BS_ReactionStdRight;
        public BodyStance BS_ReactionAltStdRight;
        public BodyStance BS_ReactionStdLeft;
        public BodyStance BS_ReactionAltStdLeft;
        public int AnimSet;
        public int CloseCallSoundPlayer;
        public int CloseCallImpactSoundPlayer;
        public int CloseCallSoundHench;
        public int CloseCallImpactSoundHench;
        public ECoverType CoverType;
        public ECoverAction CoverAction;
    }
    public class SFXCustomAction_FlinchHeavy : SFXCustomAction_FlinchBase
    {
    }
    public class SFXCustomAction_FlinchLight : SFXCustomAction_FlinchBase
    {
    }
    public class SFXCustomAction_GapJump : BioCustomAction
    {
        public BodyStance BS_Anim;
        public float fAnimPlayRate;
        public float fAnimBlendInTime;
        public float fAnimBlendOutTime;
        public float fAnimStartTime;
        public float fAnimDuration;
        public int StartPoint;
        public int EndPoint;
        public int BlockingStartCylinder;
        public int BlockingEndCylinder;
        public ERootMotionMode ERootMotionMode;
        public ERootBoneAxis RootBoneX;
        public ERootBoneAxis RootBoneY;
        public ERootBoneAxis RootBoneZ;
    }
    public class SFXCustomAction_HvyCoverMeleeRight : SFXCustomAction_PlayerMeleeBase
    {
    }
    public class SFXCustomAction_HvyCoverMeleeLeft : SFXCustomAction_HvyCoverMeleeRight
    {
    }
    public class SFXCustomAction_HvyStdCoverMeleeLeft : SFXCustomAction_HvyCoverMeleeLeft
    {
    }
    public class SFXCustomAction_HvyStdCoverMeleeRight : SFXCustomAction_HvyCoverMeleeRight
    {
    }
    public class SFXCustomAction_JumpDown : SFXCustomAction_BoostDownBase
    {
    }
    public class SFXCustomAction_KnockbackImpact : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_KnockbackImpactForward : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_KnockbackImpactLeft : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_KnockbackImpactRight : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_MantleLookAt : SFXCustomAction_LookAtLoop
    {
        public BodyStance BS_Mid_Cov_Right_Start;
        public BodyStance BS_Mid_Cov_Right_Loop;
        public BodyStance BS_Mid_Cov_Right_End;
        public BodyStance BS_Mid_Cov_Left_Start;
        public BodyStance BS_Mid_Cov_Left_Loop;
        public BodyStance BS_Mid_Cov_Left_End;
    }
    public class SFXCustomAction_MantleMelee : SFXCustomAction_PlayerMeleeBase
    {
        public int[] HitActors;
    }
    public class SFXCustomAction_Meleed : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_MeleedForward : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_MeleedLeft : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_MeleedRight : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PistolMeleeOne : SFXCustomAction_PlayerMeleeBase
    {
    }
    public class SFXCustomAction_PistolMeleeTwo : SFXCustomAction_PistolMeleeOne
    {
    }
    public class SFXCustomAction_PistolMeleeThree : SFXCustomAction_PistolMeleeTwo
    {
    }
    public class SFXCustomAction_PlayerCoverSlipLeft : SFXCustomAction_CoverSlipBase
    {
    }
    public class SFXCustomAction_PlayerCoverSlipLeftStanding : SFXCustomAction_CoverSlipBase
    {
    }
    public class SFXCustomAction_PlayerCoverSlipRight : SFXCustomAction_CoverSlipBase
    {
    }
    public class SFXCustomAction_PlayerCoverSlipRightStanding : SFXCustomAction_CoverSlipBase
    {
    }
    public class SFXCustomAction_PlayerEvadeBackwards : SFXCustomAction_PlayerEvadeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_PlayerEvadeForward : SFXCustomAction_PlayerEvadeBase
    {
        public Vector MoveOffset;
        public float MoveDist;
        public bool bHitWallEnabled;
    }
    public class SFXCustomAction_PlayerEvadeLeft : SFXCustomAction_PlayerEvadeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_PlayerEvadeRight : SFXCustomAction_PlayerEvadeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_PlayerKnockbackImpact : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PlayerLadderClimbDown : SFXCustomAction_LadderClimbDownBase
    {
    }
    public class SFXCustomAction_PlayerLadderClimbUp : SFXCustomAction_ClimbUpBase
    {
        public BodyStance BS_CloseLadderEnter;
        public BodyStance BS_FarLadderEnter;
        public float DecayRate;
        public float CloseEnterDistance;
        public float JumpStartDistance;
    }
    public class SFXCustomAction_PlayerMantleOverCover : SFXCustomAction_MantleOverCoverBase
    {
        public BodyStance BS_CoverStart;
        public BodyStance BS_StandingStart;
        public BodyStance BS_QuickStandingStart;
        public BodyStance BS_CoverLoop;
        public BodyStance BS_StandingLoop;
        public BodyStance BS_QuickStandingLoop;
        public BodyStance BS_CoverEnd;
        public BodyStance BS_StandingEnd;
        public BodyStance BS_QuickStandingEnd;
        public bool bStartFromCover;
        public bool bStartFromStorm;
    }
    public class SFXCustomAction_SimpleMoveBase : BioCustomAction
    {
        public BodyStance BS_Anim;
        public int BlockingStartCylinder;
        public int BlockingEndCylinder;
        public float MoveDistance;
        public float fBlendInTime;
        public float fBlendOutTime;
        public bool bAlignPawnBeforeMove;
        public AlphaBlendType BlendType;
        public ERootBoneAxis RootBoneX;
        public ERootBoneAxis RootBoneY;
        public ERootBoneAxis RootBoneZ;
        public ERootMotionMode RMM;
        public ERootRotationOption RootRotationPitch;
        public ERootRotationOption RootRotationYaw;
        public ERootRotationOption RootRotationRoll;
        public ERootMotionRotationMode RMRM;
        public EPhysics MovePhysics;
    }
    public class SFXCustomAction_PlayerMantleUp : SFXCustomAction_SimpleMoveBase
    {
        public BodyStance BS_MantleUpOutOfCover;
        public BodyStance BS_MantleUpInCover;
    }
    public class SFXCustomAction_PlayerMeleed : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PlayerOnFire : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PlayerStaggerImpact : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PlayerStandardImpact : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PlayerStandardImpactForward : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PlayerStandardImpactLeft : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PlayerStandardImpactRight : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_Reload : SFXCustomAction_ReloadBase
    {
        public BodyStance BS_Anim;
        public float fAnimBlendInTime;
        public float fAnimBlendOutTime;
    }
    public class SFXCustomAction_Revive : SFXCustomAction_SingleAnim
    {
        public int DownedPlayer;
        public bool bSuccessRevive;
    }
    public class SFXCustomAction_RifleMeleeOne : SFXCustomAction_PlayerMeleeBase
    {
        public float BladeImpactScale;
    }
    public class SFXCustomAction_RifleMeleeTwo : SFXCustomAction_RifleMeleeOne
    {
    }
    public class SFXCustomAction_RifleMeleeThree : SFXCustomAction_RifleMeleeTwo
    {
    }
    public class SFXCustomAction_StandingGapJump : SFXCustomAction_GapJump
    {
    }
    public class SFXCustomAction_StdCoverMeleeLeft : SFXCustomAction_CoverMeleeLeft
    {
    }
    public class SFXCustomAction_StdCoverMeleeRight : SFXCustomAction_CoverMeleeRight
    {
    }
    public class SFXCustomAction_StdCoverSlipLookAt : SFXCustomAction_LookAtLoop
    {
        public BodyStance BS_Std_Cov_Right_Start;
        public BodyStance BS_Std_Cov_Right_Loop;
        public BodyStance BS_Std_Cov_Right_End;
        public BodyStance BS_Std_Cov_Left_Start;
        public BodyStance BS_Std_Cov_Left_Loop;
        public BodyStance BS_Std_Cov_Left_End;
    }
    public class SFXCustomAction_StdSwatTurnLookAt : SFXCustomAction_LookAtLoop
    {
        public BodyStance BS_Std_Cov_Right_Start;
        public BodyStance BS_Std_Cov_Right_Loop;
        public BodyStance BS_Std_Cov_Right_End;
        public BodyStance BS_Std_Cov_Left_Start;
        public BodyStance BS_Std_Cov_Left_Loop;
        public BodyStance BS_Std_Cov_Left_End;
    }
    public class SFXCustomAction_SwatTurnLookAt : SFXCustomAction_LookAtLoop
    {
        public BodyStance BS_Mid_Cov_Right_Start;
        public BodyStance BS_Mid_Cov_Right_Loop;
        public BodyStance BS_Mid_Cov_Right_End;
        public BodyStance BS_Mid_Cov_Left_Start;
        public BodyStance BS_Mid_Cov_Left_Loop;
        public BodyStance BS_Mid_Cov_Left_End;
    }
    public class SFXCustomAction_SyncCoverMelee : SFXCustomAction_PlayerMeleeBase
    {
        public BodyStance BS_AnimPistol;
    }
    public class SFXDamageType_AdeptHeavyMelee : SFXDamageType_HeavyMelee
    {
    }
    public class SFXDamageType_AdeptHeavyMelee_NoRagdoll : SFXDamageType_AdeptHeavyMelee
    {
    }
    public class SFXDamageType_BioticExplosion : SFXDamageType_Power
    {
    }
    public class SFXDamageType_BioticExplosion_NoRagdoll : SFXDamageType_BioticExplosion
    {
    }
    public class SFXDamageType_HeavyPistol : SFXDamageType_Weapon
    {
    }
    public class SFXDamageType_Warp : SFXDamageType_Power_Fire
    {
    }
    public class SFXDamageType_ImprovedWarp : SFXDamageType_Warp
    {
    }
    public class SFXDamageType_WarpDoT : SFXDamageType_Power
    {
    }
    public class SFXDamageType_ImprovedWarpDoT : SFXDamageType_WarpDoT
    {
    }
    public class SFXDamageType_Throw : SFXDamageType_Power_Ragdoll
    {
    }
    public class SFXGameEffect_AntiGravity : SFXGameEffect_PhysicsPower
    {
    }
    public class SFXGameEffect_BioticPowerDamageTakenBonus : SFXGameEffect
    {
    }
    public class SFXGameEffect_DisableAI : SFXGameEffect
    {
    }
    public class SFXGameEffect_PartBasedDamageBonus : SFXGameEffect
    {
    }
    public class SFXGameEffect_PowerCombo_Biotic : SFXGameEffect_PowerCombo
    {
    }
    public class SFXGameEffect_Stasis : SFXGameEffect_WeldPhysics
    {
        public Guid StasisCrustGuid;
        public int OwnerPawn;
        public float ForceDrag;
        public float InitialHealth;
        public float HealthThreshold;
        public int CE_StasisCrust;
        public int Power;
        public bool StopAllVelocity;
        public bool bWasInMatinee;
        public bool bWasDisabled;
    }
    public class SFXGameEffect_WeaponDamageTakenBonus : SFXGameEffect
    {
    }
    public class SFXGameEffect_WeaponWeightModifier : SFXGameEffect
    {
        public ELoadoutWeapons[] WeaponClasses;
    }
    public class SFXGameEffect_WeightCapacity : SFXGameEffect
    {
    }
    public class SFXPowerCustomAction_MultiProjectile : SFXPowerCustomAction
    {
        public AreaEffectParameters SecondTargetParams;
        public Vector SecondLocation;
        public float SecondProjectileDelay;
        public float SecondProjectileSpeedPercent;
        public float SecondProjectileMaxRange;
        public int SecondTarget;
        public float CastConeHalfAngleDeg;
        public bool bSecondProjectile;
    }
    public class SFXPowerCustomAction_Stasis : SFXPowerCustomAction
    {
        public PowerData StasisBubbleRadius;
        public PowerData HealthDamageThreshold;
        public PowerData PushAwayForce;
        public int[] m_oAffectedTargets;
        public int[] m_oCurrentStasisTargets;
        public NameReference[] EffectsToRemove;
        public AreaEffectParameters StasisBubbleParameters;
        public Guid StasisBubbleGuid;
        public Vector StasisBubbleLocation;
        public float StasisBubbleTimer;
        public float LookForActorsTimer;
        public float LookForActorsInterval;
        public float Evolve_DurationBonus;
        public float Evolve_CooldownBonus;
        public float Evolve_VulnerableDamageBonus;
        public float Evolve_NoCooldownChance;
        public float Evolve_DamageTakenBonus;
        public float Evolve_HealthThresholdPct;
        public int LastImpactedPawn;
        public int TargetImmuneToStasis;
        public int CE_StasisBubble;
        public bool bStasisBubbleActive;
    }
    public class SFXPowerCustomAction_Throw : SFXPowerCustomAction_MultiProjectile
    {
        public float Evolve_ForceBonus;
        public float Evolve_RadiusBonus;
        public float Evolve_CooldownBonus;
        public float FrozenForceBonus;
        public float Evolve_BioticComboMult;
    }
    public class SFXPowerCustomAction_Warp : SFXPowerCustomAction
    {
        public PowerData ArmorWeakness;
        public PowerData Evolve_DebuffDamageTakenDuration;
        public AreaEffectParameters BioticExplosionParameters;
        public float Evolve_DamageBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_DoTDuration;
        public float Evolve_DebuffWeaponDamageTakenStrength;
        public float Evolve_DebuffBioticDamageTakenStrength;
        public float Evolve_CooldownBonus;
        public float Evolve_ComboForce;
        public float Evolve_ComboDamage;
        public float Evolve_ComboRadius;
        public float Evolve_ArmorWeaknessBonus;
        public float Evolve_ShieldDamageBonus;
        public float InstantDamagePercent;
        public int CE_DeathEffect;
    }
    public class SFXProjectile_PowerCustomAction_SuperSeeking : SFXProjectile_PowerCustomAction_Seeking
    {
        public Vector2D DownwardPitchScale;
        public Vector2D DownwardPitchScaleRange;
        public float CornerStrength;
        public float ApexDist;
        public float MaxAngleOffset;
        public float OffsetAimMaxDistance;
        public float OffsetAimMinDistance;
    }
    public class SFXRumble_Power_BioticCombo : SFXRumble_Power
    {
    }
    public class SFXRumble_Power_HeavyImpact : SFXRumble_Power
    {
    }
    public class SFXSeqEvt_PerformedMeleeOverCover : SequenceEvent
    {
    }
    public class SFXShake_Power_BioticCombo : SFXShake_Power
    {
    }
    public class SFXShake_Power_HeavyImpact : SFXShake_Power
    {
    }
    public class SFXShield_Biotic_Player : SFXShield_Player
    {
    }
    public class SFXWeapon_AssaultRifle_Avenger : SFXWeapon_AssaultRifle_Base
    {
    }
    public class SFXWeapon_Pistol_Predator : SFXWeapon_Pistol_Base
    {
    }
    public class SFXCameraMode_AsariRollLateral : SFXCameraMode_Combat
    {
    }
    public class SFXCharacterClass_ContentMP : SFXCharacterClass_Content
    {
    }
    public class SFXCharacterClassMP_Adept_Asari : SFXCharacterClass_ContentMP
    {
    }
    public class SFXCustomAction_AsariEvadeBase : SFXCustomAction_PlayerEvadeBase
    {
        public Vector MoveOffset;
        public int AnimInfo;
        public float FinalMoveSpeed;
        public float Decay;
        public float BarrierReduction;
    }
    public class SFXCustomAction_AsariEvadeBackward : SFXCustomAction_AsariEvadeBase
    {
    }
    public class SFXCustomAction_AsariEvadeForward : SFXCustomAction_AsariEvadeBase
    {
    }
    public class SFXCustomAction_AsariEvadeLeft : SFXCustomAction_AsariEvadeBase
    {
    }
    public class SFXCustomAction_AsariEvadeRight : SFXCustomAction_AsariEvadeBase
    {
    }
    public class SFXCustomAction_AsariPunch : SFXCustomAction_PlayerHeavyMeleeBase
    {
    }
    public class SFXCustomAction_DisarmObject : SFXCustomAction_SingleAnim
    {
        public float MinimumTimeToDisarm;
        public int DisarmObject;
        public int DisarmStart;
        public int DisarmStop;
    }
    public class SFXCustomAction_PickupRetrieveObject : SFXCustomAction_SingleAnim
    {
        public NameReference BarName;
        public NameReference BackgroundName;
        public float MinimumTimeToPickup;
        public float TimeStarted;
        public int PickUpObject;
        public int BarScreenPosX;
        public int BarScreenPosY;
        public int BarScreenWidth;
        public int BarColor;
        public int BackgroundColor;
    }
    public class SFXCustomAction_PlayerStaggerMP : SFXCustomAction_PlayerStaggerImpact
    {
    }
    public class SFXGameEffect_MatchConsumable_AmmoPower : SFXGameEffect_MatchConsumableBase
    {
        public int HologramTemplate;
        public int IconTemplate;
        public float BulletsPerSecond;
        public int NormalImpactSound;
        public int WeaponFireSound;
        public float DamageFloatProbabilityModifier;
        public int Power;
    }
    public class SFXGameEffect_MatchConsumable_AmmoPower_Cryo : SFXGameEffect_MatchConsumable_AmmoPower
    {
        public float[] SpeedReduction;
        public float[] FrostDuration;
        public float[] FreezeChance;
        public float[] ArmorWeakness;
        public int DamageType;
        public int CE_HalfFrozenTemplate;
        public float DelayedFreezeRandDuration;
        public float DelayedFreezeStaticDuration;
    }
    public class SFXGameEffect_MatchConsumable_AmmoPower_Disruptor : SFXGameEffect_MatchConsumable_AmmoPower
    {
        public float[] Damage;
        public float[] StunChance;
        public float[] ElectricComboDuration;
        public int DamageType;
        public float ShieldRegenPenalty;
        public float ShieldRegenPenaltyDuration;
        public float LastStunTime;
    }
    public class SFXObjective_Disarm_Base : SFXOperationObjective
    {
        public int DisarmedBy;
        public int DisarmWave;
    }
    public class SFXObjective_Retrieve_DropOffLocation : SFXOperationObjective
    {
        public Vector DropZoneEmitterTranslation;
        public int PS_DropZoneTemplate;
        public int DropZoneEmitter;
        public float DropZoneTemplateScale;
        public int SrDropOffObjectiveMarker;
        public int RetrieveWave;
    }
    public class SFXObjective_Retrieve_PickupObject : SFXOperationObjective
    {
        public NameReference AttachSocketName;
        public int PickedUpBy;
        public int PickupMeshComp;
        public int srPickedUpObject;
        public float MovementSpeedDecrease;
        public int SrPlayerCarryingObjectiveMarker;
        public int RetrieveWave;
    }
    public class SFXPawn_PlayerMP_Adept : SFXPawn_PlayerMP
    {
    }
    public class SFXPowerCustomActionMP_MeleePassiveBase : SFXPowerCustomAction_MeleePassivePower
    {
        public PowerData HealthShieldBonus;
        public PowerData MeleeDamageBonus;
        public float Evolve_MeleeDamageBonus1;
        public float Evolve_MeleeDamageBonus2;
        public float Evolve_HealthShieldBonus1;
        public float Evolve_HealthShieldBonus2;
        public float Evolve_MeleeSpreeBonus;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_MeleeSpreeDuration;
        public float Evolve_CustomSpreeBonus;
        public float Evolve_CustomSpreeDuration;
    }
    public class SFXPowerCustomActionMP_AsariMeleePassive : SFXPowerCustomActionMP_MeleePassiveBase
    {
    }
    public class SFXPowerCustomActionMP_PassiveBase : SFXPowerCustomAction_PassivePower
    {
        public PowerData PowerDamageBonus;
        public PowerData WeaponDamageBonus;
        public PowerData WeightCapacityBonus;
        public ELoadoutWeapons[] WeaponWeightClasses;
        public float Evolve_WeaponDamageBonus1;
        public float Evolve_PowerDamageBonus1;
        public float Evolve_WeightCapacityBonus;
        public float Evolve_PowerDamageBonus2;
        public float Evolve_HeadShotBonus;
        public float Evolve_WeaponEncumbranceBonus;
        public float Evolve_WeaponDamageBonus2;
    }
    public class SFXPowerCustomActionMP_AsariPassive : SFXPowerCustomActionMP_PassiveBase
    {
    }
    public class SFXPowerCustomActionMP_ConsumableAmmoPower : SFXPowerCustomAction
    {
    }
    public class SFXPowerCustomActionMP_Stasis : SFXPowerCustomAction_Stasis
    {
    }
    public class SFXPowerCustomActionMP_Throw : SFXPowerCustomAction_Throw
    {
        public PowerData Evolve_ImpactDamage;
        public float Evolve_ForceBonus2;
    }
    public class SFXPowerCustomActionMP_Warp : SFXPowerCustomAction_Warp
    {
    }
    public class SFXDamageType_AutoPistol : SFXDamageType_Weapon
    {
    }
    public class SFXDamageType_BioticCharge : SFXDamageType_Power
    {
    }
    public class SFXDamageType_BioticCharge_NoRagdoll : SFXDamageType_BioticCharge
    {
    }
    public class SFXDamageType_LiftGrenade : SFXDamageType_Power
    {
    }
    public class SFXDamageType_LiftGrenade_NoRagdoll : SFXDamageType_LiftGrenade
    {
    }
    public class SFXDamageType_Shotgun : SFXDamageType_Weapon
    {
    }
    public class SFXGameEffect_LiftGrenade : SFXGameEffect
    {
        public int SlamRumbleClass;
        public int SlamShakeClass;
        public Vector ForceVector;
        public int OwnerPawn;
        public float SlamForce;
        public float SlamRagdollDuration;
        public int SlamPS;
        public float UpdateInterval;
        public float GravityScaleTime;
        public float Force;
        public float MinimumVelocity;
        public int SlamSound;
        public int Power;
        public bool bSlamWhenDone;
        public bool bBioticComboOnSlam;
    }
    public class SFXGameEffect_MaxGrenadeBonus : SFXGameEffect
    {
    }
    public class SFXGameEffect_Ragdoll : SFXGameEffect_PhysicsPower
    {
    }
    public class SFXGUI_ShotgunReticle : SFXGUI_WeaponReticleBase
    {
        public float m_aRawBuffer;
        public int m_nCurrentBufferIndex;
        public int CircleReticle;
        public float ReticleOpacity;
        public float RadiusModifier;
    }
    public class SFXPowerCustomAction_BioticCharge : SFXPowerCustomAction
    {
        public PowerData DamageReduction;
        public PowerData DamageReductionDuration;
        public PowerData ShieldsRestored;
        public InterpCurveFloat TimeCurve;
        public Charge_PendingVolume[] VolumeList;
        public int CustomDetonationRumbleClass;
        public int CustomDetonationScreenShakeClass;
        public ScreenShakeStruct HitShake;
        public NameReference BonusName;
        public float StingerDuration;
        public float StingerSlowPct;
        public float FrozenTargetForceMult;
        public float ConeAngle;
        public float CooldownBonusFromMelee;
        public float CooldownDurationFromMelee;
        public float Evolve_DamageForceBonus;
        public float Evolve_ImpactRadiusBonus;
        public float Evolve_MaxImpactTargetsBonus;
        public float Evolve_TimedWeaponDamageBonus;
        public float Evolve_TimedWeaponDamageDuration;
        public float Evolve_TimedPowerDamageBonus;
        public float Evolve_TimedPowerDamageDuration;
        public float Evolve_NoCooldownChance;
        public float Evolve_ShieldRestoredBonus;
        public float TeleportStartDelay;
        public float TeleportDelay;
        public float ImpactDelay;
        public float ImpactDelay_Min;
        public float ImpactDelay_Max;
        public float TimeStingerDelay;
        public float CounterTimeScaleValue;
        public float CameraImpactDelay;
        public int PS_TeleportIn;
        public int PS_TeleportOut;
        public int CE_CrustEffect;
        public int CE_ChargeImpact;
        public int ChargeProjectile;
        public int CamTransition;
        public int HitForceFeedback;
        public int ChargeCast;
        public int HenchChargeCast;
        public int ChargeImpact;
        public int HenchChargeImpact;
        public int ChargeTakeoff;
        public int HenchChargeTakeoff;
        public bool bCachedTargetImpacted;
        public bool bUseOwnerRotation;
        public bool bFailedToMoveCaster;
        public bool bCollectedVolumes;
        public bool bLineCheckToHead;
    }
    public class SFXPowerCustomAction_GrenadeBase : SFXPowerCustomAction
    {
        public int srNoGrenades;
    }
    public class SFXPowerCustomAction_LiftGrenade : SFXPowerCustomAction_GrenadeBase
    {
        public PowerData InitialForce;
        public PowerData SlamForce;
        public PowerData SlamRagdollDuration;
        public PowerData MaxGrenadeBonus;
        public float Evolve_DamageBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_DurationBonus;
        public float Evolve_RadiusBonus;
        public float Evolve_RadiusBonus2;
        public int Evolve_GrenadeCountBonus;
        public int Rank2GrenadeUpgrade;
    }
    public class SFXProjectile_Power_BioticCharge : SFXProjectile
    {
    }
    public class SFXProjectile_PowerCustomAction_LiftGrenade : SFXProjectile_PowerCustomAction_BouncingGrenade
    {
    }
    public class SFXRumble_Power_BioticCharge : SFXRumble_Power
    {
    }
    public class SFXRumble_Power_FragGrenade : SFXRumble_Power
    {
    }
    public class SFXShake_Power_BioticCharge : SFXShake_Power
    {
    }
    public class SFXShake_Power_FragGrenade : SFXShake_Power
    {
    }
    public class SFXWeapon_Shotgun_Katana : SFXWeapon_Shotgun_Base
    {
    }
    public class SFXWeapon_SMG_Shuriken : SFXWeapon_SMG_Base
    {
    }
    public class SFXCharacterClassMP_Vanguard_Asari : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Vanguard : SFXPawn_PlayerMP
    {
    }
    public class SFXPowerCustomActionMP_BioticCharge : SFXPowerCustomAction_BioticCharge
    {
        public float ChargeSpeedMultiplier;
    }
    public class SFXPowerCustomActionMP_LiftGrenade : SFXPowerCustomAction_LiftGrenade
    {
    }
    public class SFXSeqAct_SetMusicID : SequenceAction
    {
        public int nMusicID;
    }
    public class SFXSeqAct_SetMaterialParameter : SequenceAction
    {
        public SeqAct_SetVectorParameters VectorParameterData;
        public NameReference MaterialParameter;
        public SeqAct_SetScalarParameters ScalarParameterData;
        public int MaterialInstance;
        public SeqAct_SetTextureParameters TextureParameterData;
        public ESetMaterialParameterType SetMaterialType;
    }
    public class SFXSeqAct_ToggleAppearance : SequenceAction
    {
    }
    public class SFXGUIData_Elevator_Citadel_BAR : SFXGUIData_Elevator
    {
    }
    public class SFXGUIData_Elevator_Citadel_COM : SFXGUIData_Elevator
    {
    }
    public class SFXGUIData_Elevator_Citadel_D1 : SFXGUIData_Elevator
    {
    }
    public class SFXGUIData_Elevator_Citadel_D1_P1 : SFXGUIData_Elevator
    {
    }
    public class SFXGUIData_Elevator_Citadel_D2 : SFXGUIData_Elevator
    {
    }
    public class SFXGUIData_Elevator_Citadel_EMB : SFXGUIData_Elevator
    {
    }
    public class SFXGUIData_Elevator_Citadel_EMB_P1 : SFXGUIData_Elevator
    {
    }
    public class SFXGUIData_Elevator_Citadel_HOS : SFXGUIData_Elevator
    {
    }
    public class SFXGUIData_Elevator_Citadel_HOS_P1 : SFXGUIData_Elevator
    {
    }
    public class SFXSeqAct_ElevatorGUI : BioSequenceLatentAction
    {
        public int ElevatorDataClass;
        public int EnterDefaultPin;
        public int ExitRequestPin;
        public int m_ElevatorGUIResource;
    }
    public class SFXAmmoContainer : SFXDroppedAmmo
    {
        public float RespawnTime;
        public bool bRespawns;
        public bool bAmmoMeshVisible;
    }
    public class SFXDroppedGrenade : DroppedPickup
    {
        public int GrenadeMesh;
        public int GrenadePickupSound;
        public float DecayTime;
        public int LightEnvironment;
    }
    public class SFXGrenadeContainer : SFXDroppedGrenade
    {
        public float RespawnTime;
        public bool bRespawns;
        public bool bGrenadeMeshVisible;
    }
    public class SFXSeqAct_GetActorHealth : SequenceAction
    {
        public int Actor;
        public float Health;
        public EGetHealthType GetHealthType;
    }
    public class SFXSeqAct_MoveOnSpline : SFXSeqAct_MoveOnSplineNativeBase
    {
        public Vector Offset;
        public int TargetActor;
        public int StartingSpline;
        public int CurrentSplineActor;
        public int NextSplineActor;
        public int CurrentSplineComponent;
        public float CurrentLocation;
        public float Speed;
        public bool bAffectRotation;
        public bool bAffectOnlyYaw;
        public EPhysics CachedPhysics;
    }
    public class SFXSeqAct_SetPawnHealth : SequenceAction
    {
        public float NewHealth;
    }
    public class SFXSeqAct_ToggleHelmet : SequenceAction
    {
        public bool PlayerRequiresFullHelmet;
    }
    public class SFXSeqAct_PlayCustomAction : SequenceAction
    {
        public EAICustomAction[] CustomActionMapping;
        public Vector vInstigatingDirection;
        public int Instigator;
        public bool bFrontArc;
        public bool bRearArc;
        public EKismetAllowedCustomAction CustomAction;
    }
    public class BioSeqAct_GetIsLevelLoaded : SequenceAction
    {
        public NameReference m_LevelName;
    }
    public class SFXDamageType_AssaultRifle : SFXDamageType_Weapon
    {
    }
    public class SFXDamageType_GethPulseRifle : SFXDamageType_AssaultRifle
    {
    }
    public class SFXDamageType_HeavyWeapon : SFXDamageType_Weapon
    {
    }
    public class SFXDamageType_MissileLauncher : SFXDamageType_HeavyWeapon
    {
    }
    public class SFXDamageType_Rocket : SFXDamageType_HeavyWeapon
    {
    }
    public class SFXGUI_HeavyWeaponReticle : SFXGUI_WeaponReticleBase
    {
        public int m_oActualReticle;
        public int m_oAmmoText;
        public int m_oReticleBG;
    }
    public class SFXProjectile_SeekingMissile : SFXProjectile_Explosive
    {
        public int ScreenShakeClass;
        public float CurveShape;
        public float UpperBound;
        public int LockedEvent;
        public int LockedComponent;
        public float MaxAngleChange;
        public float MaxRetargettingAngle;
        public int ImpactSound0;
        public bool LostTarget;
    }
    public class SFXShake_SeekingMissile : SFXShake_Power
    {
    }
    public class SFXWeapon_AssaultRifle_Geth : SFXWeapon_AssaultRifle_Base
    {
        public float MinROF;
        public float RampTime;
    }
    public class SFXWeapon_Heavy_MissileLauncher : SFXHeavyWeapon
    {
        public int CurrentTarget;
    }
    public class SFXWeapon_Heavy_RocketLauncher : SFXWeapon_Heavy_MissileLauncher
    {
    }
    public class SFXSeqAct_SetGameName : SequenceAction
    {
        public int[] m_aoTargets;
        public int m_srGameName;
    }
    public class SFXDamageType_Gib : SFXDamageType_Weapon
    {
    }
    public class SFXDamageType_SniperRifle_Widow : SFXDamageType_Gib
    {
    }
    public class SFXGUI_StandardSniperZoomReticle : SFXGUI_WeaponReticleBase
    {
        public string m_sSniperReticleSubMovie;
        public int m_oActualReticle;
        public int m_oZoomText;
        public int m_oDistanceText;
        public int m_oAmmoText;
    }
    public class SFXWeapon_SniperRifle_Widow : SFXWeapon_SniperRifle_Base
    {
    }
    public class SFXWeapon_SniperRifle_BlackWidow : SFXWeapon_SniperRifle_Widow
    {
    }
    public class SFXWeapon_Heavy_Beam_Base : SFXHeavyWeapon
    {
        public Vector2D BeamInterpSpeed;
        public int DecalFrequency;
        public float BeamInterpTime;
        public float VFXUpdateInterval;
    }
    public class SFXWeapon_Heavy_LegionDisinfectionWeapon : SFXWeapon_Heavy_Beam_Base
    {
        public string AmmoAmountRTPC;
        public Guid ClientEffectFiringGuid;
        public float RechargeRatePerSecond;
        public float RechargeDelay;
        public float StoppedFiringTimeStamp;
        public float AccumulatedAmmo;
        public int CE_FiringTemplate;
        public bool bRecharging;
        public bool bFireSoundPlaying;
    }
    public class BioSeqAct_SetWalking : SequenceAction
    {
        public int P;
        public bool Value;
    }
    public class SFXDamageType_CerberusShotgun : SFXDamageType_Shotgun
    {
    }
    public class SFXDamageType_FlakGun : SFXDamageType_Shotgun
    {
    }
    public class SFXWeapon_Shotgun_Claymore : SFXWeapon_Shotgun_Base
    {
    }
    public class SFXWeapon_Shotgun_Eviscerator : SFXWeapon_Shotgun_Base
    {
    }
    public class SFXDamageType_HeavyShotgun : SFXDamageType_Shotgun
    {
    }
    public class SFXDamageType_MattockAssaultRifle : SFXDamageType_Weapon
    {
    }
    public class SFXProjectile_Graal : SFXProjectile_Explosive
    {
        public NameReference AttachBoneName;
        public int GraalImpactTemplate;
        public int GraalBloodyImpactTemplate;
        public bool UseRelativeOffset;
    }
    public class SFXWeapon_AssaultRifle_Argus : SFXWeapon_AssaultRifle_Base
    {
    }
    public class SFXWeapon_Shotgun_Graal : SFXWeapon_Shotgun_Base
    {
        public Guid ChargeEffectGuid;
        public int SteamMuzzle;
        public int CE_ChargeUp;
        public float MaxProjectileCount;
        public float GraalDamageMultiplier;
        public int ChargeRumble;
        public float DirectDamagePercent;
        public float DoTDamagePercent;
        public float DOTDuration;
    }
    public class SFXSeqAct_SetObjective : SequenceAction
    {
        public string sObjectiveType;
        public Vector vMarkerOffset;
        public NameReference BoneToAttachTo;
        public int srObjective;
        public int oTarget;
        public bool MarkerIsLocationless;
        public bool DisplayMarkerOnSpawn;
        public EObjectiveMarkerIconType MarkerType;
    }
    public class SFXSeqCond_IsGameInfo : SequenceCondition
    {
        public int GameType;
        public bool bExactMatch;
    }
    public class SFXSeqAct_GetMapName : SequenceAction
    {
        public NameReference MapName;
    }
    public class SFXSeqAct_MarsWeapons_Start : SequenceAction
    {
        public int OmniWeaponPlotID;
    }
    public class SFXSeqAct_EndObjective : SequenceAction
    {
        public int oTarget;
    }
    public class SFXDamageType_Explosion : SFXDamageType
    {
    }
    public class SFXDamageType_Machinegun : SFXDamageType_AssaultRifle
    {
    }
    public class SFXDamageType_MountedGun : SFXDamageType_Gib
    {
    }
    public class SFXNav_InteractionHenchStandIdle : SFXNav_InteractionPoint
    {
    }
    public class SFXSeqEvt_Disengaged : SequenceEvent
    {
    }
    public class SFXSeqEvt_Engaged : SequenceEvent
    {
    }
    public class SFXVehicle_MountedGun_Content : SFXVehicle_MountedGun
    {
    }
    public class SFXWeapon_AssaultRifle_Revenant : SFXWeapon_AssaultRifle_Base
    {
        public float MinROF;
        public float RampTime;
    }
    public class SFXWeapon_Heavy_MountedGun : SFXWeapon_AssaultRifle_Base
    {
        public int PowerUpSound1;
        public int PowerDownSound1;
        public int OutOfAmmoSound;
        public float PowerUpDelay;
        public int ChargeEffect;
        public int OutOfAmmoEffect;
        public int ActivateZoomWwiseEvent;
        public int DeActivateZoomWwiseEvent;
        public float PlayerDamageMultiplier;
    }
    public class SFXWeapon_Shotgun_Scimitar : SFXWeapon_Shotgun_Base
    {
    }
    public class BioSeqAct_CheckIfInVolume : SequenceAction
    {
        public int m_oTarget;
        public int m_oVolume;
    }
    public class BioSeqAct_GetMembersOfSquad : SequenceAction
    {
        public int[] m_aoActorList;
        public int[] m_aoPassSquads;
        public int m_nIndex;
        public int m_oCurrentMember;
        public int m_oOutputCurrentMember;
        public bool m_bAlsoReturnDeadMembers;
    }
    public class SFXAI_Brute : SFXAI_Core
    {
        public NameReference ChargeAbilityName;
        public float GuardDamageResetDuration;
        public float GuardSpeedMod;
        public float GuardDuration;
        public float GuardHealthPctThreshold;
        public float GlobalChargeInterval;
        public float RoarChance;
        public float RoarInterval;
        public float AngrySpeedMod;
        public float AngryDuration;
        public float SyncKillChance;
        public float EnemyDistance_SyncMelee;
        public float ChargeSeekTime;
    }
    public class SFXAI_Husk : SFXAI_Core
    {
    }
    public class SFXAICmd_Base_Brute : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Base_Husk : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Brute_Melee : SFXAICmd_Base_Melee
    {
    }
    public class SFXAICmd_Husk_Melee : SFXAICmd_Base_Melee
    {
    }
    public class SFXCustomAction_BruteCharge : SFXCustomAction_SingleAnim
    {
        public InterpCurveFloat SlowDownCurve;
        public int[] HitActors;
    }
    public class SFXCustomAction_LargeCoverClimbDown : SFXCustomAction_SimpleMoveBase
    {
    }
    public class SFXCustomAction_BruteClimbDown : SFXCustomAction_LargeCoverClimbDown
    {
    }
    public class SFXCustomAction_LargeCoverClimbUp : SFXCustomAction_SimpleMoveBase
    {
    }
    public class SFXCustomAction_BruteClimbUp : SFXCustomAction_LargeCoverClimbUp
    {
    }
    public class SFXCustomAction_DeathReaction : SFXCustomAction_DamageReaction
    {
        public int MetalImpactSoundPlayer;
        public int MetalImpactSoundHench;
        public int FleshImpactSoundPlayer;
        public int FleshImpactSoundHench;
        public bool bPlayDeathImpact;
    }
    public class SFXCustomAction_BruteDeath : SFXCustomAction_DeathReaction
    {
        public int[] HitActors;
        public float HitRadius;
        public float HitDamage;
    }
    public class SFXCustomAction_BruteDropDown : SFXCustomAction_BoostDownBase
    {
        public int GroundImpact;
        public int EndTimeline;
    }
    public class SFXCustomAction_LargeCoverMantle : SFXCustomAction_SimpleMoveBase
    {
    }
    public class SFXCustomAction_BruteMantle : SFXCustomAction_LargeCoverMantle
    {
    }
    public class SFXCustomAction_BruteMelee : SFXCustomAction_SingleAnim
    {
        public int[] HitActors;
    }
    public class SFXCustomAction_BruteRoar : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_BruteSmash : SFXCustomAction_SingleAnim
    {
        public int[] HitActors;
    }
    public class SFXCustomAction_BruteStagger : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_BruteStandard : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_BruteStandardForward : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_BruteStandardLeft : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_BruteStandardRight : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_BruteSyncMelee : SFXCustomAction_SyncBase
    {
    }
    public class SFXCustomAction_DeathReaction_Corkscrew : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_DeathReaction_Headshot : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_DeathReaction_HeavyLeftArm : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_DeathReaction_HeavyRightArm : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_DeathReaction_Knockback : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_HuskClimbDownWall : SFXCustomAction_ClimbDownBase
    {
    }
    public class SFXCustomAction_HuskClimbUpWall : SFXCustomAction_ClimbUpBase
    {
    }
    public class SFXCustomAction_HuskMantleOverCover : SFXCustomAction_MantleOverCoverBase
    {
    }
    public class SFXCustomAction_HuskMantleUp : SFXCustomAction_SimpleMoveBase
    {
    }
    public class SFXCustomAction_HuskMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_HuskStaggerImpact : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_HuskStandardImpact : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_HuskStandardImpactForward : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_HuskStandardImpactLeft : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_HuskStandardImpactRight : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_HuskSyncGrapple : SFXCustomAction_VariableExit
    {
        public float DamagePerSecond;
        public int DOTEffect;
        public bool bTargetBrokeGrapple;
    }
    public class SFXCustomAction_IdleBrute : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_IdleHusk : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_ReaperArmorBuff : SFXCustomAction_SingleAnim
    {
        public float ApplyBuffTime;
    }
    public class SFXDamageType_AtlasDeathNuke : SFXDamageType
    {
    }
    public class SFXDamageType_BruteSyncKill : SFXDamageType
    {
    }
    public class SFXPawn_Brute : SFXPawn
    {
        public int WarningSound;
        public bool bGuardWalk;
    }
    public class SFXPawn_Husk : SFXPawn
    {
        public int CE_ArmorEffectTemplate;
        public float ActivateArmourDelay;
    }
    public class SFXPawn_MeleeDummy : SFXPawn
    {
    }
    public class SFXRumble_BruteRoar : WaveFormBase
    {
    }
    public class SFXRumble_MeleeHit : WaveFormBase
    {
    }
    public class SFXSeqAct_SetCombatMood : SequenceAction
    {
        public float fMoodDuration;
        public AIKismetMoods Mood;
    }
    public class SFXShake_BruteRoar : SFXCameraShakeBase
    {
    }
    public class SFXShake_MeleeHit : SFXCameraShakeBase
    {
    }
    public class SFXSeqAct_IgnoreTargets : SequenceAction
    {
        public int[] Pawns;
        public int[] IgnoreTargets;
        public bool Ignore;
    }
    public class SFXSeqAct_SetPawnInvulnerable : SequenceAction
    {
        public bool bPlotProtected;
        public bool bMin1Health;
    }
    public class SFXDamageType_Scorpion : SFXDamageType_Gib
    {
    }
    public class SFXDamageType_SMG_Tempest : SFXDamageType_AutoPistol
    {
    }
    public class SFXProjectile_Scorpion : SFXProjectile_Explosive
    {
        public float NoTargetStickExplodeDelay;
        public float ProximityRadius;
        public int ReleaseSound;
        public int NPExplosionSound;
        public bool UseRelativeOffset;
    }
    public class SFXWeapon_Pistol_Scorpion : SFXWeapon_Pistol_Base
    {
    }
    public class SFXWeapon_SMG_Tempest : SFXWeapon_SMG_Base
    {
    }
    public class SFXSeqAct_GetIsActorBeingRendered : SequenceAction
    {
        public int m_oTarget;
        public float m_fAllowedTimeSinceLastRendered;
    }
    public class SFXAI_Cannibal : SFXAI_Cover
    {
        public NameReference GrenadeAttack;
        public float PlayerExclusionDist;
        public float FailConsumeRetryInterval;
        public float HungryRunSpeedMod;
        public float ConsumeHealPct;
        public float CancelConsumeHealthPct;
        public float MaxRangeToConsume;
        public float MaxVelocityToConsumeSq;
        public float CannibalMeleeCone;
        public float GrenadeInterval;
        public float GrenadeConeAngle;
        public bool bHasScreamed;
    }
    public class SFXAICmd_Base_Cover : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Base_Cannibal : SFXAICmd_Base_Cover
    {
        public float LastBodyCheckTime;
        public float BodyCheckInterval;
    }
    public class SFXAICmd_Cannibal_ConsumeBody : SFXAICommand_Base_Combat
    {
        public float ConsumeRange;
    }
    public class SFXAICmd_Reaction_ShotInCover : SFXAICommand_Base_Combat
    {
    }
    public class SFXCustomAction_AILadderClimbDown : SFXCustomAction_LadderClimbDownBase
    {
    }
    public class SFXCustomAction_AILadderClimbUp : SFXCustomAction_ClimbUpBase
    {
    }
    public class SFXCustomAction_AIMantleOverCover : SFXCustomAction_MantleOverCoverBase
    {
    }
    public class SFXCustomAction_AIMantleUp : SFXCustomAction_SimpleMoveBase
    {
        public BodyStance BS_MantleUpOutOfCover;
        public BodyStance BS_MantleUpInCover;
    }
    public class SFXCustomAction_CannibalConsumeBody : SFXCustomAction_Loop
    {
        public int CE_DeathEffect;
        public int StopConsumeSound;
    }
    public class SFXCustomAction_SpawnEntrance : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_CannibalCrawlEntrance : SFXCustomAction_SpawnEntrance
    {
    }
    public class SFXCustomAction_CannibalMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_CannibalRoar : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_CannibalStagger : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_CannibalStandard : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_CannibalStandardForward : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_CannibalStandardLeft : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_CannibalStandardRight : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_CoverSlipLeft : SFXCustomAction_CoverSlipBase
    {
    }
    public class SFXCustomAction_CoverSlipLeftStanding : SFXCustomAction_CoverSlipBase
    {
    }
    public class SFXCustomAction_CoverSlipRight : SFXCustomAction_CoverSlipBase
    {
    }
    public class SFXCustomAction_CoverSlipRightStanding : SFXCustomAction_CoverSlipBase
    {
    }
    public class SFXCustomAction_Freezing : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_FreezingII : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_FreezingIII : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_GreatPain : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_GreatPainII : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_IdleCannibal : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_ShieldBreach : SFXCustomAction_DamageReaction
    {
        public BodyStance BS_Anims;
        public ESFXVocalizationEventID VocEvents;
    }
    public class SFXDamageType_EnemyGrenade : SFXDamageType
    {
    }
    public class SFXDamageType_Grenade : SFXDamageType_Weapon
    {
    }
    public class SFXPawn_Cannibal : SFXPawn
    {
        public float PoweredHealPct;
        public int CE_ArmorEffectTemplate;
        public float ActivatedArmourDelay;
    }
    public class SFXPowerCustomAction_EnemyGrenade : SFXPowerCustomAction
    {
    }
    public class SFXPowerCustomAction_ReaperGrenade : SFXPowerCustomAction_EnemyGrenade
    {
    }
    public class SFXProjectile_DropPod : SFXProjectile_Explosive
    {
        public int RumbleClass;
        public int ScreenShakeClass;
    }
    public class SFXProjectile_PowerCustomAction_ReaperFragGrenade : SFXProjectile_PowerCustomAction_Grenade
    {
    }
    public class SFXSeqAct_BuffCannibal : SequenceAction
    {
    }
    public class SFXWeapon_AI_CannibalRifle : SFXWeapon_AssaultRifle_Base
    {
    }
    public class SFXAI_Marauder : SFXAI_Cover
    {
        public float BuffInterval;
        public float BuffRadius;
        public float BreakBuffDamageThreshold;
    }
    public class SFXAICmd_Base_Marauder : SFXAICmd_Base_Cover
    {
    }
    public class SFXAICmd_Marauder_BuffAlly : SFXAICmd_Base_Cover
    {
    }
    public class SFXCustomAction_AISwatTurnLeft : SFXCustomAction_SwatTurn
    {
    }
    public class SFXCustomAction_AISwatTurnRight : SFXCustomAction_SwatTurn
    {
    }
    public class SFXCustomAction_DeathReaction_GibHeadshot : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_DeathReaction_GibKnockback : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_DeathReaction_Headshot_Cover : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_DeathReaction_LeftArm : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_DeathReaction_LeftLeg : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_DeathReaction_RightArm : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_DeathReaction_RightLeg : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_DeathReaction_Stomach : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_IdleInspectWeapon : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_IdleListening : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_IdleListening2 : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_IdleListening3 : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_IdleStandGuard : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_IdleTalking : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_IdleTalking2 : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_IdleTalking3 : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_IdleUseConsole : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_MarauderBoostDown : SFXCustomAction_BoostDownBase
    {
        public Guid BoostGUID;
        public int CE_BoostStart;
        public int CE_BoostEnd;
    }
    public class SFXCustomAction_MarauderBoostUp : SFXCustomAction_ClimbUpBase
    {
        public Guid BoostGUID;
        public int CE_BoostStart;
    }
    public class SFXCustomAction_MarauderBreach : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_MarauderBuff : SFXCustomAction_Loop
    {
        public Guid LoopVFXGuid;
        public int PSC_Beam;
        public int LoopTemplate;
    }
    public class SFXCustomAction_MarauderMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_OnFire : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_OnFireII : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_RollBackward : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_RollForward : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_RollLeft : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_RollRight : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_StaggerImpact : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_StaggerImpactForward : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_StaggerImpactII : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_StaggerImpactLeft : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_StaggerImpactRight : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_StandardImpact : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_StandardImpactForward : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_StandardImpactII : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_StandardImpactKnee : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_StandardImpactLeft : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_StandardImpactRight : SFXCustomAction_DamageReaction
    {
    }
    public class SFXDamageType_SniperRifle : SFXDamageType_Weapon
    {
    }
    public class SFXDamageType_IncisorSniperRifle : SFXDamageType_SniperRifle
    {
    }
    public class SFXGUI_CerberusSniperZoomReticle : SFXGUI_StandardSniperZoomReticle
    {
    }
    public class SFXPawn_Marauder : SFXPawn
    {
    }
    public class SFXSeqAct_MarauderBuffTarget : SequenceAction
    {
        public int BuffTarget;
        public bool bInstantBuff;
    }
    public class SFXShield_Energy : SFXShield_Base
    {
    }
    public class SFXWeapon_AssaultRifle_Cobra : SFXWeapon_AssaultRifle_Base
    {
    }
    public class SFXWeapon_AI_Cobra : SFXWeapon_AssaultRifle_Cobra
    {
    }
    public class SFXWeapon_SniperRifle_Raptor : SFXWeapon_SniperRifle_Base
    {
    }
    public class SFXAI_Ravager : SFXAI_Core
    {
        public Vector2D FireDelayTime;
        public Vector2D SwarmerSpawnIntervalRange;
        public float AimDelay;
        public float MaxFireWaitTime;
        public int NumSwarmersToSpawn;
        public int NumSwarmersInSack;
        public int MaxSwarmers;
        public float SackBurstDamage;
        public float SackBurstRadius;
        public float SackDamageHealthPct;
    }
    public class SFXAI_Swarmer : SFXAI_Core
    {
    }
    public class SFXAICmd_Base_Ravager : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Base_Swarmer : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_MoveToSuppressionPoint : SFXAICommand
    {
    }
    public class SFXAICmd_Swarmer_Melee : SFXAICmd_Base_Melee
    {
    }
    public class SFXAICmd_SwarmTarget : SFXAICmd_MoveToGoal
    {
    }
    public class SFXCustomAction_IdleRavager : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_RavagerBurrowEntrance : SFXCustomAction_SpawnEntrance
    {
        public Vector VFXOffset;
        public int PS_SpawnEffect;
    }
    public class SFXCustomAction_RavagerClimbDown1M : SFXCustomAction_LargeCoverClimbDown
    {
    }
    public class SFXCustomAction_RavagerClimbUp1M : SFXCustomAction_LargeCoverClimbUp
    {
    }
    public class SFXCustomAction_RavagerDeath : SFXCustomAction_DeathReaction
    {
        public int CE_DeathEffect;
    }
    public class SFXCustomAction_RavagerDropDown : SFXCustomAction_BoostDownBase
    {
    }
    public class SFXCustomAction_RavagerPopSacks : SFXCustomAction_SingleAnim
    {
        public float BigSackBurstDamage;
    }
    public class SFXCustomAction_RavagerSpawnSwarmer : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_RavagerStagger : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_RavagerStandard : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_RavagerStandardForward : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_RavagerStandardLeft : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_RavagerStandardRight : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_SwarmerClimbDown : SFXCustomAction_SimpleMoveBase
    {
    }
    public class SFXCustomAction_SwarmerClimbUp : SFXCustomAction_SimpleMoveBase
    {
    }
    public class SFXCustomAction_SwarmerGapJump : SFXCustomAction_GapJump
    {
    }
    public class SFXCustomAction_SwarmerJump : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_SwarmerSpawn : SFXCustomAction_SingleAnim
    {
    }
    public class SFXDamageType_CombatPlaceable : SFXDamageType_Power_Ragdoll
    {
    }
    public class SFXDamageType_RavagerCannon : SFXDamageType
    {
    }
    public class SFXDamageType_Swarmer : SFXDamageType
    {
    }
    public class SFXDamageType_SwarmerAcidBurn : SFXDamageType
    {
    }
    public class SFXDamageType_Titan : SFXDamageType_Gib
    {
    }
    public class SFXGameEffect_AcidDamageOverTime : SFXGameEffect_DamageOverTime
    {
    }
    public class SFXMedkit : DynamicSMActor
    {
        public int HealthCrossA;
        public int HealthCrossB;
    }
    public class SFXNav_InteractionCannibal : SFXNav_InteractionPoint
    {
    }
    public class SFXNav_InteractionInspectWeapon : SFXNav_InteractionPoint
    {
    }
    public class SFXNav_InteractionStandGuard : SFXNav_InteractionPoint
    {
    }
    public class SFXPawn_Swarmer : SFXPawn
    {
        public float TimeToLive;
        public float ExplodeDamage;
        public float DoTDamage;
        public float DOTDuration;
        public int CE_SlimeEffect;
        public int PS_Death;
        public int BloodDecal;
        public float DecalWidth;
        public float DecalHeight;
        public int SwarmerExplodeSound;
    }
    public class SFXPawn_Ravager : SFXPawn
    {
        public NameReference LeftWeaponSocketName;
        public NameReference RightWeaponSocketName;
        public int SwarmerArchetype;
        public int LeftLaserPSC;
        public int RightLaserPSC;
        public bool bFireAltGun;
    }
    public class SFXPlaceable_RachniEgg : SFXPlaceable_Reaper
    {
        public float BlastDamageRadius;
        public float SpawnBlastDamageRadius;
        public float SpawnBlastDamage;
        public float BlastMomentum;
        public float SpawnBlastMomentum;
        public int BlastParticleSystemComponent;
        public int PSC_RottenExplosion;
        public int PSC_MineTripped;
        public float TriggerRadius;
        public float ExplosionDelay;
        public float UpdateTime;
        public int DamagedMesh;
        public int SpawnNode;
        public int SwarmerSquad;
        public float SwarmerSpawnHeight;
        public float SwarmerSpawnChance;
        public bool bIsRotten;
        public bool bCancelSpawn;
    }
    public class SFXPlaceable_RottenRachniEgg : SFXPlaceable_RachniEgg
    {
    }
    public class SFXProjectile_RavagerCannon : SFXProjectile_SeekingMissile
    {
        public int TravelStart;
        public int TravelStop;
    }
    public class SFXProjectile_Titan : SFXProjectile_Explosive
    {
        public int RumbleClass;
        public int ScreenShakeClass;
        public float CurveShape;
        public float UpperBound;
        public float MaxAngleChange;
        public float GibRange;
    }
    public class SFXRavagerAcidPool : SFXDecalActorSpawnable
    {
        public int PSC_Cloud;
        public int MITV_AcidTemplate;
    }
    public class SFXRavagerAcidVolume : PhysicsVolume
    {
        public AcidEffectData[] AffectedPawns;
        public int CE_AcidEffect;
        public float EffectDuration;
    }
    public class SFXSeqEvt_EggTripped : SequenceEvent
    {
    }
    public class SFXWeapon_AI_Ravager : SFXWeapon
    {
        public int PSC_MuzFlashEmitter2;
    }
    public class SFXWeapon_Heavy_TitanMissileLauncher : SFXHeavyWeapon
    {
        public Guid ChargeEffectGuid;
        public Guid ShotEffectGuid;
        public float ChargeTimePerShot;
        public float MaxProjectileCount;
        public int CurrentTarget;
        public int CE_ChargeUp;
        public int CE_Shot;
        public int ChargeRumble;
        public float ProjectileSpeedMin;
        public float ProjectileSpeedMax;
        public float DropDelay;
        public float TopPitchOffset;
        public float TopYawOffset;
        public float BottomPitchOffset;
        public float BottomYawOffset;
        public float SideLeftPitchOffset;
        public float SideLeftYawOffset;
        public float SideRightPitchOffset;
        public float SideRightYawOffset;
        public float MiddlePitchOffset;
        public float MiddleYawOffset;
        public float TopPitchOffset2;
        public float TopYawOffset2;
        public float BottomPitchOffset2;
        public float BottomYawOffset2;
        public float SideLeftPitchOffset2;
        public float SideLeftYawOffset2;
        public float SideRightPitchOffset2;
        public float SideRightYawOffset2;
        public float MiddlePitchOffset2;
        public float MiddleYawOffset2;
    }
    public class SFXSeqAct_AcquireCover : SequenceAction
    {
    }
    public class SFXSeqAct_CompareAliveSquadMembers : SequenceAction
    {
        public int[] Squads;
        public int AliveSquadMemberCount;
        public int Threshold;
    }
    public class SFXSeqAct_ToggleSwarmerSpawning : SequenceAction
    {
    }
    public class SFXAI_Banshee : SFXAI_Core
    {
        public Vector2D ChargedIntervalRange;
        public float ShieldFrequency;
        public float ShieldDuration;
        public float MaxChargedBanshees;
        public float BlastInterval;
        public float LongRangeBlastInterval;
        public float AOEBlastInterval;
        public float BreachDamageResetDuration;
        public float BreachDamageThreshold;
        public float MaxBreachDamageThreshold;
        public float TeleportInterval;
        public int MaxTeleports;
        public float AggressiveDuration;
        public float SyncKillChance;
    }
    public class SFXAICmd_Banshee_Aggressive : SFXAICmd_Base_Melee
    {
        public int StartChargeSound;
        public int StopChargeSound;
    }
    public class SFXAICmd_Base_Banshee : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Reaction_BansheeShockwave : SFXAICommand_Base_Combat
    {
    }
    public class SFXCustomAction_BansheeAOEBlast : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_BansheeBlast : SFXCustomAction_SingleAnim
    {
        public int CE_DoTTemplate;
        public float DOTDuration;
    }
    public class SFXCustomAction_BansheeBoostUp : SFXCustomAction_ClimbUpBase
    {
        public Guid BoostGUID;
        public float EndMoveDistance;
        public int CE_BoostStart;
    }
    public class SFXCustomAction_BansheeBreach : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_BansheeClimbDown : SFXCustomAction_LargeCoverClimbDown
    {
    }
    public class SFXCustomAction_BansheeClimbUp : SFXCustomAction_LargeCoverClimbUp
    {
    }
    public class SFXCustomAction_BansheeDeath : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_BansheeDropDown : SFXCustomAction_BoostDownBase
    {
        public Guid BoostGUID;
        public int CE_BoostStart;
    }
    public class SFXCustomAction_BansheeLeap : SFXCustomAction_LeapBase
    {
        public Guid CrustGuid;
        public int CE_Start;
    }
    public class SFXCustomAction_BansheeMantle : SFXCustomAction_LargeCoverMantle
    {
    }
    public class SFXCustomAction_BansheeMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_BansheePhase : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_BansheeRoar : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_BansheeShield : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_BansheeStagger : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_BansheeStandard : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_BansheeStandardForward : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_BansheeStandardLeft : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_BansheeStandardRight : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_BansheeSyncMelee : SFXCustomAction_SyncBase
    {
    }
    public class SFXCustomAction_IdleBanshee : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXDamageType_BansheeBlast : SFXDamageType_Power
    {
    }
    public class SFXDamageType_BansheeSyncKill : SFXDamageType
    {
    }
    public class SFXDamageType_BansheeWarpField : SFXDamageType_Power
    {
    }
    public class SFXGameEffect_BansheeWarp : SFXGameEffect_DamageOverTime
    {
    }
    public class SFXPawn_Banshee : SFXPawn
    {
        public Guid ShieldGUID;
        public Guid ChargedGUID;
        public NameReference BlastSocketName;
        public int InvisShieldMesh;
        public int CE_Shield;
        public int CE_Charged;
        public int ChargedAmbientVoc;
    }
    public class SFXProjectile_BansheeBlast : SFXProjectile_SeekingMissile
    {
        public int BlastCustomAction;
    }
    public class SFXProjectile_BansheePhase : SFXProjectile_Explosive
    {
    }
    public class SFXGameEffect_WeaponMod : SFXGameEffect
    {
        public int MyWeapon;
        public EWeaponStatBars ModStat;
    }
    public class SFXGameEffect_WeaponMod_DamageBonus : SFXGameEffect_WeaponMod
    {
    }
    public class SFXGameEffect_WeaponMod_ZoomTimeDilationBonus : SFXGameEffect_WeaponMod
    {
    }
    public class SFXPawn_Dummy : SFXPawn
    {
    }
    public class SFXWeaponMod_ShotgunDamage : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_SniperRifleTimeDilation : SFXWeaponMod
    {
    }
    public class SFXNav_HarvesterMoveNode : SFXNav_ForcedPathNode
    {
    }
    public class SFXWeaponMod_AssaultRifleDamage : SFXWeaponMod
    {
    }
    public class SFXDamageType_Disciple : SFXDamageType_Power_Ragdoll
    {
    }
    public class SFXDamageType_Reckoning : SFXDamageType
    {
    }
    public class SFXDamageType_Reckoning_Charged : SFXDamageType_Reckoning
    {
    }
    public class SFXProjectile_Reckoning : SFXProjectile_Explosive
    {
        public NameReference AttachBoneName;
        public int ReckoningImpactTemplate;
        public int ReckoningBloodyImpactTemplate;
        public int ReleaseSound;
        public float DirectDamageProportion;
        public float HigherReactionChance;
        public bool UseRelativeOffset;
    }
    public class SFXWeapon_AssaultRifle_Reckoning : SFXWeapon_AssaultRifle_Base
    {
        public Guid ChargeEffectGuid;
        public int ShellSound;
        public float ReckoningDamageMultiplier;
        public float ReckoningRecoilMultiplier;
        public float ReckoningChargeTime;
        public int ChargePlayerFireSound;
        public int SmokeEffect;
        public int CE_ChargeUp;
        public int ChargeRumble;
    }
    public class SFXWeapon_Shotgun_Disciple : SFXWeapon_Shotgun_Base
    {
    }
    public class SFXDamageType_GethRocketExplosion : SFXDamageType_Weapon
    {
    }
    public class SFXDamageType_GethRocketImpact : SFXDamageType_Weapon
    {
    }
    public class SFXDamageType_GunnerTurret : SFXDamageType_Weapon
    {
    }
    public class SFXProjectile_GethRocket : SFXProjectile_SeekingMissile
    {
        public int ImpactDamageType;
        public int TravelStart;
        public int TravelStop;
        public float HealthValue;
        public float SpeedUpDuration;
        public float CachedDamage;
    }
    public class SFXShake_GethRocket : SFXShake_SeekingMissile
    {
    }
    public class SFXWeapon_AI_GethRocketLauncher : SFXWeapon
    {
    }
    public class SFXWeapon_AI_TurretMiniGun : SFXWeapon_AssaultRifle_Base
    {
        public float WindUpDelay;
        public int WindUpSound;
        public int WindDownSound;
    }
    public class SFXWeapon_AI_GunShipMiniGun : SFXWeapon_AI_TurretMiniGun
    {
    }
    public class SFXSeqAct_ForcePlayerIntoCover : SequenceAction
    {
        public int Player;
        public int Link;
        public int SlotIdx;
        public bool bDisableAnimatedTransition;
    }
    public class SFXSeqAct_ForceTarget : SequenceAction
    {
        public int[] m_aoPawn;
        public int m_oForcedTarget;
    }
    public class SFXSeqAct_RotateToFaceActor : SeqAct_Latent
    {
        public int[] ActorsToRotate;
        public int ActorToFace;
        public float RotationSpeed;
        public float Tolerance;
        public bool bIsFacingTarget;
    }
    public class SFXSeqAct_ToggleHarvesterFlying : SequenceAction
    {
    }
    public class SFXAI_Harvester : SFXAI_Core
    {
    }
    public class SFXAICmd_Base_Harvester : SFXAICommand_Base_Combat
    {
        public float MovementDelay;
    }
    public class SFXAICmd_Harvester_FireWeapon : SFXAICommand
    {
    }
    public class SFXAICmd_Harvester_Flying : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Harvester_TakeOff : SFXAICommand_Base_Combat
    {
    }
    public class SFXCustomAction_HarvesterDeath : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_HarvesterDeathInstant : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_HarvesterEnterAim : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_HarvesterLand : BioCustomAction
    {
        public BodyStance BS_Anim;
    }
    public class SFXCustomAction_HarvesterLeaveAim : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_HarvesterStandard : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_HarvesterStandardForward : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_HarvesterStandardLeft : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_HarvesterStandardRight : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_HarvesterTakeOff : BioCustomAction
    {
        public BodyStance BS_Anim;
    }
    public class SFXDamageType_HarvesterCannon : SFXDamageType
    {
    }
    public class SFXPawn_Harvester : SFXPawn
    {
        public NameReference FrontLeftLegName;
        public NameReference FrontRightLegName;
        public NameReference BackLeftLegName;
        public NameReference BackRightLegName;
        public NameReference LeftWeaponSocketName;
        public NameReference RightWeaponSocketName;
        public bool bFlying;
        public bool bAiming;
        public bool bFireAltGun;
    }
    public class SFXProjectile_HarvesterCannon : SFXProjectile_SeekingMissile
    {
        public int TravelStart;
        public int TravelStop;
    }
    public class SFXWeapon_AI_Harvester : SFXWeapon
    {
        public int PSC_MuzFlashEmitter2;
        public float GroundedROFFactor;
    }
    public class SFXGameEffect_WeaponMod_NoAmmoUsedChance : SFXGameEffect_WeaponMod
    {
    }
    public class SFXWeaponMod_SMGConstraintDamage : SFXWeaponMod
    {
    }
    public class BioSeqAct_GetShieldPercentage : SequenceAction
    {
        public int m_oPawn;
        public float m_fShieldPct;
        public float m_fShieldMax;
        public float m_fShieldCurrent;
        public EShieldType eType;
    }
    public class SFXAI_KaiLeng : SFXAI_Cover
    {
        public NameReference KaiLengSlashPowerName;
        public float KnockbackFrequency;
        public float RollFrequency;
        public float DamageThreshold;
        public float AggressiveFrequency;
        public float MeleeCone;
        public float PowerSlashInterval;
        public float ShieldFrequency;
        public int KaiLengInjuredVoc;
        public bool bKaiLengCharged;
        public bool bKaiLengSyncAttack;
        public bool bBreakChargeUp;
        public EKaiLengRechargeState RechargeState;
        public EKaiLengState KaiLengState;
    }
    public class SFXAI_Phantom : SFXAI_Cover
    {
        public float CloakHealthPct;
        public float EvadeDamageScalePct;
        public float ShieldDamageScalePct;
        public float VortexDamageWindow;
        public float VortexFrequency;
        public float ShieldFrequency;
        public float AggressiveFrequency;
        public float SyncKillChance;
    }
    public class SFXAICmd_Base_KaiLeng : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Base_Phantom : SFXAICmd_Base_Cover
    {
    }
    public class SFXAICmd_KaiLeng_Aggressive : SFXAICmd_Base_Melee
    {
        public float AggressiveDuration;
    }
    public class SFXAICmd_Phantom_Aggressive : SFXAICmd_Base_Melee
    {
    }
    public class SFXAICmd_Phantom_Melee : SFXAICmd_Base_Melee
    {
    }
    public class SFXAICmd_Reaction_KaiLengHeal : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Reaction_PhantomCloak : SFXAICommand_Base_Combat
    {
        public float EvadeCloakDelay;
        public float HealthRegen;
        public float CloakDuration;
    }
    public class SFXCustomAction_IdleSwordFlourish : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_KaiLengMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_KaiLengShield : SFXCustomAction_SingleAnim
    {
        public float ShieldRegen;
        public float ShieldRegenTime;
    }
    public class SFXCustomAction_KaiLengSuperVortex : SFXCustomAction_Loop
    {
        public float ShieldRegen;
        public float ShieldRegenTime;
        public float ShieldRechargeDuration;
        public int ChargeEndSound;
    }
    public class SFXCustomAction_KaiLengSwordSlice : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_KaiLengSyncGrapple : SFXCustomAction_VariableExit
    {
    }
    public class SFXCustomAction_KaiLengVortex : SFXCustomAction_Loop
    {
        public float ShieldRegen;
        public float ShieldRegenTime;
        public int ChargeEndSound;
    }
    public class SFXCustomAction_LeapHumanoid : SFXCustomAction_LeapBase
    {
    }
    public class SFXCustomAction_PhantomAirRecover : SFXCustomAction_AirRecoverBase
    {
        public int CE_Land;
    }
    public class SFXCustomAction_PhantomBoostDown : SFXCustomAction_BoostDownBase
    {
    }
    public class SFXCustomAction_PhantomBoostUp : SFXCustomAction_ClimbUpBase
    {
    }
    public class SFXCustomAction_PhantomEvadeBackward : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PhantomEvadeForward : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PhantomEvadeLeft : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PhantomEvadeRight : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PhantomLeap : SFXCustomAction_LeapBase
    {
    }
    public class SFXCustomAction_PhantomMantleDown : SFXCustomAction_SimpleMoveBase
    {
    }
    public class SFXCustomAction_PhantomMantleOverCover : SFXCustomAction_MantleOverCoverBase
    {
        public BodyStance BS_StartB;
        public BodyStance BS_LoopB;
        public BodyStance BS_EndB;
        public float IdleMantleDistance;
        public float RunMantleDistance;
    }
    public class SFXCustomAction_PhantomMantleUp : SFXCustomAction_SimpleMoveBase
    {
    }
    public class SFXCustomAction_PhantomMelee : SFXCustomAction_SingleAnim
    {
        public int[] HitActors;
    }
    public class SFXCustomAction_PhantomRagdoll : SFXCustomAction_Ragdoll
    {
        public float AirRecoveryTime;
        public float FastPhysicsBlendDuration;
        public float SlowPhysicsBlendDuration;
    }
    public class SFXCustomAction_PhantomShield : SFXCustomAction_Loop
    {
    }
    public class SFXCustomAction_PhantomShieldBreach : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PhantomStaggerImpact : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PhantomStandardImpact : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PhantomStandardImpactForward : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PhantomStandardImpactLeft : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PhantomStandardImpactRight : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PhantomSwordSlice : SFXCustomAction_SingleAnim
    {
        public int[] HitActors;
    }
    public class SFXCustomAction_PhantomSyncMelee : SFXCustomAction_SyncBase
    {
    }
    public class SFXCustomAction_RollBackward_KaiLeng : SFXCustomAction_RollBackward
    {
        public float KaiLengCloakTime;
    }
    public class SFXCustomAction_RollForward_KaiLeng : SFXCustomAction_RollForward
    {
        public float KaiLengCloakTime;
    }
    public class SFXDamageType_KaiLeng : SFXDamageType
    {
    }
    public class SFXDamageType_OverloadRobot : SFXDamageType_Power_Electrocute
    {
    }
    public class SFXDamageType_Overload : SFXDamageType_OverloadRobot
    {
    }
    public class SFXDamageType_PhantomBlaster : SFXDamageType_Weapon
    {
    }
    public class SFXDamageType_PhantomSyncKill : SFXDamageType
    {
    }
    public class SFXGameEffect_Cloak : SFXGameEffect
    {
        public int __OnCloakEnded__Delegate;
        public Guid CloakEffectGuid;
        public int CE_CloakEffect;
        public float CloakTimer;
    }
    public class SFXGameEffect_HealShieldOverTime : SFXGameEffect
    {
    }
    public class SFXGameEffect_KaiLengCloak : SFXGameEffect
    {
    }
    public class SFXPawn_KaiLeng : SFXPawn
    {
        public int SwordMesh;
        public float EvadeForceThreshold;
        public float WarpFieldRadius;
        public float WarpFieldDamage;
        public bool bShielded;
    }
    public class SFXPawn_Phantom : SFXPawn
    {
        public Guid ShieldGUID;
        public Guid RecoverGUID;
        public NameReference ShieldSocket;
        public int InvisShieldMesh;
        public int CE_Shield;
        public int PhantomPainVoc;
        public int CE_RecoverStart;
        public float LandSearchRadius;
        public int CloakSound;
        public int UnCloakSound;
        public int MITV_CloakFlickerTemplate;
        public bool bInNeutralPhysPose;
    }
    public class SFXPowerCustomAction_KaiLengSlash : SFXPowerCustomAction
    {
    }
    public class SFXProjectile_PowerCustomAction_Seeking : SFXProjectile_PowerCustomAction
    {
        public float CurveShape;
        public float UpperBound;
        public float PawnEvadedStopSeekingTime;
        public EAimNodes SeekAimNode;
    }
    public class SFXProjectile_PowerCustomAction_KaiLengSlash : SFXProjectile_PowerCustomAction_Seeking
    {
        public float MinTrackingDist;
    }
    public class SFXSeqEvt_KaiLengInjured : SequenceEvent
    {
    }
    public class SFXShield_Phantom : SFXShield_Biotic
    {
    }
    public class SFXWeapon_AI_KaiLeng : SFXWeapon_AssaultRifle_Base
    {
    }
    public class SFXWeapon_AI_Phantom : SFXWeapon_Pistol_Base
    {
    }
    public class SFXSeqAct_GetIsCloaked : SequenceAction
    {
        public int m_oTarget;
    }
    public class SFXSeqAct_ToggleKaiLengCharged : SequenceAction
    {
    }
    public class SFXSeqCond_IsInCover : SequenceCondition
    {
        public int[] Pawns;
    }
    public class SFXSeqAct_ToggleKaiLengSword : SequenceAction
    {
    }
    public class SFXAI_Trooper : SFXAI_Cover
    {
        public NameReference GrenadeAttack;
        public float GrenadeInterval;
        public float GrenadeConeAngle;
        public bool bThrowGrenade;
    }
    public class SFXAICmd_Base_Trooper : SFXAICmd_Base_Cover
    {
    }
    public class SFXCustomAction_AnimRagdollSingularity : SFXCustomAction_AnimatedRagdoll
    {
    }
    public class SFXCustomAction_BoostDown : SFXCustomAction_BoostDownBase
    {
        public Guid LoopVFXGuid;
        public int LoopTemplate;
        public int LandingTemplate;
        public int StopRocketEffect;
    }
    public class SFXCustomAction_BoostUp : SFXCustomAction_ClimbUpBase
    {
        public Guid LoopVFXGuid;
        public int CE_BoostStart;
        public int CE_BoostLoop;
        public int CE_BoostEnd;
        public int StopRocketEffect;
    }
    public class SFXCustomAction_TrooperMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_TrooperStomp : SFXCustomAction_SingleAnim
    {
    }
    public class SFXDamageType_TacticalMachinePistol : SFXDamageType_SMG_Tempest
    {
    }
    public class SFXGameEffect_RagdollRocket : SFXGameEffect_PhysicsPower
    {
        public float ForceMultiplier;
        public int OwnerPawn;
        public float LeftForce;
        public float RightForce;
    }
    public class SFXPawn_Trooper : SFXPawn
    {
    }
    public class SFXPowerCustomAction_CerberusGrenade : SFXPowerCustomAction_EnemyGrenade
    {
    }
    public class SFXProjectile_PowerCustomAction_CerberusFragGrenade : SFXProjectile_PowerCustomAction_Grenade
    {
    }
    public class SFXWeapon_SMG_Hornet : SFXWeapon_SMG_Base
    {
    }
    public class SFXWeapon_AI_Hornet : SFXWeapon_SMG_Hornet
    {
    }
    public class SFXWeapon_AssaultRifle_Mattock : SFXWeapon_AssaultRifle_Base
    {
    }
    public class SFXAI_Centurion : SFXAI_Cover
    {
        public NameReference GrenadeAttack;
        public float CoverMoveSmokeChance;
        public float FlankedSmokeChance;
        public float SmokeFrequency;
        public float GrenadeInterval;
        public float GrenadeConeAngle;
        public bool bThrowGrenade;
    }
    public class SFXAI_Gunner : SFXAI_Cover
    {
        public int[] RepairTargets;
        public int[] UnreachableTurretPoints;
        public float TurretDeployInterval;
        public float TurretPointSearchDist;
        public float DeployBreachThreshold;
        public float RepairInterval;
        public float RepairThreshold;
        public float RepairPct;
        public float MaxRepairDist;
    }
    public class SFXAI_GunnerTurret : SFXAI_Core
    {
        public float WeaponFireInterval;
        public float SuicideTime;
        public float ExplosionRadius;
        public float ExplosionDamage;
    }
    public class SFXAICmd_Base_Centurion : SFXAICmd_Base_Cover
    {
    }
    public class SFXAICmd_Base_Gunner : SFXAICmd_Base_Cover
    {
    }
    public class SFXAICmd_Base_GunnerTurret : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_SmokeBase : SFXAICommand
    {
        public int ProjectileClass;
    }
    public class SFXAICmd_Centurion_SmokeBase : SFXAICmd_SmokeBase
    {
    }
    public class SFXAICmd_Centurion_SmokeSelf : SFXAICmd_Centurion_SmokeBase
    {
        public float SmokeOffset;
    }
    public class SFXAICmd_Centurion_SmokeTarget : SFXAICmd_Centurion_SmokeBase
    {
        public float SmokeDistPct;
        public float DefaultSmokeDistance;
    }
    public class SFXAICmd_Gunner_DeployTurret : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Gunner_Repair : SFXAICommand_Base_Combat
    {
        public int RepairTarget;
    }
    public class SFXAICmd_Reaction_CenturionFlank : SFXAICommand_Base_Combat
    {
    }
    public class SFXCenturionSmokeActor : SFXSmokeActorBase
    {
    }
    public class SFXCustomAction_CenturionMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_DeployTurret : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_GunnerBreach : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_IdleCenturion : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_IdleInspectOmniTool : SFXCustomAction_LoopingInteraction
    {
        public Guid OmniToolGuid;
        public int OmniToolVFX;
    }
    public class SFXCustomAction_IdleOmniToolScan : SFXCustomAction_LoopingInteraction
    {
        public Guid OmniToolGuid;
        public int OmniToolVFX;
    }
    public class SFXCustomAction_Repair : SFXCustomAction_Loop
    {
        public int PSC_RepairBeam;
    }
    public class SFXCustomAction_TurretDeployed : SFXCustomAction_SingleAnim
    {
    }
    public class SFXDamageType_AIHacking : SFXDamageType_Power_Control
    {
    }
    public class SFXDamageType_CerberusPlaceable : SFXDamageType_Default
    {
    }
    public class SFXDamageType_GunnerTurretExplosion : SFXDamageType
    {
    }
    public class SFXDamageType_PhalanxPistol : SFXDamageType_HeavyPistol
    {
    }
    public class SFXGameEffect_ShieldGeneratorBeam : SFXGameEffect
    {
        public NameReference BeamAttachBoneName;
        public int PSC_Beam;
        public int PSC_DrainBeam;
        public int WWise_BeamSoundAtTarget;
        public int WWIse_BeamSoundAtTargetIfPlayer;
        public int WWIse_BeamSoundAtSource;
        public bool bBeamOn;
    }
    public class SFXNav_InteractionHenchInteractLow : SFXNav_InteractionPoint
    {
    }
    public class SFXNav_InteractionHenchOmniToolCrouch : SFXNav_InteractionPoint
    {
    }
    public class SFXPawn_Centurion : SFXPawn
    {
    }
    public class SFXPawn_GunnerTurret : SFXPawn
    {
        public Guid RepairGUID;
        public int CE_Explosion;
        public int CE_Active;
        public int CE_Repair;
        public int ExplosionSound;
        public int TankHit;
    }
    public class SFXPawn_Gunner : SFXPawn
    {
        public int TurretArchetype;
    }
    public class SFXPlaceable : SFXPlaceableBase
    {
        public bool bReplicatedIsDestroyed;
        public bool bReplicatedIsDeactivated;
    }
    public class SFXPlaceable_Cerberus : SFXPlaceable
    {
    }
    public class SFXPlaceable_CerberusShield : SFXPlaceable_Cerberus
    {
        public int Generator;
        public float ShieldRegenTime;
        public float ShieldRegenTime_OverloadMultiplier;
        public float ShieldRegenTime_SabotageMultiplier;
        public float BlastDamageRadius;
        public float BlastDamage;
        public float BlastMomentum;
        public int StaticMeshComponent_Shield;
        public int CE_SabatogeExplosion;
        public int CE_ShieldRestore;
        public float BaseSabotageDamage;
        public float SabotageRadius;
        public int PS_ShieldBreak;
        public int WWise_BarrierEnabled;
        public int WWise_BarrierOffline;
        public int WWise_BarrierDestruction;
    }
    public class SFXPlaceable_Generator : SFXPlaceable_Cerberus
    {
        public int[] PoweredPlaceables;
        public ShieldData[] ShieldedPawns;
        public float BlastDamageRadius;
        public float BlastMomentum;
        public int BlastEmitter;
        public int BlastParticleSystemComponent;
        public int CE_ElectroCrust;
        public int RepairedMaterial;
        public int DamagedMaterial;
        public int DamagedMaterialOn;
        public float TimeToRepair;
        public int CE_ShieldTemplate;
        public int CE_DrainShieldTemplate;
        public float BeamEffectChance;
        public int WWise_GeneratorDischarge;
        public int WWise_GeneratorEnabled;
        public int WWIse_GeneratorOffline;
        public int WWise_GeneratorRepair;
    }
    public class SFXPlaceable_ShieldGenerator : SFXPlaceable_Cerberus
    {
        public int Generator;
        public float ShieldRadius;
        public float ShieldUpdateTime;
        public int DeactiveMaterial;
        public int ActiveMaterial;
        public int BlastParticleSystemComponent;
        public int PSC_RegenShieldsBooster;
        public int PSC_DrainShieldsBooster;
        public int DamagedMesh;
        public int NormalMesh;
        public float DrainShieldStrength;
        public float PlayerShieldRegenPercent;
        public int WWise_PylonEnable;
        public int WWIse_PylonDestroyed;
        public int WWIse_PylonOffline;
        public int WWIse_PylonStop;
        public bool bDrainShields;
    }
    public class SFXProjectile_Smoke : SFXProjectile
    {
        public int SmokeActorClass;
        public int PS_Impact;
        public int Timeline;
    }
    public class SFXProjectile_CenturionSmoke : SFXProjectile_Smoke
    {
    }
    public class SFXSeqAct_CenturionFireSmoke : SequenceAction
    {
        public int SmokeTarget;
    }
    public class SFXSeqAct_GunnerPlaceTurret : SequenceAction
    {
        public int TurretNav;
        public bool bInstantDeploy;
    }
    public class SFXSeqEvt_PlaceableActivated : SequenceEvent
    {
    }
    public class SFXSeqEvt_PlaceableDeactivated : SequenceEvent
    {
    }
    public class SFXSeqEvt_PlaceableDestroyed : SequenceEvent
    {
    }
    public class SFXSeqEvt_PlaceableReset : SequenceEvent
    {
    }
    public class SFXShield_TempEnergy : SFXShield_Energy
    {
    }
    public class SFXWeapon_AI_Mattock : SFXWeapon_AssaultRifle_Mattock
    {
    }
    public class SFXWeapon_Pistol_Phalanx : SFXWeapon_Pistol_Base
    {
    }
    public class SFXWeapon_AI_Phalanx : SFXWeapon_Pistol_Phalanx
    {
    }
    public class SFXPlaceable_Generic : SFXPlaceable
    {
    }
    public class SFXWeaponMod_SniperRifleDamage : SFXWeaponMod
    {
    }
    public class SFXAI_Guardian : SFXAI_Cover
    {
        public float BreachFrequency;
        public float ShieldDamageBreachThreshold;
        public float ShieldResetDuration;
        public float ShieldBashInterval;
        public float UnderFireSpeedMod;
        public float SlowDownDuration;
    }
    public class SFXAICmd_Base_Guardian : SFXAICommand_Base_Combat
    {
        public Vector2D MoveTimeoutInterval;
    }
    public class SFXAICmd_Guardian_Cover : SFXAICmd_Base_Cover
    {
    }
    public class SFXAICmd_Guardian_Melee : SFXAICmd_Base_Melee
    {
    }
    public class SFXAICmd_Reaction_GuardianLoseShield : SFXAICmd_CustomAction
    {
    }
    public class SFXCustomAction_GuardianBreach : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_GuardianKnockback : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_GuardianLoseShield : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_GuardianMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_GuardianShieldBash : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_IdleGuardPose : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXDamageType_AI_Shotgun : SFXDamageType_Shotgun
    {
    }
    public class SFXDamageType_Pull : SFXDamageType_Power_Ragdoll
    {
    }
    public class SFXDamageType_Singularity : SFXDamageType_Power
    {
    }
    public class SFXDamageType_Talon : SFXDamageType_Weapon
    {
    }
    public class SFXGameEffect_WeaponMod_ArmorPiercingBonus : SFXGameEffect_WeaponMod
    {
    }
    public class SFXGameEffect_WeaponMod_PenetrationBonus : SFXGameEffect_WeaponMod
    {
    }
    public class SFXGameEffect_WeaponMod_PenetrationDamageBonus : SFXGameEffect_WeaponMod
    {
    }
    public class SFXGuardianShield : SFXKActor
    {
    }
    public class SFXPawn_Guardian : SFXPawn
    {
        public BodyStance BS_ShieldHits;
        public int ShieldAnimSet;
        public float LoseShieldForceThreshold;
        public float StaggerForceThreshold;
        public float BreachForceThreshold;
        public float ShieldArc;
        public float PullArc;
        public bool bCarryingShield;
    }
    public class SFXWeapon_Pistol_Talon : SFXWeapon_Pistol_Base
    {
        public int ShellSound;
        public float MaxProjectileCount;
        public int SteamMuzzle;
    }
    public class SFXWeapon_AI_Talon : SFXWeapon_Pistol_Talon
    {
    }
    public class SFXWeaponMod_AssaultRifleForce : SFXWeaponMod
    {
    }
    public class SFXMedStation : DynamicSMActor
    {
        public int HealthCross;
        public int HealthCrossPad;
    }
    public class SFXNav_InteractionCenturion : SFXNav_InteractionPoint
    {
    }
    public class SFXNav_InteractionGuardPose : SFXNav_InteractionPoint
    {
    }
    public class SFXNav_InteractionInspectOmniTool : SFXNav_InteractionPoint
    {
    }
    public class SFXNav_InteractionOmniToolScan : SFXNav_InteractionPoint
    {
    }
    public class SFXWeaponMod_PistolDamage : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_PistolReloadSpeed : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_SniperRifleConstraintDamage : SFXWeaponMod
    {
    }
    public class SFXSeqAct_RemoveArmour : SequenceAction
    {
        public int ArmourIndex;
    }
    public class SFXAI_Nemesis : SFXAI_Cover
    {
        public float NemesisAimDelay;
        public float AimTrackingDuration;
    }
    public class SFXAICmd_Base_Nemesis : SFXAICmd_Base_Cover
    {
    }
    public class SFXAICmd_Reaction_NemesisFlee : SFXAICommand_Base_Combat
    {
        public int FleeTarget;
    }
    public class SFXCustomAction_IdleSniperSweep : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXDamageType_AI_SniperRifle : SFXDamageType_Shotgun
    {
    }
    public class SFXPawn_Nemesis : SFXPawn
    {
        public int LaserTarget;
        public int BeamStartSound;
        public int BeamStopSound;
        public int LaserPSC;
        public int LaserLFC;
    }
    public class SFXShield_Biotic : SFXShield_Base
    {
    }
    public class SFXWeapon_AI_Raptor : SFXWeapon_SniperRifle_Raptor
    {
    }
    public class SFXAI_Atlas : SFXAI_Core
    {
        public NameReference RocketAttack;
        public float SmokeInterval;
        public float RocketInterval;
        public float BlockInterval;
        public float SyncKillChance;
        public float AtlasMeleeCone;
        public float AtlasSyncMeleeCone;
        public float AtlasSyncMeleeRange;
        public float RocketConeAngle;
    }
    public class SFXAICmd_Atlas_Melee : SFXAICmd_Base_Melee
    {
    }
    public class SFXAICmd_Atlas_SmokeTarget : SFXAICmd_SmokeBase
    {
        public float SmokeDistPct;
        public float DefaultSmokeDistance;
    }
    public class SFXAICmd_Base_Atlas : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_EnterAtlas : SFXAICommand_Base_Combat
    {
    }
    public class SFXAtlasSmokeActor : SFXSmokeActorBase
    {
    }
    public class SFXCustomAction_AtlasBlock : SFXCustomAction_SingleAnim
    {
        public float SmokeDistPct;
        public bool bShouldFireSmokeGrenade;
    }
    public class SFXCustomAction_AtlasClimbDown : SFXCustomAction_LargeCoverClimbDown
    {
    }
    public class SFXCustomAction_AtlasClimbUp : SFXCustomAction_LargeCoverClimbUp
    {
    }
    public class SFXCustomAction_AtlasCloseCockpitCombat : SFXCustomAction_SingleAnim
    {
        public BodyStance BS_OpenLoop;
    }
    public class SFXCustomAction_AtlasCloseCockpitIdle : SFXCustomAction_SingleAnim
    {
        public BodyStance BS_OpenLoop;
        public BodyStance BS_ClosedLoop;
    }
    public class SFXCustomAction_AtlasDeathExplosion : SFXCustomAction_DeathReaction
    {
        public int ExplosionEffect;
        public float ExplosionRadius;
        public float ExplosionDamage;
    }
    public class SFXCustomAction_AtlasDriverEnter : SFXCustomAction_SyncBase
    {
        public BodyStance BS_TargetPullOut;
    }
    public class SFXCustomAction_AtlasDriverExit : SFXCustomAction_SyncBase
    {
        public BodyStance BS_OpenLoop;
    }
    public class SFXCustomAction_AtlasHeavyMelee : SFXCustomAction_SingleAnim
    {
        public NameReference ClawSocketName;
        public int CE_GroundPound;
    }
    public class SFXCustomAction_AtlasMantle : SFXCustomAction_LargeCoverMantle
    {
    }
    public class SFXCustomAction_AtlasMelee : SFXCustomAction_SingleAnim
    {
        public int[] HitActors;
    }
    public class SFXCustomAction_AtlasOpenCockpitDeath : SFXCustomAction_SingleAnim
    {
        public BodyStance BS_OpenLoop;
    }
    public class SFXCustomAction_AtlasOpenCockpitIdle : SFXCustomAction_SingleAnim
    {
        public BodyStance BS_OpenLoop;
        public BodyStance BS_ClosedLoop;
    }
    public class SFXCustomAction_AtlasOrbitalDrop : SFXCustomAction_SpawnEntrance
    {
        public int GroundImpact;
    }
    public class SFXCustomAction_AtlasPlayerSmokeShot : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_AtlasStagger : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_AtlasStandard : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_AtlasStandardForward : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_AtlasStandardLeft : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_AtlasStandardRight : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_AtlasSyncMelee : SFXCustomAction_SyncBase
    {
    }
    public class SFXDamageType_Atlas : SFXDamageType
    {
    }
    public class SFXDamageType_AtlasSyncKill : SFXDamageType
    {
    }
    public class SFXDamageType_AtlasWeapon : SFXDamageType_Weapon
    {
    }
    public class SFXGUI_AtlasHUD : SFXGUIMovie
    {
        public int HudMovieResource;
    }
    public class SFXPawn_Atlas : SFXPawn
    {
        public BodyStance BS_Driving;
        public BodyStance BS_DeadDriverPose;
        public BodyStance BS_PulledOutOfCockpit;
        public int CE_Damaged;
        public Guid DamagedGUID;
        public NameReference DrivingSocket;
        public int DriverArchetype;
        public int DriverAnimset;
        public int PSC_BrokenCockpit;
        public float CockpitOffset;
        public int StartPlayerDrivingSound;
        public int StopPlayerDrivingSound;
        public int CE_BloodEffect;
        public int DriverShotSound;
        public int PS_Footstep;
        public bool bSuitIsEmpty;
        public bool bOnlyPlayerPilots;
    }
    public class SFXPowerCustomAction_TitanRocket : SFXPowerCustomAction
    {
    }
    public class SFXPowerCustomAction_TitanRocket_Player : SFXPowerCustomAction_TitanRocket
    {
    }
    public class SFXProjectile_AtlasSmoke : SFXProjectile_Smoke
    {
    }
    public class SFXProjectile_PowerCustomAction_TitanRocket : SFXProjectile_PowerCustomAction_Seeking
    {
        public float MinTrackingDist;
    }
    public class SFXSeqAct_AtlasOpenCockpit : SequenceAction
    {
    }
    public class SFXSeqEvt_AtlasEntered : SequenceEvent
    {
    }
    public class SFXWeapon_Heavy_Atlas : SFXWeapon
    {
        public int ShellSound;
        public float PlayerDamageMultiplier;
    }
    public class BioPlaypenVolumeAdditive : BioPlaypenVolume
    {
    }
    public class SFXPlaceable_GenericMover : SFXPlaceable_Generic
    {
    }
    public class SFXSeqAct_SetAIAggressive : SequenceAction
    {
        public float fMoodDuration;
    }
    public class SFXSeqAct_SetActorHealth : SequenceAction
    {
        public int[] m_aoTargets;
        public float m_fHealAmount;
        public bool bHealHealth;
        public bool bHealShields;
    }
    public class SFXDamageType_HandCannon : SFXDamageType_HeavyPistol
    {
    }
    public class SFXWeapon_Pistol_Carnifex : SFXWeapon_Pistol_Base
    {
    }
    public class SFXWeapon_Pistol_Ivory : SFXWeapon_Pistol_Carnifex
    {
    }
    public class SFXDamageType_Falcon : SFXDamageType
    {
    }
    public class SFXProjectile_Proximity : SFXProjectile_Explosive
    {
        public ScreenShakeStruct HitShake;
        public float ProximityRadius;
    }
    public class SFXProjectile_Falcon : SFXProjectile_Proximity
    {
    }
    public class SFXWeapon_AssaultRifle_Falcon : SFXWeapon_AssaultRifle_Base
    {
        public int ShellSound;
    }
    public class SFXSeqAct_SetPawnShields : SequenceAction
    {
        public float NewShields;
    }
    public class SFXSeqCond_IsPlayerInAtlas : SequenceCondition
    {
        public int PlayerObject;
    }
    public class SFXNav_InteractionHenchOmniTool : SFXNav_InteractionPoint
    {
    }
    public class SFXSeqAct_GrantAccomplishment : SequenceAction
    {
        public NameReference AccomplishmentName;
    }
    public class SFXWeapon_SMG_Locust : SFXWeapon_SMG_Base
    {
    }
    public class SFXSeqAct_RemoveAllCombatZones : SequenceAction
    {
        public int Squad;
    }
    public class SFXSeqAct_SetFocus : SequenceAction
    {
        public int NewFocus;
    }
    public class SFXGameEffect_WeaponMod_MagSizeBonus : SFXGameEffect_WeaponMod
    {
    }
    public class SFXWeaponMod_AssaultRifleMagSize : SFXWeaponMod
    {
    }
    public class SFXGameEffect_WeaponMod_SpareAmmoBonus : SFXGameEffect
    {
    }
    public class SFXNav_InteractionHenchBeckonFront : SFXNav_InteractionPoint
    {
    }
    public class SFXNav_InteractionListening : SFXNav_InteractionPoint
    {
    }
    public class SFXNav_InteractionTalking : SFXNav_InteractionPoint
    {
    }
    public class SFXWeaponMod_ShotgunStability : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_SMGDamage : SFXWeaponMod
    {
    }
    public class SFXSeqAct_ActivateDeactivateCerberusPlaceable : SequenceAction
    {
        public int[] Placeables;
    }
    public class SFXSeqAct_SetMountedGunAIUsable : SequenceAction
    {
        public bool bKickCurrentAIUser;
        public bool bKickCurrentPlayerUser;
    }
    public class BioPlaypenVolumeSubtractive : BioPlaypenVolume
    {
    }
    public class BioSeqAct_SuggestTarget : SequenceAction
    {
        public int m_oPassPawn;
        public int m_oNewTarget;
    }
    public class SFXGameEffect_WeaponMod_AccuracyBonus : SFXGameEffect_WeaponMod
    {
    }
    public class SFXGameEffect_WeaponMod_CrosshairModifier : SFXGameEffect_WeaponMod
    {
    }
    public class SFXGameEffect_WeaponMod_ZoomShakeModifier : SFXGameEffect_WeaponMod
    {
    }
    public class SFXGUI_AssaultRifleZoomReticle : SFXGUI_StandardSniperZoomReticle
    {
    }
    public class SFXWeaponMod_PistolAccuracy : SFXWeaponMod
    {
    }
    public class SFXSeqAct_HenchmanOrderMove : SequenceAction
    {
        public int m_oHenchman;
        public int m_oTarget;
    }
    public class SFXNav_InteractionHenchCrouch : SFXNav_InteractionPoint
    {
    }
    public class SFXNav_InteractionHusk : SFXNav_InteractionPoint
    {
    }
    public class SFXGameEffect_IndoctrinationDeviceBeam : SFXGameEffect
    {
        public Guid CrustTemplateGuid;
        public Vector BeamTargetLocation;
        public NameReference BeamAttachBoneName;
        public int PSC_Beam;
        public int BeamSound;
        public int TargetShield;
        public float UpdateTime;
        public float RegenPerTick;
        public int CE_CrustTemplate;
        public int IndocDevice;
    }
    public class SFXGameEffect_WeaponMod_MeleeDmgBonus : SFXGameEffect_WeaponMod
    {
    }
    public class SFXPlaceable_Reaper : SFXPlaceable
    {
    }
    public class SFXPlaceable_IndoctrinationDevice : SFXPlaceable_Reaper
    {
        public Guid IndocClientEffectGuid;
        public Guid DeviceCrustGuid;
        public int CE_DestructionTemplate;
        public int CE_DeviceCrustTemplate;
        public float UpdateTime;
        public float ShieldUpdateTime;
        public float Range;
        public float WakeRange;
        public float RegenTime;
        public float HealthBracketSize;
        public int WWise_Explosion;
        public int WWise_Activate;
        public int WWise_Deactivate;
        public bool bAwake;
    }
    public class SFXShield_TempBarrier : SFXShield_Biotic
    {
    }
    public class SFXWeaponMod_ShotgunMeleeDamage : SFXWeaponMod
    {
        public int BladeImpactEffect;
        public int BladeImpactSound;
    }
    public class SFXNav_InteractionRavager : SFXNav_InteractionPoint
    {
    }
    public class SFXNav_InteractionUseConsole : SFXNav_InteractionPoint
    {
    }
    public class SFXDamageType_Saber : SFXDamageType_HeavyPistol
    {
    }
    public class SFXWeapon_AssaultRifle_Saber : SFXWeapon_AssaultRifle_Base
    {
    }
    public class BioSeqAct_ShowHint : SequenceAction
    {
        public int srXBoxMessage;
        public int srPCMessage;
        public int srPS3Message;
        public float fDisplayTime;
        public bool bCached;
        public bool ForceVisible;
        public SFXHintPosition Position;
    }
    public class SFXSeqAct_GiveAllianceCredits : SequenceAction
    {
        public int Notification_Name;
        public EME3Level Level;
    }
    public class SFXSeqAct_SetAreaMap : SequenceAction
    {
        public Vector RefPoint1_Image_Px;
        public Vector RefPoint2_Image_Px;
        public int OverrideGroupID;
        public int Ref1;
        public int Ref2;
        public int m_oAreaMapReference;
        public SFXAreaMapLayout Floor;
    }
    public class SFXSeqAct_SetDecoratorMaterial : SequenceAction
    {
        public int Target;
        public int oMaterialInstance;
    }
    public class SFXSeqAct_SetMorphHead : SequenceAction
    {
        public int MorphHead;
    }
    public class SFXSeqCond_IsVolumeEmpty : SequenceCondition
    {
        public int[] TargetVolume;
        public int ClassType;
        public bool bDisregardDeadPawns;
    }
    public class SFXSeqAct_CheckGAWAssetCreditsAvailability : SequenceAction
    {
        public string GAWAssetName;
        public int GAWAssetID;
    }
    public class SFXSeqAct_GiveGAWAssetCredits : SequenceAction
    {
        public string GAWAssetName;
        public int GAWAssetID;
    }
    public class SFXDamageType_Needler : SFXDamageType_AssaultRifle
    {
    }
    public class SFXWeapon_AssaultRifle_Vindicator : SFXWeapon_AssaultRifle_Base
    {
    }
    public class SFXGUI_Mail : SFXGUIMovie
    {
        public int __OnMailGUIExitedDelegate__Delegate;
        public int MailBag;
        public int ActionTokenString;
    }
    public class SFXGUIData_Mail : SFXGameChoiceGUIData
    {
        public MailData[] MailList;
        public NameReference MailName;
        public int srMailTitle;
        public int srMailDescription;
        public float OpenMailDelay;
    }
    public class SFXGUIData_Mail_Citadel : SFXGUIData_Mail
    {
    }
    public class SFXGUIData_Store_Spectre : SFXGUIData_Store
    {
    }
    public class SFXSeqAct_MailGUI : BioSequenceLatentAction
    {
        public int MailDataClass;
        public int m_MailGUIResource;
    }
    public class SFXWeapon_SniperRifle_Mantis : SFXWeapon_SniperRifle_Base
    {
    }
    public class SFXGUIData_Store_Hospital : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Asari : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Hanar : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Human : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Salarian : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Turian : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Volus : SFXGUIData_Store
    {
    }
    public class SFXSeqAct_SetToolTipText : SequenceAction
    {
        public int[] m_aoTargets;
        public ETargetTipText m_TargetTipText;
    }
    public class SFXGUIData_Store_Batarian : SFXGUIData_Store
    {
    }
    public class SFXSeqAct_SlowMotion : BioSequenceLatentAction
    {
        public InterpCurveFloat SlowMotionCurve;
        public float Duration;
        public float StartTime;
        public bool bIsRunning;
    }
    public class SFXSeqAct_ApplyImpulse : SequenceAction
    {
        public Vector Position;
        public NameReference BoneName;
        public float MomentumScale;
        public int Instigator;
        public bool bVelChange;
    }
    public class SFXGameEffect_WeaponMod_StabilityBonus : SFXGameEffect_WeaponMod
    {
    }
    public class SFXWeaponMod_AssaultRifleStability : SFXWeaponMod
    {
    }
    public class SFXSeqAct_AttachWeaponFlashlight : SequenceAction
    {
        public Vector PlayerLightOffset;
        public int TargetPawn;
        public int Flashlight;
        public int PlayerLight;
        public int CE_AdditionalEffect;
        public float AnimationDelay;
        public int ActivateSound;
        public int DeactivateSound;
        public bool bPlayAnimation;
        public bool bActivate;
    }
    public class SFXWeaponMod_PistolStability : SFXWeaponMod
    {
        public NameReference TaserSocketName;
        public int PSC_TaserComponent;
        public float TaserScale;
        public float TaserStunDuration;
        public int TaserImpactEffect;
        public int TaserImpactSound;
        public bool bTaserAttached;
    }
    public class SFXWeaponMod_SniperRifleReloadSpeed : SFXWeaponMod
    {
    }
    public class SFXSeqAct_PulseObjectiveDisplay : SequenceAction
    {
    }
    public class SFXWeaponMod_AssaultRifleAccuracy : SFXWeaponMod
    {
    }
    public class SFXDamageType_GethReaperAttack : SFXDamageType_Default
    {
    }
    public class SFXDamageType_Nuke : SFXDamageType_HeavyWeapon
    {
    }
    public class SFXProjectile_MiniNuke : SFXProjectile_Explosive
    {
        public InterpCurveFloat SlowDown;
    }
    public class SFXSeqEvt_NukeDetonated : SequenceEvent
    {
    }
    public class SFXWeapon_Heavy_Cain : SFXHeavyWeapon
    {
        public int SteamMuzzle;
        public int NukeRumble;
        public int ChargeEffect;
    }
    public class SFXSeqAct_StuntActorTargetting : SeqAct_Latent
    {
        public float AcquireTargetTimer;
        public float TargetAcquisitionFrequency;
        public int StuntActor;
        public int AimVolume;
        public int AimInterpolator;
        public float AimTolerance;
        public float TargetAimSpeed;
        public float NoTargetAimSpeed;
        public int CurrentTarget;
        public float MaxLeftAim;
        public float MaxRightAim;
        public float MaxUpAim;
        public float MaxDownAim;
        public bool bDebug;
        public bool bIsAimingAtTarget;
        public StuntActorTargettingMode mode;
        public ESFXTeam FactionToTarget;
    }
    public class SFXSeqCond_ValidTargetInVolume : SequenceCondition
    {
        public int StuntActor;
        public int AimVolume;
        public float MaxLeftAim;
        public float MaxRightAim;
        public float MaxUpAim;
        public float MaxDownAim;
        public bool bDebug;
        public ESFXTeam FactionToTarget;
    }
    public class SFXSeqAct_WheelController : SFXSeqAct_WheelController_NativeBase
    {
        public int LeftFrontWheel;
        public int LeftMiddleWheel;
        public int LeftRearWheel;
        public int RightFrontWheel;
        public int RightMiddleWheel;
        public int RightRearWheel;
        public int LeftFrontWheelGround;
        public int LeftMiddleWheelGround;
        public int LeftRearWheelGround;
        public int RightFrontWheelGround;
        public int RightMiddleWheelGround;
        public int RightRearWheelGround;
    }
    public class SFXDamageType_KillTrigger : SFXDamageType
    {
    }
    public class SFXWeapon_SniperRifle_Incisor : SFXWeapon_SniperRifle_Base
    {
    }
    public class SFXSeqAct_MakoTurretController : SeqAct_Latent
    {
        public Vector OffsetFromBase;
        public int ActorToYaw;
        public int ActorToPitch;
        public int ActorToFace;
        public float RotationSpeed;
        public float Tolerance;
        public float MaxElevationAngleUp;
        public float MaxElevationAngleDown;
        public float MaxRotationAngle;
        public bool bIsFacingTarget;
    }
    public class SFXSeqAct_SelfShadowOnly : SequenceAction
    {
        public bool bSelfShadowOnly;
    }
    public class SFXSeqAct_ClearParticlePools : SequenceAction
    {
    }
    public class SFXSeqAct_DistanceBasedCameraShake : SequenceAction
    {
        public ScreenShakeStruct CameraShakeProperties;
        public Vector RotAmplitude;
        public Vector RotFrequency;
        public Vector RotSinOffset;
        public Vector LocAmplitude;
        public Vector LocFrequency;
        public Vector LocSinOffset;
        public NameReference ShakeName;
        public int ShakeOrigin;
        public float MinShakeDistance;
        public float MinShakeMultiplier;
        public float TimeDuration;
        public ShakeParams RotParam;
        public ShakeParams LocParam;
        public float FOVAmplitude;
        public float FOVFrequency;
        public float FOVSinOffset;
        public EShakeParam FOVParam;
    }
    public class SFXSeqAct_MoveOnSplineTowardsTarget : SFXSeqAct_MoveOnSpline
    {
        public int ActorToMoveTowards;
    }
    public class SFXAI_GethReaper : SFXAI_Core
    {
        public int ProjectileCount;
        public int ProjectileCountOverride;
        public bool bOverrideProjectileCount;
    }
    public class SFXPawn_GethReaper : SFXPawn
    {
    }
    public class SFXSeqAct_GethReaperAttack : SequenceAction
    {
        public int PowerTarget;
        public int ProjectileCount;
    }
    public class SFXSeqAct_FindPointOnSplineBehindTarget : SequenceAction
    {
        public int SplineOrigin;
        public int TargetToBeBehind;
        public float DegreeTolerance;
        public int LocatedSplineActor;
        public bool bSplineMustBeCloserToOriginThanTarget;
        public bool bDebug;
    }
    public class SFXSeqAct_SetSkelmeshOffset : SequenceAction
    {
        public Vector NewMeshOffset;
    }
    public class SFXSeqAct_SplineRunnerMarine : SFXSeqAct_MoveOnSpline
    {
        public float MinimumLead;
        public float MaximumLead;
        public float MinimumSpeed;
        public float MaximumSpeed;
        public float Acceleration;
        public float AvoidPlayerSpeedModifier;
        public int TargetPlayer;
        public float PlayerCorridorWidth;
        public float PlayerCorridorLength;
        public float TargetSpeed;
        public float SpeedUpdateTimer;
        public float FrequencyOfSpeedUpdates;
        public bool bDebug;
        public bool bRunning;
        public bool bPaused;
    }
    public class SFXSeqAct_SetPortArmsDelay : SequenceAction
    {
        public float Delay;
    }
    public class SFXSeqAct_ToggleHUDWeaponDisplay : SequenceAction
    {
    }
    public class SFXWeapon_Pistol_EndGameCarnifex : SFXWeapon_Pistol_Carnifex
    {
    }
    public class SFXSeqAct_GiveAmmo : SequenceAction
    {
        public int AmmoToGive;
        public bool AllGuns;
    }
    public class SFXSeqAct_SetHeadMaterial : SequenceAction
    {
        public int NewMaterial;
        public int MaterialIndex;
    }
    public class SFXSeqCond_IsCustomPlayer : SequenceCondition
    {
        public int PlayerObject;
    }
    public class SFXSeqAct_DidNotShootAnderson : SequenceAction
    {
    }
    public class SFXSeqAct_EndGameTelemetry : SequenceAction
    {
        public EEndGameOption EndGameOptions;
    }
    public class SFXSeqAct_LoadLegendSave : SequenceAction
    {
    }
    public class SFXSeqAct_ShowCredits : BioSequenceLatentAction
    {
        public int GuiDataReference;
        public int GUI;
    }
    public class SFXSeqAct_RingworldSimulator : BioSequenceLatentAction
    {
        public int m_aPlayer;
        public int m_aBoundA;
        public int m_aBoundB;
        public int m_aWorldbase;
        public float m_fMaxRoll;
        public bool m_bTeleport;
    }
    public class SFXDamageType_Thor : SFXDamageType
    {
    }
    public class SFXWeapon_Pistol_Thor : SFXWeapon_Pistol_Base
    {
        public float ChargeTimePerShot;
        public float MaxProjectileCount;
        public float ThorDamageMultiplier;
        public float ThorRecoilMultiplier;
        public int ChargePlayerFireSound;
        public int SmokeEffect;
        public int ChargeRumble;
    }
    public class SFXWeaponMod_ShotgunAccuracy : SFXWeaponMod
    {
    }
    public class SFXAI_GethRocketTrooper : SFXAI_Cover
    {
        public float MinFireDist;
    }
    public class SFXAI_GethTrooper : SFXAI_Cover
    {
    }
    public class SFXAICmd_Base_GethRocketTrooper : SFXAICmd_Base_Cover
    {
    }
    public class SFXAICmd_Base_GethTrooper : SFXAICmd_Base_Cover
    {
    }
    public class SFXCustomAction_GethEvadeLeft : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_GethEvadeRight : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_GethTrooperMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_GethTrooperOrbitalDrop : SFXCustomAction_SpawnEntrance
    {
    }
    public class SFXDamageType_GethTripMine : SFXDamageType_Default
    {
    }
    public class SFXGameEffect_TripMineDoT : SFXGameEffect_DamageOverTime
    {
        public Guid Guid_DotCrust;
        public int CE_DotCrust;
    }
    public class SFXNav_InteractionHenchStandTyping : SFXNav_InteractionPoint
    {
    }
    public class SFXPawn_GethRocketTrooper : SFXPawn
    {
        public int LF_GethLensFlare;
    }
    public class SFXPawn_GethTrooper : SFXPawn
    {
        public int LF_GethLensFlare;
    }
    public class SFXPlaceable_Geth : SFXPlaceable
    {
    }
    public class SFXPlaceable_GethTripMine : SFXPlaceable_Geth
    {
        public float TriggerRadius;
        public float TargetableRadius;
        public float BlastDamageRadius;
        public float BlastDamage;
        public float BlastMomentum;
        public float UpdateTime;
        public float FuseLength;
        public float SabotageBlastDamageMultiplier;
        public int WWise_Blast;
        public int WWise_Windup;
        public int CE_Explosion;
        public int CE_Glow;
        public float ElectrocuteDuration;
        public bool bIsTripped;
        public bool bReplicatedIsTripped;
    }
    public class SFXSeqEvt_MineTripped : SequenceEvent
    {
    }
    public class SFXWeapon_AI_GethAssaultRifle : SFXWeapon_AssaultRifle_Geth
    {
    }
    public class SFXWeaponMod_SniperRifleAccuracy : SFXWeaponMod
    {
    }
    public class SFXAI_GethHunter : SFXAI_Core
    {
        public float CloakSpeedMod;
        public float HunterAimDelay;
        public float HunterRecloakDelay;
    }
    public class SFXAICmd_Base_GethHunter : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Hunter_Melee : SFXAICmd_Base_Melee
    {
    }
    public class SFXCustomAction_GethHunterBlink : BioCustomAction
    {
        public int BlockingStartCylinder;
        public int BlockingEndCylinder;
        public float MovementSpeed;
    }
    public class SFXDamageType_AI_Shotgun_Geth : SFXDamageType_AI_Shotgun
    {
    }
    public class SFXDamageType_GethShotgun : SFXDamageType_Shotgun
    {
    }
    public class SFXGameEffect_CustomFlag : SFXGameEffect
    {
    }
    public class SFXPawn_GethHunter : SFXPawn
    {
        public int CloakSound;
        public int UnCloakSound;
        public int CloakVocSound;
        public int MITV_CloakFlickerTemplate;
    }
    public class SFXProjectile_GethShotgun : SFXProjectile_Explosive
    {
        public Vector EmitterParameter;
        public float MaxAngleChange;
        public float ChargeAmount;
        public float DamageMultiplier;
        public int ReleaseHighSound;
        public int ReleaseMedSound;
        public int ReleaseLowSound;
        public int ImpactHighSound;
        public int ImpactMedSound;
        public int ImpactLowSound;
        public float HitOnceDuration;
    }
    public class SFXWeapon_Shotgun_BaseCharge : SFXWeapon_Shotgun_Base
    {
    }
    public class SFXWeapon_Shotgun_Geth : SFXWeapon_Shotgun_BaseCharge
    {
        public ScreenShakeStruct FireCameraShake;
        public ScreenShakeStruct ImpactCameraShake;
        public float TopPitchOffset;
        public float TopYawOffset;
        public float BottomPitchOffset;
        public float BottomYawOffset;
        public float InstantFireDamage;
        public float FirstHitDamage;
        public float SecondHitDamage;
        public float ThirdHitDamage;
        public int ImpactRumble;
        public int PlayerFireHighSound;
        public int PlayerFireMedSound;
        public int PlayerFireLowSound;
        public float MaxImpactCameraShake;
        public float MaxImpactRumble;
        public int ChargeRumble;
    }
    public class SFXWeapon_AI_GethShotgun : SFXWeapon_Shotgun_Geth
    {
    }
    public class SFXWeaponMod_SMGAccuracy : SFXWeaponMod
    {
    }
    public class SFXAI_GethPrime : SFXAI_Core
    {
        public Vector2D FireDelayTime;
        public NameReference TurretPower;
        public NameReference DronePower;
        public float TurretSpawnInterval;
        public float TurretPointSearchDist;
        public float DroneSpawnInterval;
        public float MaxFireWaitTime;
    }
    public class SFXAI_GethPrimeShieldDrone : SFXAI_Core
    {
        public float NearbyAllyRange;
        public int CurrentBuffTarget;
    }
    public class SFXAI_GethPrimeTurret : SFXAI_Core
    {
    }
    public class SFXAICmd_Base_GethPrime : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Base_GethPrimeShieldDrone : SFXAICommand_Base_Combat
    {
        public NameReference BuffPower;
        public float BuffRange;
    }
    public class SFXAICmd_Base_GethPrimeTurret : SFXAICommand_Base_Combat
    {
    }
    public class SFXCustomAction_GethPrimeDeathEMP : SFXCustomAction_DeathReaction
    {
        public float EMPRadius;
        public float EMPShieldDamage;
    }
    public class SFXCustomAction_GethPrimeMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_GethPrimeOrbitalDrop : SFXCustomAction_SpawnEntrance
    {
    }
    public class SFXCustomAction_GethPrimeStagger : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_GethPrimeStandard : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_GethPrimeStandardForward : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_GethPrimeStandardLeft : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_GethPrimeStandardRight : SFXCustomAction_DamageReaction
    {
    }
    public class SFXDamageType_CombatDrone : SFXDamageType_Power
    {
    }
    public class SFXDamageType_GethPrimeEMP : SFXDamageType
    {
    }
    public class SFXDamageType_GethPrimePulse : SFXDamageType_Weapon
    {
    }
    public class SFXPawn_GethPrime : SFXPawn
    {
        public int CastDroneVoc;
        public int CastTurretVoc;
        public int LF_GethLensFlare01;
        public int LF_GethLensFlare02;
        public int LF_GethLensFlare03;
    }
    public class SFXPawn_GethPrimeShieldDrone : SFXPawn
    {
        public int __OnDroneKilled__Delegate;
        public Vector DroneColor;
        public Vector DroneColor2;
        public int PSC_Active;
        public int PSC_Spawn;
        public int PSC_Death;
        public bool bCustomColor;
        public bool bCustomColor2;
    }
    public class SFXPawn_GethPrimeTurret : SFXPawn
    {
        public int __OnTurretKilled__Delegate;
        public Guid TurretVFXGuid;
        public int CE_TurretTemplate;
        public int PSC_Death;
        public int TurretPoint;
        public float TurretDuration;
    }
    public class SFXPowerCustomAction_CombatDroneRocket : SFXPowerCustomAction
    {
    }
    public class SFXPowerCustomAction_GethPrimeDroneRocket : SFXPowerCustomAction_CombatDroneRocket
    {
    }
    public class SFXPowerCustomAction_GethPrimeShieldDrone : SFXPowerCustomAction
    {
        public int[] Drones;
        public int MaxDroneCount;
        public float NearbyAllyRange;
    }
    public class SFXPowerCustomAction_GethPrimeTurret : SFXPowerCustomAction
    {
        public int[] Turrets;
        public Vector SpawnLocation;
        public int MaxTurretCount;
    }
    public class SFXProjectile_GethPrimePulse : SFXProjectile_SeekingMissile
    {
        public int TravelStart;
        public int TravelStop;
    }
    public class SFXProjectile_PowerCustomAction_CombatDroneRocket : SFXProjectile_PowerCustomAction_Seeking
    {
    }
    public class SFXProjectile_PowerCustomAction_GethPrimeTurret : SFXProjectile_PowerCustomAction_Seeking
    {
    }
    public class SFXSeqEvt_PrimeSpawnedPet : SequenceEvent
    {
    }
    public class SFXWeapon_AI_GethPrimeRifle : SFXHeavyWeapon
    {
    }
    public class SFXSeqAct_GetHenchmenInSquad : SequenceAction
    {
        public float hench_liara;
        public float hench_kaidan;
        public float hench_ashley;
        public float hench_garrus;
        public float hench_edi;
        public float hench_prothean;
        public float hench_marine;
        public float hench_tali;
        public int Hench1;
        public int Hench2;
    }
    public class SFXSeqAct_SaveGame : SeqAct_Latent
    {
        public EEndGameState FinishState;
    }
    public class SFXSeqEvt_Geth02LaserTargetFired : SequenceEvent
    {
    }
    public class SFXSeqEvt_Geth02LaserTargetPainted : SequenceEvent
    {
    }
    public class SFXWeapon_Heavy_Geth02LaserTarget : SFXWeapon_Heavy_Beam_Base
    {
        public float TimeBeforeRelease;
        public int PaintLocation;
        public int LaserComponent;
        public int StartLaserSound;
        public int StopLaserSound;
        public bool bBeamEnabled;
        public bool bOffline;
    }
    public class SFXGameEffect_WeaponMod_WeightBonus : SFXGameEffect_WeaponMod
    {
    }
    public class SFXWeaponMod_SMGStability : SFXWeaponMod
    {
    }
    public class SFXGameEffect_MovementSpeedBonus : SFXGameEffect
    {
    }
    public class SFXGameEffect_ShieldRegenBonus : SFXGameEffect
    {
    }
    public class SFXGameEffect_WeaponDamageBonus : SFXGameEffect_PassiveWeaponDamageBonus
    {
    }
    public class SFXAI_CombatDrone : SFXAI_Core
    {
        public Vector2D MoveTime;
        public float TotalMoveTime;
        public float MoveTimeout;
    }
    public class SFXAI_GethPyro : SFXAI_Cover
    {
        public float TankDegradeThreshold;
        public float TankDegradeInterval;
        public float ExplosionRadius;
        public float ExplosionDamage;
    }
    public class SFXAI_ProtectorDrone : SFXAI_Core
    {
        public Vector2D MoveTime;
        public float TotalMoveTime;
        public float MoveTimeout;
    }
    public class SFXAICmd_Base_CombatDrone : SFXAICommand_Base_Combat
    {
        public NameReference ZapPower;
        public NameReference ShockPower;
        public NameReference RocketPower;
        public NameReference PowerToUse;
        public float IdealMaxRangeToTarget;
        public float IdealMinRangeToTarget;
        public float IdealRangeToTarget;
    }
    public class SFXAICmd_Base_GethPyro : SFXAICmd_Base_Cover
    {
        public Vector2D MoveTimeoutInterval;
    }
    public class SFXAICmd_Base_ProtectorDrone : SFXAICommand_Base_Combat
    {
        public NameReference ZapPower;
        public NameReference PowerToUse;
        public int oPower;
        public int oPlayer;
        public float IdealMaxRangeToTarget;
        public float IdealMinRangeToTarget;
        public float IdealRangeToTarget;
    }
    public class SFXCustomAction_CustomLoopingInteraction : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_HenchBeckonFront : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_HenchBeckonRear : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXCustomAction_HenchCrouch : SFXCustomAction_InteractionPointAnim
    {
    }
    public class SFXCustomAction_HenchInteractLow : SFXCustomAction_LoopingInteraction
    {
        public Guid OmniToolGuid;
        public int OmniToolVFX;
    }
    public class SFXCustomAction_HenchmanMelee : BioCustomAction
    {
        public BodyStance BS_Rifle1;
        public BodyStance BS_Rifle2;
        public BodyStance BS_Rifle3;
        public BodyStance BS_Pistol1;
        public BodyStance BS_Pistol2;
        public BodyStance BS_Pistol3;
        public int Rifle1Timeline;
        public int Rifle2Timeline;
        public int Rifle3Timeline;
        public int Pistol1Timeline;
        public int Pistol2Timeline;
        public int Pistol3Timeline;
        public bool bPistolMelee;
        public HenchMeleeStage MeleeStage;
    }
    public class SFXCustomAction_HenchOmniTool : SFXCustomAction_LoopingInteraction
    {
        public Guid OmniToolGuid;
        public int OmniToolVFX;
    }
    public class SFXCustomAction_HenchOmniToolCrouch : SFXCustomAction_LoopingInteraction
    {
        public Guid OmniToolGuid;
        public int OmniToolVFX;
    }
    public class SFXCustomAction_HenchRollBackward : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_HenchRollForward : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_HenchRollLeft : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_HenchRollRight : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_HenchStandIdle : SFXCustomAction_InteractionPointAnim
    {
    }
    public class SFXCustomAction_HenchStandTyping : SFXCustomAction_LoopingInteraction
    {
    }
    public class SFXDamageType_CombatDroneAttack : SFXDamageType_Power
    {
    }
    public class SFXDamageType_CombatDroneAttackImproved : SFXDamageType_Power_Ragdoll
    {
    }
    public class SFXDamageType_CryoExplosion : SFXDamageType_Power_Freeze
    {
    }
    public class SFXDamageType_ElectricCombo : SFXDamageType_Power
    {
    }
    public class SFXDamageType_EnergyDrainRobot : SFXDamageType_Power_Electrocute
    {
    }
    public class SFXDamageType_EnergyDrain : SFXDamageType_EnergyDrainRobot
    {
    }
    public class SFXDamageType_FireExplosion : SFXDamageType_Power_Fire
    {
    }
    public class SFXDamageType_FlameThrower : SFXDamageType_Weapon
    {
    }
    public class SFXDamageType_GethPyroTankExplosion : SFXDamageType_Power_Ragdoll
    {
    }
    public class SFXDamageType_Incinerate : SFXDamageType_Power_Fire
    {
    }
    public class SFXDamageType_Minigun : SFXDamageType_Gib
    {
    }
    public class SFXDamageType_ProtectorDrone : SFXDamageType_Power
    {
    }
    public class SFXDamageType_SabotageExplode : SFXDamageType_Power_Electrocute
    {
    }
    public class SFXGameEffect_AIHacking : SFXGameEffect
    {
        public Guid TargetCrustGuid;
        public int OriginalTeam;
        public int Caster;
        public int OwnerPawn;
        public int OwnerAI;
        public int CE_TargetCrust;
        public int Power;
        public bool bExplodeOnDeath;
        public bool bExploded;
    }
    public class SFXGameEffect_CombatDroneZapChain : SFXGameEffect
    {
        public int[] AffectedActors;
        public int DamageType;
        public Vector DamageOrigin;
        public NameReference BeamAttachBoneName;
        public int NumChargesLeft;
        public float MaxJumpDistance;
        public float JumpDelay;
        public float JumpTimer;
        public float IncapacitateChance;
        public int Target;
        public int Power;
        public int Caster;
        public float Damage;
        public float Force;
        public int LastHitActor;
        public int PSC_Beam;
        public int ImpactTemplate;
        public int CE_TargetCrustTemplate;
        public int ImpactSound;
        public int BeamSound;
        public float CrustDuration;
        public bool bEffectDone;
        public bool bBeamActive;
    }
    public class SFXGameEffect_CryoFreeze : SFXGameEffect_WeldPhysics
    {
        public int __OnFrozenPawnDied__Delegate;
        public Guid FreezeCrustGuid;
        public float ThawTime;
        public float FrozenPhysicsDamageIncrease;
        public int PhysicsDamageMultiplier;
        public int CE_FreezeTemplate;
        public int CE_DeathEffect;
        public int OwnerPawn;
        public int FrozenDeathSound;
        public bool bThawStarted;
        public bool bOwnerDied;
        public bool bPlayFrozenDeathSound;
    }
    public class SFXGameEffect_DelayedCryoFreeze : SFXGameEffect
    {
        public int __OnFrozenPawnDied__Delegate;
        public Guid FreezeCrustGuid;
        public int CE_DeathEffect;
        public int CE_FreezeTemplate;
        public int FrozenDeathSound;
        public int FreezingSound;
        public int OwnerPawn;
        public int Power;
        public bool bPlayFrozenDeathSound;
        public bool bOwnerDied;
    }
    public class SFXGameEffect_ElectricComboBeam : SFXGameEffect
    {
        public NameReference BeamAttachBoneName;
        public int SourceActor;
        public int PSC_Beam;
        public int CE_ImpactTemplate;
        public int CE_CrustTemplate;
        public float CrustDuration;
        public int BeamSound;
        public bool bBeamActive;
    }
    public class SFXGameEffect_FireDamageOverTime : SFXGameEffect_DamageOverTime
    {
        public float TotalDamageDone;
        public float PowerComboDamageThreshold;
        public int ComboPower;
        public bool bComboEffectApplied;
        public bool bCanCauseCombo;
    }
    public class SFXGameEffect_PowerBonus_Cooldown : SFXGameEffect_PowerBonus
    {
    }
    public class SFXGameEffect_HenchmanArmorBonus_PowerCooldownBonus : SFXGameEffect_PowerBonus_Cooldown
    {
    }
    public class SFXGameEffect_HenchmenIgnorePawn : SFXGameEffect
    {
    }
    public class SFXGameEffect_IgnorePawn : SFXGameEffect
    {
        public bool bAffectHenchmen;
    }
    public class SFXGameEffect_PowerCombo_Cryo : SFXGameEffect_PowerCombo
    {
        public Vector2D FreezeDuration;
        public float ResistanceDurationMultiplier;
        public int CE_HalfFrozenTemplate;
        public float SpeedReduction;
    }
    public class SFXGameEffect_PowerCombo_Electric : SFXGameEffect_PowerCombo
    {
        public float BeamDuration;
    }
    public class SFXGameEffect_PowerCombo_Fire : SFXGameEffect_PowerCombo
    {
        public Vector2D DamagePerSecond;
        public Vector2D DOTDuration;
        public int PS_FlameEffect;
        public int NumFlameEffects;
        public int NumFlameEffectsMP;
    }
    public class SFXGameEffect_TechPowerDamageTakenBonus : SFXGameEffect
    {
    }
    public class SFXGameEffect_WeaponSabotage : SFXGameEffect
    {
        public int DamageType;
        public Guid WeaponHackGuid;
        public int CE_WeaponHackTemplate;
        public int CE_WeaponHackTemplate_Cannibal;
        public int CE_WeaponExplodeTemplate;
        public int CE_WeaponExplodeTemplate_Cannibal;
        public int Power;
        public float ElectricComboDuration;
        public int ExplosionSound;
    }
    public class SFXNav_InteractionHenchCustom : SFXNav_InteractionPoint
    {
        public NameReference StartAnim;
        public NameReference LoopAnim;
        public NameReference EndAnim;
    }
    public class SFXPawn_CombatDroneBase : SFXPawn
    {
        public int __OnDroneKilled__Delegate;
        public ReplicatedDroneCreator ReplicatedDroneCreatorInfo;
        public int Caster;
        public bool bIsClientSideInitialized;
    }
    public class SFXPawn_CombatDrone : SFXPawn_CombatDroneBase
    {
        public Guid DroneVFXGuid;
        public Vector ClientEffectParameters;
        public int CE_DroneTemplate;
        public int CE_PlayerDroneTemplate;
        public int SpawnSound;
        public int DeathSound;
        public int LoopingSound;
        public int StopLoopingSound;
        public bool bDroneVFXStopped;
    }
    public class SFXPawn_GethPyro : SFXPawn
    {
        public PyroFlameLeaks[] FlameLeaks;
        public int TankPunctureSound;
        public int CE_TankExplosion;
        public int ExplosionSound;
        public int LF_GethLensFlare;
    }
    public class SFXPawn_ProtectorDroneBase : SFXPawn
    {
        public int __OnDroneKilled__Delegate;
        public ReplicatedDroneCreator ReplicatedDroneCreatorInfo;
        public int Caster;
    }
    public class SFXPawn_ProtectorDrone : SFXPawn_ProtectorDroneBase
    {
        public Guid DroneVFXGuid;
        public Vector ClientEffectParameters;
        public int CE_DroneTemplate;
        public int SpawnSound;
        public int DeathSound;
        public int LoopingSound;
        public int StopLoopingSound;
        public bool bDroneVFXStopped;
    }
    public class SFXPawn_Tali : SFXPawn_Henchman
    {
    }
    public class SFXPowerCustomAction_AIHacking : SFXPowerCustomAction
    {
        public PowerData ExplosionDamage;
        public PowerData ExplosionForce;
        public PowerData ExplosionRadius;
        public PowerData WeaponExplosionDamage;
        public PowerData TimeHackedRobotIgnored;
        public float[] ShieldStrength;
        public int[] m_oCurrentHackedTargets;
        public NameReference[] UnaffectedPawns;
        public AreaEffectParameters ExplosionParameters;
        public float WeaponHackDuration;
        public int MaxHackedRobots;
        public float Evolve_DurationBonus;
        public float Evolve_CooldownBonus;
        public float Evolve_BerserkDamageBonus;
        public float Evolve_BerserkMoveSpeedBonus;
        public float Evolve_WeaponExplosionDamageBonus;
        public float Evolve_TechPowerDamageBonus;
        public float Evolve_TechPowerDuration;
        public int ExplosionTemplate;
        public int CE_RobotHackTemplate;
        public int CE_RobotSuperHackTemplate;
        public int CE_CustomImpactTemplate;
        public bool bRobotHacked;
    }
    public class SFXPowerCustomAction_CombatDroneBase : SFXPowerCustomAction
    {
        public int DroneClass;
        public int DroneAIClass;
        public float DroneSpawnOffset;
    }
    public class SFXPowerCustomAction_CombatDrone : SFXPowerCustomAction_CombatDroneBase
    {
        public PowerData DroneZapCooldown;
        public PowerData DroneShields;
        public PowerData DroneDamage;
        public PowerData ExplosionDamage;
        public PowerData ExplosionRadius;
        public PowerData ExplosionForce;
        public PowerData RocketCooldown;
        public PowerData RocketDamage;
        public PowerData RocketForce;
        public PowerData RocketRadius;
        public PowerData ShockCooldown;
        public PowerData ShockDamage;
        public PowerData ShockForce;
        public PowerData ShockRadius;
        public AreaEffectParameters ExplosionParameters;
        public Vector DroneDiedLocation;
        public int Evolve_NumExtraTargets;
        public float Evolve_DamageBonus;
        public float Evolve_ShieldBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_ShieldBonus2;
        public float Evolve_ShieldDamageBonus;
        public int Drone;
        public int NotRecommended_DroneDeployed;
        public int CE_DroneExplosionTemplate;
        public int CE_DroneDeathTemplate;
        public int DroneExplosionSound;
        public int DroneDeathSound;
        public float NonCombatTimeout_Length;
        public float NonCombatTimeout_UpdateFrequency;
    }
    public class SFXPowerCustomAction_CombatDroneShock : SFXPowerCustomAction
    {
    }
    public class SFXPowerCustomAction_CombatDroneZap : SFXPowerCustomAction
    {
        public float MaxJumpDistance;
        public float JumpDelay;
        public float IncapacitateChance;
        public int NumCharges;
    }
    public class SFXPowerCustomAction_EnergyDrain : SFXPowerCustomAction
    {
        public PowerData ShieldsRestored;
        public PowerData Evolve_DamageReductionDuration;
        public float OrganicDamageMultiplier;
        public float Evolve_DamageBonus1;
        public float Evolve_DamageBonus2;
        public float Evolve_RadiusBonus;
        public float Evolve_CooldownBonus;
        public float Evolve_ShieldsRestoredBonus;
        public float Evolve_DamageReductionAmount;
        public float ShieldRegenPenalty;
        public float ShieldRegenPenaltyDuration;
        public float MachineHealth;
        public float EnergyShields;
        public float ElectricComboDuration;
        public int WwiseHitEvent;
        public int CE_ExplosionTemplate;
        public int CE_ArmorCrustTemplate;
        public bool bDrainedTarget;
    }
    public class SFXPowerCustomAction_HenchmanPassive : SFXPowerCustomAction_PassivePower
    {
        public PowerData HealthShieldBonus;
        public PowerData WeaponDamageBonus;
        public PowerData PowerDamageBonus;
        public PowerData PowerCooldownBonus;
    }
    public class SFXPowerCustomAction_ProtectorDroneBase : SFXPowerCustomAction
    {
        public int DroneClass;
        public int DroneAIClass;
        public float DroneSpawnOffset;
    }
    public class SFXPowerCustomAction_ProtectorDrone : SFXPowerCustomAction_ProtectorDroneBase
    {
        public PowerData DroneDamage;
        public int Evolve_NumExtraTargets;
        public float Evolve_DamageBonus;
        public float Evolve_ImpactRadiusBonus;
        public float Evolve_FrequencyBonus;
        public float Evolve_DurationBonus;
        public float Evolve_ImpactRadiusBonus2;
        public float Evolve_IncapacitateChance;
        public float ZapCooldown;
        public int Drone;
        public int CE_DroneExplosionTemplate;
        public int DroneDeathSound;
        public float NonCombatTimeout_Length;
        public float NonCombatTimeout_UpdateFrequency;
    }
    public class SFXPowerCustomAction_TaliPassive : SFXPowerCustomAction_HenchmanPassive
    {
        public float Evolve_HealthShieldBonus;
        public float Evolve_WeaponDamageBonus;
        public float Evolve_PowerRechargeSpeedBonus;
        public float Evolve_SquadTechRechargeSpeedBonus;
        public float Evolve_TechForceBonus;
        public float Evolve_TechDurationBonus;
        public float Evolve_DroneCooldownBonus;
    }
    public class SFXRumble_Power_CryoCombo : SFXRumble_Power
    {
    }
    public class SFXRumble_Power_ElectricCombo : SFXRumble_Power
    {
    }
    public class SFXRumble_Power_FireCombo : SFXRumble_Power
    {
    }
    public class SFXSeqAct_SetupGeth02LaserWeapon : SequenceAction
    {
        public int Weapon;
        public int TargetPoint;
    }
    public class SFXShake_Power_CryoCombo : SFXShake_Power
    {
    }
    public class SFXShake_Power_ElectricCombo : SFXShake_Power
    {
    }
    public class SFXShake_Power_FireCombo : SFXShake_Power
    {
    }
    public class SFXShield_Energy_Player : SFXShield_Player
    {
    }
    public class SFXWeapon_AI_GethFlameThrower : SFXWeapon_Heavy_Beam_Base
    {
        public int WindUpSound;
        public int WindDownSound;
    }
    public class SFXWeapon_Heavy_MiniGun : SFXHeavyWeapon
    {
        public int PowerUpSound1;
        public int PowerDownSound1;
        public int SteamMuzzle;
        public float MinROF;
        public float RampTime;
        public bool bIsHot;
    }
    public class SFXVehicle_GethMountedGun_Content : SFXVehicle_MountedGun_Content
    {
    }
    public class SFXWeapon_Heavy_Geth02MountedGun : SFXWeapon_Heavy_MountedGun
    {
    }
    public class BioSeqAct_CancelHint : SequenceAction
    {
    }
    public class SFXSeqAct_ReaperFireTrace : BioSequenceLatentAction
    {
        public int[] ImpactActors;
        public Vector TargetLocation;
        public Rotator TargetRotation;
        public int BeamSource;
        public int PlayerPawn;
        public float LeadDistance;
        public float PassTime;
        public float Acceleration;
        public float StartVelocity;
        public float MaxVelocity;
        public float TurnLimit;
        public float TraceNearLimit;
        public float TraceFarLimit;
        public float CurrentVelocity;
        public float AimSpeed;
        public float CurrentTimePassed;
        public bool bConstantTurnSpeed;
        public bool bDebug;
    }
    public class SFXSeqAct_SetGeth02LaserWeaponDisabled : SequenceAction
    {
        public int[] Weapons;
        public bool bDisabled;
    }
    public class SFXDamageType_VehicleMissile : SFXDamageType_HeavyWeapon
    {
    }
    public class SFXProjectile_VehicleMissile : SFXProjectile_SeekingMissile
    {
    }
    public class SFXWeapon_Heavy_VehicleMissileLauncher : SFXHeavyWeapon
    {
    }
    public class SFXGUI_GethZoomReticle : SFXGUI_StandardSniperZoomReticle
    {
    }
    public class SFXWeapon_SniperRifle_Javelin : SFXWeapon_SniperRifle_Base
    {
    }
    public class SFXNav_InteractionHenchBeckonRear : SFXNav_InteractionPoint
    {
    }
    public class SFXWeaponMod_ShotgunReloadSpeed : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_SMGMagSize : SFXWeaponMod
    {
    }
    public class SFXSeqAct_SetMultipleStreamingStates : BioSeqAct_SetStreamingState
    {
        public NameReference[] StatesToSet;
        public NameReference[] StatesToUnset;
    }
    public class SFXSeqAct_CombatMusicManager : BioSequenceLatentAction
    {
        public int[] m_aoSquads;
        public float m_fTimeSinceUpdate;
        public float m_fTimeSinceMusicChange;
        public int m_nLowMusicID;
        public int m_nMediumMusicID;
        public int m_nHighMusicID;
        public float m_fUpdateTime;
        public int m_nIntensityIncreaseConsistency;
        public int m_nIntensityDecreaseConsistency;
        public float m_fLowIntensityThreshold;
        public float m_fHighIntensityThreshold;
        public float m_fCloseDistance;
        public float m_fFarDistance;
        public float m_fCloseWeighting;
        public float m_fFarWeighting;
        public float m_fOccludedNearWeighting;
        public float m_fOccludedMediumWeighting;
        public float m_fOccludedFarWeighting;
        public float m_fRenderTime;
        public float m_fBossWeighting;
        public float m_fSubBossWeighting;
        public float m_fEliteWeighting;
        public float m_fMinionWeighting;
        public float m_fShieldsDownWeighting;
        public float m_fInjuredWeighting;
        public float m_fInjuredThreshold;
        public int m_nLastMusic;
        public int m_nMusicConsistency;
        public bool m_bShowGlobalWeightingAndEvents;
        public bool m_bShowIndividualWeighting;
    }
    public class SFXSeqAct_SetWeaponClass : SequenceAction
    {
        public bool bAssaultRifle;
        public bool bPistol;
        public bool bSMG;
        public bool bSniperRifle;
        public bool bShotgun;
        public bool bHeavyWeapon;
    }
    public class SFXWeapon_SMG_Hurricane : SFXWeapon_SMG_Base
    {
        public float WindUpDelay;
        public int PlayerWindUpSound;
        public int WindUpSound;
        public int PlayerWindDownSound;
        public int WindDownSound;
    }
    public class SFXWeaponMod_PistolMagSize : SFXWeaponMod
    {
    }
    public class SFXRumble_ConsumableRocket : SFXRumble_Power
    {
    }
    public class SFXDamageType_ParticleBeam : SFXDamageType_HeavyWeapon
    {
    }
    public class SFXDamageType_AntiMatRifle : SFXDamageType_SniperRifle
    {
    }
    public class SFXWeapon_SniperRifle_Viper : SFXWeapon_SniperRifle_Base
    {
    }
    public class SFXProjectile_DummyPower : SFXProjectile_Explosive
    {
        public int Origin;
        public int Target;
        public int ReleaseSound;
        public float TimeAlive;
        public float MaxAngleChange;
        public bool SeekingProjectile;
    }
    public class SFXProjectile_DummyPower_Warp : SFXProjectile_DummyPower
    {
    }
    public class SFXSeqAct_DummyPowerCast : SequenceAction
    {
        public int DummyPower;
        public int Origin;
        public int Target;
    }
    public class SFXDamageType_Blackstar : SFXDamageType
    {
    }
    public class SFXProjectile_Blackstar : SFXProjectile_Explosive
    {
        public InterpCurveFloat SlowDown;
    }
    public class SFXWeapon_Heavy_Blackstar : SFXHeavyWeapon
    {
        public float ChargeTimePerShot;
        public int ChargeEffect;
        public int SteamMuzzle;
        public int ChargeRumble;
        public float DropDelay;
    }
    public class SFXDamageType_EngineerHeavyMelee : SFXDamageType_HeavyMelee
    {
    }
    public class SFXDamageType_FlameThrower_Player : SFXDamageType_HeavyWeapon
    {
    }
    public class SFXDamageType_ImprovedIncinerate : SFXDamageType_Incinerate
    {
    }
    public class SFXDamageType_InfernoGrenade : SFXDamageType_Power_Fire
    {
    }
    public class SFXDamageType_ImprovedInfernoGrenade : SFXDamageType_InfernoGrenade
    {
    }
    public class SFXDamageType_ImprovedInfernoGrenadeRagdoll : SFXDamageType_ImprovedInfernoGrenade
    {
    }
    public class SFXDamageType_IncendiaryAmmo : SFXDamageType_Power_Fire
    {
    }
    public class SFXDamageType_IncendiaryAmmoImproved : SFXDamageType_IncendiaryAmmo
    {
    }
    public class SFXDamageType_InfernoGrenadeRagdoll : SFXDamageType_InfernoGrenade
    {
    }
    public class SFXWeapon_Heavy_Flamethrower_Player : SFXWeapon_Heavy_Beam_Base
    {
        public int SteamMuzzle;
        public int PowerUpSound1;
        public int PowerDownSound1;
        public int ImpactSound1;
        public float MinROF;
        public float RampTime;
    }
    public class SFXSeqEvt_StartExtractionShuttle : SequenceEvent
    {
    }
    public class SFXSeqAct_SetPOIUseRange : SequenceAction
    {
        public int[] m_aoTargets;
        public float m_fRange;
    }
    public class SFXSeqAct_ResetHenchmenHold : SequenceAction
    {
    }
    public class SFXGUI_Training : SFXGUIMovie
    {
        public int[] OnRequestActionCallbacks;
        public int __OnRequestExitCallback__Delegate;
        public int __OnRequestActionDelegate__Delegate;
        public int TrainingData;
    }
    public class SFXGUIData_Mail_Normandy : SFXGUIData_Mail
    {
    }
    public class SFXGUIData_Training : SFXGameChoiceGUIData
    {
        public TrainingItemData[] TrainingItemArray;
        public string DefaultImage;
        public NameReference TrainingName;
        public int srTrainingTitle;
        public int srTrainingDescription;
        public int srDefaultAButtonText;
        public int srDefaultBButtonText;
    }
    public class SFXSeqAct_TerminalGUI : BioSequenceLatentAction
    {
        public int TerminalDataClass;
        public int ExitRequestPin;
        public int m_TerminalGUIResource;
    }
    public class SFXSeqAct_TrainingGUI : BioSequenceLatentAction
    {
        public int TrainingDataClass;
        public int ExitRequestPin;
        public int m_TrainingGUIResource;
    }
    public class SFXSeqAct_SetStreamStateHench : BioSeqAct_SetStreamingState
    {
        public StreamData[] StreamDataArray;
        public int TouchedVolumeID;
        public bool LogStreaming;
    }
    public class SFXGUIData_Elevator_Normandy : SFXGUIData_Elevator
    {
    }
    public class SFXSeqAct_ShowPersonalizationUI : BioSequenceLatentAction
    {
        public string m_sCreationResource;
        public int m_oCreationReferenced;
        public bool m_bComplete;
    }
    public class SFXSeqAct_CopyActorHeadAndSkinTone : SequenceAction
    {
        public int SourceActor;
        public bool HidePlayerScars;
    }
    public class SFXSeqAct_DreamSequence : SequenceAction
    {
        public int Player;
        public float TimeDilation;
        public bool bEnable;
    }
    public class SFXGalaxyMapDestroyedFuelDepot : BioPlanet
    {
        public float FuelValue;
        public int AwardedFuelString;
        public EFuelAwardType FuelAwardType;
    }
    public class SFXGalaxyMapMassRelay : SFXSystemLevelObject
    {
        public bool AutoPlaced;
    }
    public class SFXGalaxyMapPlanetAppearance : SFXGalaxyMapObjectAppearanceBase
    {
        public WwiseAudioPair ScanAudio;
        public int ScanParticleSystem;
    }
    public class SFXGalaxyMapReaper : SFXSystemLevelObject
    {
        public Vector AppearEffectParameters;
        public Vector DisappearEffectParameters;
        public float Acceleration;
        public float MaxSpeed;
        public float ScanParticleSystemRadius;
        public int AppearEffect;
        public int DisappearEffect;
    }
    public class SFXPlanetFeatureGAWAsset : SFXPlanetFeature
    {
        public string AssetName;
        public NameReference DiscoveredEvent;
        public NameReference DiscoveredEventParam;
        public int AssetID;
    }
    public class SFXSeqCond_GalaxyMapOpen : SequenceCondition
    {
        public int Player;
    }
    public class SFXSeqAct_CheckForNewGAWAssets : SequenceAction
    {
        public NameReference MilitaryGAWAssetCountPV;
    }
    public class SFXSeqAct_GalaxyAtWar : BioSequenceLatentAction
    {
        public int m_GalaxyAtWarGUIResource;
        public int m_WarAssetsGUIResource;
    }
    public class SFXSeqAct_SetEndGameOptions : SequenceAction
    {
        public int BrainPlotStateID;
        public bool bEvaluateEndGameAchievement;
    }
    public class SFXGameChoiceGUIData_StoreData_BonusPowers : SFXGUIData_Store
    {
    }
    public class SFXGameChoiceGUIData_StoreData_TalentReset : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Mail_ShadowBroker : SFXGUIData_Mail
    {
    }
    public class SFXGUIData_Store_Intel : SFXGUIData_Store
    {
    }
    public class SFXGameChoiceGUIData_StoreData_Normandy : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_WeaponUpgrades : SFXGUIData_Store
    {
    }
    public class SFXNav_InteractionTalking3 : SFXNav_InteractionPoint
    {
    }
    public class SFXDamageType_Shockwave : SFXDamageType_Power
    {
    }
    public class SFXProjectile_DummyPower_Shockwave : SFXProjectile_DummyPower
    {
        public int CE_ShockwaveTemplate;
        public float TimeBetweenImpacts;
        public float TimeToNextImpact;
        public float FirstImpactDelay;
        public int NumShockwaves;
        public int ShockwaveSound;
    }
    public class SFXProjectile_DummyPower_Throw : SFXProjectile_DummyPower
    {
    }
    public class SFXDamageType_Pull_DoT : SFXDamageType_Pull
    {
    }
    public class SFXGameEffect_Pull : SFXGameEffect_PhysicsPower
    {
        public Vector ForceVector;
        public Vector Direction;
        public NameReference BoneName;
        public float Force;
        public int Caster;
        public int OwnerPawn;
        public float MinimumVelocity;
        public float MinimumVelocityForceMult;
        public float minHeightForBodyFallSound;
        public float DamagePerSecond;
        public float TargetExtraDamage;
    }
    public class SFXProjectile_DummyPower_Pull : SFXProjectile_DummyPower
    {
        public float PullDuration;
        public float PullForce;
        public int CE_PullCrustTemplate;
    }
    public class SFXNav_InteractionTalking2 : SFXNav_InteractionPoint
    {
    }
    public class SFXSeqAct_DetermineJackBonusWeapon : SequenceAction
    {
        public BonusWeaponOption[] WeaponOptions;
    }
    public class SFXSeqAct_BreakAtlasCockpit : SequenceAction
    {
    }
    public class SFXSeqAct_IsTreasureUnlocked : SequenceAction
    {
        public int Treasure_Weapon;
        public int Treasure_WeaponMod;
        public bool bCheckWeapon;
        public bool bCheckWeaponMod;
        public bool bCheckArmor;
        public EArmorTreasurePiece Treasure_Armor;
    }
    public class SFXSeqAct_ToggleTutorialTracking : SequenceAction
    {
    }
    public class SFXGUI_OpeningTitles : SFXGUIMovie
    {
        public int __TitleSequenceCompleteCallback__Delegate;
        public int m_oMovieResource;
    }
    public class SFXSeqAct_ShowOpeningTitles : BioSequenceLatentAction
    {
    }
    public class BioSeqAct_ShowIntroText : BioSequenceLatentAction
    {
        public int srText;
        public int m_oIntroTextReferenced;
    }
    public class SFXAI_TutorialHusk : SFXAI_Husk
    {
    }
    public class SFXDamageType_ConcussiveShot : SFXDamageType_Power
    {
    }
    public class SFXDamageType_ConcussiveShot_Incendiary : SFXDamageType_ConcussiveShot
    {
    }
    public class SFXDamageType_ConcussiveShot_NoRagdoll : SFXDamageType_ConcussiveShot
    {
    }
    public class SFXDamageType_FragGrenade : SFXDamageType_Power
    {
    }
    public class SFXDamageType_FragGrenade_Armor : SFXDamageType_FragGrenade
    {
    }
    public class SFXDamageType_FragGrenade_Shields : SFXDamageType_FragGrenade
    {
    }
    public class SFXGameEffect_AmmoPower : SFXGameEffect
    {
        public int HologramTemplate;
        public int IconTemplate;
        public float BulletsPerSecond;
        public int OwnerWeapon;
        public int OwnerPawn;
        public int NormalImpactSound;
        public int WeaponFireSound;
        public int Power;
        public bool AddedByPlayer;
        public bool bInCinematic;
    }
    public class SFXGameEffect_ConstraintDmgBonus : SFXGameEffect
    {
    }
    public class SFXGameEffect_DefensiveArmor : SFXGameEffect_DamageTakenBonus
    {
        public Guid GUID_ArmorCrustTemplate;
        public int CE_ArmorCrustTemplate;
        public int Power;
        public bool bArmorVFXOn;
    }
    public class SFXGameEffect_FireDeath : SFXGameEffect_DeathEffect
    {
    }
    public class SFXGameEffect_IncendiaryAmmo : SFXGameEffect_AmmoPower
    {
        public int DamageType;
        public float AreaExplosionChance;
        public float Damage;
        public float DOTDuration;
        public int PS_FlameEffect;
        public int PS_FireSpreadEffect;
        public float SpareAmmoBonus;
        public float HeadShotDamageBonus;
        public float LastTimeFlameSpawned;
        public float MinTimeBetweenFlameSpawns;
        public bool bAreaExplosion;
    }
    public class SFXGameEffect_MeleeDamageBonus : SFXGameEffect_PowerBonus
    {
    }
    public class SFXGameEffect_SpareAmmo : SFXGameEffect
    {
        public int AmmoIncrease;
    }
    public class SFXGameEffect_WeaponVFXChange : SFXGameEffect
    {
        public int Tracer;
        public int oMuzzleVFX;
        public int oMuzzleLoopVFX;
        public int oImpactVFX;
        public int OwnerWeapon;
        public bool bModifyTracer;
        public bool bModifyMuzzleFlash;
        public bool bModifyImpactVFX;
    }
    public class SFXPawn_Anderson : SFXPawn_Henchman
    {
    }
    public class SFXPawn_TutorialHusk : SFXPawn_Husk
    {
    }
    public class SFXPowerCustomAction_AmmoPower : SFXPowerCustomAction_AmmoPowerBase
    {
        public int WeaponPowerEffectClass;
        public int ConcussiveShotDamageType;
        public Guid OmniToolGuid;
        public int oTracer;
        public int oImpactVFX;
        public int oMuzzleVFX;
        public int oMuzzleLoopVFX;
        public float SquadEffectiveness;
        public int NotRecommended_HeavyWeaponEquipped;
        public int CE_ConcussiveShotImpact;
        public int CE_ConcussiveShotProjectile;
        public int ConcussiveShotImpactSound;
        public int LoadAmmoPowerSound;
        public int HenchmanLoadAmmoPowerSound;
        public int CE_OmniTool;
        public float OmniToolDuration;
        public int DelayedSetWeaponPowerTarget;
        public bool bModifyTracer;
        public bool bModifyImpactVFX;
        public bool bModifyMuzzle;
    }
    public class SFXPowerCustomAction_AndersonPassive : SFXPowerCustomAction_HenchmanPassive
    {
        public float Evolve_WeaponDamageBonus;
        public float Evolve_HealthShieldBonus;
        public float Evolve_PowerDamageBonus;
        public float Evolve_SniperRifleDamageBonus;
        public float Evolve_SquadDamageBonus;
        public float Evolve_AssaultRifleDamageBonus;
    }
    public class SFXPowerCustomAction_ConcussiveShot : SFXPowerCustomAction
    {
        public float Evolve_DoTDamage;
        public float Evolve_DoTDuration;
        public float Evolve_DamageBonus;
        public float Evolve_RadiusBonus;
        public float Evolve_CooldownBonus;
        public float Evolve_FreezeComboBonus;
        public float Evolve_ForceBonus;
        public int AmmoPower;
        public int CE_NormalImpact;
        public int MuzzleEffect;
        public float MuzzleEffectLifetime;
        public float MinTargetDistanceSq;
    }
    public class SFXPowerCustomAction_DefensiveShield : SFXPowerCustomAction
    {
        public PowerData DamageReduction;
        public PowerData EncumbrancePenalty;
        public int CE_ArmorCrustTemplate;
    }
    public class SFXPowerCustomAction_Fortification : SFXPowerCustomAction_DefensiveShield
    {
        public PowerData MeleeDamageBonus;
        public PowerData MeleeDamageBonusDuration;
        public float Evolve_DamageReductionBonus1;
        public float Evolve_DamageReductionBonus2;
        public float Evolve_MeleeDamageBonus;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_PowerDamageBonus;
        public float Evolve_EncumbranceBonus;
    }
    public class SFXPowerCustomAction_FragGrenade : SFXPowerCustomAction_GrenadeBase
    {
        public PowerData MaxGrenadeBonus;
        public float Evolve_DamageBonus;
        public float Evolve_RadiusBonus;
        public int Evolve_GrenadeCountBonus;
        public float Evolve_ShieldDamageBonus;
        public float Evolve_ArmorDamageBonus;
        public float Evolve_DoTDamage;
        public float Evolve_DoTDuration;
        public int Rank2GrenadeUpgrade;
        public int CE_GrenadeImpact;
    }
    public class SFXPowerCustomAction_IncendiaryAmmo : SFXPowerCustomAction_AmmoPower
    {
        public PowerData AreaExplosionRadius;
        public PowerData AreaExplosionChance;
        public PowerData AreaExplosionDamage;
        public AreaEffectParameters AoEParams;
        public float Evolve_AmmoIncrease;
        public float Evolve_HeadShotDamage;
        public float Evolve_ArmorDamageBonus;
        public float Evolve_DamageBonus;
        public float Evolve_DamageBonus2;
        public float PanicChanceIncrease;
        public float AreaExplosionVFXScale;
        public float DOTDuration;
        public float DoTDamage;
    }
    public class SFXProjectile_PowerCustomAction_ConcussiveShot : SFXProjectile_PowerCustomAction_SuperSeeking
    {
        public int PS_NormalConcussiveShot;
    }
    public class SFXProjectile_PowerCustomAction_FragGrenade : SFXProjectile_PowerCustomAction_Grenade
    {
    }
    public class SFXWeaponGameEffect_DamageBonus : SFXGameEffect
    {
    }
    public class SFXSeqAct_AwardNewGameAchievements : SequenceAction
    {
    }
    public class SFXSeqAct_ForcedSaveGame : SFXSeqAct_SaveGame
    {
    }
    public class SFXAI_TutorialCannibal : SFXAI_Cannibal
    {
    }
    public class SFXPawn_TutorialCannibal : SFXPawn_Cannibal
    {
    }
    public class SFXSeqCond_HasAmmo : SequenceCondition
    {
        public int AmmoCount;
        public int Target;
        public bool AllGuns;
    }
    public class SFXSeqAct_GiveEarthXP : SequenceAction
    {
    }
    public class SFXSeqAct_AddPawnToPerception : SequenceAction
    {
        public int[] m_aoPerceptors;
    }
    public class SFXSeqCond_HasWeaponClass : SequenceCondition
    {
        public int[] Targets;
        public bool MustBeEquipped;
        public bool bAssaultRifle;
        public bool bPistol;
        public bool bSMG;
        public bool bSniperRifle;
        public bool bShotgun;
        public bool bHeavyWeapon;
    }
    public class SFXSeqAct_ShouldThrowGrenade : SequenceAction
    {
    }
    public class SFXSeqAct_TogglePowerWheelTutorial : SequenceAction
    {
        public SFXPowerTutorialType ePowerTutorialType;
    }
    public class SFXSeqAct_EnablePowers : SequenceAction
    {
    }
    public class SFXSeqAct_SetPawnLeanoutFreq : SequenceAction
    {
        public float NearDelay;
        public float FarDelay;
    }
    public class SFXNav_InteractionListening2 : SFXNav_InteractionPoint
    {
    }
    public class SFXWeapon_AI_ProMarTurretMiniGun : SFXWeapon_AI_TurretMiniGun
    {
    }
    public class SFXAI_SentryTurret : SFXAI_Core
    {
    }
    public class SFXAICmd_Base_SentryTurret : SFXAICommand_Base_Combat
    {
        public NameReference ShockPower;
        public NameReference RocketPower;
        public NameReference CryoAmmoPower;
        public NameReference ArmorPiercingAmmoPower;
        public NameReference PowerToUse;
        public float FlamethrowerRangeSq;
        public int PowerTarget;
    }
    public class SFXCustomAction_EvaSmash : SFXCustomAction_SingleAnim
    {
        public int AnimInfo;
    }
    public class SFXDamageType_ArmorPiercingAmmo : SFXDamageType_Power
    {
    }
    public class SFXDamageType_CryoAmmo : SFXDamageType_Power_Freeze
    {
    }
    public class SFXDamageType_SentryTurretShock : SFXDamageType_Power
    {
    }
    public class SFXGameEffect_ArmorPiercingAmmo : SFXGameEffect_AmmoPower
    {
        public int DamageType;
        public float Damage;
        public float VFXSpawnChance;
        public float Penetration;
        public float PenetrationDamage;
        public float ArmorReduction;
        public float SpareAmmoBonus;
        public float HeadShotDamageBonus;
        public int PS_OrganicImpactEffect;
        public int PS_NonOrganicImpactEffect;
    }
    public class SFXGameEffect_ArmorPiercingBonus : SFXGameEffect
    {
    }
    public class SFXGameEffect_ArmorWeakness : SFXGameEffect
    {
    }
    public class SFXGameEffect_CryoAmmo : SFXGameEffect_AmmoPower
    {
        public float FreezeChance;
        public float FreezeDuration;
        public float SpeedReduction;
        public float SpeedReductionDuration;
        public float FrozenDamageBonus;
        public float ArmorWeakness;
        public float SpareAmmoBonus;
        public float HeadShotDamageBonus;
        public int ImpactEffect;
        public int CE_HalfFrozenTemplate;
        public float DelayedFreezeRandDuration;
        public float DelayedFreezeStaticDuration;
    }
    public class SFXGameEffect_PartBasedDamageTakenBonus : SFXGameEffect
    {
    }
    public class SFXGameEffect_PenetrationBonus : SFXGameEffect_WeaponMod
    {
    }
    public class SFXGameEffect_PenetrationDamageBonus : SFXGameEffect_WeaponMod
    {
    }
    public class SFXPawn_EVA : SFXPawn
    {
    }
    public class SFXPawn_EVATurret : SFXPawn
    {
        public Guid TurretVFXGuid;
        public Guid TurretBaseVFXGuid;
        public int CE_TurretTemplate;
        public int SpawnSound;
        public int DiedSound;
        public int LoopingSound;
        public int StopLoopingSound;
        public int CE_DeathEffect;
        public bool bLoopSoundActive;
    }
    public class SFXPawn_SentryTurret : SFXPawn
    {
        public int __OnTurretKilled__Delegate;
        public Guid TurretVFXGuid;
        public Guid TurretBaseVFXGuid;
        public ReplicatedTurretCreator ReplicatedTurretCreatorInfo;
        public int CE_TurretTemplate;
        public int CE_PlayerTurretTemplate;
        public int SpawnSound;
        public int DiedSound;
        public int LoopingSound;
        public int StopLoopingSound;
        public int Caster;
        public bool bLoopSoundActive;
        public bool bHasShock;
        public bool bIsClientSideInitialized;
    }
    public class SFXPowerCustomAction_SentryTurret : SFXPowerCustomAction
    {
        public PowerData TurretShields;
        public PowerData RocketCooldown;
        public PowerData RocketDamage;
        public PowerData RocketForce;
        public PowerData RocketRadius;
        public PowerData FlamethrowerDamagePerSec;
        public PowerData FlamethrowerDamageDuration;
        public PowerData FreezeDuration;
        public PowerData ShockCooldown;
        public PowerData ShockDamage;
        public PowerData ShockForce;
        public PowerData ShockRadius;
        public Guid TurretBaseGuid;
        public Vector SpawnLocation;
        public float Evolve_CryoFreezeChance;
        public float Evolve_ArmorPiercingDamage;
        public float Evolve_ShieldBonus;
        public float Evolve_DamageBonus;
        public int Turret;
        public int NotRecommended_TurretDeployed;
        public float SpawnDelay;
        public int CE_TurretBase;
        public int CE_ShutdownEffect;
        public int CE_DeathEffect;
        public float SpawnZOffset;
        public float NonCombatTimeout_Length;
        public float NonCombatTimeout_UpdateFrequency;
        public bool DeathByShutdown;
    }
    public class SFXPowerCustomAction_SentryTurretArmorPiercingAmmo : SFXPowerCustomAction_AmmoPower
    {
    }
    public class SFXPowerCustomAction_SentryTurretCryoAmmo : SFXPowerCustomAction_AmmoPower
    {
        public float FreezeChance;
    }
    public class SFXPowerCustomAction_SentryTurretRocket : SFXPowerCustomAction
    {
    }
    public class SFXPowerCustomAction_SentryTurretShock : SFXPowerCustomAction
    {
    }
    public class SFXProjectile_DummyPower_Incinerate : SFXProjectile_DummyPower
    {
    }
    public class SFXProjectile_DummyPower_SentryTurret : SFXProjectile_DummyPower
    {
        public Guid TurretBaseGuid;
        public float TurretShields;
        public float SpawnDelay;
        public int CE_TurretBase;
    }
    public class SFXProjectile_PowerCustomAction_BouncingGrenade : SFXProjectile_PowerCustomAction_Grenade
    {
    }
    public class SFXProjectile_PowerCustomAction_SentryTurret : SFXProjectile_PowerCustomAction_BouncingGrenade
    {
    }
    public class SFXProjectile_PowerCustomAction_SentryTurretRocket : SFXProjectile_PowerCustomAction_Seeking
    {
    }
    public class SFXShield_EVA : SFXShield_Energy
    {
    }
    public class SFXWeapon_AI_Shuriken : SFXWeapon_SMG_Shuriken
    {
    }
    public class SFXWeapon_AssaultRifle_SentryTurret : SFXWeapon_AssaultRifle_Base
    {
    }
    public class SFXWeapon_Heavy_FlameThrower_SentryTurret : SFXWeapon_Heavy_Beam_Base
    {
        public Rotator MuzzleRotation;
        public float DamagePerSecond;
        public float DamageDuration;
        public int WindUpSound;
        public int WindDownSound;
        public int SentryTurretPower;
    }
    public class SFXDamageType_ConcussiveShot_Disruptor : SFXDamageType_ConcussiveShot
    {
    }
    public class SFXDamageType_DisruptorAmmo : SFXDamageType_Power
    {
    }
    public class SFXGameEffect_DisruptorAmmo : SFXGameEffect_AmmoPower
    {
        public int DamageType;
        public float StunChance;
        public float ElectricComboDuration;
        public float Damage;
        public float SpareAmmoBonus;
        public float HeadShotDamageBonus;
        public float LastStunTime;
        public float ShieldRegenPenalty;
        public float ShieldRegenPenaltyDuration;
    }
    public class SFXGameEffect_HenchmanArmorBonus_WeaponDamageBonus : SFXGameEffect_WeaponDamageBonus
    {
    }
    public class SFXPawn_Ashley : SFXPawn_Henchman
    {
    }
    public class SFXPowerCustomAction_AshleyPassive : SFXPowerCustomAction_HenchmanPassive
    {
        public float Evolve_WeaponDamageBonus;
        public float Evolve_HealthShieldBonus;
        public float Evolve_PowerDamageBonus;
        public float Evolve_SniperRifleDamageBonus;
        public float Evolve_SquadDamageBonus;
        public float Evolve_AssaultRifleDamageBonus;
    }
    public class SFXPowerCustomAction_DisruptorAmmo : SFXPowerCustomAction_AmmoPower
    {
        public PowerData StunChance;
        public PowerData ShieldDamage;
        public float Evolve_DamageBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_ShieldDamageBonus;
        public float Evolve_ShieldDamageBonus2;
        public float Evolve_AmmoIncrease;
        public float Evolve_HeadShotDamage;
        public float Evolve_StunChanceBonus;
        public float ShieldRegenPenalty;
        public float ShieldRegenPenaltyDuration;
    }
    public class SFXPowerCustomAction_InfernoGrenade : SFXPowerCustomAction_GrenadeBase
    {
        public PowerData MaxGrenadeBonus;
        public PowerData ConcussiveImpact;
        public PowerData NumChildProjectiles;
        public PowerData ChildProjImpactRadius;
        public BurningActor[] BurningActors;
        public int[] ActorsWithHealthRegenDebuff;
        public int[] ActorsWithStyleBonus;
        public float Evolve_DamageBonus;
        public float Evolve_RadiusBonus;
        public float Evolve_RadiusBonus2;
        public float Evolve_NumFragmentsIncrease;
        public float Evolve_ArmorDamageBonus;
        public float Evolve_GrenadeCountBonus;
        public float Evolve_DamageBonus2;
        public int Rank2GrenadeUpgrade;
        public float ChildProjMaxSpeed;
        public int MaxDotsPerPawn;
        public int ReleasePowerSound;
        public int ProjectileSplitSound;
        public int CE_FireDoTTemplate;
    }
    public class SFXPowerCustomAction_Marksman : SFXPowerCustomAction
    {
        public PowerData RateOfFireIncrease;
        public PowerData HeadShotDamageIncrease;
        public PowerData AccuracyIncrease;
        public PowerData SquadBonusEffectiveness;
        public float Evolve_AccuracyBonus;
        public float Evolve_RateOfFireBonus;
        public float Evolve_DurationBonus;
        public float Evolve_HeadShotDamageBonus;
        public float Evolve_CooldownBonus;
        public float Evolve_AccuracyAndRoFBonus;
        public int MarksmanSound;
        public bool bEffectEnded;
    }
    public class SFXProjectile_PowerCustomAction_InfernoChild : SFXProjectile_PowerCustomAction
    {
        public int CE_ChildExplosionTemplate;
    }
    public class SFXProjectile_PowerCustomAction_InfernoGrenade : SFXProjectile_PowerCustomAction_Grenade
    {
    }
    public class SFXWeaponGameEffect_AccuracyBonus : SFXGameEffect
    {
    }
    public class SFXWeaponGameEffect_RateOfFireBonus : SFXGameEffect
    {
    }
    public class SFXGameEffect_HealthPercentBonus : SFXGameEffect_HealthBonus
    {
    }
    public class SFXGameEffect_HenchmanArmorBonus_HealthBonus : SFXGameEffect_HealthPercentBonus
    {
    }
    public class SFXGameEffect_ShieldPercentBonus : SFXGameEffect_ShieldBonus
    {
    }
    public class SFXGameEffect_HenchmanArmorBonus_ShieldBonus : SFXGameEffect_ShieldPercentBonus
    {
    }
    public class SFXDamageType_Decoy : SFXDamageType_Power
    {
    }
    public class SFXDamageType_ImprovedOverload : SFXDamageType_Overload
    {
    }
    public class SFXDamageType_ImprovedOverloadRobot : SFXDamageType_OverloadRobot
    {
    }
    public class SFXDamageType_Overload_Ragdoll : SFXDamageType_Overload
    {
    }
    public class SFXGameEffect_PowerBonus_Damage : SFXGameEffect_PowerBonus
    {
    }
    public class SFXGameEffect_HenchmanArmorBonus_PowerDamageBonus : SFXGameEffect_PowerBonus_Damage
    {
    }
    public class SFXGameEffect_OverloadChain : SFXGameEffect
    {
        public int[] AffectedActors;
        public int NormalDamageType;
        public int RobotDamageType;
        public int OrganicRagdollDamageType;
        public int ImpactControllerRumble;
        public int ImpactCameraShake;
        public Vector DamageOrigin;
        public NameReference BeamAttachBoneName;
        public int NumChargesLeft;
        public float MaxJumpDistance;
        public float JumpDelay;
        public float JumpTimer;
        public int Target;
        public int RagdollOrganics;
        public int Power;
        public int Caster;
        public float Damage;
        public int CumulativeHits;
        public float DamageLossPerHit;
        public float Force;
        public float OrganicDamagePct;
        public int LastHitActor;
        public int PSC_Beam;
        public int CE_ImpactTemplate;
        public float ElectricComboDuration;
        public int BeamSound;
        public float ShieldRegenPenalty;
        public float ShieldRegenPenaltyDuration;
        public bool bEffectDone;
        public bool bBeamActive;
    }
    public class SFXPawn_Decoy : SFXPawn
    {
        public int __OnDecoyKilled__Delegate;
        public Guid DecoyVFXGuid;
        public ReplicatedDecoyCreator ReplicatedDecoyCreatorInfo;
        public int CE_DecoyTemplate;
        public float Duration;
        public float ShockRadius;
        public int DecoyPower;
        public float ShockCooldown;
        public float LastTimeShocked;
        public int SpawnSound;
        public int DeathSound;
        public int LoopingSound;
        public int StopLoopingSound;
        public int Caster;
        public bool bDecoyVFXStopped;
        public bool bExplosiveCooldown;
        public bool bIsClientSideInitialized;
    }
    public class SFXPawn_EDI : SFXPawn_Henchman
    {
    }
    public class SFXPowerCustomAction_Decoy : SFXPowerCustomAction
    {
        public PowerData DecoyShields;
        public PowerData ExplosionDamage;
        public PowerData ExplosionForce;
        public PowerData ExplosionRadius;
        public PowerData ShockDamage;
        public PowerData ShockForce;
        public PowerData ShockRadius;
        public PowerData DecoyDamageProtection;
        public int DecoyClass;
        public int DecoyAIClass;
        public AreaEffectParameters ExplosionParameters;
        public AreaEffectParameters ShockParameters;
        public int CE_DecoyExplosionTemplate;
        public int CE_ShockExplosionImpact;
        public int DecoyPawn;
        public float DecoySpawnOffset;
        public float Evolve_DurationBonus;
        public float Evolve_ShieldBonus;
        public float Evolve_ExplosionRadius;
        public float Evolve_RechargeSpeedBonus;
        public float Evolve_DurationBonus2;
        public float Evolve_ShieldBonus2;
        public float Evolve_ShockRadius;
        public int ExplosionSound;
        public float ShockCooldown;
        public int CE_ShockTemplate;
        public float DistAboveFloor;
        public bool UserDespawn;
    }
    public class SFXPowerCustomAction_EDIPassive : SFXPowerCustomAction_HenchmanPassive
    {
        public float Evolve_HealthShieldBonus;
        public float Evolve_WeaponDamageBonus;
        public float Evolve_PowerDamageBonus;
        public float Evolve_SquadTechDamageDurationBonus;
        public float Evolve_TechDamageBonus;
        public float Evolve_ShieldRegenBonus;
    }
    public class SFXPowerCustomAction_GethShieldBoost : SFXPowerCustomAction_DefensiveShield
    {
        public PowerData ShieldsRestored;
        public float Evolve_DamageReductionBonus1;
        public float Evolve_DamageReductionBonus2;
        public float Evolve_ShieldRestoreBonus;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_PowerDamageBonus;
        public float Evolve_EncumbranceBonus;
        public int CE_EDICrustTemplate;
        public int ShieldRechargeEffect;
    }
    public class SFXPowerCustomAction_Incinerate : SFXPowerCustomAction
    {
        public float Evolve_DamageBonus;
        public float Evolve_RadiusBonus;
        public float Evolve_DoTDamagePercent;
        public float Evolve_DoTDuration;
        public float Evolve_CooldownBonus;
        public float Evolve_FrozenDamageBonus;
        public float Evolve_ArmorDamageBonus;
        public int LargeFlameCount;
        public float InstantDamagePercent;
        public float DOTDuration;
        public int CE_IncinerateImpact;
        public int CE_FireDoTTemplate;
        public int FrozenImpactSound;
        public int HenchmanFrozenImpactSound;
        public int CE_DeathEffectTemplate;
        public bool bPlayFrozenImpact;
    }
    public class SFXPowerCustomAction_Overload : SFXPowerCustomAction
    {
        public PowerData NumCharges;
        public PowerData MaxJumpDistance;
        public float Evolve_DamageBonus1;
        public float Evolve_DamageBonus2;
        public int Evolve_NumChargeBonus1;
        public int Evolve_NumChargeBonus2;
        public float Evolve_CooldownBonus;
        public float Evolve_ShieldDamageBonus;
        public float ShieldRegenPenalty;
        public float ShieldRegenPenaltyDuration;
        public float OrganicDamageMultiplier;
        public float JumpDelay;
        public float DamageLossPerHit;
        public int CE_HitWallTemplate;
    }
    public class SFXDamageType_ConcussiveShot_ArmorPiercing : SFXDamageType_ConcussiveShot
    {
    }
    public class SFXDamageType_ProximityMine : SFXDamageType_Power
    {
    }
    public class SFXPawn_Garrus : SFXPawn_Henchman
    {
    }
    public class SFXPowerCustomAction_ArmorPiercingAmmo : SFXPowerCustomAction_AmmoPower
    {
        public PowerData ArmorReduction;
        public PowerData PiercingRange;
        public PowerData PiercingDamage;
        public float Evolve_DamageBonus1;
        public float Evolve_DamageBonus2;
        public float Evolve_AmmoCapacityBonus;
        public float Evolve_HeadShotDamageBonus;
        public float Evolve_PiercingBonus;
        public float Evolve_ArmorReductionBonus;
    }
    public class SFXPowerCustomAction_GarrusPassive : SFXPowerCustomAction_HenchmanPassive
    {
        public float Evolve_WeaponDamageBonus;
        public float Evolve_HealthShieldBonus;
        public float Evolve_PowerDamageBonus;
        public float Evolve_SniperRifleDamageBonus;
        public float Evolve_SquadDamageBonus;
        public float Evolve_AssaultRifleDamageBonus;
    }
    public class SFXPowerCustomAction_ProximityMine : SFXPowerCustomAction
    {
        public PowerData Evolve_DamageTakenDebuffStrength;
        public PowerData Evolve_SlowDebuffStrength;
        public PowerData Evolve_DebuffDuration;
        public float Evolve_DamageBonus;
        public float Evolve_RadiusBonus;
        public float Evolve_SecondDamageBonus;
        public float Evolve_CooldownBonus;
        public int MaxActiveMines;
        public int CE_HalfFrozenTemplate;
    }
    public class SFXProjectile_PowerCustomAction_ProximityMine : SFXProjectile_PowerCustomAction
    {
        public Guid ImpactGUID;
        public Vector MineHitNormal;
        public float UpdateFrequency;
        public float LastUpdateTime;
        public float StartTime;
        public int MinePower;
        public float TriggerRadius;
        public int CE_MineDeployedTemplate;
        public int AttachToWallSound;
        public int HenchAttachToWallSound;
    }
    public class SFXDamageType_BarrierBlast : SFXDamageType_Power
    {
    }
    public class SFXDamageType_BarrierBlast_NoRagdoll : SFXDamageType_BarrierBlast
    {
    }
    public class SFXDamageType_CryoFreeze : SFXDamageType_Power_Freeze
    {
    }
    public class SFXDamageType_Reave : SFXDamageType_Power_Fire
    {
    }
    public class SFXDamageType_Reave_Improved : SFXDamageType_Reave
    {
    }
    public class SFXGameEffect_BarrierLift : SFXGameEffect
    {
        public Vector Force;
        public int OwnerPawn;
        public float UpdateInterval;
        public float MinimumVelocity;
    }
    public class SFXGameEffect_Reave : SFXGameEffect_DamageOverTime
    {
    }
    public class SFXPawn_Kaidan : SFXPawn_Henchman
    {
    }
    public class SFXPowerCustomAction_Barrier : SFXPowerCustomAction_DefensiveShield
    {
        public PowerData BlastRadius;
        public PowerData BlastDamage;
        public PowerData BlastForce;
        public PowerData BlastLiftDuration;
        public int BlastDamageType;
        public int RumbleClass;
        public int ScreenShakeClass;
        public AreaEffectParameters BlastParameters;
        public float Evolve_DamageReductionBonus1;
        public float Evolve_DamageReductionBonus2;
        public float Evolve_BlastDamageBonus;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_PowerDamageBonus;
        public float Evolve_EncumbranceBonus;
        public int CE_BlastEffect;
        public int BlastMaxTargets;
        public int BlastSound;
        public float BlastDelay;
        public float PostBlastEndAnimDelay;
    }
    public class SFXPowerCustomAction_CryoBlast : SFXPowerCustomAction
    {
        public PowerData ArmorWeakness;
        public PowerData SpeedReduction;
        public PowerData FreezeExplodeRadius;
        public PowerData DamageTakenBonus;
        public float SpeedReductionDurationMult;
        public float Evolve_DurationBonus;
        public float Evolve_RadiusBonus;
        public float Evolve_SpeedReductionBonus;
        public float Evolve_CooldownBonus;
        public float Evolve_FrozenDamageBonus;
        public float Evolve_FreezeExplodeDurationMultiplier;
        public float Evolve_ArmorWeaknessBonus;
        public float Evolve_DamageTakenBonus;
        public int CE_HalfFrozenTemplate;
        public int FreezeExplosionSound;
        public float TimeDilationMin;
        public float TimeDilationMax;
    }
    public class SFXPowerCustomAction_KaidenPassive : SFXPowerCustomAction_HenchmanPassive
    {
        public float Evolve_WeaponDamageBonus;
        public float Evolve_HealthShieldBonus;
        public float Evolve_BioticPowerDamageBonus;
        public float Evolve_TechPowerDamageBonus;
        public float Evolve_SquadPowerDamageBonus;
        public float Evolve_SquadShieldRechargeBonus;
    }
    public class SFXPowerCustomAction_Reave : SFXPowerCustomAction
    {
        public PowerData DamageReduction;
        public int HealSound;
        public float Evolve_DurationBonus;
        public float Evolve_Radius;
        public float Evolve_DamageReductionBonus;
        public float Evolve_RechargeSpeedBonus;
        public float Evolve_DamageBonus;
        public float Evolve_DurationBonus2;
        public float Evolve_DamageReductionBonus2;
        public float Evolve_ArmorBarrierBonus;
        public int CE_CasterCrustTemplateOrganic;
        public int CE_CasterCrustTemplateRobotic;
        public int CE_CasterCrustTemplateMiss;
        public int CE_TargetCrustTemplateOrganic;
        public int CE_TargetCrustTemplateRobotic;
        public int ConfirmStartSound;
        public int ConfirmStopSound;
        public int HenchmanConfirmStartSound;
        public int HenchmanConfirmStopSound;
    }
    public class SFXAI_Liara : SFXAI_Henchman
    {
    }
    public class SFXDamageType_ConcussiveShot_Warp : SFXDamageType_ConcussiveShot
    {
    }
    public class SFXDamageType_Singularity_DoT : SFXDamageType_Singularity
    {
    }
    public class SFXDamageType_Singularity_Explosion : SFXDamageType_Singularity
    {
    }
    public class SFXDamageType_Singularity_NoRagdoll : SFXDamageType_Singularity
    {
    }
    public class SFXDamageType_WarpAmmo : SFXDamageType_Power
    {
    }
    public class SFXGameEffect_Singularity : SFXGameEffect_PhysicsPower
    {
        public Vector SingularityLocation;
        public NameReference BoneName;
        public float InnerRadius;
        public float UpdateInterval;
        public int Caster;
        public int OwnerPawn;
        public float SingularityRadius;
        public float ForcePerSecond;
        public float DamagePerSecond;
        public float minHeightForBodyFallSound;
        public int Power;
        public bool bApplied;
    }
    public class SFXGameEffect_WarpAmmo : SFXGameEffect_AmmoPower
    {
        public float Damage;
        public float LiftedDamageBonus;
        public float ArmorWeakness;
        public float ArmorWeaknessDuration;
        public int ImpactEffect;
        public float SpareAmmoBonus;
        public float HeadShotDamageBonus;
    }
    public class SFXPawn_Liara : SFXPawn_Henchman
    {
    }
    public class SFXPowerCustomAction_LiaraPassive : SFXPowerCustomAction_HenchmanPassive
    {
        public float Evolve_PowerCooldownBonus;
        public float Evolve_HealthShieldBonus;
        public float Evolve_WeaponDamageBonus;
        public float Evolve_PowerForceBonus;
        public float Evolve_SquadCooldownBonus;
        public float Evolve_SingularityCooldownBonus;
    }
    public class SFXPowerCustomAction_Singularity : SFXPowerCustomAction
    {
        public PowerData Evolve_DoTDamage;
        public PowerData DetonateForce;
        public PowerData DetonateDamage;
        public PowerData DetonateRadius;
        public PowerData NumCharges;
        public PowerData SingularityDuration;
        public PowerData PushAwayForce;
        public int[] AffectedActors;
        public AreaEffectParameters ExplosionParam;
        public Guid SingularityGuid;
        public Vector m_vSingularityLocation;
        public float Evolve_RadiusBonus;
        public float Evolve_DurationBonus;
        public float Evolve_ExpandAmount;
        public float Evolve_ExpandDuration;
        public float Evolve_AdditionalCharges;
        public float Evolve_RechargeSpeed;
        public int DetonateMaxRagdollCount;
        public int CE_Singularity;
        public int CE_GrowingSingularity;
        public int CE_ExplodingSingularity;
        public int CE_TargetCrust;
        public int CE_DrainTargetCrust;
        public float m_fSingularityRadius;
        public float m_fSingularityTimer;
        public float m_fSingularityCharges;
        public float m_fHitPlayerMinDuration;
        public float m_fLookupActorTimer;
        public float m_fLookupActorInterval;
        public float m_fGrowTimer;
        public int Release;
        public bool m_bSingularityActive;
    }
    public class SFXPowerCustomAction_WarpAmmo : SFXPowerCustomAction_AmmoPower
    {
        public PowerData LiftedDamageBonus;
        public PowerData BarrierDamage;
        public PowerData ArmorWeakness;
        public PowerData ArmorWeaknessDuration;
        public float Evolve_DamageBonus1;
        public float Evolve_DamageBonus2;
        public float Evolve_BarrierDamageBonus1;
        public float Evolve_BarrierDamageBonus2;
        public float Evolve_AmmoIncrease;
        public float Evolve_HeadShotDamage;
        public float Evolve_LiftedDamageBonus;
        public float Evolve_ArmorWeaknessBonus;
    }
    public class SFXCustomAction_HenchmanHeavyMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXDamageType_Carnage : SFXDamageType_Power
    {
    }
    public class SFXDamageType_Carnage_DoT : SFXDamageType_Carnage
    {
    }
    public class SFXDamageType_Carnage_Improved : SFXDamageType_Carnage
    {
    }
    public class SFXDamageType_Carnage_Improved_DoT : SFXDamageType_Carnage_Improved
    {
    }
    public class SFXDamageType_Carnage_Ragdoll : SFXDamageType_Power_Ragdoll
    {
    }
    public class SFXDamageType_Carnage_Ragdoll_DoT : SFXDamageType_Carnage_Ragdoll
    {
    }
    public class SFXDamageType_Carnage_Ragdoll_Improved : SFXDamageType_Carnage_Ragdoll
    {
    }
    public class SFXDamageType_Carnage_Ragdoll_Improved_DoT : SFXDamageType_Carnage_Ragdoll_Improved
    {
    }
    public class SFXPawn_Marine : SFXPawn_Henchman
    {
    }
    public class SFXPowerCustomAction_Carnage : SFXPowerCustomAction
    {
        public int CE_NormalImpact;
        public int CE_CarnageDoTTemplate;
        public int CE_DeathEffect;
        public int MuzzleEffect;
        public float MuzzleEffectLifetime;
        public float Evolve_DamageBonus;
        public float Evolve_ImpactRadiusBonus;
        public float Evolve_RechargeSpeedBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_ArmorDamagePct;
        public float InstantDamagePercent;
        public float DoTDamagePercent;
        public float DOTDuration;
    }
    public class SFXPowerCustomAction_JimmyPassive : SFXPowerCustomAction_HenchmanPassive
    {
        public float Evolve_HealthShieldBonus;
        public float Evolve_WeaponDamageBonus;
        public float Evolve_PowerDamageBonus;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_SquadHealthShieldBonus;
        public float Evolve_HealthShieldBonus2;
        public float Evolve_MeleeDamageBonus;
    }
    public class SFXProjectile_PowerCustomAction_Carnage : SFXProjectile_PowerCustomAction_SuperSeeking
    {
    }
    public class SFXDamageType_DarkChannel : SFXDamageType_Power
    {
    }
    public class SFXDamageType_DarkChannel_Improved : SFXDamageType_DarkChannel
    {
    }
    public class SFXGameEffect_DarkChannel : SFXGameEffect_DamageOverTime
    {
        public Guid CrustGuid;
        public NameReference BeamAttachBoneName;
        public float JumpRadius;
        public int CE_TargetCrustTemplate;
        public int Power;
        public int PSC_Beam;
        public int LastHitPawn;
        public float RemoveTimer;
        public int OwnerPawn;
        public int JumpSound;
        public int StartLoopSound;
        public int StopLoopSound;
        public bool DelayedRemove;
    }
    public class SFXPawn_Prothean : SFXPawn_Henchman
    {
    }
    public class SFXPowerCustomAction_DarkChannel : SFXPowerCustomAction
    {
        public float Evolve_DamageBonus;
        public float Evolve_DurationBonus;
        public float Evolve_MoveSpeedPenalty;
        public float Evolve_RechargeSpeedBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_ArmorBarrierDamage;
        public int CurrentTarget;
    }
    public class SFXPowerCustomAction_ProtheanPassive : SFXPowerCustomAction_HenchmanPassive
    {
        public float Evolve_HealthShieldBonus;
        public float Evolve_WeaponDamageBonus;
        public float Evolve_PowerDamageBonus;
        public float Evolve_SquadDamageDurationForceBonus;
        public float Evolve_ShieldRegenBonus;
    }
    public class SFXPowerCustomAction_Pull : SFXPowerCustomAction_MultiProjectile
    {
        public PowerData Evolve_DoTDamagePerSec;
        public int[] m_oCurrentPulledTargets;
        public NameReference[] EffectsToRemove;
        public float Evolve_DurationBonus;
        public float Evolve_RadiusBonus;
        public float Evolve_ExtraDamage;
        public float Evolve_RechargeBonus;
        public float MinimumVelocity;
        public float MinimumVelocityForceMult;
    }
    public class SFXPowerCustomAction_Slam : SFXPowerCustomAction
    {
        public PowerData InitialForce;
        public float Evolve_ForceBonus;
        public float Evolve_ImpactRadius;
        public float Evolve_BioticComboMult;
        public float Evolve_ForceBonus2;
        public float Evolve_RagdollDuration;
        public float Evolve_RechargeSpeedBonus;
    }
    public class BioSeqAct_ShowPartySelectionGUI : BioSequenceLatentAction
    {
        public int m_oPartySelectGuiReferenced;
        public bool m_bNoSelectMode;
    }
    public class SFXSeqAct_GiveStartingConsumables : SequenceAction
    {
    }
    public class SFXSeqAct_OpenWeaponSelection : BioSequenceLatentAction
    {
        public int WeaponSelectionMovieInfo;
        public int MaxWeapons;
        public bool ShowAllWeapons;
        public bool bIsFinished;
    }
    public class BioSeqAct_GiveMissionXP : BioSeqAct_GiveMissionXP_NativeBase
    {
    }
    public class SFXSeqAct_ClearAreaMap : SequenceAction
    {
    }
    public class SFXSeqAct_GetTag : SequenceAction
    {
        public NameReference Tag;
        public NameReference UniqueTag;
    }
    public class SFXSeqAct_LeaveMission : SequenceAction
    {
        public LeaveMissionData[] LeaveMissionArray;
    }
    public class SFXSeqAct_SetTag : SequenceAction
    {
        public NameReference Tag;
        public NameReference UniqueTag;
    }
    public class SFXSeqAct_SetWasInSquad : SequenceAction
    {
        public int[] Index_InSquad;
        public int[] Index_WasInSquad;
        public bool bSetNotRestore;
    }
    public class SFXSeqCond_CanSpendTallentPoints : SequenceCondition
    {
        public int m_Helper;
    }
    public class SFXCharacterClass_Adept : SFXCharacterClass_Content
    {
    }
    public class SFXCharacterClass_Engineer : SFXCharacterClass_Content
    {
    }
    public class SFXCharacterClass_Infiltrator : SFXCharacterClass_Content
    {
    }
    public class SFXCharacterClass_Sentinel : SFXCharacterClass_Content
    {
    }
    public class SFXCharacterClass_Soldier : SFXCharacterClass_Content
    {
    }
    public class SFXCharacterClass_Vanguard : SFXCharacterClass_Content
    {
    }
    public class SFXCustomAction_AdeptPunch : SFXCustomAction_PlayerHeavyMeleeBase
    {
    }
    public class SFXCustomAction_BioticStormPunch : SFXCustomAction_ClassMelee
    {
        public Vector MoveOffset;
        public int PS_CasterEffect;
        public int PS_ImpactedEffect;
    }
    public class SFXCustomAction_EngineerPunch : SFXCustomAction_PlayerHeavyMeleeBase
    {
    }
    public class SFXCustomAction_InfiltratorCloakPunch : SFXCustomAction_PlayerHeavyMeleeBase
    {
    }
    public class SFXCustomAction_InfiltratorPunch : SFXCustomAction_PlayerHeavyMeleeBase
    {
    }
    public class SFXCustomAction_SentinelPunch : SFXCustomAction_PlayerHeavyMeleeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_SoldierPunch : SFXCustomAction_PlayerHeavyMeleeBase
    {
    }
    public class SFXCustomAction_VanguardPunch : SFXCustomAction_PlayerHeavyMeleeBase
    {
    }
    public class SFXCustomAction_VanguardStormPunch : SFXCustomAction_BioticStormPunch
    {
        public AreaEffectParameters MeleeImpactParameters;
    }
    public class SFXDamageType_BioticGrenade : SFXDamageType_Power
    {
    }
    public class SFXDamageType_BioticGrenade_NoRagdoll : SFXDamageType_BioticGrenade
    {
    }
    public class SFXDamageType_ConcussiveShot_Cryo : SFXDamageType_Power_Freeze
    {
    }
    public class SFXDamageType_Discharge : SFXDamageType_Power
    {
    }
    public class SFXDamageType_Discharge_NoRagdoll : SFXDamageType_Discharge
    {
    }
    public class SFXDamageType_ImprovedDischarge : SFXDamageType_Discharge
    {
    }
    public class SFXDamageType_ImprovedDischarge_NoRagdoll : SFXDamageType_ImprovedDischarge
    {
    }
    public class SFXDamageType_InfiltratorHeavyMelee : SFXDamageType_HeavyMelee
    {
    }
    public class SFXDamageType_PowerArmor : SFXDamageType_Power
    {
    }
    public class SFXDamageType_SentinelHeavyMelee : SFXDamageType_HeavyMelee
    {
    }
    public class SFXDamageType_Shockwave_NoRagdoll : SFXDamageType_Shockwave
    {
    }
    public class SFXDamageType_SoldierHeavyMelee : SFXDamageType_HeavyMelee
    {
    }
    public class SFXDamageType_StickyGrenade : SFXDamageType_Power
    {
    }
    public class SFXDamageType_StickyGrenade_Improved : SFXDamageType_StickyGrenade
    {
    }
    public class SFXDamageType_VanguardHeavyMelee : SFXDamageType_HeavyMelee
    {
    }
    public class SFXGameChoiceGUI_PlotStateEditor : Object
    {
        public MEPlotState[] PlotStates;
        public int CurrentLevel;
        public int StartingLevelID;
    }
    public class SFXGameEffect_CloakDamageBonus : SFXGameEffect
    {
    }
    public class SFXGameEffect_DamageImmunity : SFXGameEffect
    {
    }
    public class SFXGameEffect_PowerArmor : SFXGameEffect_DamageTakenBonus
    {
        public AreaEffectParameters AoEParams;
        public Guid ShieldClientEffectGuid;
        public int CE_ShieldTemplate;
        public int CE_ShieldDeathTemplate;
        public int PlayerExplosionSound;
        public int ExplosionSound;
        public int OwnerPawn;
        public float ExplosionRadius;
        public float ExplosionDamage;
        public float ExplosionForce;
        public int Power;
        public bool bShieldVFXOn;
        public bool bShieldDestroyed;
    }
    public class SFXGameEffect_ShockwaveLift : SFXGameEffect_PhysicsPower
    {
        public float GravityValue;
        public float ForceDrag;
    }
    public class SFXGameEffect_StopShieldRegen : SFXGameEffect
    {
        public int Pawn;
        public int Shield;
    }
    public class SFXGameEffect_ZoomTimeDilationBonus : SFXGameEffect
    {
    }
    public class SFXPowerCustomAction_AdeptMeleePassive : SFXPowerCustomAction_MeleePassivePower
    {
        public PowerData HealthShieldBonus;
        public PowerData MeleeDamageBonus;
        public float Evolve_MeleeDamageBonus1;
        public float Evolve_MeleeDamageBonus2;
        public float Evolve_HealthShieldBonus1;
        public float Evolve_HealthShieldBonus2;
        public float Evolve_MeleeSpreeBonus;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_PowerSpreeBonus;
        public float Evolve_MeleeSpreeDuration;
        public float Evolve_PowerSpreeDuration;
    }
    public class SFXPowerCustomAction_AdeptPassive : SFXPowerCustomAction_ParagonRenegade
    {
        public PowerData PowerDamage;
        public PowerData WeightCapacity;
        public NameReference BioticComboEffectName;
        public float Evolve_HenchmanPowerBonus;
        public float Evolve_ParagonRenegadeBonus;
        public float Evolve_DamageAndForceBonus;
        public float Evolve_DamageAndForceBonus2;
        public float Evolve_DamageForceDurationBonus;
        public float Evolve_ComboCooldownBonus;
        public float Evolve_PowerDurationBonus;
        public float Evolve_ComboBonusDuration;
        public float Evolve_WeightCapacityBonus;
    }
    public class SFXPowerCustomAction_AdrenalineRush : SFXPowerCustomAction
    {
        public PowerData TimeDilation;
        public PowerData WeaponDamageBonus;
        public Guid AdrenalineGuid;
        public float Evolve_HealthShieldDamageTaken;
        public float Evolve_TimeDilationIncrease;
        public float Evolve_DamageBonusIncrease;
        public float Evolve_DurationBonus;
        public float Evolve_MeleeDamageBonus;
        public float Evolve_ShieldIncrease;
        public int Evolve_NumFreePowers;
        public int CE_AdrenalineTemplate;
        public bool bEffectEnded;
    }
    public class SFXPowerCustomAction_BioticGrenade : SFXPowerCustomAction_GrenadeBase
    {
        public PowerData MaxGrenadeBonus;
        public float Evolve_DamageBonus;
        public float Evolve_ForceBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_ForceBonus2;
        public float Evolve_RadiusBonus;
        public int Evolve_GrenadeCountBonus;
        public float Evolve_ShieldDamageBonus;
        public float Evolve_ArmorDamageBonus;
        public float Evolve_DoTDamage;
        public float Evolve_DoTDuration;
        public float Evolve_BioticWeaknessDamageBonus;
        public int NumChildPieces;
        public int AdditionalChildPieces;
        public int Rank2GrenadeUpgrade;
        public int CE_GrenadeImpact;
    }
    public class SFXPowerCustomAction_Cloak : SFXPowerCustomAction
    {
        public PowerData DamageBonus;
        public string CloakRTPC_Category;
        public NameReference EffectCategory;
        public float MinimumCloakCooldown;
        public float Evolve_DurationBonus;
        public float Evolve_DamageBonus;
        public float Evolve_MeleeDamageBonus;
        public float Evolve_RechargeSpeedBonus;
        public float Evolve_SniperDamageBonus;
        public float BonusRemovalDelay;
        public float CloakRTPC_Off_Duration;
        public float CloakRTPC_On_Duration;
        public float CloakRTPC_UpdateTime;
        public float CloakRTPC_CurrentValue;
        public int srCloakActive;
        public float MinTimeBeforeCancel;
        public int DecloakSound;
        public int HenchmanDecloakSound;
        public bool bBreakCloakOnAttack;
        public bool bCloakEnded;
        public bool bFirstPowerReleased;
    }
    public class SFXPowerCustomAction_CryoAmmo : SFXPowerCustomAction_AmmoPower
    {
        public PowerData SpeedReduction;
        public PowerData ArmorWeakness;
        public PowerData FreezeChance;
        public float Evolve_FreezeChanceBonus;
        public float Evolve_FreezeDurationBonus;
        public float Evolve_AmmoIncrease;
        public float Evolve_HeadShotBonus;
        public float Evolve_FrozenDamageBonus;
        public float Evolve_SpeedReductionBonus;
        public float Evolve_ArmorWeaknessBonus;
        public float SpeedReductionDurationMult;
        public int CE_HalfFrozenTemplate;
    }
    public class SFXPowerCustomAction_Discharge : SFXPowerCustomAction
    {
        public PowerData ConeAngle;
        public Vector ImpactLocationOffset;
        public float Evolve_DamageBonus;
        public float Evolve_ImpactRadiusBonus;
        public float Evolve_PowerRechargeSpeedBonus;
        public float Evolve_PowerRechargeSpeedBonusDuration;
        public float Evolve_DamageReduction;
        public float Evolve_BarrierUseReduction;
        public float Evolve_ChanceForNoCooldown;
        public float Evolve_DamageTypePctIncrease;
        public int CE_DischargeEffect;
        public float EffectSpawnOffset;
        public float DamageImmunityDuration;
    }
    public class SFXPowerCustomAction_EngineerMeleePassive : SFXPowerCustomAction_MeleePassivePower
    {
        public PowerData HealthShieldBonus;
        public PowerData MeleeDamageBonus;
        public float Evolve_MeleeDamageBonus1;
        public float Evolve_MeleeDamageBonus2;
        public float Evolve_HealthShieldBonus1;
        public float Evolve_HealthShieldBonus2;
        public float Evolve_MeleeSpreeBonus;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_PowerSpreeBonus;
        public float Evolve_MeleeSpreeDuration;
        public float Evolve_PowerSpreeDuration;
    }
    public class SFXPowerCustomAction_EngineerPassive : SFXPowerCustomAction_ParagonRenegade
    {
        public PowerData WeightCapacity;
        public PowerData PowerDamage;
        public float Evolve_PowerDamageBonus;
        public float Evolve_PowerDamageBonus2;
        public float Evolve_PowerDurationBonus;
        public float Evolve_ParagonRenegadeBonus;
        public float Evolve_SquadPowerDamageBonus;
        public float Evolve_DroneShieldBonus;
        public float Evolve_DroneDamageBonus;
        public float Evolve_DamageDurationBonus;
        public float Evolve_WeightCapacityBonus;
    }
    public class SFXPowerCustomAction_InfiltratorMeleePassive : SFXPowerCustomAction_MeleePassivePower
    {
        public PowerData HealthShieldBonus;
        public PowerData MeleeDamageBonus;
        public float Evolve_MeleeDamageBonus1;
        public float Evolve_MeleeDamageBonus2;
        public float Evolve_HealthShieldBonus1;
        public float Evolve_HealthShieldBonus2;
        public float Evolve_MeleeSpreeBonus;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_WeaponSpreeBonus;
        public float Evolve_MeleeSpreeDuration;
        public float Evolve_WeaponSpreeDuration;
    }
    public class SFXPowerCustomAction_InfiltratorPassive : SFXPowerCustomAction_ParagonRenegade
    {
        public PowerData SniperZoomDilation;
        public PowerData WeaponDamageBonus;
        public PowerData WeightCapacity;
        public float Evolve_WeaponDamage;
        public float Evolve_PowerDamage;
        public float Evolve_PowerDuration;
        public float Evolve_ParagonRenegadeBonus;
        public float Evolve_HenchmenWeaponDamage;
        public float Evolve_HenchmenPowerDamage;
        public float Evolve_WeightCapacityBonus;
        public float Evolve_SniperDamage;
        public float Evolve_HeadShotDamage;
        public float Evolve_PowerDamageDurationBonus;
    }
    public class SFXPowerCustomAction_SentinelMeleePassive : SFXPowerCustomAction_MeleePassivePower
    {
        public PowerData HealthShieldBonus;
        public PowerData MeleeDamageBonus;
        public float Evolve_MeleeDamageBonus1;
        public float Evolve_MeleeDamageBonus2;
        public float Evolve_HealthShieldBonus1;
        public float Evolve_HealthShieldBonus2;
        public float Evolve_HenchmenHealthShieldBonus;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_DamageReductionBonus;
        public float Evolve_DamageReductionDuration;
    }
    public class SFXPowerCustomAction_SentinelPassive : SFXPowerCustomAction_ParagonRenegade
    {
        public PowerData PowerDamage;
        public PowerData WeightCapacity;
        public PowerData WeaponDamageBonus;
        public float Evolve_DamageAndForceBonus;
        public float Evolve_DamageForceDurationBonus;
        public float Evolve_WeightCapacityBonus;
        public float Evolve_ParagonRenegadeBonus;
        public float Evolve_HenchmenPowerBonus;
        public float Evolve_HenchmenWeaponBonus;
        public float Evolve_PowerDurationBonus;
        public float Evolve_ChanceForNoCooldown;
    }
    public class SFXPowerCustomAction_Shockwave : SFXPowerCustomAction
    {
        public PowerData NumShockwaveImpacts;
        public PowerData GravityLevel;
        public PowerData GravityDuration;
        public PowerData TimeBetweenImpacts;
        public PowerData LiftDuration;
        public PowerData Range;
        public int[] ImpactedActors;
        public int ImpactRumbleClass;
        public int ImpactScreenShakeClass;
        public int ImpactActorScreenShakeClass;
        public float Evolve_DamageBonus;
        public float Evolve_RadiusBonus;
        public float Evolve_BioticComboMult;
        public float Evolve_CooldownBonus;
        public float Evolve_NumShockwavesBonus;
        public int CE_ShockwaveImpact;
        public int ImpactActorSound;
        public int NumTargetsHit;
    }
    public class SFXPowerCustomAction_SoldierMeleePassive : SFXPowerCustomAction_MeleePassivePower
    {
        public PowerData HealthShieldBonus;
        public PowerData MeleeDamageBonus;
        public float Evolve_MeleeDamageBonus1;
        public float Evolve_MeleeDamageBonus2;
        public float Evolve_HealthShieldBonus1;
        public float Evolve_HealthShieldBonus2;
        public float Evolve_MeleeSpreeBonus;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_WeaponSpreeBonus;
        public float Evolve_MeleeSpreeDuration;
        public float Evolve_WeaponSpreeDuration;
    }
    public class SFXPowerCustomAction_SoldierPassive : SFXPowerCustomAction_ParagonRenegade
    {
        public PowerData WeaponDamageBonus;
        public PowerData WeightCapacity;
        public float Evolve_PowerDurationBonus;
        public float Evolve_PowerDamageBonus;
        public float Evolve_WeaponDamageBonus;
        public float Evolve_WeaponDamageBonus2;
        public float Evolve_ParagonRenegadeBonus;
        public float Evolve_HenchWeaponBonus;
        public float Evolve_HeadShotDamage;
        public float Evolve_AmmoPowerBonus;
        public float Evolve_WeightCapacityBonus;
    }
    public class SFXPowerCustomAction_StickyGrenade : SFXPowerCustomAction_GrenadeBase
    {
        public PowerData MaxGrenadeBonus;
        public float Evolve_DamageBonus;
        public float Evolve_RadiusBonus;
        public int Evolve_GrenadeCountBonus;
        public float Evolve_ArmorDamageBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_RadiusBonus2;
        public float Evolve_ProximityDuration;
        public int Rank2GrenadeUpgrade;
        public int CE_GrenadeImpact;
    }
    public class SFXPowerCustomAction_TechArmor : SFXPowerCustomAction
    {
        public PowerData DamageReduction;
        public PowerData EncumbrancePenalty;
        public PowerData ExplosionRadius;
        public PowerData ExplosionForce;
        public PowerData ExplosionDamage;
        public float Evolve_ExplosionDamageBonus1;
        public float Evolve_ExplosionRadiusBonus1;
        public float Evolve_DamageReductionBonus1;
        public float Evolve_DamageReductionBonus2;
        public float Evolve_PowerDamageBonus;
        public float Evolve_MeleeDamageBonus;
        public float Evolve_EncumbranceBonus;
        public int CE_ShieldMaleTemplate;
        public int CE_ShieldFemaleTemplate;
    }
    public class SFXPowerCustomAction_Unity : SFXPowerCustomAction
    {
        public PowerData ShieldHealAmount;
        public int srNoMedigel;
        public int SuperMedigelPlotInt;
        public float SuperMedigelChance;
    }
    public class SFXPowerCustomAction_VanguardMeleePassive : SFXPowerCustomAction_MeleePassivePower
    {
        public PowerData HealthShieldBonus;
        public PowerData MeleeDamageBonus;
        public float Evolve_MeleeDamageBonus1;
        public float Evolve_MeleeDamageBonus2;
        public float Evolve_HealthShieldBonus1;
        public float Evolve_HealthShieldBonus2;
        public float Evolve_MeleeSpreeBonus;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_MeleeSpreeDuration;
        public float Evolve_ChargeRechargeSpeedBonus;
    }
    public class SFXPowerCustomAction_VanguardPassive : SFXPowerCustomAction_ParagonRenegade
    {
        public PowerData PowerDamage;
        public PowerData WeightCapacity;
        public PowerData WeaponDamageBonus;
        public float Evolve_WeaponDamageBonus;
        public float Evolve_PowerDamageBonus;
        public float Evolve_PowerForceBonus;
        public float Evolve_ParagonRenegadeBonus;
        public float Evolve_HenchmanPowerBonus;
        public float Evolve_HenchmanWeaponBonus;
        public float Evolve_DamageForceDurationBonus;
        public float Evolve_ShotgunDamageBonus;
        public float Evolve_WeightCapacityBonus;
    }
    public class SFXProjectile_PowerCustomAction_BioticGrenade : SFXProjectile_PowerCustomAction_Grenade
    {
    }
    public class SFXProjectile_PowerCustomAction_Shockwave : SFXProjectile_PowerCustomAction
    {
        public float TimeBetweenImpacts;
        public float TimeToNextImpact;
        public float FirstImpactDelay;
        public int NumShockwaves;
        public int ShockwavePower;
        public int LastShockwaveSound;
        public int HenchmanLastShockwaveSound;
    }
    public class SFXProjectile_PowerCustomAction_StickyGrenade : SFXProjectile_PowerCustomAction_Grenade
    {
        public float UpdateFrequency;
        public float ProximityDuration;
        public float ProximityRadius;
        public float StickFuseLength;
        public bool HasProximity;
    }
    public class SFXSeqAct_IsDemo : SequenceAction
    {
    }
    public class SFXSeqAct_PlotStateEditor : BioSequenceLatentAction
    {
        public int PlotStateEditor;
        public bool bEnabled;
    }
    public class SFXShake_Power_Shockwave : SFXShake_Power
    {
    }
    public class BioSeqAct_ShowCharacterCreation : BioSequenceLatentAction
    {
        public int[] lstClassAnimSetRefs;
        public int[] lstCharacterClasses;
        public int m_oCreationReferenced;
        public int SchematicAnimSet;
        public int MaleDataSource;
        public int FemaleDataSource;
        public int BackgroundMaterial;
        public int CE_FullBiotic;
        public int CE_HalfBiotic;
        public int CE_OmniTool;
        public int CE_SchematicEffect;
        public int CE_SchematicEffect_Idle;
        public int CE_SchematicEffect_Reverse;
        public int SchematicMaleBackgroundMaterial;
        public int SchematicFemaleBackgroundMaterial;
        public bool m_bIsBlocking;
        public bool m_bIsFinished;
    }
    public class SFXSeqCond_CombatArea : SequenceCondition
    {
    }
    public class SFXGameType_Horde_Operation : SFXGameInfoMP
    {
        public float StartWavesTime;
        public float MaxDelayStartWavesTime;
    }
    public class BioStartLocationMP : Actor
    {
        public bool bPrimaryStart;
    }
    public class SFXGAWReinforcementBase : Object
    {
        public string PoolName;
        public int GAWManager;
        public int[] RequiredDLCModuleIDs;
        public CardInfoData[] CardList;
    }
    public class SFXGAWReinforcementManager : SFXGAWReinforcementManagerBase
    {
        public CardPackEntry[] PackList;
        public StoreInfoEntry[] StoreInfoArray;
        public ConsumableToPackEntry[] ConsumableIdPackNameMap;
        public CardInfoData[] CardData;
        public CardInfoData[] LastAwardedCards;
        public CardInfoData[] AwardedCards;
        public string LastAwardedPackName;
        public int[] MatchConsumables;
        public int[] Deck;
        public BWConsumableInfo[] OutstandingConsumableIDs;
        public int[] KnownConsumableTypes;
        public int __OnPurchaseItemDelegate__Delegate;
        public int __OnProcessConsumablesDelegate__Delegate;
        public int __OnPurchaseItemWithCreditsDelegate__Delegate;
        public int __CardSort__Delegate;
        public int __MatchConsumableSort__Delegate;
        public int __StoreItemSort__Delegate;
        public int ConsumptionFlowResult;
        public int fTimeoutRefreshDigitalRights;
        public int fTimeoutRefreshMPSaves;
        public int fTimeoutConsumeID;
        public int fTimeoutSaveMPRecord;
        public BWEntitlementId PackPurchasedEntitlement;
        public int nTestConsumptionError;
        public bool bFetchingProductDetails;
        public bool bRetryProcessConsumables;
        public bool bProcessConsumableCriticalError;
        public bool m_bCreditPurchaseRetry;
    }
    public class SFXCheatManagerNonNativeMP : BioCheatManagerNonNative
    {
        public string[] DisplayPools;
    }
    public class SFXCustomizationInstance_PlayerMP : SFXCustomizationInstance
    {
        public int Tint1ID;
        public int Tint2ID;
        public int PatternID;
        public int PatternColorID;
        public int EmissiveID;
        public int PhongID;
        public int SkinToneID;
    }
    public class SFXDamageType_ConsumableRocket : SFXDamageType_HeavyWeapon
    {
    }
    public class SFXDamageType_ConsumableRocketGib : SFXDamageType_ConsumableRocket
    {
    }
    public class SFXDifficultyHandlerMP : SFXDifficultyHandler
    {
        public int CurrentWave;
        public int MaxWave;
    }
    public class SFXWave_Operation : SFXWave
    {
        public SFXOperation_ObjectiveRequirement[] ObjectivesRequired;
        public Vector2D CreditBonusTime;
        public NameReference MusicEventName;
        public float WeightedChanceOfSelection;
        public int srBeginWaveMessage;
        public int srEndWaveMessage;
        public int srEndWaveFailure;
        public int srScoreHudObjectiveTitle;
        public int srEventTickerString;
        public int srWaveFailedHint;
        public float OperationTimeLimit;
        public float OperationTimeWarning;
        public float OperationFirstWarning;
        public float OperationSecondWarning;
        public float OperationTimeLimitBuffer;
        public float CreditBonusTimePct;
        public float OperationScoreReward;
        public float FinishWaveDelay;
        public float SpawnDistanceIdeal;
        public float SpawnPenaltyLongDistance;
        public float SpawnPenaltyShortDistance;
        public float WaveInstructionDuration;
        public bool bUseObjectiveHud;
    }
    public class SFXEngagement_Annex : SFXWave_Operation
    {
        public int[] PlayersInAnnexZone;
        public int srAnnexProgressTicker;
        public int srAnnexProgressTickerPlural;
    }
    public class SFXEngagement_Assassination : SFXWave_Operation
    {
        public float WaveInstructionVODelay;
    }
    public class SFXEngagement_Disarm : SFXWave_Operation
    {
        public int[] DisabledBombs;
        public int NumDisarmsCompleted;
        public int NumDisarmsRequired;
        public int srDisarmBombMessage;
        public int srDisarmNextBombMessage;
        public int srEndWaveSuccess;
        public float ActivateNextBombDelay;
        public float WaveInstructionVODelay;
        public float InstructionReminderDelay;
        public int srBombDisarmedTicker;
    }
    public class SFXEngagement_Extraction : SFXWave_Operation
    {
    }
    public class SFXEngagement_Retrieve : SFXWave_Operation
    {
        public int[] PlayersCarryingObjects;
        public int[] DroppedOffPickups;
        public int NumDropOffsRequired;
        public int srRetrieveProgress;
        public int srPickupDroppedOff;
        public int srTeamScoreReward;
        public int srObjectiveCompletedReward;
    }
    public class SFXGameConfigMP : SFXGameConfig
    {
        public int[] ForceLoadedArchetypes;
        public float ScoreToXPMultiplier;
        public bool ShowMPProgressionScreens;
        public bool DisableDroppedAmmo;
    }
    public class SFXGameEffect_MatchConsumableBase : SFXGameEffect
    {
        public int VersionCount;
        public int VersionIdx;
        public int OwnerPawn;
    }
    public class SFXGameInfoMP : SFXGame
    {
        public int[] LoadedPlayerClasses;
        public int[] AsyncRestartPlayerList;
        public int EndOfMatchScreenClass;
        public int ScoreboardScreenClass;
        public int ScoretagsScreenClass;
        public int PauseMenuScreenClass;
        public int OptionsMenuScreenClass;
        public int OptionsMenuScreenClassPC;
        public int MPReinforcementsRevealScreenClass;
        public int MPHUDScreenClass;
        public int EndOfMatchScreen;
        public int ScoreboardScreen;
        public int ScoretagsScreen;
        public int PauseMenuScreen;
        public int MPReinforcementsRevealScreen;
        public int MPHUDScreen;
        public float WaitingForPlayersTimeout;
        public float JoinInProgressReplicationDelay;
        public float BackToLobbyFailSafeDelay;
        public bool bTriggeredLoad;
        public bool bWaitingForPlayers;
    }
    public class SFXGameInfoMP_Lobby : SFXGameInfoMP
    {
        public int MPLobbyScreenClass;
        public int MPLobbyStatusBarsScreenClass;
        public int CharacterSelectScreenClass;
        public int CharacterCreateScreenClass;
        public int CharacterAppearanceScreenClass;
        public int CharacterKitScreenClass;
        public int MatchResultsScreenClass;
        public int LeaderboardScreenClass;
        public int MPMatchConsumablesScreenClass;
        public int MPStoreScreenClass;
        public int MPPromotionScreenClass;
        public int GalaxyAtWarScreenClass;
        public int WarAssetsScreenClass;
        public int MPNewLobbyScreen;
        public int MPLobbyStatusBarsScreen;
        public int CharacterSelectScreen;
        public int CharacterCreateScreen;
        public int CharacterAppearanceScreen;
        public int CharacterKitScreen;
        public int MatchResultsScreen;
        public int LeaderboardScreen;
        public int MPMatchConsumablesScreen;
        public int MPStoreScreen;
        public int MPPromotionScreen;
        public int GalaxyAtWarScreen;
        public int WarAssetsScreen;
        public int WeaponSelectScreen;
        public int srOK;
        public int srCancel;
        public int srSearchingForGames;
        public int srCreatingGame;
        public int srMatchMakingError;
        public int srOnlinePrivilegeError;
        public int srStrictNatError;
        public float NatWarningShowDelay;
        public float NatWarningShowDuration;
        public int MatchMakingGameSettings;
        public float MatchStartTimerDuration;
        public float MatchStartTimer;
        public bool bMatchStartTimerRunning;
    }
    public class SFXGAWReinforcementUnsaved : SFXGAWReinforcementBase
    {
    }
    public class SFXGAWReinforcementCredits : SFXGAWReinforcementUnsaved
    {
    }
    public class SFXGAWReinforcementInGameConsumable : SFXGAWReinforcementBase
    {
    }
    public class SFXGAWReinforcementInventoryUnlock : SFXGAWReinforcementBase
    {
    }
    public class SFXGAWReinforcementKitUnlock : SFXGAWReinforcementBase
    {
        public int[] XPBonus;
    }
    public class SFXGAWReinforcementMatchConsumable : SFXGAWReinforcementBase
    {
    }
    public class SFXGAWReinforcementMatchConsumable_NonGameplay : SFXGAWReinforcementMatchConsumable
    {
    }
    public class SFXGAWReinforcementPermanentUpgrade : SFXGAWReinforcementBase
    {
    }
    public class SFXGRIMP : SFXGRI
    {
        public int MapSetting;
        public int EnemySetting;
        public int DifficultySetting;
        public float fUpdateScoreInterval;
        public int MaxPlayersAllowedMP;
        public int SkynetGameID;
        public int TeamScoreOffset;
        public int MatchStartTime;
        public bool PrivacySetting;
        public bool bRandomMap;
        public bool bRandomEnemy;
        public bool bIsJoinInProgress;
        public EGameStatus GameStatus;
    }
    public class SFXGRIMP_Lobby : SFXGRI
    {
        public string LobbyStatusString;
        public NameReference LobbyState;
        public int NumPlayerSlots;
        public int NumReadyPlayers;
        public int LeaderPRI;
        public int MapSetting;
        public int EnemySetting;
        public int DifficultySetting;
        public float MatchStartTimer;
        public int srLoading;
        public int srWaitingForPlayers;
        public int srStartingMatch;
        public int srExiting;
        public int srMatchStartCountdown;
        public int srMapChangedDueToDLCMismatch;
        public int srOK;
        public bool PrivacySetting;
        public bool bRandomMap;
        public bool bRandomEnemy;
        public bool bMatchStartTimerRunning;
    }
    public class SFXGUIMovieMP : SFXGUIMovie
    {
    }
    public class SFXGUI_MPAppearance : SFXGUIMovieMP
    {
        public string SelectedCharacterName;
        public TintSwatchData[] Tint1SwatchMappings;
        public TintSwatchData[] Tint2SwatchMappings;
        public PatternData[] PatternMappings;
        public TintSwatchData[] PatternColorSwatchMappings;
        public TintSwatchData[] PhongSwatchMappings;
        public TintSwatchData[] EmissiveSwatchMappings;
        public TintSwatchData[] SkinToneSwatchMappings;
        public int WorldInfo;
        public int srNameTitle;
        public int srNameNotUniqueErrorMessage;
        public int srNameTooLongErrorMessage;
        public int srNameEmpty;
        public int srOK;
        public int srCharacterClassAndLevel;
        public int srDefaultPlaceholderName;
        public int srYes;
        public int srNo;
        public int srCancelConfirmationMessage;
        public int nMaxNameLength;
        public int SelectedPawnTint1ID;
        public int SelectedPawnTint2ID;
        public int SelectedPawnPatternID;
        public int SelectedPawnPatternColorID;
        public int SelectedPawnPhongID;
        public int SelectedPawnEmissiveID;
        public int SelectedPawnSkinToneID;
        public int Keyboard;
        public int CurrModifiableCharacter;
        public int MPSaveManager;
        public int CurrentSettings;
        public int m_nRotating;
        public float RotationDegreesPerSecond;
        public int SourcePlayer;
        public int RequiredTint1Level;
        public int RequiredTint2Level;
        public int RequiredPatternLevel;
        public int RequiredPatternColorLevel;
        public int RequiredPhongLevel;
        public int RequiredEmissiveLevel;
        public int RequiredSkinToneLevel;
        public float m_fPreviousMipLevelFadingValue;
        public bool m_bUpdatedInitialPawnTint;
        public bool m_bPCRotationEnabled;
    }
    public class SFXGUI_MPEndOfMatch : SFXGUIMovieMP
    {
        public int OverallMatchResults;
    }
    public class SFXGUI_MPHUD : SFXGUIMovieMP
    {
        public float DPadDisplayTime;
        public float TickerEntryDisplayTime;
        public float TickerUpdateTime;
        public int srSpectatorHUDDescriptionPC;
        public int srSpectatorHUDDescriptionConsole;
        public bool DPadFadeOut;
    }
    public class SFXGUI_MPLobby : SFXGUIMovieMP
    {
        public EReinforcementGUICategory[] ValidNewWeaponCategories;
        public GAWZoneGUIData[] GAWRatings;
        public int srExitMultiplayer;
        public int srExitMultiplayerConfirmation;
        public int srExitLobby;
        public int srExitLobbyConfirmation;
        public int srCancel;
        public int srCharacterClassAndLevel;
        public int srLeaderboardNotificationText;
        public int srFormattedXPShort;
        public int srFormattedXPLong;
        public int srMatchSettingBonusXP;
        public int srOriginIgoDisabled;
        public int srCredits;
        public int srFormattedReadiness;
        public int srGAWGlobalBonus;
        public int srGAWZoneBonus;
        public int AllConsumables;
        public float ElapsedTime;
        public int UIWorldPawnOriginal;
        public float m_fPreviousMipLevelFadingValue;
        public int GAWAssetHandler;
        public bool bPreviouslyInParty;
        public bool bPreviouslyCouldInteract;
        public bool m_bGAWRatingsError;
    }
    public class SFXGUI_MPLobbyStatusBars : SFXGUIMovieMP
    {
        public int srWaitingForMatchToStart;
        public int srWaitingForSingleOther;
        public int srWaitingForOthers;
        public int srWaitingForYou;
        public int srWaitingForYouAndSingleOther;
        public int srWaitingForYouAndOthers;
        public int srPressButtonToReady;
        public int srPCReadyButton;
        public bool m_bShouldShowStatusBar;
        public bool m_bShouldShowMatchInfo;
        public bool m_bCanSetReady;
    }
    public class SFXGUI_MPMatchConsumables : SFXGUIMovieMP
    {
        public ConsumableDisplayInfo[] ActiveConsumables;
        public string[] InGameConsumableGUIOrder;
        public int GAWManager;
        public int Consumables;
    }
    public class SFXGUI_MPMatchResults : SFXGUIMovieMP
    {
        public int __ResultDataSort__Delegate;
        public int srFormattedXP;
        public int srFormattedXPPlus;
        public int srClassDataFormat;
        public int srNextLevel;
        public int srPlus;
        public int srLevelUp;
        public int srGAWString;
        public int srRandomBonusString;
        public int srBonusXPString;
        public int srBonusXPReadinessString;
        public float fIntroEventPauseTime;
        public int OverallMatchResults;
    }
    public class SFXGUI_MPOptions : BioSFHandler_Options
    {
    }
    public class SFXGUI_MPPauseMenu : SFXGUIMovie
    {
        public int srConfirm;
        public int srCancel;
        public int srExitToLobbyConfirmMessage;
        public int srWaveNumber;
        public int srMapText;
        public int srFactionText;
        public int srChallengeText;
        public bool m_bShouldAnimate;
    }
    public class SFXGUI_MPPromotion : SFXGUIMovieMP
    {
        public string TextureSymbolPath;
        public int PromotionalOfferID;
        public int PromoTexture;
    }
    public class SFXGUI_MPReinforcementsReveal : SFXGUIMovieMP
    {
        public CardTypeText[] CardTypeTextData;
        public int __OnCloseCallback__Delegate;
    }
    public class SFXGUI_MPSelectKit : SFXGUIMovieMP
    {
        public NameReference ClassNameToPromote;
        public int srPromote;
        public int srCancel;
        public int srLoadingCharacter;
        public int srClassLevel;
        public int srPromoteConfirm;
        public int srPromoteClassWarning;
        public int srLoadingCharacters;
        public int srSwitchingCharacter;
        public int srXPTextFormat;
        public int srFormattedXP;
        public int srFormattedPlus;
        public int MPSaveManager;
        public int LoadingCharacterMsgBox;
        public int WaitMessageBox;
        public int m_nPromoteEventPauseTime;
        public bool bAdvanceToNextScreen;
        public bool bWaitingForCharacters;
        public bool bStartDeploy;
        public bool bForceOnlineConnection;
    }
    public class SFXGUI_MPStore : SFXGUIMovieMP
    {
        public string[] IgnoredImageReferences;
        public string ExternalTextureIdentifier;
        public string CurrRequestedRemoteImage;
        public StoreImage[] StoreImages;
        public StoreGUIData[] StoreItems;
        public int GAWManager;
        public int MPSaveManager;
        public int srPlatformText;
        public int srCreditsText;
        public int srExpiresText;
        public int srPurchase;
        public int srCancel;
        public int srBack;
        public int srPurchaseConfirmation;
        public int srPCPlatformConfirmation;
        public int srRedeemConfirmation;
        public int srOK;
        public int srPurchaseError;
        public int srPleaseWait;
        public int srRefreshing;
        public int srPurchaseChoiceMessage;
        public int srNotEnoughCredits;
        public int srFree;
        public int srRedeem;
        public int srOriginIgoDisabled;
        public float fDelayPostPurchase;
        public int oMsgBox_Notification;
        public int PurchaseChoiceMessageBox;
        public int SelectedID;
        public int nMaxNumRemoteImages;
        public int nNumRequestedRemoteImages;
        public int nAvailablePCPoints;
        public bool bProcessPurchases;
        public bool m_bPurchaseCompleted;
    }
    public class SFXGUI_PCMPOptions : BioSFHandler_PCOptions
    {
    }
    public class SFXHintSystemMP : BioHintSystem
    {
        public bool bDying;
        public bool bCanUseRevive;
        public bool bCanUseAmmoKit;
        public bool bObjectiveActive;
        public bool bObjectiveNear;
        public bool bReviveObjectiveActive;
        public bool bReviveObjectiveActiveNear;
        public bool bDoingCustomAction;
        public bool bBeingRevived;
        public bool bAnyWeaponHasAmmo;
    }
    public class SFXHostMigrationMP : SFXHostMigration
    {
        public HMMatch Match;
    }
    public class SFXHUDMP : BioHUD
    {
    }
    public class SFXLobbyFlow : Info
    {
        public int[] PreviouslySelectedItems;
        public MPMapInfo[] MapList;
        public string[] MPGUIPackages;
        public int[] LoadedGUITextures;
        public NameReference LobbyScreenTag;
        public int DummyPawn;
        public int OriginalPawn;
        public int DataManager;
        public int nLastOffer;
        public int FramesToWaitBeforeFadingFromBlack;
        public int LastMapPlayed;
        public int LastEnemyPlayed;
        public bool bDirty;
        public bool bPlayerDataSent;
        public bool bMPFlowStarted;
        public bool bCreateCharacterFlowStarted;
        public bool bDeployFlowStarted;
        public bool bReadyToEnterLobby;
        public bool bAlwaysAllowGoBackFromKitSelect;
        public bool bCameFromSelectFirstCharacter;
        public bool bShowRevealReinforcementsOnUnexpectedAwarding;
        public bool bHostingNewMission;
        public ELobbySubscreen CurrentLobbyTab;
        public ELobbySubscreen PreviousSubScreen;
    }
    public class SFXMessageMP : LocalMessage
    {
    }
    public class SFXOperationObjective : Actor
    {
        public NameReference OwnerWaveClassName;
        public ReplicatedMeshInfoStruct ReplicatedMeshInfo;
        public NameReference MeshSpecificVOEvent;
        public int SimpleDialogPlayer;
        public int OwnerWave;
        public int ObjectiveData;
        public float WaveInstructionVODelay;
        public float WaveInstructionVORepeatDelay;
        public int Mesh;
        public int LightEnvironment;
        public bool ActivateObjectiveOnSpawn;
        public bool bActivated;
        public bool bEnableCombatZone;
    }
    public class SFXObjective_AssassinationBase : SFXOperationObjective
    {
        public int CurrentTarget;
        public int NumTargetsKilled;
        public int NumTargetsToKill;
    }
    public class SFXPawn_PlayerMP : SFXPawn_Player
    {
        public LinearColor RegularNametagColor;
        public LinearColor PermaDeadNametagColor;
        public LinearColor DownedNametagColor;
        public float fPermaDeathTimer;
        public float DeathFlourishDuration;
        public int KitPortrait;
        public int srPlayerDownPopup;
        public int srPlayerJoined;
        public int srPlayerLeft;
        public int srPlayerKilled;
        public int srPlayerSuicide;
        public int srPlayerExecuted;
        public int srPlayerBledOut;
        public int srPlayerRevived;
        public float JoinInProgressDelay;
        public int ReviveSound;
        public int Executioner;
        public int InvalidRagdollStateCounterThreshold;
        public int CustomizationMP;
        public bool bValidExecutionTarget;
        public bool bDisplayedKilledMessage;
    }
    public class SFXPlayerControllerMP : SFXPlayerController
    {
        public NameReference[] MPMapNames;
        public int __OnWeaponSelectFinishedDelegate__Delegate;
        public ViewTargetTransitionParams VTTransParms;
        public int StoreGUI;
        public int LevelUpGUI;
        public int LobbyFlow;
        public int BioStartSpot;
        public float CountdownTimerEndTime;
        public float CountdownTimerLeeway;
        public float TickSaveGameInterval;
        public int srWaitMessageMatchStarted;
        public int srWaitMessageMatchEnded;
        public int srWaitMessageGeneric;
        public int srExitMessage;
        public int srExitMessageLobby;
        public int srConfirm;
        public int srCancel;
        public bool bReceivedPlayer;
        public bool bFinishedTraveling;
        public bool bIsJoinInProgress;
        public bool bRestarting;
    }
    public class SFXPlayerCustomizationMP : Object
    {
        public CustomizableElement[] Tint1Appearances;
        public CustomizableElement[] Tint2Appearances;
        public CustomizableElement[] PatternAppearances;
        public CustomizableElement[] PatternColorAppearances;
        public CustomizableElement[] PhongAppearances;
        public CustomizableElement[] EmissiveAppearances;
        public CustomizableElement[] SkinToneAppearances;
    }
    public class SFXPlayerSquadMP : BioBaseSquad
    {
    }
    public class SFXPowerCustomActionMP_Consumable : SFXPowerCustomAction
    {
        public NameReference CapacityPlayerVariable;
        public int UsedCount;
        public int CapacityBonus;
    }
    public class SFXPowerCustomActionMP_Consumable_Ammo : SFXPowerCustomActionMP_Consumable
    {
        public int NumGrenadesRestored;
        public float AverageAmmoMissingThreshold;
    }
    public class SFXPowerCustomActionMP_Consumable_Revive : SFXPowerCustomActionMP_Consumable
    {
        public float ImmunityDuration;
    }
    public class SFXPowerCustomActionMP_Consumable_Rocket : SFXPowerCustomActionMP_Consumable
    {
    }
    public class SFXPowerCustomActionMP_Consumable_Shield : SFXPowerCustomActionMP_Consumable
    {
        public Guid GUID_ShieldCrustTemplate;
        public int CE_ShieldCrustTemplate;
        public float ShieldDuration;
        public float ShieldStrength;
    }
    public class SFXPRIMP : SFXPRI
    {
        public UniqueNetId KickVotePlayerId;
        public MPCharacterData CharacterData;
        public string ComputerName;
        public string DisplayName;
        public float[] XPBonusMultipliers;
        public string[] DefaultLoadClasses;
        public string DEFAULT_PLAYER_ARCHETYPE_PATH;
        public MapConfigData[] MapSettings;
        public int __PRITotalPointSort__Delegate;
        public MPPowerData CharacterPowers;
        public MPWeaponData CharacterWeapons;
        public LinearColor NametagColor;
        public NameReference ActiveXPBonusMultiplierPV;
        public NameReference DEFAULT_PLAYER_KIT;
        public NameReference MatchConsumableGECategory;
        public int SFXPawn;
        public float EndOfMatchScreenDisplayTime;
        public int LobbyListOrder;
        public float MaxReadinessXPBonus;
        public int m_pControllerOfLastClientInitialize;
        public float GlobalZoneIncrease;
        public float RandomGlobalZoneIncrease;
        public float ScaledGlobalZoneIncrease;
        public float ScaledMapZoneIncrease;
        public float ScaledRandomGlobalZoneIncrease;
        public int NumConsumablesAllowedPerMatch;
        public bool ReadyInLobby;
        public bool ReadyToTransitionToLobby;
        public bool bEndOfMatchRecordsSaved;
        public bool bEndOfMatchRatingsUpdated;
        public bool bEndOfMatchScreenShownForLongEnough;
        public bool bSaveRecordSet;
        public bool bReplicationReady;
        public bool bWaitingForPawn;
        public bool bLocalMapsSent;
        public byte LocalMapArray;
        public byte CombinedMapArray;
        public byte NumKickVotesReceived;
    }
    public class SFXProjectile_ConsumableRocket : SFXProjectile_Explosive
    {
        public int RumbleClass;
        public int ScreenShakeClass;
        public float GibRange;
    }
    public class SFXShake_ConsumableRocket : SFXShake_Power
    {
    }
    public class SFXSquadCombatMP : BioBaseSquad
    {
    }
    public class SFXTelemetryHooksMP : SFXTelemetryHooks
    {
    }
    public class SFXVocalizationManagerMP : SFXVocalizationManager
    {
    }
    public class SFXWave_Horde : SFXWave
    {
        public EnemySpawnInfo[] EnemyList;
        public PetData[] PetList;
        public EnemySquadInfo[] EnemySquadList;
        public BerserkStartCount[] BerserkStartCounts;
        public DifficultyLevelEnemies[] Enemies;
        public int[] Squads;
        public SpawnedEnemy[] EnemiesSpawned;
        public int[] AliveEnemiesByType;
        public int[] NumSpawnedEnemiesByType;
        public float SpawnDelay;
        public int WaveIndex;
        public int WavePoints;
        public float SquadChance;
        public int MinPlayersToSpawnSquad;
        public int EnemySquad;
        public int CurrentWave;
        public int WavePointsRemaining;
        public int CurrentSquadIndex;
        public int NextSquadEnemyIndex;
        public int LastEnemyNavPoint;
        public int CurrentEnemySpawnPointCount;
        public int MaxEnemiesPerSpawnPoint;
        public int MaxEnemies;
        public int srWaveNumber;
        public int SrEnemiesAlive;
        public float SpawnPenaltyOnTop;
        public float SpawnPenaltyLineOfSight;
        public float SpawnPenaltyLineOfSightMaxDist;
        public float SpawnDistancePenaltyClose;
        public float SpawnRandomVariance;
        public float SpawnDesignerWeightMultiplier;
        public float SpawnDistanceClose;
        public float SpawnBaseRating;
        public float SpawnMinRatingForRespawn;
        public int EnemiesRemainingToActivateObjective;
        public float EnemyObjectiveMarkerDelay;
        public int DamageReductionTimerOnSpawnIn;
        public float WavePointsToBudget;
        public bool EndlessWave;
        public bool DisplayObjectivesForAllEnemies;
    }
    public class SFXWave_Horde_Cerberus : SFXWave_Horde
    {
    }
    public class SFXWave_Horde_Geth : SFXWave_Horde
    {
    }
    public class SFXWave_Horde_Reaper : SFXWave_Horde
    {
    }
    public class SFXWaveCoordinator_HordeOperation : SFXWaveCoordinator
    {
        public OperationWave[] OperationWaves;
        public string BioSimpleDialogClassName;
        public int[] ForcedClasses;
        public int HordeWaveType;
        public int OperationWaveType;
        public int NumWaves;
        public float InitialStartDelay;
        public float InitialInstructionDelay;
        public float BetweenWaveDelay;
        public int srWaveNumberPopup;
        public int srWaveCompletePopup;
        public float ManDownVOCooldown;
        public int CurrentWaveNumber;
        public float PercentageOfWavesComplete;
        public float TimeUntilWaveStart;
        public float ManDownVOTimestamp;
        public int HordeManager;
        public int OperationManager;
        public int HordeWaveIndex;
        public int OperationWaveIndex;
        public int SimpleDialogPlayer;
        public float OperationEnemyBudgetMultiplier;
        public bool bExtractionWaveEnabled;
        public bool ShouldStartNewWaves;
        public bool bForceOperationWave;
    }
    public class SFXWaveManager_Horde : SFXWaveManager
    {
        public WaveType[] WaveTypes;
        public WavePointRange[] WavePointsRanges;
        public int[] EnemySpawnPoints;
        public int __HordeWaveSort__Delegate;
        public Vector2D WaveProgressionRange;
        public int MaxWaves;
    }
    public class SFXWaveManager_Operation : SFXWaveManager
    {
    }
    public class SFXWeapon_Heavy_ConsumableRocketLauncher : SFXHeavyWeapon
    {
        public Guid ChargeEffectGuid;
        public Guid ShotEffectGuid;
        public int NukeRumble;
        public int CE_ChargeUp;
        public int CE_Shot;
        public float DamageRadius;
        public float CappedDamageRadius;
        public float FarDamage;
    }
    public class SFXSeqAct_GiveFuel : SequenceAction
    {
        public float DeltaFuel;
        public bool FuelToMax;
    }
    public class SFXSeqAct_NormandyRevisit : SequenceAction
    {
    }
    public class SFXGameChoiceGUIData_Email : SFXGameChoiceGUIData
    {
        public EmailData[] EmailArray;
    }
    public class SFXSeqAct_EmailChoiceGUI : BioSequenceLatentAction
    {
        public int AudioMessageID;
        public int m_ID_HaveNewEmail;
        public int m_ID_NeedNotification;
        public bool SendOnly;
        public bool ArchivedScreen;
    }
    public class SFXSeqAct_LastMission : SequenceAction
    {
        public int[] Pin_SM_Int_IDs;
    }
    public class SFXSeqAct_MissionIDtoName : SequenceAction
    {
        public MapIDData[] MapIDDataArray;
        public NameReference MapName;
        public int MapId;
    }
    public class SFXSeqAct_DebugImportXP : SequenceAction
    {
        public int StartingLevelID;
    }
    public class SFXSeqAct_TogglePlayerSaves : SequenceAction
    {
        public int Player;
        public DISABLED_SAVE_REASON Reason;
    }
    public class BioSimpleDlgContainer_Horde : BioSimpleDialogContainer
    {
    }
    public class SFXGameInfoSP : SFXGame
    {
    }
    public class SFXGRISP : SFXGRI
    {
    }
    public class SFXVocalizationManagerSP : SFXVocalizationManager
    {
    }
    public class Object
    {
        public Pointer VfTableObject;
        public int ObjectInternalInteger;
        public QWord ObjectFlags;
        public Pointer HashNext;
        public Pointer HashOuterNext;
        public Pointer StateFrame;
        public int Linker;
        public Pointer LinkerIndex;
        public int NetIndex;
        public int Outer;
        public NameReference Name;
        public int Class;
        public int ObjectArchetype;
    }
    public class Component : Object
    {
        public int TemplateOwnerClass;
        public NameReference TemplateName;
    }
    public class Interface : Object
    {
    }
    public class Subsystem : Object
    {
        public Pointer VfTable_FExec;
    }
    public class Commandlet : Object
    {
        public string HelpDescription;
        public string HelpUsage;
        public string HelpWebLink;
        public string[] HelpParamNames;
        public string[] HelpParamDescriptions;
        public bool IsServer;
        public bool IsClient;
        public bool IsEditor;
        public bool LogToConsole;
        public bool ShowErrorCount;
        public bool BioLoadConsoleSupport;
        public bool bBioUseSound;
    }
    public class DistributionFloat : Component
    {
        public Pointer VfTable_FCurveEdInterface;
        public bool bCanBeBaked;
        public bool bIsDirty;
    }
    public class DistributionVector : Component
    {
        public Pointer VfTable_FCurveEdInterface;
        public bool bCanBeBaked;
        public bool bIsDirty;
    }
    public class HelpCommandlet : Commandlet
    {
    }
    public class SFXCameraMode_DrellRollForward : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_DrellRollLateral : SFXCameraMode_Combat
    {
    }
    public class SFXCharacterClassMP_Adept_Drell : SFXCharacterClass_ContentMP
    {
    }
    public class SFXCustomAction_DrellEvadeBackwards : SFXCustomAction_PlayerEvadeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_DrellEvadeForward : SFXCustomAction_PlayerEvadeBase
    {
        public Vector MoveOffset;
        public bool bHitWallEnabled;
    }
    public class SFXCustomAction_DrellEvadeLeft : SFXCustomAction_PlayerEvadeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_DrellEvadeRight : SFXCustomAction_PlayerEvadeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_DrellMelee : SFXCustomAction_PlayerMeleeBase
    {
        public int[] HitActors;
    }
    public class SFXCustomAction_DrellMeleeKick : SFXCustomAction_PlayerMeleeBase
    {
        public int[] HitActors;
        public int AnimInfo;
    }
    public class SFXPowerCustomActionMP_BioticGrenade : SFXPowerCustomAction_BioticGrenade
    {
    }
    public class SFXPowerCustomActionMP_DrellMeleePassive : SFXPowerCustomActionMP_MeleePassiveBase
    {
        public PowerData MovementSpeedBonus;
        public float Evolve_MovementSpeedBonus;
    }
    public class SFXPowerCustomActionMP_DrellPassive : SFXPowerCustomActionMP_PassiveBase
    {
    }
    public class SFXPowerCustomActionMP_Pull : SFXPowerCustomAction_Pull
    {
        public float Evolve_DurationBonus2;
        public float Evolve_ComboBonus;
    }
    public class SFXPowerCustomActionMP_Reave : SFXPowerCustomAction_Reave
    {
    }
    public class SFXCharacterClassMP_Vanguard_Drell : SFXCharacterClass_ContentMP
    {
    }
    public class Actor : Object
    {
        public int[] Components;
        public int[] Modules;
        public TimerData[] Timers;
        public int[] Attached;
        public int[] GeneratedEvents;
        public int[] LatentActions;
        public int MessageClass;
        public Vector location;
        public Rotator Rotation;
        public Vector DrawScale3D;
        public Vector PrePivot;
        public Vector Velocity;
        public Vector Acceleration;
        public Vector RelativeLocation;
        public Rotator RelativeRotation;
        public Rotator RotationRate;
        public NameReference Tag;
        public NameReference UniqueTag;
        public NameReference InitialState;
        public NameReference Group;
        public NameReference BaseBoneName;
        public float DrawScale;
        public RenderCommandFence DetachFence;
        public float CustomTimeDilation;
        public int Owner;
        public int Base;
        public float NetUpdateTime;
        public float NetUpdateFrequency;
        public float NetPriority;
        public float TimeSinceLastTick;
        public float TickFrequency;
        public float TickFrequencyAtEndDistance;
        public float TickFrequencyDecreaseDistanceStart;
        public float TickFrequencyDecreaseDistanceEnd;
        public float TickFrequencyLastSeenTimeBeforeForcingMaxTickFrequency;
        public int Instigator;
        public float LifeSpan;
        public float CreationTime;
        public float LatentFloat;
        public int LatentSeqNode;
        public int BaseSkelComponent;
        public int CollisionComponent;
        public int OverlapTag;
        public int PendingTouch;
        public float m_fGravityScaling;
        public float DensityScaling;
        public float m_fPhysicsThreshold;
        public float AudioObstruction;
        public float AudioOcclusion;
        public bool bStatic;
        public bool bHidden;
        public bool bNoDelete;
        public bool bDeleteMe;
        public bool bOnlyOwnerSee;
        public bool bTickIsDisabled;
        public bool bWorldGeometry;
        public bool bIgnoreRigidBodyPawns;
        public bool bOrientOnSlope;
        public bool bIgnoreEncroachers;
        public bool bPushedByEncroachers;
        public bool bDestroyedByInterpActor;
        public bool bRouteBeginPlayEvenIfStatic;
        public bool bIsMoving;
        public bool bAlwaysEncroachCheck;
        public bool bHasAlternateTargetLocation;
        public bool bCanStepUpOn;
        public bool bNetTemporary;
        public bool bOnlyRelevantToOwner;
        public bool bAlwaysRelevant;
        public bool bReplicateInstigator;
        public bool bReplicateMovement;
        public bool bSkipActorPropertyReplication;
        public bool bUpdateSimulatedPosition;
        public bool bTearOff;
        public bool bOnlyDirtyReplication;
        public bool bDontReplicateBaseRotation;
        public bool bAllowFluidSurfaceInteraction;
        public bool bDemoOwner;
        public bool bForceDemoRelevant;
        public bool bNetInitialRotation;
        public bool bReplicateRigidBodyLocation;
        public bool bKillDuringLevelTransition;
        public bool bExchangedRoles;
        public bool bConsiderAllStaticMeshComponentsForStreaming;
        public bool bDebug;
        public bool bPostRenderIfNotVisible;
        public bool bHardAttach;
        public bool bIgnoreBaseRotation;
        public bool bShadowParented;
        public bool bCanBeAdheredTo;
        public bool bCanBeFrictionedTo;
        public bool bBioSnapToBase;
        public bool m_bBioBoneDependsOnBaseSkel;
        public bool bHurtEntry;
        public bool bGameRelevant;
        public bool bMovable;
        public bool bDestroyInPainVolume;
        public bool bCanBeDamaged;
        public bool bShouldBaseAtStartup;
        public bool bPendingDelete;
        public bool bCanTeleport;
        public bool bAlwaysTick;
        public bool bBlocksNavigation;
        public bool bCollideWhenPlacing;
        public bool bCollideActors;
        public bool bCollideWorld;
        public bool bCollideComplex;
        public bool bBlockActors;
        public bool bProjTarget;
        public bool bBlocksTeleport;
        public bool bMoveIgnoresDestruction;
        public bool bNoEncroachCheck;
        public bool bCollideAsEncroacher;
        public bool bPhysRigidBodyOutOfWorldCheck;
        public bool bCallRigidBodyWakeEvents;
        public bool bBounce;
        public bool bJustTeleported;
        public bool bNetInitial;
        public bool bNetOwner;
        public bool bHiddenEd;
        public bool bHiddenEdGroup;
        public bool bHiddenEdCustom;
        public bool bEdShouldSnap;
        public bool bPathColliding;
        public bool bScriptInitialized;
        public bool bLockLocation;
        public bool bForceAllowKismetModification;
        public bool bTickDuringPlayersOnly;
        public bool bNoTick;
        public bool m_bWasInVehicleTransition;
        public bool m_bAlwaysCollide;
        public bool OverridePhysMat;
        public EPhysics Physics;
        public ENetRole RemoteRole;
        public ENetRole Role;
        public ETickingGroup TickGroup;
    }
    public class Info : Actor
    {
    }
    public class AccessControl : Info
    {
        public string ACDisplayText;
        public string ACDescText;
        public string[] IPPolicies;
        public UniqueNetId[] BannedIDs;
        public string IPBanned;
        public string WrongPassword;
        public string NeedPassword;
        public string SessionBanned;
        public string KickedMsg;
        public string DefaultKickReason;
        public string IdleKickReason;
        public string AdminPassword;
        public string GamePassword;
        public int AdminClass;
        public bool bDontAddDefaultAdmin;
    }
    public class ActorComponent : Component
    {
        public bool bTickInEditor;
        public ETickingGroup TickGroup;
        public EComponentType ComponentType;
    }
    public class ActorFactory : Object
    {
        public string MenuName;
        public int GameplayActorClass;
        public int NewActorClass;
        public int MenuPriority;
        public int AlternateMenuPriority;
        public bool bPlaceable;
        public bool m_bNoCollisionFail;
    }
    public class ActorFactoryActor : ActorFactory
    {
        public int ActorClass;
    }
    public class ActorFactoryAI : ActorFactory
    {
        public string PawnName;
        public int[] InventoryList;
        public int ControllerClass;
        public int PawnClass;
        public int TeamIndex;
        public bool bGiveDefaultInventory;
    }
    public class ActorFactoryAmbientSound : ActorFactory
    {
        public int AmbientSoundCue;
    }
    public class ActorFactoryAmbientSoundMovable : ActorFactoryAmbientSound
    {
    }
    public class ActorFactoryAmbientSoundSimple : ActorFactory
    {
        public int SoundNodeWave;
    }
    public class ActorFactoryAmbientSoundNonLoop : ActorFactoryAmbientSoundSimple
    {
    }
    public class ActorFactoryAmbientSoundSimpleToggleable : ActorFactoryAmbientSoundSimple
    {
    }
    public class ActorFactoryApexDestructible : ActorFactory
    {
        public int DestructibleAsset;
    }
    public class ActorFactoryArchetype : ActorFactory
    {
        public int ArchetypeActor;
    }
    public class ActorFactoryCoverLink : ActorFactory
    {
    }
    public class ActorFactoryDecal : ActorFactory
    {
        public int DecalMaterial;
    }
    public class ActorFactoryDominantDirectionalLight : ActorFactory
    {
    }
    public class ActorFactoryDynamicSM : ActorFactory
    {
        public Vector DrawScale3D;
        public int StaticMesh;
        public bool bNoEncroachCheck;
        public bool bNotifyRigidBodyCollision;
        public bool bBlockRigidBody;
        public bool bUseCompartment;
        public bool bCastDynamicShadow;
        public ECollisionType CollisionType;
    }
    public class ActorFactoryEmitter : ActorFactory
    {
        public int ParticleSystem;
    }
    public class ActorFactoryFogVolumeConstantDensityInfo : ActorFactory
    {
        public int SelectedMaterial;
        public bool bNothingSelected;
    }
    public class ActorFactoryFogVolumeLinearHalfspaceDensityInfo : ActorFactoryFogVolumeConstantDensityInfo
    {
    }
    public class ActorFactoryFogVolumeSphericalDensityInfo : ActorFactoryFogVolumeConstantDensityInfo
    {
    }
    public class ActorFactoryFracturedStaticMesh : ActorFactory
    {
        public Vector DrawScale3D;
        public int FracturedStaticMesh;
    }
    public class ActorFactoryStaticMesh : ActorFactory
    {
        public Vector DrawScale3D;
        public int StaticMesh;
    }
    public class ActorFactoryInteractiveFoliage : ActorFactoryStaticMesh
    {
    }
    public class ActorFactoryLensFlare : ActorFactory
    {
        public int LensFlareObject;
    }
    public class ActorFactoryLight : ActorFactory
    {
    }
    public class ActorFactoryMover : ActorFactoryDynamicSM
    {
    }
    public class ActorFactoryPathNode : ActorFactory
    {
    }
    public class ActorFactoryPhysicsAsset : ActorFactory
    {
        public Vector InitialVelocity;
        public Vector DrawScale3D;
        public int PhysicsAsset;
        public int SkeletalMesh;
        public bool bStartAwake;
        public bool bDamageAppliesImpulse;
        public bool bNotifyRigidBodyCollision;
        public bool bUseCompartment;
        public bool bCastDynamicShadow;
    }
    public class ActorFactoryPhysXDestructible : ActorFactory
    {
        public Vector DrawScale3D;
        public int PhysXDestructible;
    }
    public class ActorFactoryPlayerStart : ActorFactory
    {
    }
    public class ActorFactoryPylon : ActorFactory
    {
    }
    public class Scene : Object
    {
    }
    public class PrimitiveComponent : ActorComponent
    {
        public int DetachFence;
        public Pointer[] DecalList;
        public int ShadowParent;
        public int ReplacementPrimitive;
        public int LightEnvironment;
        public float MinDrawDistance;
        public float MassiveLODDistance;
        public float MaxDrawDistance;
        public float CachedMaxDrawDistance;
        public ESceneDepthPriorityGroup DepthPriorityGroup;
        public ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup;
        public EDetailMode DetailMode;
        public ERBCollisionChannel RBChannel;
        public byte RBDominanceGroup;
        public float MotionBlurScale;
        public bool bUseViewOwnerDepthPriorityGroup;
        public bool bAllowCullDistanceVolume;
        public bool HiddenGame;
        public bool HiddenEditor;
        public bool bOwnerNoSee;
        public bool bOnlyOwnerSee;
        public bool bIgnoreOwnerHidden;
        public bool bUseAsOccluder;
        public bool bAllowApproximateOcclusion;
        public bool bFirstFrameOcclusion;
        public bool bIgnoreNearPlaneIntersection;
        public bool bSelectable;
        public bool bForceMipStreaming;
        public bool bAcceptsStaticDecals;
        public bool bAcceptsDynamicDecals;
        public bool bAcceptsFoliage;
        public bool CastShadow;
        public bool bForceDirectLightMap;
        public bool bCastDynamicShadow;
        public bool bSelfShadowOnly;
        public bool bAcceptsDynamicDominantLightShadows;
        public bool bCastHiddenShadow;
        public bool bAcceptsLights;
        public bool bAcceptsDynamicLights;
        public bool bUseOnePassLightingOnTranslucency;
        public bool bUsePrecomputedShadows;
        public bool bCullModulatedShadowOnBackfaces;
        public bool bCullModulatedShadowOnEmissive;
        public bool bAllowAmbientOcclusion;
        public bool bBioForcePrecomputedShadows;
        public bool CollideActors;
        public bool AlwaysCheckCollision;
        public bool BlockActors;
        public bool BlockZeroExtent;
        public bool BlockNonZeroExtent;
        public bool CanBlockCamera;
        public bool BlockRigidBody;
        public bool bDisableAllRigidBody;
        public bool bSkipRBGeomCreation;
        public bool bNotifyRigidBodyCollision;
        public bool bFluidDrain;
        public bool bFluidTwoWay;
        public bool bIgnoreRadialImpulse;
        public bool bIgnoreRadialForce;
        public bool bIgnoreForceField;
        public bool bUseCompartment;
        public bool AlwaysLoadOnClient;
        public bool AlwaysLoadOnServer;
        public bool bIgnoreHiddenActorsMembership;
        public bool AbsoluteTranslation;
        public bool AbsoluteRotation;
        public bool AbsoluteScale;
        public bool bAllowShadowFade;
        public int TranslucencySortPriority;
        public int LocalTranslucencySortPriority;
        public LightingChannelContainer LightingChannels;
        public RBCollisionChannelContainer RBCollideWithChannels;
        public int PhysMaterialOverride;
        public int BodyInstance;
        public Vector Translation;
        public Rotator Rotation;
        public float Scale;
        public Vector Scale3D;
        public float ScriptRigidBodyCollisionThreshold;
    }
    public class ActorFactoryRigidBody : ActorFactoryDynamicSM
    {
        public Vector InitialVelocity;
        public int AdditionalVelocity;
        public int InitialAngularVelocity;
        public float StayUprightTorqueFactor;
        public float StayUprightMaxTorque;
        public bool bStartAwake;
        public bool bDamageAppliesImpulse;
        public bool bLocalSpaceInitialVelocity;
        public bool bEnableStayUprightSpring;
        public ERBCollisionChannel RBChannel;
    }
    public class ActorFactorySkeletalMesh : ActorFactory
    {
        public NameReference AnimSequenceName;
        public int SkeletalMesh;
        public int AnimSet;
    }
    public class ActorFactorySkeletalMeshCinematic : ActorFactorySkeletalMesh
    {
    }
    public class ActorFactorySkeletalMeshMAT : ActorFactorySkeletalMesh
    {
    }
    public class ActorFactoryTrigger : ActorFactory
    {
    }
    public class ActorFactoryVehicle : ActorFactory
    {
        public int VehicleClass;
    }
    public class Controller : Actor
    {
        public Pointer VfTable_IInterface_NavigationHandle;
        public int[] RouteCache;
        public VisiblePortalInfo[] VisiblePortals;
        public int NavigationHandleClass;
        public BasedPosition DestinationPosition;
        public BasedPosition FocalPosition;
        public BasedPosition AdjustPosition;
        public int GoalList;
        public Vector CurrentPathDir;
        public Vector ViewX;
        public Vector ViewY;
        public Vector ViewZ;
        public Vector FailedReachLocation;
        public Rotator OldBasedRotation;
        public Vector NavMeshPath_SearchExtent_Modifier;
        public NameReference PendingDoorState;
        public int Pawn;
        public int PlayerReplicationInfo;
        public int PlayerNum;
        public int NextController;
        public float MinHitWall;
        public int NavigationHandle;
        public float MoveTimer;
        public int MoveTarget;
        public int Focus;
        public int StartSpot;
        public int CurrentPath;
        public int NextRoutePath;
        public int RouteGoal;
        public float RouteDist;
        public float LastRouteFind;
        public int PendingMover;
        public int FailedMoveTarget;
        public int MoveFailureCount;
        public int PendingDoor;
        public float GroundPitchTime;
        public int ShotTarget;
        public int LastFailedReach;
        public float FailedReachTime;
        public float SightCounter;
        public float SightCounterInterval;
        public float InUseNodeCostMultiplier;
        public int HighJumpNodeCostModifier;
        public float MaxMoveTowardPawnTargetTime;
        public int Enemy;
        public float LaneOffset;
        public bool bIsPlayer;
        public bool bGodMode;
        public bool bAffectedByHitEffects;
        public bool bSoaking;
        public bool bSlowerZAcquire;
        public bool bNotifyPostLanded;
        public bool bNotifyApex;
        public bool bAdvancedTactics;
        public bool bCanDoSpecial;
        public bool bAdjusting;
        public bool bPreparingMove;
        public bool bForceStrafe;
        public bool bLOSflag;
        public bool bSkipExtraLOSChecks;
        public bool bNotifyFallingHitWall;
        public bool bPreciseDestination;
        public bool bSeeFriendly;
        public bool bUsingPathLanes;
        public byte bFire;
        public byte bAltFire;
    }
    public class CylinderComponent : PrimitiveComponent
    {
        public float CollisionHeight;
        public float CollisionRadius;
        public Color CylinderColor;
        public bool bDrawBoundingBox;
        public bool bDrawNonColliding;
        public bool bAlwaysRenderIfSelected;
    }
    public class PostProcessEffect : Object
    {
        public NameReference EffectName;
        public int NodePosY;
        public int NodePosX;
        public int DrawWidth;
        public int DrawHeight;
        public int OutDrawY;
        public int InDrawY;
        public bool bShowInEditor;
        public bool bShowInGame;
        public bool bUseWorldSettings;
        public bool bMergePostUber;
        public bool bAffectsLightingOnly;
        public ESceneDepthPriorityGroup SceneDPG;
    }
    public class DOFEffect : PostProcessEffect
    {
        public Vector FocusPosition;
        public float FalloffExponent;
        public float BlurKernelSize;
        public float MaxNearBlurAmount;
        public float MaxFarBlurAmount;
        public Color ModulateBlurColor;
        public float FocusInnerRadius;
        public float FocusDistance;
        public EFocusType FocusType;
    }
    public class Camera : Actor
    {
        public PostProcessSettings CamPostProcessSettings;
        public int[] ModifierList;
        public int[] ActiveAnims;
        public int[] FreeAnims;
        public int CameraShakeCamModClass;
        public TViewTarget ViewTarget;
        public TViewTarget PendingViewTarget;
        public TCameraCache CameraCache;
        public int AnimInstPool;
        public ViewTargetTransitionParams BlendParams;
        public Vector ColorScale;
        public Vector DesiredColorScale;
        public Vector OriginalColorScale;
        public Vector FreeCamOffset;
        public NameReference CameraStyle;
        public Vector2D FadeAlpha;
        public int PCOwner;
        public float DefaultFOV;
        public float LockedFOV;
        public float ConstrainedAspectRatio;
        public float DefaultAspectRatio;
        public Color FadeColor;
        public float FadeAmount;
        public float CamOverridePostProcessAlpha;
        public float ColorScaleInterpDuration;
        public float ColorScaleInterpStartTime;
        public float BlendTimeToGo;
        public float FreeCamDistance;
        public float FadeTime;
        public float FadeTimeRemaining;
        public bool bLockedFOV;
        public bool bConstrainAspectRatio;
        public bool bEnableFading;
        public bool bEnableColorScaling;
        public bool bEnableColorScaleInterp;
    }
    public class SequenceObject : Object
    {
        public string[] m_aObjComment;
        public int ObjInstanceVersion;
        public int ParentSequence;
        public bool bDeletable;
        public bool bOutputObjCommentToScreen;
    }
    public class SequenceOp : SequenceObject
    {
        public SeqOpInputLink[] InputLinks;
        public SeqOpOutputLink[] OutputLinks;
        public SeqVarLink[] VariableLinks;
        public SeqEventLink[] EventLinks;
        public bool bActive;
        public bool bLatentExecution;
        public bool bManualHandleOutputs;
        public bool bAutoActivateOutputLinks;
    }
    public class SequenceAction : SequenceOp
    {
        public int[] Targets;
        public NameReference HandlerName;
        public bool bCallHandler;
    }
    public class SeqAct_ControlMovieTexture : SequenceAction
    {
        public int MovieTexture;
    }
    public class OnlineSubsystem : Object
    {
        public Pointer VfTable_FTickableObject;
        public int BuildIdOverride;
        public float AsyncMinCompletionTime;
        public bool bUseBuildIdOverride;
        public NamedSession[] Sessions;
        public NamedInterface[] NamedInterfaces;
        public NamedInterfaceDef[] NamedInterfaceDefs;
    }
    public class MeshComponent : PrimitiveComponent
    {
        public int[] Materials;
    }
    public class SkeletalMeshComponent : MeshComponent
    {
        public int SkeletalMesh;
        public int AttachedToSkelComponent;
        public int AnimTreeTemplate;
        public int Animations;
        public int PhysicsAsset;
        public float PhysicsWeight;
        public float GlobalAnimRateScale;
        public Color WireframeColor;
        public int ParentAnimComponent;
        public int[] AnimSets;
        public int[] MorphSets;
        public Attachment[] Attachments;
        public int ForcedLodModel;
        public int MinLodModel;
        public int PredictedLODLevel;
        public int OldPredictedLODLevel;
        public float MaxDistanceFactor;
        public int bForceWireframe;
        public int bForceRefpose;
        public int bOldForceRefPose;
        public bool bNoSkeletonUpdate;
        public int bDisplayBones;
        public int bShowPrePhysBones;
        public int bHideSkin;
        public int bForceRawOffset;
        public int bIgnoreControllers;
        public int bTransformFromAnimParent;
        public int bUseSingleBodyPhysics;
        public float MinDistFactorForKinematicUpdate;
        public bool bSkipAllUpdateWhenPhysicsAsleep;
        public bool bConsiderAllBodiesForBounds;
        public bool bUpdateSkelWhenNotRendered;
        public bool bIgnoreControllersWhenNotRendered;
        public bool bTickAnimNodesWhenNotRendered;
        public bool bNotUpdatingKinematicDueToDistance;
        public bool bForceDiscardRootMotion;
        public bool bRootMotionModeChangeNotify;
        public bool bRootMotionExtractedNotify;
        public bool bDisableFaceFXMaterialInstanceCreation;
        public bool bHasPhysicsAssetInstance;
        public bool bUpdateKinematicBonesFromAnimation;
        public bool bUpdateJointsFromAnimation;
        public bool bSkelCompFixed;
        public bool bHasHadPhysicsBlendedIn;
        public bool bForceUpdateAttachmentsInTick;
        public bool bPerBoneVolumeEffects;
        public bool bSyncActorLocationToRootRigidBody;
        public bool bUseRawData;
        public bool bDisableWarningWhenAnimNotFound;
        public bool bOverrideAttachmentOwnerVisibility;
        public bool bPauseAnims;
        public bool bChartDistanceFactor;
        public bool bEnableLineCheckWithBounds;
        public bool bIsFrozen;
        public Vector LineCheckBoundsScale;
        public bool bEnableClothSimulation;
        public bool bDisableClothCollision;
        public bool bClothFrozen;
        public bool bAutoFreezeClothWhenNotRendered;
        public bool bClothAwakeOnStartup;
        public bool bClothBaseVelClamp;
        public bool bClothBaseVelInterp;
        public bool bAttachClothVertsToBaseBody;
        public bool bIsClothOnStaticObject;
        public bool bUpdatedFixedClothVerts;
        public bool bClothPositionalDampening;
        public bool bClothWindRelativeToOwner;
        public bool bRecentlyRendered;
        public bool bCacheAnimSequenceNodes;
        public bool bAlwaysUpdateMeshObject;
        public Vector FrozenLocalToWorldPos;
        public Rotator FrozenLocalToWorldRot;
        public Vector ClothExternalForce;
        public Vector ClothWind;
        public Vector ClothBaseVelClampRange;
        public float ClothBlendWeight;
        public float ClothDynamicBlendWeight;
        public float ClothBlendMinDistanceFactor;
        public float ClothBlendMaxDistanceFactor;
        public Vector MinPosDampRange;
        public Vector MaxPosDampRange;
        public Vector MinPosDampScale;
        public Vector MaxPosDampScale;
        public Vector[] ClothMeshPosData;
        public Vector[] ClothMeshNormalData;
        public int[] ClothMeshIndexData;
        public int NumClothMeshVerts;
        public int NumClothMeshIndices;
        public int[] ClothMeshParentData;
        public int NumClothMeshParentIndices;
        public int ClothDirtyBufferFlag;
        public ERBCollisionChannel ClothRBChannel;
        public RBCollisionChannelContainer ClothRBCollideWithChannels;
        public float ClothForceScale;
        public float ClothImpulseScale;
        public float ClothAttachmentTearFactor;
        public bool bClothUseCompartment;
        public float MinDistanceForClothReset;
        public bool bEnableSoftBodySimulation;
        public Vector[] SoftBodyTetraPosData;
        public int[] SoftBodyTetraIndexData;
        public int NumSoftBodyTetraVerts;
        public int NumSoftBodyTetraIndices;
        public float SoftBodyImpulseScale;
        public bool bSoftBodyFrozen;
        public bool bAutoFreezeSoftBodyWhenNotRendered;
        public bool bSoftBodyAwakeOnStartup;
        public bool bSoftBodyUseCompartment;
        public ERBCollisionChannel SoftBodyRBChannel;
        public RBCollisionChannelContainer SoftBodyRBCollideWithChannels;
        public int LimitMaterial;
        public Vector RootMotionAccelScale;
        public ERootMotionMode RootMotionMode;
        public ERootMotionMode PreviousRMM;
        public ERootMotionMode PendingRMM;
        public ERootMotionMode OldPendingRMM;
        public int bRMMOneFrameDelay;
        public ERootMotionRotationMode RootMotionRotationMode;
        public EFaceFXBlendMode FaceFXBlendMode;
        public float FaceFXTimer;
        public bool bOverrideParentSkeleton;
        public NameReference nmOverrideStartBoneName;
        public int MinAutoLODLevel;
        public int CachedFaceFXAudioComp;
        public bool m_bBioAreRigidBodiesAwake;
        public bool bSupportsLowDetailProxyRendering;
    }
    public class PlayerController : Controller
    {
        public string LastBroadcastString;
        public string QuickSaveString;
        public string NoPauseMessage;
        public string ViewingFrom;
        public string OwnCamera;
        public string ForceFeedbackManagerClassName;
        public UniqueNetId[] VoiceMuteList;
        public UniqueNetId[] GameplayVoiceMuteList;
        public UniqueNetId[] VoicePacketFilter;
        public InputMatchRequest[] InputRequests;
        public NameReference[] PendingMapChangeLevelNames;
        public DebugTextInfo[] DebugTextList;
        public int[] HearSoundActiveComponents;
        public int[] HearSoundPoolComponents;
        public int[] HiddenActors;
        public int __CanUnpause__Delegate;
        public int __InputMatchDelegate__Delegate;
        public int CameraClass;
        public int PlayerOwnerDataStoreClass;
        public int SavedMoveClass;
        public int CheatClass;
        public int InputClass;
        public ClientAdjustment PendingAdjustment;
        public Rotator TargetViewRotation;
        public Rotator BlendedTargetViewRotation;
        public Vector LastAckedAccel;
        public Vector OldFloor;
        public Vector FailedPathStart;
        public NameReference DelayedJoinSessionName;
        public int Player;
        public int PlayerCamera;
        public int CurrentPlayerData;
        public float MaxResponseTime;
        public float WaitDelay;
        public int AcknowledgedPawn;
        public int ViewTarget;
        public int RealViewTarget;
        public float FOVAngle;
        public float DesiredFOV;
        public float DefaultFOV;
        public float LODDistanceFactor;
        public float TargetEyeHeight;
        public int myHUD;
        public int SavedMoves;
        public int FreeMoves;
        public int PendingMove;
        public float CurrentTimeStamp;
        public float LastUpdateTime;
        public float ServerTimeStamp;
        public float TimeMargin;
        public float ClientUpdateTime;
        public float MaxTimeMargin;
        public float LastActiveTime;
        public int ClientCap;
        public float LastPingUpdate;
        public float LastSpeedHackLog;
        public int GroundPitch;
        public int CylinderComponent;
        public int OnlineSub;
        public int OnlinePlayerData;
        public float InteractDistance;
        public float LastBroadcastTime;
        public int MyCoverReplicator;
        public float SpectatorCameraSpeed;
        public int PendingSwapConnection;
        public float MinRespawnDelay;
        public int MaxConcurrentHearSounds;
        public float LastSpectatorStateSynchTime;
        public bool bFrozen;
        public bool bPressedJump;
        public bool bDoubleJump;
        public bool bUpdatePosition;
        public bool bUpdating;
        public bool bNeverSwitchOnPickup;
        public bool bCheatFlying;
        public bool bCameraPositionLocked;
        public bool bNoTextToSpeechVoiceMessages;
        public bool bTextToSpeechTeamMessagesOnly;
        public bool bShortConnectTimeOut;
        public bool bPendingDestroy;
        public bool bWasSpeedHack;
        public bool bWasSaturated;
        public bool bAimingHelp;
        public bool bClientSimulatingViewTarget;
        public bool bHasVoiceHandshakeCompleted;
        public bool bCinematicMode;
        public bool bCinemaDisableInputMove;
        public bool bCinemaDisableInputLook;
        public bool bIgnoreNetworkMessages;
        public bool bReplicateAllPawns;
        public bool bIsUsingStreamingVolumes;
        public bool bIsExternalUIOpen;
        public bool bIsControllerConnected;
        public bool bCheckSoundOcclusion;
        public bool bLogHearSoundOverflow;
        public bool bCheckRelevancyThroughPortals;
        public bool bDebugClientAdjustPosition;
        public EDoubleClickDir DoubleClickDir;
        public byte bIgnoreMoveInput;
        public byte bIgnoreLookInput;
        public byte bRun;
        public byte bDuck;
        public byte NetPlayerIndex;
    }
    public class Admin : PlayerController
    {
    }
    public class ReachSpec : Object
    {
        public ActorReference End;
        public Vector Direction;
        public int Distance;
        public int Start;
        public int CollisionRadius;
        public int CollisionHeight;
        public int reachFlags;
        public int MaxLandingVelocity;
        public int BlockedBy;
        public int m_nBlockedCount;
        public bool bAddToNavigationOctree;
        public bool bCanCutCorners;
        public bool bCheckForObstructions;
        public bool bSkipPrune;
        public bool bIsMantle;
        public bool bDisabled;
        public byte bPruned;
        public byte PathColorIndex;
    }
    public class AdvancedReachSpec : ReachSpec
    {
    }
    public class AIController : Controller
    {
        public float Skill;
        public int ScriptedMoveTarget;
        public int ScriptedRoute;
        public int ScriptedRouteIndex;
        public int ScriptedFocus;
        public bool bAdjustFromWalls;
        public bool bReverseScriptedRoute;
    }
    public class NavigationPoint : Actor
    {
        public int[] PathList;
        public ActorReference[] Volumes;
        public Guid NavGuid;
        public Cylinder MaxPathSize;
        public int visitedWeight;
        public int bestPathWeight;
        public int nextNavigationPoint;
        public int nextOrdered;
        public int prevOrdered;
        public int previousPath;
        public int Cost;
        public int ExtraCost;
        public int InventoryCache;
        public float InventoryDist;
        public float LastDetourWeight;
        public int CylinderComponent;
        public int NetworkID;
        public int ApproximateLineOfFire;
        public bool bNoPathWarnings;
        public bool bBlocked;
        public bool bOneWayPath;
        public bool bNeverUseStrafing;
        public bool bAlwaysUseStrafing;
        public bool bForceNoStrafing;
        public bool bAutoBuilt;
        public bool bSpecialMove;
        public bool bNoAutoConnect;
        public bool bNotBased;
        public bool bPathsChanged;
        public bool bDestinationOnly;
        public bool bSourceOnly;
        public bool bSpecialForced;
        public bool bMustBeReachable;
        public bool bBlockable;
        public bool bFlyingPreferred;
        public bool bMayCausePain;
        public bool bVehicleDestination;
        public bool bMakeSourceOnly;
        public bool bMustTouchToReach;
        public bool bCanWalkOnToReach;
        public bool bBuildLongPaths;
        public bool bBlockedForVehicles;
        public bool bPreferredVehiclePath;
        public bool bRequiresPrecisionMovement;
        public bool bHasCrossLevelPaths;
    }
    public class Pylon : NavigationPoint
    {
        public Pointer VfTable_IEditorLinkSelectionInterface;
        public int[] ExpansionVolumes;
        public OctreeElementId OctreeId;
        public Pointer NavMeshPtr;
        public Pointer ObstacleMesh;
        public Pointer DynamicObstacleMesh;
        public Pointer OctreeIWasAddedTo;
        public Vector ExpansionSphereCenter;
        public int NextPylon;
        public float ExpansionRadius;
        public float MaxExpansionRadius;
        public int PylonRadiusPreview;
        public int RenderingComp;
        public int DebugEdgeCount;
        public bool bImportedMesh;
        public bool bUseExpansionSphereOverride;
        public bool bNeedsCostCheck;
        public bool bDrawEdgePolys;
        public bool bDrawPolyBounds;
        public bool bRenderInShowPaths;
        public bool bDrawWalkableSurface;
        public bool bDrawObstacleSurface;
        public bool bDisabled;
        public bool bForceObstacleMeshCollision;
    }
    public class AISwitchablePylon : Pylon
    {
        public bool bOpen;
    }
    public class AmbientOcclusionEffect : PostProcessEffect
    {
        public LinearColor OcclusionColor;
        public float OcclusionPower;
        public float OcclusionScale;
        public float OcclusionBias;
        public float MinOcclusion;
        public float OcclusionRadius;
        public float OcclusionAttenuation;
        public float OcclusionFadeoutMinDistance;
        public float OcclusionFadeoutMaxDistance;
        public float HaloDistanceThreshold;
        public float HaloDistanceScale;
        public float HaloOcclusion;
        public float EdgeDistanceThreshold;
        public float EdgeDistanceScale;
        public float FilterDistanceScale;
        public int FilterSize;
        public float HistoryConvergenceTime;
        public float HistoryWeightConvergenceTime;
        public bool SSAO2;
        public EAmbientOcclusionQuality OcclusionQuality;
    }
    public class Keypoint : Actor
    {
    }
    public class AmbientSound : Keypoint
    {
        public int AudioComponent;
        public bool bAutoPlay;
        public bool bIsPlaying;
    }
    public class AmbientSoundMovable : AmbientSound
    {
    }
    public class SoundNode : Object
    {
        public int[] ChildNodes;
        public int NodeUpdateHint;
    }
    public class DistributionFloatUniform : DistributionFloat
    {
        public float Min;
        public float Max;
        public bool bConsistentValue;
    }
    public class SoundNodeAttenuation : SoundNode
    {
        public float dBAttenuationAtMax;
        public float RadiusMin;
        public float RadiusMax;
        public float LPFRadiusMin;
        public float LPFRadiusMax;
        public bool bAttenuate;
        public bool bSpatialize;
        public bool bAttenuateWithLPF;
        public SoundDistanceModel DistanceAlgorithm;
        public ESoundDistanceCalc DistanceType;
    }
    public class SoundNodeAmbient : SoundNode
    {
        public AmbientSoundSlot[] SoundSlots;
        public float dBAttenuationAtMax;
        public float RadiusMin;
        public float RadiusMax;
        public float LPFRadiusMin;
        public float LPFRadiusMax;
        public float PitchMin;
        public float PitchMax;
        public float VolumeMin;
        public float VolumeMax;
        public bool bAttenuate;
        public bool bSpatialize;
        public bool bAttenuateWithLPF;
        public SoundDistanceModel DistanceModel;
    }
    public class AmbientSoundSimple : AmbientSound
    {
        public int AmbientProperties;
        public int SoundCueInstance;
        public int SoundNodeInstance;
    }
    public class SoundNodeAmbientNonLoop : SoundNodeAmbient
    {
        public float DelayMin;
        public float DelayMax;
    }
    public class AmbientSoundNonLoop : AmbientSoundSimple
    {
    }
    public class AmbientSoundSimpleToggleable : AmbientSoundSimple
    {
        public float FadeInDuration;
        public float FadeInVolumeLevel;
        public float FadeOutDuration;
        public float FadeOutVolumeLevel;
        public bool bCurrentlyPlaying;
        public bool bFadeOnToggle;
    }
    public class AnimSequence : Object
    {
        public byte[] CompressedByteStream;
        public AnimNotifyEvent[] Notifies;
        public int[] MetaData;
        public CurveTrack[] CurveData;
        public int[] CompressedTrackOffsets;
        public RawAnimSequenceTrack[] AdditiveBasePose;
        public NameReference SequenceName;
        public float SequenceLength;
        public int NumFrames;
        public float RateScale;
        public int m_pBioAnimSetData;
        public int EncodingPkgVersion;
        public bool bNoLoopingInterpolation;
        public bool bIsAdditive;
        public AnimationCompressionFormat TranslationCompressionFormat;
        public AnimationCompressionFormat RotationCompressionFormat;
        public AnimationKeyFormat KeyEncodingFormat;
    }
    public class AnimationCompressionAlgorithm : Object
    {
        public string Description;
        public bool bNeedsSkeleton;
        public AnimationCompressionFormat TranslationCompressionFormat;
        public AnimationCompressionFormat RotationCompressionFormat;
    }
    public class AnimationCompressionAlgorithm_BitwiseCompressOnly : AnimationCompressionAlgorithm
    {
    }
    public class AnimationCompressionAlgorithm_RemoveEverySecondKey : AnimationCompressionAlgorithm
    {
        public int MinKeys;
        public bool bStartAtSecondKey;
    }
    public class AnimationCompressionAlgorithm_RemoveLinearKeys : AnimationCompressionAlgorithm
    {
        public float MaxPosDiff;
        public float MaxAngleDiff;
        public float MaxEffectorDiff;
        public float MinEffectorDiff;
        public float ParentKeyScale;
        public bool bRetarget;
    }
    public class AnimationCompressionAlgorithm_RemoveTrivialKeys : AnimationCompressionAlgorithm
    {
        public float MaxPosDiff;
        public float MaxAngleDiff;
    }
    public class AnimationCompressionAlgorithm_RevertToRaw : AnimationCompressionAlgorithm
    {
    }
    public class AnimMetaData : Object
    {
    }
    public class AnimMetaData_SkelControl : AnimMetaData
    {
        public NameReference[] SkelControlNameList;
        public bool bFullControlOverController;
    }
    public class AnimMetaData_SkelControlKeyFrame : AnimMetaData_SkelControl
    {
        public TimeModifier[] KeyFrames;
    }
    public class AnimObject : Object
    {
    }
    public class AnimNode : AnimObject
    {
        public NameReference NodeName;
        public float NodeTotalWeight;
        public bool bSkipTickWhenZeroWeight;
        public bool bTickDuringPausedAnims;
    }
    public class AnimNodeBlendBase : AnimNode
    {
        public AnimBlendChild[] Children;
        public bool bFixNumChildren;
        public AlphaBlendType BlendTypeAlpha;
    }
    public class AnimNode_MultiBlendPerBone : AnimNodeBlendBase
    {
        public PerBoneMaskInfo[] MaskList;
        public EBlendType RotationBlendType;
    }
    public class AnimNodeBlend : AnimNodeBlendBase
    {
        public float Child2Weight;
        public float Child2WeightTarget;
        public float BlendTimeToGo;
        public bool bSkipBlendWhenNotRendered;
    }
    public class AnimNodeAdditiveBlending : AnimNodeBlend
    {
        public bool bPassThroughWhenNotRendered;
    }
    public class AnimNodeAimOffset : AnimNodeBlendBase
    {
        public AimOffsetProfile[] Profiles;
        public Vector2D Aim;
        public Vector2D AngleOffset;
        public int PassThroughAtOrAboveLOD;
        public int CurrentProfileIndex;
        public bool bForceAimDir;
        public bool bBakeFromAnimations;
        public bool bPassThroughWhenNotRendered;
        public bool bSynchronizeNodesInEditor;
        public EAnimAimDir ForcedAimDir;
    }
    public class AnimNodeBlendList : AnimNodeBlendBase
    {
        public float[] TargetWeight;
        public float BlendTimeToGo;
        public int ActiveChildIndex;
        public bool bPlayActiveChild;
        public bool bForceChildFullWeightWhenBecomingRelevant;
        public bool bSkipBlendWhenNotRendered;
    }
    public class AnimNodeBlendByBase : AnimNodeBlendList
    {
        public int ActorClass;
        public NameReference ActorTag;
        public float BlendTime;
        public EBaseBlendType Type;
    }
    public class AnimNodeBlendByPhysics : AnimNodeBlendList
    {
    }
    public class AnimNodeBlendByPosture : AnimNodeBlendList
    {
    }
    public class AnimNodeBlendByProperty : AnimNodeBlendList
    {
        public NameReference PropertyName;
        public float BlendTime;
        public float FloatPropMin;
        public float FloatPropMax;
        public float BlendToChild1Time;
        public float BlendToChild2Time;
        public bool bUseOwnersBase;
        public bool bUseSpecificBlendTimes;
        public bool bSynchronizeNodesInEditor;
    }
    public class AnimNodeBlendBySpeed : AnimNodeBlendList
    {
        public float[] Constraints;
        public float Speed;
        public int LastChannel;
        public float BlendUpTime;
        public float BlendDownTime;
        public float BlendDownPerc;
        public float BlendUpDelay;
        public float BlendDownDelay;
        public bool bUseAcceleration;
    }
    public class AnimNodeBlendDirectional : AnimNodeBlendBase
    {
        public Rotator RotationOffset;
        public float DirDegreesPerSecond;
        public float DirAngle;
        public int SingleAnimAtOrAboveLOD;
    }
    public class AnimNodeBlendMultiBone : AnimNodeBlendBase
    {
        public ChildBoneBlendInfo[] BlendTargetList;
    }
    public class AnimNodeBlendPerBone : AnimNodeBlend
    {
        public NameReference[] BranchStartBoneName;
        public float[] Child2PerBoneWeight;
        public byte[] LocalToCompReqBones;
        public bool bForceLocalSpaceBlend;
    }
    public class AnimNodeCrossfader : AnimNodeBlend
    {
        public NameReference DefaultAnimSeqName;
        public float PendingBlendOutTimeOneShot;
        public bool bDontBlendOutOneShot;
    }
    public class AnimNodeMirror : AnimNodeBlendBase
    {
        public bool bEnableMirroring;
    }
    public class AnimNodeSequence : AnimNode
    {
        public NameReference AnimSeqName;
        public NameReference SynchGroupName;
        public float Rate;
        public float CurrentTime;
        public float NotifyWeightThreshold;
        public float SynchPosOffset;
        public int CameraAnim;
        public float CameraAnimScale;
        public float CameraAnimPlayRate;
        public bool bPlaying;
        public bool bLooping;
        public bool bCauseActorAnimEnd;
        public bool bCauseActorAnimPlay;
        public bool bZeroRootRotation;
        public bool bZeroRootTranslation;
        public bool bDisableWarningWhenAnimNotFound;
        public bool bHasWeightIgnoreNotifies;
        public bool bNoNotifies;
        public bool bForceRefposeWhenNotPlaying;
        public bool bIsIssuingNotifies;
        public bool bForceAlwaysSlave;
        public bool bSynchronize;
        public bool bReverseSync;
        public bool bShowTimeLineSlider;
        public bool bLoopCameraAnim;
        public bool bRandomizeCameraAnimLoopStartTime;
        public bool bEditorOnlyAddRefPoseToAdditiveAnimation;
        public ERootBoneAxis RootBoneOption;
        public ERootRotationOption RootRotationOption;
    }
    public class AnimNodePlayCustomAnim : AnimNodeBlend
    {
        public float CustomPendingBlendOutTime;
        public bool bIsPlayingCustomAnim;
    }
    public class AnimNodeRandom : AnimNodeBlendList
    {
        public RandomAnimInfo[] RandomInfo;
    }
    public class AnimNodeScalePlayRate : AnimNodeBlendBase
    {
        public float ScaleByValue;
    }
    public class AnimNodeScaleRateBySpeed : AnimNodeScalePlayRate
    {
        public float BaseSpeed;
    }
    public class AnimNodeSequenceBlendBase : AnimNodeSequence
    {
        public AnimBlendInfo[] Anims;
    }
    public class AnimNodeSequenceBlendByAim : AnimNodeSequenceBlendBase
    {
        public Vector2D Aim;
        public Vector2D HorizontalRange;
        public Vector2D VerticalRange;
        public Vector2D AngleOffset;
        public NameReference AnimName_LU;
        public NameReference AnimName_LC;
        public NameReference AnimName_LD;
        public NameReference AnimName_CU;
        public NameReference AnimName_CC;
        public NameReference AnimName_CD;
        public NameReference AnimName_RU;
        public NameReference AnimName_RC;
        public NameReference AnimName_RD;
    }
    public class AnimNodeSlot : AnimNodeBlendBase
    {
        public float[] TargetWeight;
        public float PendingBlendOutTime;
        public int CustomChildIndex;
        public int TargetChildIndex;
        public float BlendTimeToGo;
        public bool bIsPlayingCustomAnim;
        public bool bEarlyAnimEndNotify;
        public bool bSkipBlendWhenNotRendered;
        public bool bAdditiveAnimationsOverrideSource;
    }
    public class AnimNodeSynch : AnimNodeBlendBase
    {
        public SynchGroup[] Groups;
    }
    public class AnimNotify : Object
    {
    }
    public class AnimNotify_CameraEffect : AnimNotify
    {
        public int CameraLensEffect;
    }
    public class AnimNotify_Footstep : AnimNotify
    {
        public int FootDown;
    }
    public class AnimNotify_Kismet : AnimNotify
    {
        public NameReference NotifyName;
    }
    public class AnimNotify_Scripted : AnimNotify
    {
    }
    public class AnimNotify_PlayFaceFXAnim : AnimNotify_Scripted
    {
        public string GroupName;
        public string AnimName;
        public int FaceFXAnimSetRef;
        public int SoundCueToPlay;
        public float PlayFrequency;
        public bool bOverridePlayingAnim;
    }
    public class AnimNotify_PlayParticleEffect : AnimNotify
    {
        public NameReference SocketName;
        public NameReference BoneName;
        public int PSTemplate;
        public bool bIsExtremeContent;
        public bool bAttach;
        public bool bSkipIfOwnerIsHidden;
    }
    public class AnimNotify_Rumble : AnimNotify
    {
        public int PredefinedWaveForm;
        public int WaveForm;
        public float EffectRadius;
        public bool bCheckForBasedPlayer;
    }
    public class AnimNotify_Script : AnimNotify
    {
        public NameReference NotifyName;
        public NameReference NotifyTickName;
        public NameReference NotifyEndName;
    }
    public class AnimNotify_Sound : AnimNotify
    {
        public NameReference BoneName;
        public int SoundCue;
        public float PercentToPlay;
        public bool bFollowActor;
        public bool bIgnoreIfActorHidden;
    }
    public class AnimNotify_Trails : AnimNotify
    {
        public TrailSample[] TrailSampledData;
        public NameReference FirstEdgeSocketName;
        public NameReference SecondEdgeSocketName;
        public NameReference ControlPointSocketName;
        public int PSTemplate;
        public float LastStartTime;
        public float EndTime;
        public float SamplesPerSecond;
        public bool bIsExtremeContent;
        public bool bSkipIfOwnerIsHidden;
        public bool bResampleRequired;
    }
    public class AnimNotify_ViewShake : AnimNotify_Scripted
    {
        public Vector RotAmplitude;
        public Vector RotFrequency;
        public Vector LocAmplitude;
        public Vector LocFrequency;
        public NameReference BoneName;
        public float Duration;
        public float FOVAmplitude;
        public float FOVFrequency;
        public float ShakeRadius;
        public int ShakeParams;
        public bool bDoControllerVibration;
        public bool bUseBoneLocation;
    }
    public class AnimSet : Object
    {
        public int[] Sequences;
        public NameReference PreviewSkelMeshName;
        public int m_pBioAnimSetData;
    }
    public class AnimTree : AnimNodeBlendBase
    {
        public AnimGroup[] AnimGroups;
        public NameReference[] ComposePrePassBoneNames;
        public NameReference[] ComposePostPassBoneNames;
        public int[] RootMorphNodes;
        public SkelControlListHead[] SkelControlLists;
        public BoneAtom[] SavedPose;
        public bool bUseSavedPose;
    }
    public class ApexAsset : Object
    {
    }
    public class ApexClothingAsset : ApexAsset
    {
        public Pointer MApexAsset;
        public int UVChannelForTangentUpdate;
        public float MaxDistanceBlendTime;
        public float ContinuousRotationThreshold;
        public float ContinuousDistanceThreshold;
        public float LodWeightsMaxDistance;
        public float LodWeightsDistanceWeight;
        public float LodWeightsBias;
        public float LodWeightsBenefitsBias;
        public bool bUseHardwareCloth;
        public bool bFallbackSkinning;
        public bool bSlowStart;
    }
    public class ApexComponentBase : MeshComponent
    {
        public int Asset;
        public Color WireframeColor;
        public bool bAssetChanged;
    }
    public class LightEnvironmentComponent : ActorComponent
    {
        public bool bEnabled;
        public bool bForceNonCompositeDynamicLights;
    }
    public class LightComponent : ActorComponent
    {
        public Guid LightGuid;
        public Guid LightmapGuid;
        public float Brightness;
        public Color LightColor;
        public int Function;
        public float LightEnv_BouncedLightBrightness;
        public Color LightEnv_BouncedModulationColor;
        public bool bEnabled;
        public bool CastShadows;
        public bool CastStaticShadows;
        public bool CastDynamicShadows;
        public bool bCastCompositeShadow;
        public bool bAffectCompositeShadowDirection;
        public bool bNonModulatedSelfShadowing;
        public bool bSelfShadowOnly;
        public bool bAllowPreShadow;
        public bool bForceDynamicLight;
        public bool UseDirectLightMap;
        public bool bHasLightEverBeenBuiltIntoLightMap;
        public bool bOnlyAffectSameAndSpecifiedLevels;
        public bool bCanAffectDynamicPrimitivesOutsideDynamicChannel;
        public bool bUseVolumes;
        public bool bRenderLightShafts;
        public bool bPrecomputedLightingIsValid;
        public bool bAllowedToBypassLightEnvironments;
        public bool bCullModulatedShadowOnSubject;
        public bool bAllowDynamicProjective;
        public int LightEnvironment;
        public NameReference[] OtherLevelsToAffect;
        public LightingChannelContainer LightingChannels;
        public Pointer[] InclusionConvexVolumes;
        public Pointer[] ExclusionConvexVolumes;
        public ELightAffectsClassification LightAffectsClassification;
        public ELightShadowMode LightShadowMode;
        public LinearColor ModShadowColor;
        public float ModShadowFadeoutTime;
        public float ModShadowFadeoutExponent;
        public int LightListIndex;
        public EShadowProjectionTechnique ShadowProjectionTechnique;
        public EShadowFilterQuality ShadowFilterQuality;
        public int MinShadowResolution;
        public int MaxShadowResolution;
        public int ShadowFadeResolution;
        public float OcclusionDepthRange;
        public float BloomScale;
        public float BloomThreshold;
        public float BloomScreenBlendThreshold;
        public Color BloomTint;
        public float RadialBlurPercent;
        public float OcclusionMaskDarkness;
    }
    public class DynamicLightEnvironmentComponent : LightEnvironmentComponent
    {
        public int[] OverriddenLightComponents;
        public BoxSphereBounds OverriddenBounds;
        public LinearColor AmbientShadowColor;
        public LinearColor AmbientGlow;
        public LinearColor MaxModulatedShadowColor;
        public Vector AmbientShadowSourceDirection;
        public float InvisibleUpdateTime;
        public float MinTimeBetweenFullUpdates;
        public float ShadowInterpolationSpeed;
        public int NumVolumeVisibilitySamples;
        public float LightDesaturation;
        public float LightDistance;
        public float ShadowDistance;
        public float ModShadowFadeoutTime;
        public float ModShadowFadeoutExponent;
        public float DominantShadowTransitionStartDistance;
        public float DominantShadowTransitionEndDistance;
        public int MinShadowResolution;
        public int MaxShadowResolution;
        public int ShadowFadeResolution;
        public float BouncedLightingFactor;
        public float BouncedLightingDesaturation;
        public float MinShadowAngle;
        public LightingChannelContainer OverriddenLightingChannels;
        public bool bCastShadows;
        public bool bCompositeShadowsFromDynamicLights;
        public bool bForceCompositeAllLights;
        public bool bDynamic;
        public bool bSynthesizeDirectionalLight;
        public bool bSynthesizeSHLight;
        public bool bForceAllowLightEnvSphericalHarmonicLights;
        public bool bRequiresNonLatentUpdates;
        public bool bTraceFromClosestBoundsPoint;
        public bool bIsCharacterLightEnvironment;
        public bool bOverrideOwnerLightingChannels;
        public bool bShadowBouncedLight;
        public EShadowFilterQuality ShadowFilterQuality;
        public ELightShadowMode LightShadowMode;
        public EDynamicLightEnvironmentBoundsMethod BoundsMethod;
    }
    public class ApexStaticComponent : ApexComponentBase
    {
    }
    public class ApexStaticDestructibleComponent : ApexStaticComponent
    {
        public Pointer ApexDestructibleActor;
        public Pointer ApexDestructiblePreview;
    }
    public class ApexDestructibleActor : Actor
    {
        public byte[] VisibilityFactors;
        public int StaticDestructibleComponent;
    }
    public class ApexDestructibleAsset : ApexAsset
    {
        public NxDestructibleParameters DestructibleParameters;
        public int[] Materials;
        public string CrumbleEmitterName;
        public string DustEmitterName;
        public Pointer MApexAsset;
        public bool bDynamic;
    }
    public class ApexDynamicComponent : ApexComponentBase
    {
    }
    public class ApexGenericAsset : ApexAsset
    {
        public Pointer MApexAsset;
    }
    public class ArrowComponent : PrimitiveComponent
    {
        public Color ArrowColor;
        public float ArrowSize;
        public bool bTreatAsASprite;
    }
    public class AudioComponent : ActorComponent
    {
        public int SoundCue;
        public int CueFirstNode;
        public AudioComponentParam[] InstanceParameters;
        public bool bUseOwnerLocation;
        public bool bAutoPlay;
        public bool bAutoDestroy;
        public bool bStopWhenOwnerDestroyed;
        public bool bShouldRemainActiveIfDropped;
        public bool bWasOccluded;
        public bool bAllowSpatialization;
        public Pointer[] WaveInstances;
        public byte[] SoundNodeData;
        public MultiMap_Mirror SoundNodeResetWaveMap;
        public Pointer Listener;
        public float PlaybackTime;
        public int PortalVolume;
        public Vector location;
        public Vector ComponentLocation;
        public float SubtitlePriority;
        public float FadeInStartTime;
        public float FadeInStopTime;
        public float FadeInTargetVolume;
        public float FadeOutStartTime;
        public float FadeOutStopTime;
        public float FadeOutTargetVolume;
        public float AdjustVolumeStartTime;
        public float AdjustVolumeStopTime;
        public float AdjustVolumeTargetVolume;
        public float CurrAdjustVolumeTargetVolume;
        public int CurrentNotifyBufferFinishedHook;
        public Vector CurrentLocation;
        public float CurrentVolume;
        public float CurrentPitch;
        public float CurrentHighFrequencyGain;
        public int CurrentUseSpatialization;
        public int CurrentUseSeamlessLooping;
        public float CurrentVolumeMultiplier;
        public float CurrentPitchMultiplier;
        public float CurrentHighFrequencyGainMultiplier;
        public float CurrentVoiceCenterChannelVolume;
        public float CurrentVoiceRadioVolume;
        public Double LastUpdateTime;
        public float SourceInteriorVolume;
        public float SourceInteriorLPF;
        public float CurrentInteriorVolume;
        public float CurrentInteriorLPF;
        public float VolumeMultiplier;
        public float PitchMultiplier;
        public float HighFrequencyGainMultiplier;
        public float OcclusionCheckInterval;
        public int PreviewSoundRadius;
        public int __OnAudioFinished__Delegate;
        public int __OnQueueSubtitles__Delegate;
    }
    public class BrushComponent : PrimitiveComponent
    {
        public int Brush;
        public KAggregateGeom BrushAggGeom;
        public int CachedPhysBrushDataVersion;
        public bool bBlockComplexCollisionTrace;
    }
    public class Brush : Actor
    {
        public Color BrushColor;
        public int PolyFlags;
        public int _Brush;
        public int BrushComponent;
        public bool bColored;
        public bool bSolidWhenSelected;
        public bool bPlaceableFromClassBrowser;
        public ECsgOper CsgOper;
    }
    public class Volume : Brush
    {
        public string LocationName;
        public int AssociatedActor;
        public int LocationPriority;
        public int LocationNameStrref;
        public bool bForcePawnWalk;
        public bool bProcessAllActors;
        public bool bConsiderWhilePathBuilding;
    }
    public class ReverbVolume : Volume
    {
        public InteriorSettings AmbientZoneSettings;
        public ReverbSettings Settings;
        public float Priority;
    }
    public class AudioDevice : Subsystem
    {
        public QWord CurrentTick;
        public Double SoundModeStartTime;
        public Double SoundModeFadeInStartTime;
        public Double SoundModeFadeInEndTime;
        public Double SoundModeEndTime;
        public Double InteriorStartTime;
        public Double InteriorEndTime;
        public Double ExteriorEndTime;
        public Double InteriorLPFEndTime;
        public Double ExteriorLPFEndTime;
        public Pointer[] Sources;
        public Pointer[] FreeSources;
        public Listener[] Listeners;
        public Pointer CommonAudioPool;
        public Pointer Effects;
        public Pointer TextToSpeech;
        public InteriorSettings ListenerInteriorSettings;
        public NameReference BaseSoundModeName;
        public int MaxChannels;
        public int CommonAudioPoolSize;
        public float LowPassFilterResonance;
        public float MinCompressedDurationEditor;
        public float MinCompressedDurationGame;
        public int CommonAudioPoolFreeBytes;
        public int CurrentMode;
        public int ListenerVolumeIndex;
        public float InteriorVolumeInterp;
        public float InteriorLPFInterp;
        public float ExteriorVolumeInterp;
        public float ExteriorLPFInterp;
        public int TestAudioComponent;
        public bool bGameWasTicking;
        public EDebugState DebugState;
    }
    public class Ladder : NavigationPoint
    {
        public int MyLadder;
        public int LadderList;
    }
    public class AutoLadder : Ladder
    {
    }
    public class AutoTestManager : Info
    {
        public string[] AutomatedMapTestingList;
        public string AutomatedTestingExecCommandToRunAtStartMatch;
        public string AutomatedMapTestingTransitionMap;
        public string SentinelTaskDescription;
        public string SentinelTaskParameter;
        public string SentinelTagDesc;
        public string[] CommandsToRunAtEachTravelTheWorldNode;
        public int AutomatedPerfRemainingTime;
        public int AutomatedTestingMapIndex;
        public int NumAutomatedMapTestingCycles;
        public int NumberOfMatchesPlayed;
        public int NumMapListCyclesDone;
        public int NumMinutesPerMap;
        public bool bAutomatedPerfTesting;
        public bool bAutoContinueToNextRound;
        public bool bUsingAutomatedTestingMapList;
        public bool bAutomatedTestingWithOpen;
        public bool bCheckingForFragmentation;
        public bool bCheckingForMemLeaks;
        public bool bDoingASentinelRun;
    }
    public class BioAnimSetData : Object
    {
        public NameReference[] TrackBoneNames;
        public NameReference[] UseTranslationBoneNames;
        public NameReference[] ForceMeshTranslationBoneNames;
        public bool bAnimRotationOnly;
    }
    public class BioDynamicAnimSet : AnimSet
    {
        public Map_Mirror m_mapRefCounts;
        public NameReference m_nmOrigSetName;
    }
    public class BioDynamicLightEnvironmentComponent : DynamicLightEnvironmentComponent
    {
        public Vector KeyLightScale;
        public Vector FillLightScale;
        public Vector AmbientLightScale;
        public NameReference TargetBoneName;
        public float SHAmbientScale;
        public float BlendTime;
        public float PopAngleLimit;
        public float SurfaceBoundsRatio;
        public float MinPolarAngle;
        public float RimLightYaw;
        public float RimLightPitch;
        public float RimLightScale;
        public Color RimLightColor;
        public int CinematicLightRig;
        public float LightRigOrientation;
        public float LastFrameWeight_Cinematic;
        public float LastFrameWeight_Exploration;
        public bool LightAxisEnabled;
        public bool DisplayDebugLines;
        public bool ForcePolarKeyFill;
        public bool UseOptimizedLightingPath;
        public bool UseTargetBoneAsOrigin;
        public bool bLockEnvironment;
        public bool SmoothShadowLight_Cinematic;
        public bool SmoothShadowLight_Exploration;
        public bool bSupportsLightProbes;
        public EDLEStateType QualityType;
        public ERimLightControlType RimLightControl;
    }
    public class BioEngineEnums : Object
    {
    }
    public class InterpTrack : Object
    {
        public Pointer VfTable_FInterpEdInputInterface;
        public Pointer CurveEdVTable;
        public int TrackInstClass;
        public ETrackActiveCondition ActiveCondition;
        public string TrackTitle;
        public bool bOnePerGroup;
        public bool bDirGroupOnly;
        public bool bDisableTrack;
        public bool bIsAnimControlTrack;
        public bool bImportedTrack;
    }
    public class BioInterpTrack : InterpTrack
    {
        public BioTrackKey[] m_aTrackKeys;
    }
    public class InterpTrackInst : Object
    {
    }
    public class BioInterpTrackInst : InterpTrackInst
    {
        public float m_fLastUpdatePosition;
    }
    public class BioLineBloomEffect : PostProcessEffect
    {
        public BioFlareParameters BaseFlare;
        public BioFlareParameters OverrideFlare;
        public float BlurScale;
        public int BlurWidth;
    }
    public class MaterialExpression : Object
    {
    }
    public class Surface : Object
    {
    }
    public class MaterialInterface : Surface
    {
        public LightmassMaterialInterfaceSettings LightmassSettings;
        public Guid m_Guid;
        public Guid LightingGuid;
        public int FlattenedTexture;
    }
    public class BioMaterialExpressionEffectMatBaseProperty : MaterialExpression
    {
        public int Input;
        public EMaterialProperty BaseProperty;
    }
    public class MaterialExpressionParameter : MaterialExpression
    {
        public Guid ExpressionGUID;
        public NameReference ParameterName;
    }
    public class MaterialExpressionScalarParameter : MaterialExpressionParameter
    {
        public float DefaultValue;
    }
    public class BioMaterialExpressionEffectMatFractionEnabled : MaterialExpressionScalarParameter
    {
    }
    public class MaterialInstance : MaterialInterface
    {
        public Pointer StaticParameters;
        public Pointer StaticPermutationResources;
        public Pointer Resources;
        public Guid ParentLightingGuid;
        public int PhysMaterial;
        public int Parent;
        public bool bHasStaticPermutationResource;
        public bool ReentrantFlag;
    }
    public class MaterialInstanceConstant : MaterialInstance
    {
        public FontParameterValue[] FontParameterValues;
        public VectorParameterValue[] VectorParameterValues;
        public ScalarParameterValue[] ScalarParameterValues;
        public TextureParameterValue[] TextureParameterValues;
    }
    public class BioMaterialInstanceConstant : MaterialInstanceConstant
    {
    }
    public class BioMaterialInstanceEffect : PostProcessEffect
    {
        public int Material;
    }
    public class BioRemoteLogger : Object
    {
        public Pointer VfTable_FCallbackEventDevice;
        public Double m_LastEventSent;
        public string NoString;
        public string m_sRunMessage;
        public string m_sCurrentTest;
        public string m_sCurrentTestCasePath;
        public string m_UserName;
        public string m_remoteScreenshotPath;
        public string m_remoteSavegamePath;
        public string m_sCampaignName;
        public string m_serverIP;
        public string m_FormattedMapName;
        public string m_LevelName;
        public string m_TriggerDesignName;
        public string m_TriggerDesignStateName;
        public string m_TriggerArtInChunkName;
        public string m_PlayerWeapon;
        public string m_PlayerClass;
        public string m_sLogString;
        public string m_MPEventEmailAddress;
        public string m_MPEventSubjectLine;
        public string m_QueuedEventsBuffer;
        public Vector m_PlayerLocation;
        public Vector m_PlayerLocationLastInfo;
        public int m_sessionID;
        public int m_sessionStatus;
        public int m_gameID;
        public int m_runID;
        public int m_runStatus;
        public int m_nCurrentTestPlanID;
        public int m_Interface;
        public int m_enabled;
        public int m_KeepAlive;
        public int m_port;
        public int m_LogStringUsage;
        public int m_GameMode;
        public int m_online;
        public float m_LastPacketTime;
        public int m_testFlags;
        public int m_LogLineCount;
        public int m_AnnounceRetryCount;
        public int m_CampaignRetryCount;
        public int m_MultiplayerStartIndex;
        public float m_EventDelay;
        public int m_QueuedEventsBufferIndex;
        public int m_NumQueuedEvents;
        public int m_MaxQueuedEvents;
        public int m_MaxQueuedMessageLength;
        public bool m_bSendTPMPackets;
        public bool m_PlayerInCover;
        public bool m_PlayerIsFiring;
        public bool m_PlayerIsGhosting;
    }
    public class SequenceVariable : SequenceObject
    {
        public NameReference VarName;
    }
    public class BioSeqVar_StrRef : SequenceVariable
    {
        public int m_srValue;
    }
    public class BioSeqVar_StrRefLiteral : BioSeqVar_StrRef
    {
        public int m_srStringID;
    }
    public class BioTestFramework : Object
    {
        public Pointer VfTable_FTickableObject;
    }
    public class BlockingVolume : Volume
    {
        public NameReference[] lstAffectedActors;
        public bool bBlockCamera;
        public bool bInclusionaryList;
        public bool bSafeFall;
    }
    public class BlurEffect : PostProcessEffect
    {
        public int BlurKernelSize;
    }
    public class BookMark : Object
    {
        public Vector location;
        public Rotator Rotation;
    }
    public class BroadcastHandler : Info
    {
        public int SentText;
        public bool bMuteSpectators;
    }
    public class BrushShape : Brush
    {
    }
    public class CameraActor : Actor
    {
        public PostProcessSettings CamOverridePostProcess;
        public float AspectRatio;
        public float FOVAngle;
        public float CamOverridePostProcessAlpha;
        public int DrawFrustum;
        public int MeshComp;
        public bool bConstrainAspectRatio;
    }
    public class CameraAnim : Object
    {
        public PostProcessSettings BasePPSettings;
        public Box BoundingBox;
        public int CameraInterpGroup;
        public float AnimLength;
        public float BasePPSettingsAlpha;
        public float BaseFOV;
    }
    public class InterpGroupInst : Object
    {
        public int[] TrackInst;
        public int Group;
        public int GroupActor;
    }
    public class CameraAnimInst : Object
    {
        public int CamAnim;
        public float BlendInTime;
        public float BlendOutTime;
        public float PlayRate;
        public float BasePlayScale;
        public float TransientScaleModifier;
        public float CurrentBlendWeight;
        public int InterpGroupInst;
        public ECameraAnimPlaySpace PlaySpace;
    }
    public class CameraConeComponent : PrimitiveComponent
    {
    }
    public class CameraModifier : Object
    {
        public int CameraOwner;
        public float AlphaInTime;
        public float AlphaOutTime;
        public bool bDisabled;
        public bool bPendingDisable;
        public bool bExclusive;
        public bool bDebug;
        public byte Priority;
    }
    public class CameraShake : Object
    {
        public ROscillator RotOscillation;
        public VOscillator LocOscillation;
        public FOscillator FOVOscillation;
        public int Anim;
        public float RandomAnimSegmentDuration;
        public float OscillationDuration;
        public float OscillationBlendOutTime;
        public float OscillationBlendInTime;
        public float AnimScale;
        public float AnimPlayRate;
        public float AnimBlendOutTime;
        public float AnimBlendInTime;
        public bool bSingleInstance;
        public bool bRandomAnimSegment;
    }
    public class CameraModifier_CameraShake : CameraModifier
    {
        public CameraShakeInstance[] ActiveShakes;
        public float SplitScreenShakeScale;
    }
    public class FontImportOptions : Object
    {
        public FontImportOptionsData Data;
    }
    public class Font : Object
    {
        public FontImportOptionsData ImportOptions;
        public FontCharacter[] Characters;
        public int[] Textures;
        public int IsRemapped;
        public int Kerning;
    }
    public class Texture : Surface
    {
        public Pointer Resource;
        public float UnpackMin;
        public float UnpackMax;
        public int LODBias;
        public int NumCinematicMipLevels;
        public float AdjustBrightness;
        public float AdjustBrightnessCurve;
        public float AdjustVibrance;
        public float AdjustSaturation;
        public float AdjustRGBCurve;
        public float AdjustHue;
        public int InternalFormatLODBias;
        public int OneBitAlphaThreshold;
        public FadeMipMapChannelsContainer FadeMipMapChannels;
        public bool SRGB;
        public bool RGBE;
        public bool bIsSourceArtUncompressed;
        public bool CompressionNoAlpha;
        public bool CompressionNone;
        public bool CompressionNoMipmaps;
        public bool CompressionFullDynamicRange;
        public bool DeferCompression;
        public bool NeverStream;
        public bool bDitherMipMapAlpha;
        public bool bPreserveBorderR;
        public bool bPreserveBorderG;
        public bool bPreserveBorderB;
        public bool bPreserveBorderA;
        public bool bNoTiling;
        public bool AS16;
        public TextureCompressionSettings CompressionSettings;
        public TextureFilter Filter;
        public TextureGroup LODGroup;
        public TextureMipGenSettings MipGenSettings;
    }
    public class Texture2D : Texture
    {
        public IndirectArray_Mirror Mips;
        public byte[] SystemMemoryData;
        public Guid TextureFileCacheGuid;
        public Guid TFCFileGuid;
        public NameReference TextureFileCacheName;
        public int SizeX;
        public int SizeY;
        public int OriginalSizeX;
        public int OriginalSizeY;
        public int MipTailBaseIdx;
        public int BioMipMapCompressionSetting;
        public bool bGlobalForceMipLevelsToBeResident;
        public bool bConfigForceMiplevelsToBeResident;
        public EPixelFormat Format;
        public TextureAddress AddressX;
        public TextureAddress AddressY;
    }
    public class Canvas : Object
    {
        public Plane ColorModulate;
        public Pointer _Canvas;
        public Pointer SceneView;
        public int Font;
        public float OrgX;
        public float OrgY;
        public float ClipX;
        public float ClipY;
        public float CurX;
        public float CurY;
        public float CurYL;
        public Color DrawColor;
        public int SizeX;
        public int SizeY;
        public int DefaultTexture;
        public bool bCenter;
        public bool bNoSmooth;
    }
    public class CeilingReachSpec : ReachSpec
    {
    }
    public class CheatManager : Object
    {
        public int DebugCameraControllerClass;
        public int DebugCameraControllerRef;
    }
    public class ClipPadEntry : Object
    {
        public string Title;
        public string Text;
    }
    public class CodecMovie : Object
    {
    }
    public class CodecMovieFallback : CodecMovie
    {
    }
    public class ColorScaleVolume : Volume
    {
        public Vector ColorScale;
        public float InterpTime;
    }
    public class ZoneInfo : Info
    {
        public int KillZDamageType;
        public float KillZ;
        public float SoftKill;
        public bool bSoftKillZ;
    }
    public class PhysicsLODVerticalEmitter : Object
    {
        public int ParticlePercentage;
    }
    public class PhysicsLODVerticalDestructible : Object
    {
        public int MaxDynamicChunkCount;
        public float DebrisLifetime;
    }
    public class WorldInfo : ZoneInfo
    {
        public PostProcessSettings DefaultPostProcessSettings;
        public int[] StreamingLevels;
        public string[] DeferredExecs;
        public string ComputerName;
        public string EngineVersion;
        public string MinNetVersion;
        public NetViewer[] ReplicationViewers;
        public string NextURL;
        public int[] GameTypesSupportedOnThisMap;
        public int[] ClientDestroyedActorContent;
        public string Title;
        public string Author;
        public string EmitterPoolClassPath;
        public string DecalManagerClassPath;
        public string FractureManagerClassPath;
        public string ParticleEventManagerClassPath;
        public CompartmentRunList[] CompartmentRunFrames;
        public PhysXSceneProperties PhysicsProperties;
        public InteriorSettings DefaultAmbientZoneSettings;
        public PhysXVerticalProperties VerticalProperties;
        public ReverbSettings DefaultReverbSettings;
        public Vector DefaultColorScale;
        public ApexModuleDestructibleSettings DestructibleSettings;
        public NameReference WaitForStartKey;
        public float SquintModeKernelSize;
        public float TimeDilation;
        public float DemoPlayTimeDilation;
        public float TimeSeconds;
        public float GameTimeSeconds;
        public float RealTimeSeconds;
        public float AudioTimeSeconds;
        public int Pauser;
        public int DefaultTexture;
        public int WireframeTexture;
        public int WhiteSquareTexture;
        public int LargeVertex;
        public int BSPVertex;
        public int Game;
        public float StallZ;
        public float DefaultGravityZ;
        public float GlobalGravityZ;
        public float RBPhysicsGravityScaling;
        public int ControllerList;
        public int PawnList;
        public float MoveRepSize;
        public float NextSwitchCountdown;
        public int PackedLightAndShadowMapTextureSize;
        public int PersistentMapForcedObjects;
        public float MaxPhysicsDeltaTime;
        public int MaxPhysicsSubsteps;
        public float DefaultSkinWidth;
        public float ApexLODResourceBudget;
        public int EmitterVertical;
        public int DestructibleVertical;
        public float ParticleLODDistanceMultiplayerBias;
        public float ChanceOfPhysicsChunkOverride;
        public float MaxExplosionChunkSize;
        public float MaxDamageChunkSize;
        public float FractureExplosionVelScale;
        public int MaxNumFacturedChunksToSpawnInAFrame;
        public float FracturedMeshWeaponDamage;
        public float CharacterLightingContrastFactor;
        public int PopulationManager;
        public int MyMapInfo;
        public bool bPersistPostProcessToNextLevel;
        public bool bMapNeedsLightingFullyRebuilt;
        public bool bMapHasDLEsOutsideOfImportanceVolume;
        public bool bMapHasMultipleDominantLightsAffectingOnePrimitive;
        public bool bMapHasPathingErrors;
        public bool bRequestedBlockOnAsyncLoading;
        public bool bBegunPlay;
        public bool bPlayersOnly;
        public bool bPlayersOnlyPending;
        public bool bStartup;
        public bool bPathsRebuilt;
        public bool bHasPathNodes;
        public bool bIsMenuLevel;
        public bool bNoDefaultInventoryForPlayer;
        public bool bNoPathWarnings;
        public bool bHighPriorityLoading;
        public bool bHighPriorityLoadingLocal;
        public bool bUseProcBuildingRulesetOverride;
        public bool bSupportDoubleBufferedPhysics;
        public bool bEnableChanceOfPhysicsChunkOverride;
        public bool bLimitExplosionChunkSize;
        public bool bLimitDamageChunkSize;
        public bool bAllowModulateBetterShadows;
        public bool bAllowLightEnvSphericalHarmonicLights;
        public bool bIncreaseFogNearPrecision;
        public ENetMode NetMode;
        public ETravelType NextTravelType;
    }
    public class UIRoot : Object
    {
    }
    public class Interaction : UIRoot
    {
        public int __OnReceivedNativeInputKey__Delegate;
        public int __OnReceivedNativeInputAxis__Delegate;
        public int __OnReceivedNativeInputChar__Delegate;
        public int __OnInitialize__Delegate;
    }
    public class Console : Interaction
    {
        public string History;
        public string[] Scrollback;
        public string TypedStr;
        public AutoCompleteCommand[] ManualAutoCompleteList;
        public string[] MapPathsForAutoComplete;
        public NameReference ConsoleKey;
        public NameReference TypeKey;
        public int ConsoleTargetPlayer;
        public int DefaultTexture_Black;
        public int DefaultTexture_White;
        public int MaxScrollbackSize;
        public int SBHead;
        public int SBPos;
        public int HistoryTop;
        public int HistoryBot;
        public int HistoryCur;
        public int TypedStrPos;
        public bool bCtrl;
        public bool bEnableUI;
        public bool bRequireCtrlToNavigateAutoComplete;
    }
    public class CoverGroup : Info
    {
        public ActorReference[] CoverLinkRefs;
        public float AutoSelectRadius;
        public float AutoSelectHeight;
    }
    public class CoverGroupRenderingComponent : PrimitiveComponent
    {
    }
    public class CoverLink : NavigationPoint
    {
        public CoverSlot[] Slots;
        public DynamicLinkInfo[] DynamicLinkInfos;
        public int[] Claims;
        public Vector CircularOrigin;
        public Vector StandingLeanOffset;
        public Vector CrouchLeanOffset;
        public Vector PopupOffset;
        public float InvalidateDistance;
        public float MaxFireLinkDist;
        public float CircularRadius;
        public float AlignDist;
        public float AutoCoverSlotInterval;
        public float StandHeight;
        public float MidHeight;
        public float SlipDist;
        public float TurnDist;
        public float DangerScale;
        public int NextCoverLink;
        public bool GLOBAL_bUseSlotMarkers;
        public bool bDisabled;
        public bool bClaimAllSlots;
        public bool bAutoSort;
        public bool bAutoAdjust;
        public bool bCircular;
        public bool bLooped;
        public bool bPlayerOnly;
        public bool bDynamicCover;
        public bool bDebug_FireLinks;
        public bool bDebug_ExposedLinks;
        public bool bDebug_DangerLinks;
        public ECoverLocationDescription LocationDescription;
    }
    public class StaticMeshComponent : MeshComponent
    {
        public int ForcedLodModel;
        public int PreviousLODLevel;
        public int StaticMesh;
        public Color WireframeColor;
        public float OverriddenLODMaxRange;
        public float AudioObstruction;
        public float AudioOcclusion;
        public bool bIgnoreInstanceForTextureStreaming;
        public bool bNeverBecomeDynamic;
        public bool bBioIsReceivingDecals;
        public bool OverridePhysMat;
        public bool bLockLightingCache;
        public LightMapEncodingType LightMapEncoding;
        public Guid[] IrrelevantLights;
        public StaticMeshComponentLODInfo[] LODData;
    }
    public class CoverMeshComponent : StaticMeshComponent
    {
        public CoverMeshes[] Meshes;
        public Vector LocationOffset;
        public int AutoAdjustOn;
        public int AutoAdjustOff;
        public int Disabled;
    }
    public class ReplicationInfo : Info
    {
    }
    public class CoverReplicator : ReplicationInfo
    {
        public CoverReplicationInfo[] CoverReplicationData;
    }
    public class ForcedReachSpec : ReachSpec
    {
    }
    public class CoverSlipReachSpec : ForcedReachSpec
    {
        public byte SpecDirection;
    }
    public class CoverSlotMarker : NavigationPoint
    {
        public CoverInfo OwningSlot;
        public bool bLastChoice;
    }
    public class CoverTurnReachSpec : ForcedReachSpec
    {
        public byte SpecDirection;
    }
    public class CrowdAgentBase : Actor
    {
        public Pointer VfTable_IInterface_NavigationHandle;
    }
    public class CrowdPopulationManagerBase : Actor
    {
    }
    public class CullDistanceVolume : Volume
    {
        public CullDistanceSizePair[] CullDistances;
        public bool bEnabled;
    }
    public class UIDataProvider : UIRoot
    {
        public EProviderAccessType WriteAccessType;
    }
    public class UIDataStore : UIDataProvider
    {
        public int[] RefreshSubscriberNotifies;
        public int __OnDataStoreValueUpdated__Delegate;
        public NameReference Tag;
    }
    public class UIDataStore_GameState : UIDataStore
    {
        public int __OnRefreshDataFieldValue__Delegate;
    }
    public class CurrentGameDataStore : UIDataStore_GameState
    {
        public Pointer VfTable_IUIListElementProvider;
        public GameDataProviderTypes ProviderTypes;
        public int[] PlayerData;
        public int[] TeamData;
        public int __OnAddTeamProvider__Delegate;
        public int GameData;
    }
    public class UIPropertyDataProvider : UIDataProvider
    {
        public int[] ComplexPropertyTypes;
        public int __CanSupportComplexPropertyType__Delegate;
    }
    public class UIDynamicDataProvider : UIPropertyDataProvider
    {
        public Pointer VfTable_IUIListElementCellProvider;
        public int DataClass;
    }
    public class InventoryDataProvider : UIDynamicDataProvider
    {
    }
    public class WeaponDataProvider : InventoryDataProvider
    {
    }
    public class CurrentWeaponDataProvider : WeaponDataProvider
    {
    }
    public class CurveEdPresetCurve : Object
    {
        public string CurveName;
        public PresetGeneratedPoint[] Points;
    }
    public class CustomPropertyItemHandler : Interface
    {
    }
    public class DamageType : Object
    {
        public string DeathString;
        public string FemaleSuicide;
        public string MaleSuicide;
        public float KDamageImpulse;
        public float KDeathVel;
        public float KDeathUpKick;
        public float RadialDamageImpulse;
        public float VehicleDamageScaling;
        public float VehicleMomentumScaling;
        public int DamagedFFWaveform;
        public int KilledFFWaveform;
        public float FracturedMeshDamage;
        public bool bArmorStops;
        public bool bAlwaysGibs;
        public bool bNeverGibs;
        public bool bLocationalHit;
        public bool bCausesBlood;
        public bool bCausedByWorld;
        public bool bExtraMomentumZ;
        public bool bCausesFracture;
        public bool bIgnoreDriverDamageMult;
        public bool bRadialDamageVelChange;
    }
    public class DataStoreClient : UIRoot
    {
        public string[] GlobalDataStoreClasses;
        public int[] GlobalDataStores;
        public string[] PlayerDataStoreClassNames;
        public int[] PlayerDataStoreClasses;
        public PlayerDataStoreGroup[] PlayerDataStores;
    }
    public class DebugCameraController : PlayerController
    {
        public NameReference PrimaryKey;
        public NameReference SecondaryKey;
        public NameReference UnselectKey;
        public int OryginalControllerRef;
        public int OryginalPlayer;
        public int DrawFrustum;
        public int SelectedActor;
        public int SelectedComponent;
        public bool bShowSelectedInfo;
        public bool bIsFrozenRendering;
    }
    public class HUD : Actor
    {
        public int[] PostRenderedActors;
        public ConsoleMessage[] ConsoleMessages;
        public NameReference[] DebugDisplay;
        public KismetDrawTextInfo[] KismetTextInfo;
        public Color WhiteColor;
        public Color GreenColor;
        public Color RedColor;
        public int PlayerOwner;
        public int HudOwner;
        public int ViewedInfo;
        public int Scoreboard;
        public float HudCanvasScale;
        public Color ConsoleColor;
        public int ConsoleMessageCount;
        public int ConsoleFontSize;
        public int MessageFontOffset;
        public int MaxHUDAreaMessageCount;
        public float ConsoleMessagePosX;
        public float ConsoleMessagePosY;
        public int Canvas;
        public bool bShowHUD;
        public bool bShowGameHUD;
        public bool bShowScores;
        public bool bShowDebugInfo;
        public bool bShowGameDebug;
        public bool bShowBadConnectionAlert;
        public bool bMessageBeep;
        public bool bShowOverlays;
    }
    public class DebugCameraHUD : HUD
    {
    }
    public class Input : Interaction
    {
        public Pointer[] AxisArray;
        public KeyBind[] Bindings;
        public NameReference[] PressedKeys;
        public float CurrentDelta;
        public float CurrentDeltaTime;
        public EInputEvent CurrentEvent;
    }
    public class PlayerInput : Input
    {
        public NameReference LastAxisKeyName;
        public float ZeroTime;
        public float SmoothedMouse;
        public float DoubleClickTimer;
        public float DoubleClickTime;
        public float MouseSensitivity;
        public float aBaseX;
        public float aBaseY;
        public float aBaseZ;
        public float aMouseX;
        public float aMouseY;
        public float aForward;
        public float aTurn;
        public float aStrafe;
        public float aUp;
        public float aLookUp;
        public float aRightAnalogTrigger;
        public float aLeftAnalogTrigger;
        public float aPS3AccelX;
        public float aPS3AccelY;
        public float aPS3AccelZ;
        public float aPS3Gyro;
        public float MoveForwardSpeed;
        public float MoveStrafeSpeed;
        public float LookRightScale;
        public float LookUpScale;
        public int MouseSamples;
        public float MouseSamplingTotal;
        public bool bUsingGamepad;
        public bool bInvertMouse;
        public bool bInvertTurn;
        public bool bWasForward;
        public bool bWasBack;
        public bool bWasLeft;
        public bool bWasRight;
        public bool bEdgeForward;
        public bool bEdgeBack;
        public bool bEdgeLeft;
        public bool bEdgeRight;
        public bool bEnableMouseSmoothing;
        public bool bEnableFOVScaling;
        public byte bStrafe;
        public byte bXAxis;
        public byte bYAxis;
    }
    public class DebugCameraInput : PlayerInput
    {
    }
    public class DebugManager : Object
    {
        public int FirstColoredMip;
    }
    public class DecalComponent : PrimitiveComponent
    {
        public DecalReceiver[] DecalReceivers;
        public int[] Filter;
        public int[] ReceiverImages;
        public Vector HitLocation;
        public Vector HitNormal;
        public Vector HitTangent;
        public Vector HitBinormal;
        public Vector ParentRelativeLocation;
        public Rotator ParentRelativeOrientation;
        public Vector2D BlendRange;
        public int DecalMaterial;
        public float Width;
        public float Height;
        public float TileX;
        public float TileY;
        public float OffsetX;
        public float OffsetY;
        public float DecalRotation;
        public float FieldOfView;
        public float NearPlane;
        public float FarPlane;
        public float DepthBias;
        public float SlopeScaleDepthBias;
        public int SortOrder;
        public float BackfaceAngle;
        public bool bNoClip;
        public bool bStaticDecal;
        public bool bProjectOnBackfaces;
        public bool bProjectOnHidden;
        public bool bProjectOnBSP;
        public bool bProjectOnStaticMeshes;
        public bool bProjectOnSkeletalMeshes;
        public bool bProjectOnTerrain;
        public bool bFlipBackfaceDirection;
        public bool bMovableDecal;
        public EDecalTransform DecalTransform;
        public EFilterMode FilterMode;
    }
    public class DecalActorBase : Actor
    {
        public int Decal;
    }
    public class DecalActor : DecalActorBase
    {
    }
    public class DecalActorMovable : DecalActorBase
    {
    }
    public class DecalManager : Actor
    {
        public int[] PoolDecals;
        public ActiveDecalInfo[] ActiveDecals;
        public Vector2D DecalBlendRange;
        public int DecalTemplate;
        public int MaxActiveDecals;
        public float DecalLifeSpan;
        public float DecalDepthBias;
    }
    public class Material : MaterialInterface
    {
        public int[] Expressions;
        public Pointer MaterialResources;
        public Pointer DefaultMaterialInstances;
        public int PhysicalMaterial;
        public VectorMaterialInput Normal;
        public VectorMaterialInput AnisotropicDirection;
        public VectorMaterialInput WorldPositionOffset;
        public Vector2MaterialInput Distortion;
        public ColorMaterialInput DiffuseColor;
        public ScalarMaterialInput DiffusePower;
        public ColorMaterialInput SpecularColor;
        public ScalarMaterialInput SpecularPower;
        public ColorMaterialInput EmissiveColor;
        public ScalarMaterialInput Opacity;
        public ScalarMaterialInput OpacityMask;
        public ColorMaterialInput CustomLighting;
        public ColorMaterialInput CustomSkylightDiffuse;
        public ScalarMaterialInput TwoSidedLightingMask;
        public ColorMaterialInput TwoSidedLightingColor;
        public int PhysMaterial;
        public int PhysMaterialMask;
        public int PhysMaterialMaskUVChannel;
        public int BlackPhysicalMaterial;
        public int WhitePhysicalMaterial;
        public float OpacityMaskClipValue;
        public int nNumWounds;
        public int FallbackMaterial;
        public float MaterialDepthBias;
        public float MaterialDownsampleThreshold;
        public bool TwoSided;
        public bool TwoSidedSeparatePass;
        public bool bDisableDepthTest;
        public bool bAllowFog;
        public bool bAllowTranslucencyDoF;
        public bool bUseOneLayerDistortion;
        public bool bUseLitTranslucencyDepthPass;
        public bool bUseLitTranslucencyPostRenderDepthPass;
        public bool bCastLitTranslucencyShadowAsMasked;
        public bool bHairPass;
        public bool bUseSurfaceTranslucencyDepthPass;
        public bool bUsedAsLightFunction;
        public bool bUsedWithFogVolumes;
        public bool bUsedAsSpecialEngineMaterial;
        public bool bUsedWithSkeletalMesh;
        public bool bUsedWithFracturedMeshes;
        public bool bUsedWithParticleSystem;
        public bool bUsedWithParticleSprites;
        public bool bUsedWithBeamTrails;
        public bool bUsedWithParticleSubUV;
        public bool bUsedWithFoliage;
        public bool bUsedWithSpeedTree;
        public bool bUsedWithStaticLighting;
        public bool bUsedWithLensFlare;
        public bool bUsedWithGammaCorrection;
        public bool bUsedWithInstancedMeshParticles;
        public bool bUsedWithFluidSurfaces;
        public bool bUsedWithDecals;
        public bool bUsedWithMaterialEffect;
        public bool bUsedWithMorphTargets;
        public bool bUsedWithRadialBlur;
        public bool bUsedWithInstancedMeshes;
        public bool bUsedWithSplineMeshes;
        public bool bUsedWithAPEXMeshes;
        public bool bUsedWithLightEnvironments;
        public bool bUsedWithVectorLightMaps;
        public bool bUsedWithSimpleLightMaps;
        public bool bUsedWithScreenDoorFade;
        public bool Wireframe;
        public bool bPerPixelCameraVector;
        public bool bIsFallbackMaterial;
        public bool bForceFullPrecision;
        public bool bUsesDistortion;
        public bool bIsMasked;
        public bool AllowsEffectsMaterials;
        public EBlendMode BlendMode;
        public EMaterialLightingModel LightingModel;
        public EXbox360GammaQuality Xbox360GammaQuality;
    }
    public class DecalMaterial : Material
    {
    }
    public class PhysicsVolume : Volume
    {
        public int DamageType;
        public Vector ZoneVelocity;
        public float GroundFriction;
        public float TerminalVelocity;
        public float DamagePerSec;
        public int Priority;
        public float FluidFriction;
        public float PainInterval;
        public float RigidBodyDamping;
        public float MaxDampingForce;
        public int PainTimer;
        public int DamageInstigator;
        public int NextPhysicsVolume;
        public bool bVelocityAffectsWalking;
        public bool bPainCausing;
        public bool bAIShouldIgnorePain;
        public bool bEntryPain;
        public bool BACKUP_bPainCausing;
        public bool bDestructive;
        public bool bNoInventory;
        public bool bMoveProjectiles;
        public bool bBounceVelocity;
        public bool bNeutralZone;
        public bool bCrowdAgentsPlayDeathAnim;
        public bool bPhysicsOnContact;
        public bool bWaterVolume;
    }
    public class DefaultPhysicsVolume : PhysicsVolume
    {
    }
    public class Light : Actor
    {
        public int LightComponent;
        public bool bEnabled;
    }
    public class DirectionalLightComponent : LightComponent
    {
        public LightmassDirectionalLightSettings LightmassSettings;
        public float TraceDistance;
        public float WholeSceneDynamicShadowRadius;
    }
    public class DirectionalLight : Light
    {
    }
    public class DirectionalLightToggleable : DirectionalLight
    {
    }
    public class DistributionFloatConstant : DistributionFloat
    {
        public float Constant;
    }
    public class DistributionFloatConstantCurve : DistributionFloat
    {
        public InterpCurveFloat ConstantCurve;
    }
    public class DistributionFloatParameterBase : DistributionFloatConstant
    {
        public NameReference ParameterName;
        public float MinInput;
        public float MaxInput;
        public float MinOutput;
        public float MaxOutput;
        public DistributionParamMode ParamMode;
    }
    public class DistributionFloatParticleParameter : DistributionFloatParameterBase
    {
    }
    public class DistributionFloatSoundParameter : DistributionFloatParameterBase
    {
    }
    public class DistributionFloatUniformCurve : DistributionFloat
    {
        public InterpCurveVector2D ConstantCurve;
    }
    public class DistributionVectorConstant : DistributionVector
    {
        public Vector Constant;
        public bool bLockAxes;
        public EDistributionVectorLockFlags LockedAxes;
    }
    public class DistributionVectorConstantCurve : DistributionVector
    {
        public InterpCurveVector ConstantCurve;
        public bool bLockAxes;
        public EDistributionVectorLockFlags LockedAxes;
    }
    public class DistributionVectorParameterBase : DistributionVectorConstant
    {
        public Vector MinInput;
        public Vector MaxInput;
        public Vector MinOutput;
        public Vector MaxOutput;
        public NameReference ParameterName;
        public DistributionParamMode ParamModes;
    }
    public class DistributionVectorParticleParameter : DistributionVectorParameterBase
    {
    }
    public class DistributionVectorUniform : DistributionVector
    {
        public Vector Max;
        public Vector Min;
        public bool bLockAxes;
        public bool bUseExtremes;
        public EDistributionVectorMirrorFlags MirrorFlags;
        public EDistributionVectorLockFlags LockedAxes;
    }
    public class DistributionVectorUniformCurve : DistributionVector
    {
        public InterpCurveTwoVectors ConstantCurve;
        public bool bLockAxes1;
        public bool bLockAxes2;
        public bool bUseExtremes;
        public EDistributionVectorMirrorFlags MirrorFlags;
        public EDistributionVectorLockFlags LockedAxes;
    }
    public class DmgType_Crushed : DamageType
    {
    }
    public class DmgType_Fell : DamageType
    {
    }
    public class KillZDamageType : DamageType
    {
    }
    public class DmgType_Suicided : KillZDamageType
    {
    }
    public class DmgType_Telefragged : DamageType
    {
    }
    public class DOFAndBloomEffect : DOFEffect
    {
        public float BloomScale;
        public float BloomThreshold;
        public Color BloomTint;
        public float BloomScreenBlendThreshold;
        public float SceneMultiplier;
        public float BlurBloomKernelSize;
        public bool bEnableReferenceDOF;
        public bool bEnableDepthOfFieldHQ;
    }
    public class DOFBloomMotionBlurEffect : DOFAndBloomEffect
    {
        public float MaxVelocity;
        public float MotionBlurAmount;
        public float CameraRotationThreshold;
        public float CameraTranslationThreshold;
        public bool FullMotionBlur;
    }
    public class DominantDirectionalLightComponent : DirectionalLightComponent
    {
        public DominantShadowInfo DominantLightShadowInfo;
        public Array_Mirror DominantLightShadowMap;
    }
    public class DominantDirectionalLight : DirectionalLight
    {
    }
    public class PointLightComponent : LightComponent
    {
        public Matrix CachedParentToWorld;
        public LightmassPointLightSettings LightmassSettings;
        public Vector Translation;
        public float ShadowRadiusMultiplier;
        public float Radius;
        public float FalloffExponent;
        public float ShadowFalloffExponent;
        public float MinShadowFalloffRadius;
        public int PreviewLightRadius;
        public int PreviewLightSourceRadius;
    }
    public class PointLight : Light
    {
    }
    public class DominantPointLightComponent : PointLightComponent
    {
    }
    public class DominantPointLight : PointLight
    {
    }
    public class SpotLightComponent : PointLightComponent
    {
        public float InnerConeAngle;
        public float OuterConeAngle;
        public float LightShaftConeAngle;
        public int PreviewInnerCone;
        public int PreviewOuterCone;
    }
    public class SpotLight : Light
    {
    }
    public class DominantSpotLightComponent : SpotLightComponent
    {
        public DominantShadowInfo DominantLightShadowInfo;
        public Array_Mirror DominantLightShadowMap;
    }
    public class DominantSpotLight : SpotLight
    {
    }
    public class DoorMarker : NavigationPoint
    {
        public int MyDoor;
        public int DoorTrigger;
        public bool bWaitUntilCompletelyOpened;
        public bool bInitiallyClosed;
        public bool bBlockedWhenClosed;
        public bool bDoorOpen;
        public EDoorType DoorType;
    }
    public class DrawBoxComponent : PrimitiveComponent
    {
        public Color BoxColor;
        public int BoxMaterial;
        public Vector BoxExtent;
        public bool bDrawWireBox;
        public bool bDrawLitBox;
    }
    public class DrawCapsuleComponent : PrimitiveComponent
    {
        public Color CapsuleColor;
        public int CapsuleMaterial;
        public float CapsuleHeight;
        public float CapsuleRadius;
        public bool bDrawWireCapsule;
        public bool bDrawLitCapsule;
    }
    public class DrawConeComponent : PrimitiveComponent
    {
        public Color ConeColor;
        public float ConeRadius;
        public float ConeAngle;
        public int ConeSides;
    }
    public class DrawCylinderComponent : PrimitiveComponent
    {
        public Color CylinderColor;
        public int CylinderMaterial;
        public float CylinderRadius;
        public float CylinderTopRadius;
        public float CylinderHeight;
        public float CylinderHeightOffset;
        public int CylinderSides;
        public bool bDrawWireCylinder;
        public bool bDrawLitCylinder;
    }
    public class DrawFrustumComponent : PrimitiveComponent
    {
        public Color FrustumColor;
        public float FrustumAngle;
        public float FrustumAspectRatio;
        public float FrustumStartDist;
        public float FrustumEndDist;
        public int Texture;
    }
    public class DrawLightConeComponent : DrawConeComponent
    {
    }
    public class DrawSphereComponent : PrimitiveComponent
    {
        public Color SphereColor;
        public int SphereMaterial;
        public float SphereRadius;
        public int SphereSides;
        public bool bDrawWireSphere;
        public bool bDrawLitSphere;
    }
    public class DrawLightRadiusComponent : DrawSphereComponent
    {
    }
    public class DrawPylonRadiusComponent : DrawSphereComponent
    {
    }
    public class DrawQuadComponent : PrimitiveComponent
    {
        public int Texture;
        public float Width;
        public float Height;
    }
    public class DrawSoundRadiusComponent : DrawSphereComponent
    {
    }
    public class DroppedPickup : Actor
    {
        public int InventoryClass;
        public int Inventory;
        public int PickupCache;
        public bool bFadeOut;
    }
    public class DynamicAnchor : NavigationPoint
    {
        public int CurrentUser;
    }
    public class DynamicBlockingVolume : BlockingVolume
    {
        public bool bEnabled;
    }
    public class DynamicCameraActor : CameraActor
    {
    }
    public class DynamicPhysicsVolume : PhysicsVolume
    {
        public bool bEnabled;
    }
    public class DynamicPylon : Pylon
    {
        public bool bMoving;
    }
    public class DynamicSMActor : Actor
    {
        public Vector ReplicatedMeshTranslation;
        public Rotator ReplicatedMeshRotation;
        public Vector ReplicatedMeshScale3D;
        public int StaticMeshComponent;
        public int LightEnvironment;
        public int ReplicatedMaterial;
        public bool bForceStaticDecals;
        public bool bPawnCanBaseOn;
        public bool bSafeBaseIfAsleep;
    }
    public class DynamicSMActor_Spawnable : DynamicSMActor
    {
    }
    public class TriggerVolume : Volume
    {
    }
    public class DynamicTriggerVolume : TriggerVolume
    {
        public bool bEnabled;
    }
    public class EdCoordSystem : Object
    {
        public Matrix M;
        public string Desc;
    }
    public class EditorLinkSelectionInterface : Interface
    {
    }
    public class ParticleSystem : Object
    {
        public BioRwBox FixedRelativeBoundingBox;
        public int[] Emitters;
        public float[] LODDistances;
        public ParticleSystemLOD[] LODSettings;
        public Box CustomOcclusionBounds;
        public Rotator ThumbnailAngle;
        public Vector MacroUVPosition;
        public float UpdateTime_FPS;
        public float UpdateTime_Delta;
        public float WarmupTime;
        public float ThumbnailDistance;
        public float ThumbnailWarmup;
        public int CurveEdSetup;
        public float LODDistanceCheckTime;
        public float LODDistanceMultiplayerBias;
        public int EditorLODSetting;
        public float SecondsBeforeInactive;
        public float Delay;
        public float DelayLow;
        public float MacroUVRadius;
        public bool bOrientZAxisTowardCamera;
        public bool bRegenerateLODDuplicate;
        public bool bUseFixedRelativeBoundingBox;
        public bool BioLockLowestLODToHighest;
        public bool bShouldResetPeakCounts;
        public bool bUseRealtimeThumbnail;
        public bool ThumbnailImageOutOfDate;
        public bool bSkipSpawnCountCheck;
        public bool bUseDelayRange;
        public EParticleSystemUpdateMode SystemUpdateMode;
        public ParticleSystemLODMethod LODMethod;
        public EParticleSystemOcclusionBoundsMethod OcclusionBoundsMethod;
    }
    public class ParticleSystemComponent : PrimitiveComponent
    {
        public RwVector3 OldPosition;
        public RwVector3 PartSysVelocity;
        public ParticleSysParam[] InstanceParameters;
        public int[] ReplayClips;
        public int __OnSystemFinished__Delegate;
        public int LightEnvironmentClass;
        public int Template;
        public float WarmupTime;
        public int LODLevel;
        public float SecondsBeforeInactive;
        public float MaxTimeBeforeForceUpdateTransform;
        public float CustomTimeDilation;
        public bool bAutoActivate;
        public bool bWasCompleted;
        public bool bSuppressSpawning;
        public bool bWasDeactivated;
        public bool bResetOnDetach;
        public bool bUpdateOnDedicatedServer;
        public bool bJustAttached;
        public bool bWarmingUp;
        public bool bIsCachedInPool;
        public bool bOverrideLODMethod;
        public bool bSkipUpdateDynamicDataDuringTick;
        public bool bUpdateComponentInTick;
        public bool bDeferredBeamUpdate;
        public ParticleSystemLODMethod LODMethod;
    }
    public class Emitter : Actor
    {
        public int ParticleSystemComponent;
        public int LightEnvironment;
        public bool bDestroyOnSystemFinish;
        public bool bPostUpdateTickGroup;
        public bool bNoVFXSound;
        public bool bCurrentlyActive;
    }
    public class EmitterCameraLensEffectBase : Emitter
    {
        public int PS_CameraEffect;
        public int PS_CameraEffectNonExtremeContent;
        public float BaseFOV;
        public float DistFromCamera;
        public bool bAllowMultipleInstances;
    }
    public class EmitterPool : Actor
    {
        public int[] PoolComponents;
        public int[] ActiveComponents;
        public EmitterBaseInfo[] RelativePSCs;
        public int[] FreeSMComponents;
        public int[] FreeMatInstConsts;
        public int PSCTemplate;
        public int MaxActiveEffects;
        public float SMC_MIC_ReductionTime;
        public int IdealStaticMeshComponents;
        public int IdealMaterialInstanceConstants;
        public bool bLogPoolOverflow;
        public bool bLogPoolOverflowList;
    }
    public class EmitterSpawnable : Emitter
    {
        public int ParticleTemplate;
    }
    public class Engine : Subsystem
    {
        public string TinyFontName;
        public string SmallFontName;
        public string MediumFontName;
        public string LargeFontName;
        public string SubtitleFontName;
        public int[] AdditionalFonts;
        public string[] AdditionalFontNames;
        public string ConsoleClassName;
        public string GameViewportClientClassName;
        public string DataStoreClientClassName;
        public string LocalPlayerClassName;
        public string DefaultMaterialName;
        public string DefaultDecalMaterialName;
        public string DefaultTextureName;
        public string WireframeMaterialName;
        public string EmissiveTexturedMaterialName;
        public string GeomMaterialName;
        public string DefaultFogVolumeMaterialName;
        public string TickMaterialName;
        public string CrossMaterialName;
        public string VisColorationMaterialInChunkName;
        public string VisColorationMaterialLoadChunkName;
        public string VisColorationMaterialVisibleChunkName;
        public string VisColorationMaterialMasterMapName;
        public string VisColorationMaterialUnloadedName;
        public string BioColorChunkMaterialName;
        public string BioTranslucentVolumeMaterialName;
        public string LevelColorationLitMaterialName;
        public string LevelColorationUnlitMaterialName;
        public string LightingTexelDensityName;
        public string ShadedLevelColorationLitMaterialName;
        public string ShadedLevelColorationUnlitMaterialName;
        public string RemoveSurfaceMaterialName;
        public string VertexColorMaterialName;
        public string VertexColorViewModeMaterialName_ColorOnly;
        public string VertexColorViewModeMaterialName_AlphaAsColor;
        public string VertexColorViewModeMaterialName_RedOnly;
        public string VertexColorViewModeMaterialName_GreenOnly;
        public string VertexColorViewModeMaterialName_BlueOnly;
        public string HeatmapMaterialName;
        public string BoneWeightMaterialName;
        public string TangentColorMaterialName;
        public string ProcBuildingSimpleMaterialName;
        public string BuildingQuadStaticMeshName;
        public Color[] LightComplexityColors;
        public LinearColor[] ShaderComplexityColors;
        public StatColorMapping[] StatColorMappings;
        public string EditorBrushMaterialName;
        public string DefaultPhysMaterialName;
        public string TerrainErrorMaterialName;
        public string DefaultOnlineSubsystemName;
        public string DefaultPostProcessName;
        public string ThumbnailSkeletalMeshPostProcessName;
        public string ThumbnailParticleSystemPostProcessName;
        public string ThumbnailMaterialPostProcessName;
        public string DefaultUIScenePostProcessName;
        public string DefaultUICaretMaterialName;
        public string SceneCaptureReflectActorMaterialName;
        public string SceneCaptureCubeActorMaterialName;
        public string ScreenDoorNoiseTextureName;
        public string RandomAngleTextureName;
        public string RandomNormalTextureName;
        public string RandomNormalTextureName2;
        public string WeightMapPlaceholderTextureName;
        public string LightMapDensityTextureName;
        public string LightMapDensityNormalName;
        public string DefaultSoundName;
        public int[] GamePlayers;
        public string[] DeferredCommands;
        public string[] NextFrameDeferredCommands;
        public string ScoutClassName;
        public BioLayerDetails[] m_BioLayerDetails;
        public string TransitionDescription;
        public string TransitionGameType;
        public string DynamicCoverMeshComponentName;
        public NameReference[] IgnoreSimulatedFuncWarnings;
        public int ConsoleClass;
        public int GameViewportClientClass;
        public int DataStoreClientClass;
        public int LocalPlayerClass;
        public int OnlineSubsystemClass;
        public Pointer RemoteControlExec;
        public Pointer MobileMaterialEmulator;
        public LinearColor LightingOnlyBrightness;
        public LinearColor LightMapDensityVertexMappedColor;
        public LinearColor LightMapDensitySelectedColor;
        public LinearColor DefaultSelectedMaterialColor;
        public int TinyFont;
        public int SmallFont;
        public int MediumFont;
        public int LargeFont;
        public int SubtitleFont;
        public int DefaultMaterial;
        public int DefaultDecalMaterial;
        public int DefaultTexture;
        public int WireframeMaterial;
        public int EmissiveTexturedMaterial;
        public int GeomMaterial;
        public int DefaultFogVolumeMaterial;
        public int TickMaterial;
        public int CrossMaterial;
        public int VisColorationMaterialInChunk;
        public int VisColorationMaterialLoadChunk;
        public int VisColorationMaterialVisibleChunk;
        public int VisColorationMaterialMasterMap;
        public int VisColorationMaterialUnloaded;
        public int BioColorChunkMaterial;
        public int BioTranslucentVolumeMaterial;
        public int LevelColorationLitMaterial;
        public int LevelColorationUnlitMaterial;
        public int LightingTexelDensityMaterial;
        public int ShadedLevelColorationLitMaterial;
        public int ShadedLevelColorationUnlitMaterial;
        public int RemoveSurfaceMaterial;
        public int VertexColorMaterial;
        public int VertexColorViewModeMaterial_ColorOnly;
        public int VertexColorViewModeMaterial_AlphaAsColor;
        public int VertexColorViewModeMaterial_RedOnly;
        public int VertexColorViewModeMaterial_GreenOnly;
        public int VertexColorViewModeMaterial_BlueOnly;
        public int HeatmapMaterial;
        public int BoneWeightMaterial;
        public int TangentColorMaterial;
        public int ProcBuildingSimpleMaterial;
        public int BuildingQuadStaticMesh;
        public float ProcBuildingLODColorTexelsPerWorldUnit;
        public float ProcBuildingLODLightingTexelsPerWorldUnit;
        public int MaxProcBuildingLODColorTextureSize;
        public int MaxProcBuildingLODLightingTextureSize;
        public float MaxRMSDForCombiningMappings;
        public float MaxPixelShaderAdditiveComplexityCount;
        public float MinTextureDensity;
        public float IdealTextureDensity;
        public float MaxTextureDensity;
        public float MinLightMapDensity;
        public float IdealLightMapDensity;
        public float MaxLightMapDensity;
        public float RenderLightMapDensityGrayscaleScale;
        public float RenderLightMapDensityColorScale;
        public int EditorBrushMaterial;
        public int DefaultPhysMaterial;
        public int TerrainErrorMaterial;
        public int TerrainMaterialMaxTextureCount;
        public int TerrainTessellationCheckCount;
        public float TerrainTessellationCheckDistance;
        public int DefaultPostProcess;
        public int ThumbnailSkeletalMeshPostProcess;
        public int ThumbnailParticleSystemPostProcess;
        public int ThumbnailMaterialPostProcess;
        public int DefaultUIScenePostProcess;
        public int DefaultUICaretMaterial;
        public int SceneCaptureReflectActorMaterial;
        public int SceneCaptureCubeActorMaterial;
        public int ScreenDoorNoiseTexture;
        public int RandomAngleTexture;
        public int RandomNormalTexture;
        public int RandomNormalTexture2;
        public int WeightMapPlaceholderTexture;
        public int LightMapDensityTexture;
        public int LightMapDensityNormal;
        public int DefaultSound;
        public float TimeBetweenPurgingPendingKillObjects;
        public int Client;
        public int GameViewport;
        public int TickCycles;
        public int GameCycles;
        public int ClientCycles;
        public float MaxSmoothedFrameRate;
        public float MinSmoothedFrameRate;
        public int DebugManager;
        public Color C_WorldBox;
        public Color C_BrushWire;
        public Color C_AddWire;
        public Color C_SubtractWire;
        public Color C_SemiSolidWire;
        public Color C_NonSolidWire;
        public Color C_WireBackground;
        public Color C_ScaleBoxHi;
        public Color C_VolumeCollision;
        public Color C_BSPCollision;
        public Color C_OrthoBackground;
        public Color C_Volume;
        public Color C_BrushShape;
        public float StreamingDistanceFactor;
        public float MeshLODRange;
        public float CameraRotationThreshold;
        public float CameraTranslationThreshold;
        public float PrimitiveProbablyVisibleTime;
        public float PercentUnoccludedRequeries;
        public float MaxOcclusionPixelsFraction;
        public int MaxFluidNumVerts;
        public float FluidSimulationTimeLimit;
        public int MaxParticleResize;
        public int MaxParticleResizeWarn;
        public int MaxParticleVertexMemory;
        public int BeginUPTryCount;
        public float NetClientTicksPerSecond;
        public float MaxTrackedOcclusionIncrement;
        public float TrackedOcclusionStepSize;
        public int m_pUnitTestFramework;
        public bool bEnableTranslucentHairPass;
        public bool UseProcBuildingLODTextureCropping;
        public bool ForcePowerOfTwoProcBuildingLODTextures;
        public bool bCombineSimilarMappings;
        public bool bRenderLightMapDensityGrayscale;
        public bool bUseTextureStreaming;
        public bool bUseBackgroundLevelStreaming;
        public bool bSubtitlesEnabled;
        public bool bSubtitlesForcedOff;
        public bool bSmoothFrameRate;
        public bool HACK_UseTickFrequency;
        public bool bShouldGenerateSimpleLightmaps;
        public bool bForceStaticTerrain;
        public bool DisplayLazyLoadErrors;
        public bool m_bSaveInitialized;
        public bool bForceCPUSkinning;
        public bool bUsePostProcessEffects;
        public bool bOnScreenKismetWarnings;
        public bool bEnableKismetLogging;
        public bool bAllowMatureLanguage;
        public bool bRenderTerrainCollisionAsOverlay;
        public bool bDisablePhysXHardwareSupport;
        public bool bPauseOnLossOfFocus;
        public bool bCheckParticleRenderSize;
        public bool bEnableColorClear;
        public bool bEnableOnScreenDebugMessages;
        public bool bSuppressMapWarnings;
        public bool bCookSeparateSharedMPGameContent;
        public EBioUnTexCompressSetting BioUnTexCompressSetting;
        public ETransitionType TransitionType;
    }
    public class EngineTypes : Object
    {
    }
    public class EnvironmentVolume : Volume
    {
        public Pointer VfTable_IInterface_NavMeshPathObstacle;
        public Pointer VfTable_IInterface_NavMeshPathObject;
    }
    public class FaceFXAnimSet : Object
    {
        public byte[] RawFaceFXAnimSetBytes;
        public byte[] RawFaceFXMiniSessionBytes;
        public int[] ReferencedSoundCues;
        public Pointer InternalFaceFXAnimSet;
        public int NumLoadErrors;
        public bool bLocalizationDisabled;
    }
    public class FaceFXAsset : Object
    {
        public byte[] RawFaceFXActorBytes;
        public byte[] RawFaceFXSessionBytes;
        public int[] ReferencedSoundCues;
        public Pointer FaceFXActor;
    }
    public class LocalMessage : Object
    {
        public float Lifetime;
        public Color DrawColor;
        public float PosY;
        public int FontSize;
        public bool bIsSpecial;
        public bool bIsUnique;
        public bool bIsPartiallyUnique;
        public bool bIsConsoleMessage;
        public bool bBeep;
        public bool bCountInstances;
    }
    public class FailedConnect : LocalMessage
    {
        public string FailMessage;
    }
    public class FileWriter : Info
    {
        public string Filename;
        public Pointer ArchivePtr;
        public bool bFlushEachWrite;
        public bool bWantsAsyncWrites;
        public FWFileType FileType;
    }
    public class FileLog : FileWriter
    {
    }
    public class FloorToCeilingReachSpec : ForcedReachSpec
    {
    }
    public class FluidInfluenceComponent : PrimitiveComponent
    {
        public int FluidActor;
        public float MaxDistance;
        public float WaveStrength;
        public float WaveFrequency;
        public float WavePhase;
        public float WaveRadius;
        public float RaindropAreaRadius;
        public float RaindropRadius;
        public float RaindropStrength;
        public float RaindropRate;
        public float FlowSpeed;
        public int FlowNumRipples;
        public float FlowSideMotionRadius;
        public float FlowWaveRadius;
        public float FlowStrength;
        public float FlowFrequency;
        public float SphereOuterRadius;
        public float SphereInnerRadius;
        public float SphereStrength;
        public bool bActive;
        public bool RaindropFillEntireFluid;
        public EInfluenceType InfluenceType;
    }
    public class FluidInfluenceActor : Actor
    {
        public int FlowDirection;
        public int Sprite;
        public int InfluenceComponent;
        public bool bActive;
        public bool bToggled;
    }
    public class FluidSurfaceComponent : PrimitiveComponent
    {
        public byte[] ClampMap;
        public int[] ShadowMaps;
        public LightMapRef LightMap;
        public LightmassPrimitiveSettings LightmassSettings;
        public int FluidMaterial;
        public int LightMapResolution;
        public int SimulationQuadsX;
        public int SimulationQuadsY;
        public float GridSpacing;
        public float GridSpacingLowRes;
        public int TargetSimulation;
        public float GPUTessellationFactor;
        public float FluidDamping;
        public float FluidTravelSpeed;
        public float FluidHeightScale;
        public float FluidUpdateRate;
        public float ForceImpact;
        public float ForceContinuous;
        public float LightingContrast;
        public int TargetDetail;
        public float DeactivationDistance;
        public int DetailResolution;
        public float DetailSize;
        public float DetailDamping;
        public float DetailTravelSpeed;
        public float DetailTransfer;
        public float DetailHeightScale;
        public float DetailUpdateRate;
        public float NormalLength;
        public float TestRippleSpeed;
        public float TestRippleFrequency;
        public float TestRippleRadius;
        public float FluidWidth;
        public float FluidHeight;
        public bool EnableSimulation;
        public bool EnableDetail;
        public bool bShowSimulationPosition;
        public bool bShowDetailNormals;
        public bool bShowDetailPosition;
        public bool bTestRipple;
        public bool bTestRippleCenterOnDetail;
    }
    public class FluidSurfaceActor : Actor
    {
        public int FluidComponent;
        public int ProjectileEntryEffect;
    }
    public class FluidSurfaceActorMovable : FluidSurfaceActor
    {
    }
    public class FogVolumeDensityComponent : ActorComponent
    {
        public int[] FogVolumeActors;
        public LinearColor SimpleLightColor;
        public LinearColor ApproxFogLightColor;
        public int FogMaterial;
        public int DefaultFogVolumeMaterial;
        public float StartDistance;
        public bool bEnabled;
        public bool bAffectsTranslucency;
    }
    public class FogVolumeConeDensityComponent : FogVolumeDensityComponent
    {
        public Vector ConeVertex;
        public Vector ConeAxis;
        public float MaxDensity;
        public float ConeRadius;
        public float ConeMaxAngle;
        public int PreviewCone;
    }
    public class FogVolumeDensityInfo : Info
    {
        public int DensityComponent;
        public int AutomaticMeshComponent;
        public bool bEnabled;
    }
    public class FogVolumeConeDensityInfo : FogVolumeDensityInfo
    {
    }
    public class FogVolumeConstantDensityComponent : FogVolumeDensityComponent
    {
        public float Density;
    }
    public class FogVolumeConstantDensityInfo : FogVolumeDensityInfo
    {
    }
    public class FogVolumeLinearHalfspaceDensityComponent : FogVolumeDensityComponent
    {
        public Plane HalfspacePlane;
        public float PlaneDistanceFactor;
    }
    public class FogVolumeLinearHalfspaceDensityInfo : FogVolumeDensityInfo
    {
    }
    public class FogVolumeSphericalDensityComponent : FogVolumeDensityComponent
    {
        public Vector SphereCenter;
        public float MaxDensity;
        public float SphereRadius;
        public int PreviewSphereRadius;
    }
    public class FogVolumeSphericalDensityInfo : FogVolumeDensityInfo
    {
    }
    public class FoliageComponent : PrimitiveComponent
    {
        public StoredFoliageInstance[] LitInstances;
        public Guid[] StaticallyRelevantLights;
        public Guid[] StaticallyIrrelevantLights;
        public LightmassPrimitiveSettings LightmassSettings;
        public float DirectionalStaticLightingScale;
        public float SimpleStaticLightingScale;
        public Vector MinScale;
        public Vector MaxScale;
        public int InstanceStaticMesh;
        public int Material;
        public float MaxDrawRadius;
        public float MinTransitionRadius;
        public float MinThinningRadius;
        public float SwayScale;
    }
    public class FoliageFactory : Volume
    {
        public FoliageMesh[] Meshes;
        public float VolumeFalloffRadius;
        public float VolumeFalloffExponent;
        public float SurfaceDensityUpFacing;
        public float SurfaceDensityDownFacing;
        public float SurfaceDensitySideFacing;
        public float FacingFalloffExponent;
        public int MaxInstanceCount;
    }
    public class ForceFeedbackManager : Object
    {
        public int FFWaveform;
        public int CurrentSample;
        public float ElapsedTime;
        public float ScaleAllWaveformsBy;
        public bool bAllowsForceFeedback;
        public bool bIsPaused;
    }
    public class ForceFeedbackWaveform : Object
    {
        public WaveformSample[] Samples;
        public bool bIsLooping;
    }
    public class ForceFieldShape : Object
    {
    }
    public class ForceFieldShapeBox : ForceFieldShape
    {
        public int Shape;
    }
    public class ForceFieldShapeCapsule : ForceFieldShape
    {
        public int Shape;
    }
    public class ForceFieldShapeSphere : ForceFieldShape
    {
        public int Shape;
    }
    public class FracturedBaseComponent : StaticMeshComponent
    {
        public int NumResourceIndices;
        public int ComponentIndexBufferSize;
        public bool bInitialVisibilityValue;
        public bool bUseDynamicIndexBuffer;
        public bool bUseDynamicIBWithHiddenFragments;
    }
    public class FracturedSkinnedMeshComponent : FracturedBaseComponent
    {
    }
    public class FracturedStaticMeshComponent : FracturedBaseComponent
    {
        public Box VisibleBox;
        public float TopBottomFragmentDistThreshold;
        public int LoseChunkOutsideMaterialOverride;
        public float FragmentBoundsMaxZ;
        public float FragmentBoundsMinZ;
        public bool bUseSkinnedRendering;
        public bool bUseVisibleVertsForBounds;
        public bool bTopFragmentsRootNonDestroyable;
        public bool bBottomFragmentsRootNonDestroyable;
    }
    public class FracturedStaticMeshActor : Actor
    {
        public int[] ChunkHealth;
        public int[] FracturedByDamageType;
        public int[] OverrideFragmentDestroyEffects;
        public PhysEffectInfo PartImpactEffect;
        public int MaxPartsToSpawnAtOnce;
        public int FracturedStaticMeshComponent;
        public float ChunkHealthScale;
        public float FractureCullMinDistance;
        public float FractureCullMaxDistance;
        public int ExplosionFractureSound;
        public int SingleChunkFractureSound;
        public bool bBreakChunksOnActorTouch;
    }
    public class FracturedSMActorSpawnable : FracturedStaticMeshActor
    {
    }
    public class FracturedStaticMeshPart : FracturedStaticMeshActor
    {
        public Vector OldVelocity;
        public float DestroyPartRadiusFactor;
        public float LastSpawnTime;
        public int PartPoolIndex;
        public float FracPartGravScale;
        public float CurrentVibrationLevel;
        public float LastImpactSoundTime;
        public bool bHasBeenRecycled;
        public bool bChangeRBChannelWhenAsleep;
        public bool bCompositeThatExplodesOnImpact;
        public ERBCollisionChannel AsleepRBChannel;
    }
    public class FractureManager : Actor
    {
        public int[] PartPool;
        public int[] FreeParts;
        public int FSMPartPoolSize;
        public float DestroyVibrationLevel;
        public float DestroyMinAngVel;
        public float ExplosionVelScale;
        public bool bEnableAntiVibration;
        public bool bEnableSpawnChunkEffectForRadialDamage;
    }
    public class GameEngine : Engine
    {
        public URL LastURL;
        public URL LastRemoteURL;
        public string PendingLevelPlayerControllerClassName;
        public string[] ServerActors;
        public string TravelURL;
        public NameReference[] LevelsToLoadForPendingMapChange;
        public Level[] LoadedLevelsForPendingMapChange;
        public string PendingMapChangeFailureDescription;
        public LevelStreamingStatus[] PendingLevelStreamingStatusUpdates;
        public int[] ObjectReferencers;
        public FullyLoadedPackagesInfo[] PackagesToFullyLoad;
        public int GPendingLevel;
        public int OnlineSubsystem;
        public float MaxDeltaTime;
        public int m_nSkipFrames;
        public bool bShouldCommitPendingMapChange;
        public bool bClearAnimSetLinkupCachesOnLoadMap;
        public byte TravelType;
    }
    public class GameInfo : Info
    {
        public string CauseEventCommand;
        public string BugLocString;
        public string BugRotString;
        public int[] PendingArbitrationPCs;
        public int[] ArbitrationPCs;
        public string DefaultPlayerName;
        public string GameName;
        public int[] InactivePRIArray;
        public int[] Pausers;
        public string ServerOptions;
        public GameClassShortName[] GameInfoClassAliases;
        public string DefaultGameType;
        public GameTypePrefix[] DefaultMapPrefixes;
        public GameTypePrefix[] CustomMapPrefixes;
        public int __CanUnpause__Delegate;
        public int DefaultPawnClass;
        public int ScoreBoardType;
        public int HUDType;
        public int DeathMessageClass;
        public int GameMessageClass;
        public int AccessControlClass;
        public int BroadcastHandlerClass;
        public int AutoTestManagerClass;
        public int PlayerControllerClass;
        public int PlayerReplicationInfoClass;
        public int GameReplicationInfoClass;
        public int OnlineStatsWriteClass;
        public int OnlineGameSettingsClass;
        public float ArbitrationHandshakeTimeout;
        public float GameDifficulty;
        public int GoreLevel;
        public float GameSpeed;
        public int MaxSpectators;
        public int MaxSpectatorsAllowed;
        public int NumSpectators;
        public int MaxPlayers;
        public int MaxPlayersAllowed;
        public int NumPlayers;
        public int NumBots;
        public int NumTravellingPlayers;
        public int CurrentID;
        public float FearCostFallOff;
        public int GoalScore;
        public int MaxLives;
        public int TimeLimit;
        public int BaseMutator;
        public int AccessControl;
        public int BroadcastHandler;
        public int MyAutoTestManager;
        public int GameReplicationInfo;
        public float MaxIdleTime;
        public float MaxTimeMargin;
        public float TimeMarginSlack;
        public float MinTimeMargin;
        public int OnlineSub;
        public int LeaderboardId;
        public int ArbitratedLeaderboardId;
        public int CoverReplicatorBase;
        public int AdjustedNetSpeed;
        public float LastNetSpeedUpdateTime;
        public int TotalNetBandwidth;
        public int MinDynamicBandwidth;
        public int MaxDynamicBandwidth;
        public float StandbyRxCheatTime;
        public float StandbyTxCheatTime;
        public int BadPingThreshold;
        public float PercentMissingForRxStandby;
        public float PercentMissingForTxStandby;
        public float PercentForBadPing;
        public bool bRestartLevel;
        public bool bPauseable;
        public bool bTeamGame;
        public bool bGameEnded;
        public bool bOverTime;
        public bool bDelayedStart;
        public bool bWaitingToStartMatch;
        public bool bChangeLevels;
        public bool bAlreadyChanged;
        public bool bAdminCanPause;
        public bool bGameRestarted;
        public bool bLevelChange;
        public bool bKickLiveIdlers;
        public bool bUsingArbitration;
        public bool bHasArbitratedHandshakeBegun;
        public bool bNeedsEndGameHandshake;
        public bool bIsEndGameHandshakeComplete;
        public bool bHasEndGameHandshakeBegun;
        public bool bFixedPlayerStart;
        public bool bDoFearCostFallOff;
        public bool bUseSeamlessTravel;
        public bool bHasNetworkError;
        public bool bRequiresPushToTalk;
        public bool bIsStandbyCheckingEnabled;
        public bool bHasStandbyCheatTriggered;
    }
    public class GameInfoDataProvider : UIDynamicDataProvider
    {
        public int GameDataSource;
    }
    public class GameMessage : LocalMessage
    {
        public string SwitchLevelMessage;
        public string LeftMessage;
        public string FailedTeamMessage;
        public string FailedPlaceMessage;
        public string FailedSpawnMessage;
        public string EnteredMessage;
        public string MaxedOutMessage;
        public string ArbitrationMessage;
        public string OvertimeMessage;
        public string GlobalNameChange;
        public string NewTeamMessage;
        public string NewTeamMessageTrailer;
        public string NoNameChange;
        public string VoteStarted;
        public string VotePassed;
        public string MustHaveStats;
        public string CantBeSpectator;
        public string CantBePlayer;
        public string BecameSpectator;
        public string NewPlayerMessage;
        public string KickWarning;
        public string NewSpecMessage;
        public string SpecEnteredMessage;
    }
    public class Settings : Object
    {
        public LocalizedStringSetting[] LocalizedSettings;
        public SettingsProperty[] Properties;
        public LocalizedStringSettingMetaData[] LocalizedSettingsMappings;
        public SettingsPropertyPropertyMetaData[] PropertyMappings;
        public int __NotifySettingValueUpdated__Delegate;
        public int __NotifyPropertyValueUpdated__Delegate;
    }
    public class GameplayEvents : Object
    {
        public GameSessionInformation CurrentSessionInfo;
        public string StatsFileName;
        public PlayerInformationNew[] PlayerList;
        public TeamInformation[] TeamList;
        public GameplayEventMetaData[] SupportedEvents;
        public WeaponClassEventData[] WeaponClassArray;
        public DamageClassEventData[] DamageClassArray;
        public ProjectileClassEventData[] ProjectileClassArray;
        public PawnClassEventData[] PawnClassArray;
        public string[] ActorArray;
        public string[] SoundCueArray;
        public Pointer Archive;
        public GameplayEventsHeader Header;
    }
    public class GameplayEventsReader : GameplayEvents
    {
        public int[] EventIDFilter;
    }
    public class GameplayEventsWriter : GameplayEvents
    {
        public int Game;
    }
    public class GameReplicationInfo : ReplicationInfo
    {
        public int[] Teams;
        public string ServerName;
        public string MessageOfTheDay;
        public int[] PRIArray;
        public int[] InactivePRIArray;
        public int GameClass;
        public int CurrentGameData;
        public int RemainingTime;
        public int ElapsedTime;
        public int RemainingMinute;
        public int GoalScore;
        public int TimeLimit;
        public int Winner;
        public bool bStopCountDown;
        public bool bMatchHasBegun;
        public bool bMatchIsOver;
    }
    public class UISceneClient : UIRoot
    {
        public Pointer VfTable_FExec;
    }
    public class GameUISceneClient : UISceneClient
    {
        public float OverlaySceneAlphaModulation;
        public bool bEnableDebugInput;
        public bool bRenderDebugInfo;
        public bool bRenderDebugInfoAtTop;
        public bool bRenderActiveControlInfo;
        public bool bRenderFocusedControlInfo;
        public bool bRenderTargetControlInfo;
        public bool bSelectVisibleTargetsOnly;
        public bool bInteractiveMode;
        public bool bDisplayFullPaths;
        public bool bShowWidgetPath;
        public bool bShowRenderBounds;
        public bool bShowCurrentState;
        public bool bShowMousePos;
        public bool bRestrictActiveControlToFocusedScene;
        public bool bCaptureUnprocessedInput;
        public bool bSynchronizePlayers;
    }
    public class GameViewportClient : Object
    {
        public Pointer VfTable_FViewportClient;
        public Pointer VfTable_FExec;
        public Pointer VfTable_FCallbackEventDevice;
        public string ProgressMessage;
        public int[] GlobalInteractions;
        public string LoadingMessage;
        public string SavingMessage;
        public string ConnectingMessage;
        public string PausedMessage;
        public string PrecachingMessage;
        public SplitscreenData[] SplitscreenInfo;
        public DebugDisplayProperty[] DebugProperties;
        public int __HandleInputKey__Delegate;
        public int __HandleInputAxis__Delegate;
        public int __HandleInputChar__Delegate;
        public Pointer Viewport;
        public Pointer ViewportFrame;
        public int UIControllerClass;
        public Pointer pShowFlags;
        public TitleSafeZoneArea TitleSafeZone;
        public int UIController;
        public int ViewportConsole;
        public float ProgressTimeOut;
        public float ProgressFadeTime;
        public bool bShowTitleSafeZone;
        public bool bDisableWorldRendering;
        public ESplitScreenType DesiredSplitscreenType;
        public ESplitScreenType ActiveSplitscreenType;
        public ESplitScreenType Default2PSplitType;
        public ESplitScreenType Default3PSplitType;
        public byte CurrentMouseCursor;
    }
    public class PathGoalEvaluator : Object
    {
        public int NextEvaluator;
        public int GeneratedGoal;
        public int MaxPathVisits;
        public int CacheIdx;
        public bool AllowStartNodeToBeGoal;
    }
    public class Goal_AtActor : PathGoalEvaluator
    {
        public int GoalActor;
        public float GoalDist;
        public bool bKeepPartial;
    }
    public class Goal_Null : PathGoalEvaluator
    {
    }
    public class GravityVolume : PhysicsVolume
    {
        public float GravityZ;
        public float RBPhysicsGravityScaling;
    }
    public class HeightFogComponent : ActorComponent
    {
        public float Height;
        public float Density;
        public float LightBrightness;
        public Color LightColor;
        public float ExtinctionDistance;
        public float StartDistance;
        public bool bEnabled;
    }
    public class HeightFog : Info
    {
        public int Component;
        public bool bEnabled;
    }
    public class InstancedStaticMeshComponent : StaticMeshComponent
    {
        public InstancedStaticMeshInstanceData[] PerInstanceData;
        public int ComponentJoinKey;
        public int InstancingRandomSeed;
    }
    public class StaticMeshActorBase : Actor
    {
    }
    public class StaticMeshActor : StaticMeshActorBase
    {
        public int StaticMeshComponent;
        public int oAudioComponent;
    }
    public class InteractiveFoliageComponent : StaticMeshComponent
    {
        public Pointer FoliageSceneProxy;
    }
    public class InteractiveFoliageActor : StaticMeshActor
    {
        public int CylinderComponent;
        public float FoliageDamageImpulseScale;
        public float FoliageTouchImpulseScale;
        public float FoliageStiffness;
        public float FoliageStiffnessQuadratic;
        public float FoliageDamping;
        public float MaxDamageImpulse;
        public float MaxTouchImpulse;
        public float MaxForce;
        public float Mass;
    }
    public class Interface_NavigationHandle : Interface
    {
    }
    public class Interface_NavMeshPathObject : Interface
    {
    }
    public class Interface_NavMeshPathObstacle : Interface
    {
    }
    public class Interface_NavMeshPathSwitch : Interface_NavMeshPathObject
    {
    }
    public class InterpActor : DynamicSMActor
    {
        public int MyMarker;
        public float MaxZVelocity;
        public float StayOpenTime;
        public int OpenSound;
        public int OpeningAmbientSound;
        public int OpenedSound;
        public int CloseSound;
        public int ClosingAmbientSound;
        public int ClosedSound;
        public int AmbientSoundComponent;
        public bool bShouldSaveForCheckpoint;
        public bool bMonitorMover;
        public bool bMonitorZVelocity;
        public bool bDestroyProjectilesOnEncroach;
        public bool bContinueOnEncroachPhysicsObject;
        public bool bStopOnEncroach;
        public bool bShouldShadowParentAllAttachedActors;
        public bool bIsLift;
    }
    public class InterpActor_ForCinematic : InterpActor
    {
    }
    public class InterpCurveEdSetup : Object
    {
        public CurveEdTab[] Tabs;
        public int ActiveTab;
    }
    public class InterpData : SequenceVariable
    {
        public int[] InterpGroups;
        public BioResourcePreloadItem[] m_aBioPreloadData;
        public float InterpLength;
        public float PathBuildTime;
        public int CurveEdSetup;
        public float EdSectionStart;
        public float EdSectionEnd;
        public int m_nBioCutSceneVersion;
        public int m_pSFXSceneData;
        public bool bShouldBakeAndPrune;
    }
    public class InterpFilter : Object
    {
        public string Caption;
    }
    public class InterpFilter_Classes : InterpFilter
    {
    }
    public class InterpFilter_Custom : InterpFilter
    {
    }
    public class InterpGroup : Object
    {
        public Pointer VfTable_FInterpEdInputInterface;
        public int[] InterpTracks;
        public int[] GroupAnimSets;
        public NameReference m_nmSFXFindActor;
        public NameReference GroupName;
        public Color GroupColor;
        public int BioForcedLodModel;
        public bool bCollapsed;
        public bool bDontPrime;
        public bool bIsFolder;
        public bool bIsParented;
        public ESFXFindByTagTypes m_eSFXFindActorMode;
    }
    public class InterpGroupAI : InterpGroup
    {
        public NameReference StageMarkGroup;
        public int StageMarkActor;
        public bool AllowDeferredActorAttach;
    }
    public class InterpGroupDirector : InterpGroup
    {
    }
    public class InterpGroupInstAI : InterpGroupInst
    {
        public EPhysics SavedPhysics;
    }
    public class InterpGroupInstDirector : InterpGroupInst
    {
    }
    public class InterpTrackFloatBase : InterpTrack
    {
        public InterpCurveFloat FloatTrack;
        public float CurveTension;
    }
    public class InterpTrackAnimControl : InterpTrackFloatBase
    {
        public AnimControlTrackKey[] AnimSeqs;
        public NameReference SlotName;
    }
    public class InterpTrackVectorBase : InterpTrack
    {
        public InterpCurveVector VectorTrack;
        public float CurveTension;
    }
    public class InterpTrackAudioMaster : InterpTrackVectorBase
    {
    }
    public class InterpTrackColorProp : InterpTrackVectorBase
    {
        public NameReference PropertyName;
    }
    public class InterpTrackColorScale : InterpTrackVectorBase
    {
    }
    public class InterpTrackDirector : InterpTrack
    {
        public DirectorTrackCut[] CutTrack;
        public bool bSimulateCameraCutsOnClients;
    }
    public class InterpTrackEvent : InterpTrack
    {
        public EventTrackKey[] EventTrack;
        public bool bFireEventsWhenForwards;
        public bool bFireEventsWhenBackwards;
        public bool bFireEventsWhenJumpingForwards;
    }
    public class InterpTrackFaceFX : InterpTrack
    {
        public Override_AnimSet OverrideAnimSet;
        public int[] FaceFXAnimSets;
        public int[] m_aBioMaleAnimSets;
        public int[] m_aBioFemaleAnimSets;
        public FaceFXTrackKey[] FaceFXSeqs;
        public FaceFXSoundCueKey[] FaceFXSoundCueKeys;
        public Override_Asset OverrideAsset;
        public NameReference m_nmSFXFindActor;
        public bool m_bSFXEnableClipToClipBlending;
        public ESFXFindByTagTypes m_eSFXFindActorMode;
    }
    public class InterpTrackFade : InterpTrackFloatBase
    {
        public bool bPersistFade;
    }
    public class InterpTrackFloatMaterialParam : InterpTrackFloatBase
    {
        public MeshMaterialRef[] AffectedMaterialRefs;
        public NameReference ParamName;
    }
    public class InterpTrackFloatParticleParam : InterpTrackFloatBase
    {
        public NameReference ParamName;
    }
    public class InterpTrackFloatProp : InterpTrackFloatBase
    {
        public NameReference PropertyName;
    }
    public class InterpTrackInstAnimControl : InterpTrackInst
    {
        public float LastUpdatePosition;
    }
    public class InterpTrackInstAudioMaster : InterpTrackInst
    {
    }
    public class InterpTrackInstProperty : InterpTrackInst
    {
        public int PropertyUpdateCallback;
        public int PropertyOuterObjectInst;
    }
    public class InterpTrackInstColorProp : InterpTrackInstProperty
    {
        public Pointer ColorProp;
        public Color ResetColor;
    }
    public class InterpTrackInstColorScale : InterpTrackInst
    {
    }
    public class InterpTrackInstDirector : InterpTrackInst
    {
        public int OldViewTarget;
    }
    public class InterpTrackInstEvent : InterpTrackInst
    {
        public float LastUpdatePosition;
    }
    public class InterpTrackInstFaceFX : InterpTrackInst
    {
        public float LastUpdatePosition;
    }
    public class InterpTrackInstFade : InterpTrackInst
    {
    }
    public class InterpTrackInstFloatMaterialParam : InterpTrackInst
    {
        public float[] ResetFloats;
    }
    public class InterpTrackInstFloatParticleParam : InterpTrackInst
    {
        public float ResetFloat;
    }
    public class InterpTrackInstFloatProp : InterpTrackInstProperty
    {
        public Pointer FloatProp;
        public float ResetFloat;
    }
    public class InterpTrackInstLinearColorProp : InterpTrackInstProperty
    {
        public Pointer ColorProp;
        public LinearColor ResetColor;
    }
    public class InterpTrackInstMorphWeight : InterpTrackInst
    {
    }
    public class InterpTrackInstMove : InterpTrackInst
    {
        public Matrix InitialTM;
        public Quat InitialQuat;
        public Vector ResetLocation;
        public Rotator ResetRotation;
        public byte m_nSavedPhysicsMode;
    }
    public class InterpTrackInstParticleReplay : InterpTrackInst
    {
        public float LastUpdatePosition;
    }
    public class InterpTrackInstSkelControlScale : InterpTrackInst
    {
    }
    public class InterpTrackInstSlomo : InterpTrackInst
    {
        public float OldTimeDilation;
    }
    public class InterpTrackInstSound : InterpTrackInst
    {
        public float LastUpdatePosition;
    }
    public class InterpTrackToggle : InterpTrack
    {
        public ToggleTrackKey[] ToggleTrack;
        public bool bActivateSystemEachUpdate;
        public bool bFireEventsWhenForwards;
        public bool bFireEventsWhenBackwards;
        public bool bFireEventsWhenJumpingForwards;
    }
    public class InterpTrackInstToggle : InterpTrackInst
    {
        public float LastUpdatePosition;
        public bool bSavedActiveState;
        public ETrackToggleAction Action;
    }
    public class InterpTrackInstVectorMaterialParam : InterpTrackInst
    {
        public Vector[] ResetVectors;
    }
    public class InterpTrackInstVectorProp : InterpTrackInstProperty
    {
        public Pointer VectorProp;
        public Vector ResetVector;
    }
    public class InterpTrackVisibility : InterpTrack
    {
        public VisibilityTrackKey[] VisibilityTrack;
        public bool bFireEventsWhenForwards;
        public bool bFireEventsWhenBackwards;
        public bool bFireEventsWhenJumpingForwards;
    }
    public class InterpTrackInstVisibility : InterpTrackInst
    {
        public float LastUpdatePosition;
        public EVisibilityTrackAction Action;
    }
    public class InterpTrackLinearColorBase : InterpTrack
    {
        public InterpCurveLinearColor LinearColorTrack;
        public float CurveTension;
    }
    public class InterpTrackLinearColorProp : InterpTrackLinearColorBase
    {
        public NameReference PropertyName;
    }
    public class InterpTrackMorphWeight : InterpTrackFloatBase
    {
        public NameReference MorphNodeName;
    }
    public class InterpTrackMove : InterpTrack
    {
        public InterpCurveVector PosTrack;
        public InterpCurveVector EulerTrack;
        public InterpLookupTrack LookupTrack;
        public NameReference LookAtGroupName;
        public float LinCurveTension;
        public float AngCurveTension;
        public bool bUseQuatInterpolation;
        public bool bShowArrowAtKeys;
        public bool bDisableMovement;
        public bool bShowTranslationOnCurveEd;
        public bool bShowRotationOnCurveEd;
        public bool bHide3DTrack;
        public bool SFXCreatedBeforeStuntActorLocationChange;
        public EInterpTrackMoveFrame MoveFrame;
        public EInterpTrackMoveRotMode RotMode;
    }
    public class InterpTrackParticleReplay : InterpTrack
    {
        public ParticleReplayTrackKey[] TrackKeys;
    }
    public class InterpTrackSkelControlScale : InterpTrackFloatBase
    {
        public NameReference SkelControlName;
    }
    public class InterpTrackSlomo : InterpTrackFloatBase
    {
    }
    public class InterpTrackSound : InterpTrackVectorBase
    {
        public SoundTrackKey[] Sounds;
        public bool bContinueSoundOnMatineeEnd;
        public bool bSuppressSubtitles;
    }
    public class InterpTrackVectorMaterialParam : InterpTrackVectorBase
    {
        public MeshMaterialRef[] AffectedMaterialRefs;
        public NameReference ParamName;
    }
    public class InterpTrackVectorProp : InterpTrackVectorBase
    {
        public NameReference PropertyName;
    }
    public class Inventory : Actor
    {
        public string ItemName;
        public string PickupMessage;
        public string PickupForce;
        public int DroppedPickupClass;
        public int _Inventory;
        public int InvManager;
        public float RespawnTime;
        public float MaxDesireability;
        public int PickupSound;
        public int DroppedPickupMesh;
        public int PickupFactoryMesh;
        public int DroppedPickupParticles;
        public bool bRenderOverlays;
        public bool bReceiveOwnerEvents;
        public bool bDropOnDeath;
        public bool bDelayedSpawn;
        public bool bPredictRespawns;
    }
    public class InventoryManager : Actor
    {
        public int[] PendingFire;
        public int InventoryChain;
        public int PendingWeapon;
        public int LastAttemptedSwitchToWeapon;
        public bool bMustHoldWeapon;
    }
    public class KActor : DynamicSMActor
    {
        public RigidBodyState RBState;
        public PhysEffectInfo ImpactEffectInfo;
        public PhysEffectInfo SlideEffectInfo;
        public Vector ReplicatedDrawScale3D;
        public int ImpactEffectComponent;
        public int ImpactSoundComponent;
        public int ImpactSoundComponent2;
        public float LastImpactTime;
        public int SlideEffectComponent;
        public int SlideSoundComponent;
        public float LastSlideTime;
        public float StayUprightTorqueFactor;
        public float StayUprightMaxTorque;
        public float MaxPhysicsVelocity;
        public float AngErrorAccumulator;
        public bool bDamageAppliesImpulse;
        public bool bWakeOnLevelStart;
        public bool bCurrentSlide;
        public bool bSlideActive;
        public bool bEnableStayUprightSpring;
        public bool bLimitMaxPhysicsVelocity;
        public bool bDisableClientSidePawnInteractions;
    }
    public class KActorFromStatic : KActor
    {
        public int MyStaticMeshActor;
        public float MaxImpulseSpeed;
    }
    public class KActorSpawnable : KActor
    {
        public bool bRecycleScaleToZero;
        public bool bScalingToZero;
    }
    public class KAsset : Actor
    {
        public int SkeletalMeshComponent;
        public bool bDamageAppliesImpulse;
        public bool bWakeOnLevelStart;
        public bool bBlockPawns;
    }
    public class KAssetSpawnable : KAsset
    {
    }
    public class KMeshProps : Object
    {
        public Vector COMNudge;
        public KAggregateGeom AggGeom;
    }
    public class LadderReachSpec : ReachSpec
    {
    }
    public class LadderVolume : PhysicsVolume
    {
        public Rotator WallDir;
        public Vector LookDir;
        public Vector ClimbDir;
        public int LadderList;
        public int PendingClimber;
        public int WallDirArrow;
        public bool bNoPhysicalLadder;
        public bool bAutoPath;
        public bool bAllowLadderStrafing;
    }
    public class LensFlare : Object
    {
        public LensFlareElement SourceElement;
        public RawDistributionFloat ScreenPercentageMap;
        public LensFlareElement[] Reflections;
        public Box FixedRelativeBoundingBox;
        public Rotator ThumbnailAngle;
        public int SourceMesh;
        public float OuterCone;
        public float InnerCone;
        public float ConeFudgeFactor;
        public float Radius;
        public int CurveEdSetup;
        public float ThumbnailDistance;
        public int ThumbnailImage;
        public bool bUseFixedRelativeBoundingBox;
        public bool bRenderDebugLines;
        public bool ThumbnailImageOutOfDate;
        public ESceneDepthPriorityGroup SourceDPG;
        public ESceneDepthPriorityGroup ReflectionsDPG;
    }
    public class LensFlareComponent : PrimitiveComponent
    {
        public Pointer ReleaseResourcesFence;
        public LinearColor SourceColor;
        public int Template;
        public int PreviewInnerCone;
        public int PreviewOuterCone;
        public int PreviewRadius;
        public bool bAutoActivate;
    }
    public class LensFlareSource : Actor
    {
        public int LensFlareComp;
        public bool bCurrentlyActive;
    }
    public class LevelStreaming : Object
    {
        public int[] EditorStreamingVolumes;
        public string[] Keywords;
        public Vector Offset;
        public Vector OldOffset;
        public NameReference PackageName;
        public Color DrawColor;
        public float MinTimeBetweenVolumeUnloadRequests;
        public bool bShouldBeVisibleInEditor;
        public bool bBoundingBoxVisible;
        public bool bLocked;
        public bool bIsFullyStatic;
        public bool bNeedFullReload;
        public bool bDrawOnLevelStatusMap;
    }
    public class LevelStreamingAlwaysLoaded : LevelStreaming
    {
        public bool bIsProceduralBuildingLODLevel;
    }
    public class LevelStreamingDistance : LevelStreaming
    {
        public Vector Origin;
        public float MaxDistance;
    }
    public class LevelStreamingKismet : LevelStreaming
    {
    }
    public class LevelStreamingPersistent : LevelStreaming
    {
    }
    public class LevelStreamingVolume : Volume
    {
        public int[] StreamingLevels;
        public float TestVolumeDistance;
        public bool bEditorPreVisOnly;
        public bool bDisabled;
        public bool bTestDistanceToVolume;
        public EStreamingVolumeUsage StreamingUsage;
    }
    public class LiftCenter : NavigationPoint
    {
        public Vector LiftOffset;
        public int MyLift;
        public float MaxDist2D;
        public float CollisionHeight;
        public int LiftTrigger;
        public bool bJumpLift;
    }
    public class LiftExit : NavigationPoint
    {
        public int MyLiftCenter;
        public bool bExitOnly;
    }
    public class LightFunction : Object
    {
        public Vector Scale;
        public int SourceMaterial;
    }
    public class LightmappedSurfaceCollection : Object
    {
        public int[] Surfaces;
        public int SourceModel;
    }
    public class LightmassImportanceVolume : Volume
    {
    }
    public class LightmassLevelSettings : Object
    {
        public int NumIndirectLightingBounces;
        public Color EnvironmentColor;
        public float EnvironmentIntensity;
        public float EmissiveBoost;
        public float DiffuseBoost;
        public float SpecularBoost;
        public float DirectIlluminationOcclusionFraction;
        public float IndirectIlluminationOcclusionFraction;
        public float OcclusionExponent;
        public float FullyOccludedSamplesFraction;
        public float MaxOcclusionDistance;
        public bool bUseAmbientOcclusion;
        public bool bVisualizeAmbientOcclusion;
    }
    public class LightmassPrimitiveSettingsObject : Object
    {
        public LightmassPrimitiveSettings LightmassSettings;
    }
    public class LightVolume : Volume
    {
    }
    public class LineBatchComponent : PrimitiveComponent
    {
        public Pointer FPrimitiveDrawInterfaceVfTable;
        public Pointer FPrimitiveDrawInterfaceView;
    }
    public class Player : Object
    {
        public Pointer VfTable_FExec;
        public int CurrentNetSpeed;
        public int ConfiguredInternetSpeed;
        public int ConfiguredLanSpeed;
        public float PP_DesaturationMultiplier;
        public float PP_HighlightsMultiplier;
        public float PP_MidTonesMultiplier;
        public float PP_ShadowsMultiplier;
    }
    public class PostProcessChain : Object
    {
        public int[] Effects;
    }
    public class LocalPlayer : Player
    {
        public PostProcessSettings OverridePPDeltaSettings;
        public PostProcessSettings PostProcessSettingsOverride;
        public int[] PlayerPostProcessChains;
        public string LastMap;
        public Pointer ViewState;
        public Vector2D Origin;
        public Vector2D Size;
        public int ControllerId;
        public int ViewportClient;
        public int PlayerPostProcess;
        public float OverridePPRecoveryTime;
        public float OverridePPStartTime;
        public float OverridePPEndTime;
        public float OverridePPOpacity;
        public float NearClipPlane;
        public bool bOverridePostProcessSettings;
        public bool bRecoveryFromPostProcessOverride;
        public bool bWantToResetToMapDefaultPP;
    }
    public class MantleMarker : NavigationPoint
    {
        public CoverInfo OwningSlot;
    }
    public class MantleReachSpec : ForcedReachSpec
    {
        public bool bClimbUp;
    }
    public class MapInfo : Object
    {
    }
    public class MaterialEffect : PostProcessEffect
    {
        public int Material;
    }
    public class MaterialExpressionAbs : MaterialExpression
    {
        public ExpressionInput Input;
    }
    public class MaterialExpressionAdd : MaterialExpression
    {
        public ExpressionInput A;
        public ExpressionInput B;
    }
    public class MaterialExpressionTextureSample : MaterialExpression
    {
        public ExpressionInput Coordinates;
        public int Texture;
        public bool bDecompressNormalMap;
    }
    public class MaterialExpressionTextureSampleParameter : MaterialExpressionTextureSample
    {
        public Guid ExpressionGUID;
        public NameReference ParameterName;
    }
    public class MaterialExpressionTextureSampleParameter2D : MaterialExpressionTextureSampleParameter
    {
    }
    public class MaterialExpressionAntialiasedTextureMask : MaterialExpressionTextureSampleParameter2D
    {
        public float Threshold;
        public ETextureColorChannel Channel;
    }
    public class MaterialExpressionAppendVector : MaterialExpression
    {
        public ExpressionInput A;
        public ExpressionInput B;
    }
    public class MaterialExpressionBumpOffset : MaterialExpression
    {
        public ExpressionInput Coordinate;
        public ExpressionInput Height;
        public float HeightRatio;
        public float ReferencePlane;
    }
    public class MaterialExpressionCameraVector : MaterialExpression
    {
    }
    public class MaterialExpressionCameraWorldPosition : MaterialExpression
    {
    }
    public class MaterialExpressionCeil : MaterialExpression
    {
        public ExpressionInput Input;
    }
    public class MaterialExpressionClamp : MaterialExpression
    {
        public ExpressionInput Input;
        public ExpressionInput Min;
        public ExpressionInput Max;
    }
    public class MaterialExpressionComment : MaterialExpression
    {
        public string Text;
        public int PosX;
        public int PosY;
        public int SizeX;
        public int SizeY;
    }
    public class MaterialExpressionComponentMask : MaterialExpression
    {
        public ExpressionInput Input;
        public bool R;
        public bool G;
        public bool B;
        public bool A;
    }
    public class MaterialExpressionCompound : MaterialExpression
    {
        public int[] MaterialExpressions;
        public string Caption;
        public bool bExpanded;
    }
    public class MaterialExpressionConstant : MaterialExpression
    {
        public float R;
    }
    public class MaterialExpressionConstant2Vector : MaterialExpression
    {
        public float R;
        public float G;
    }
    public class MaterialExpressionConstant3Vector : MaterialExpression
    {
        public float R;
        public float G;
        public float B;
    }
    public class MaterialExpressionConstant4Vector : MaterialExpression
    {
        public float R;
        public float G;
        public float B;
        public float A;
    }
    public class MaterialExpressionConstantBiasScale : MaterialExpression
    {
        public ExpressionInput Input;
        public float Bias;
        public float Scale;
    }
    public class MaterialExpressionConstantClamp : MaterialExpression
    {
        public ExpressionInput Input;
        public float Min;
        public float Max;
    }
    public class MaterialExpressionCosine : MaterialExpression
    {
        public ExpressionInput Input;
        public float Period;
    }
    public class MaterialExpressionCrossProduct : MaterialExpression
    {
        public ExpressionInput A;
        public ExpressionInput B;
    }
    public class MaterialExpressionCustom : MaterialExpression
    {
        public string Code;
        public string Description;
        public CustomInput[] Inputs;
        public ECustomMaterialOutputType OutputType;
    }
    public class MaterialExpressionCustomTexture : MaterialExpression
    {
        public int Texture;
    }
    public class MaterialExpressionDepthBiasBlend : MaterialExpressionTextureSample
    {
        public ExpressionInput Bias;
        public float BiasScale;
        public bool bNormalize;
    }
    public class MaterialExpressionDepthBiasedAlpha : MaterialExpression
    {
        public ExpressionInput Alpha;
        public ExpressionInput Bias;
        public float BiasScale;
        public bool bNormalize;
    }
    public class MaterialExpressionDepthBiasedBlend : MaterialExpression
    {
        public ExpressionInput RGB;
        public ExpressionInput Alpha;
        public ExpressionInput Bias;
        public float BiasScale;
        public bool bNormalize;
    }
    public class MaterialExpressionDeriveNormalZ : MaterialExpression
    {
        public ExpressionInput InXY;
    }
    public class MaterialExpressionDesaturation : MaterialExpression
    {
        public ExpressionInput Input;
        public ExpressionInput Percent;
        public LinearColor LuminanceFactors;
    }
    public class MaterialExpressionDestColor : MaterialExpression
    {
    }
    public class MaterialExpressionDestDepth : MaterialExpression
    {
        public bool bNormalize;
    }
    public class MaterialExpressionDistance : MaterialExpression
    {
        public ExpressionInput A;
        public ExpressionInput B;
    }
    public class MaterialExpressionDivide : MaterialExpression
    {
        public ExpressionInput A;
        public ExpressionInput B;
    }
    public class MaterialExpressionDotProduct : MaterialExpression
    {
        public ExpressionInput A;
        public ExpressionInput B;
    }
    public class MaterialExpressionDynamicParameter : MaterialExpression
    {
        public string[] ParamNames;
    }
    public class MaterialExpressionFlipBookSample : MaterialExpressionTextureSample
    {
    }
    public class MaterialExpressionFloor : MaterialExpression
    {
        public ExpressionInput Input;
    }
    public class MaterialExpressionFluidNormal : MaterialExpression
    {
    }
    public class MaterialExpressionFmod : MaterialExpression
    {
        public ExpressionInput A;
        public ExpressionInput B;
    }
    public class MaterialExpressionFoliageImpulseDirection : MaterialExpression
    {
    }
    public class MaterialExpressionFoliageNormalizedRotationAxisAndAngle : MaterialExpression
    {
    }
    public class MaterialExpressionFontSample : MaterialExpression
    {
        public int Font;
        public int FontTexturePage;
    }
    public class MaterialExpressionFontSampleParameter : MaterialExpressionFontSample
    {
        public Guid ExpressionGUID;
        public NameReference ParameterName;
    }
    public class MaterialExpressionFrac : MaterialExpression
    {
        public ExpressionInput Input;
    }
    public class MaterialExpressionFresnel : MaterialExpression
    {
        public ExpressionInput Normal;
        public float Exponent;
    }
    public class MaterialExpressionIf : MaterialExpression
    {
        public ExpressionInput A;
        public ExpressionInput B;
        public ExpressionInput AGreaterThanB;
        public ExpressionInput AEqualsB;
        public ExpressionInput ALessThanB;
    }
    public class MaterialExpressionLensFlareIntensity : MaterialExpression
    {
    }
    public class MaterialExpressionLensFlareOcclusion : MaterialExpression
    {
    }
    public class MaterialExpressionLensFlareRadialDistance : MaterialExpression
    {
    }
    public class MaterialExpressionLensFlareRayDistance : MaterialExpression
    {
    }
    public class MaterialExpressionLensFlareSourceDistance : MaterialExpression
    {
    }
    public class MaterialExpressionLightmapUVs : MaterialExpression
    {
    }
    public class MaterialExpressionLightmassReplace : MaterialExpression
    {
        public ExpressionInput Realtime;
        public ExpressionInput Lightmass;
    }
    public class MaterialExpressionLightVector : MaterialExpression
    {
    }
    public class MaterialExpressionLinearInterpolate : MaterialExpression
    {
        public ExpressionInput A;
        public ExpressionInput B;
        public ExpressionInput Alpha;
    }
    public class MaterialExpressionMeshEmitterDynamicParameter : MaterialExpressionDynamicParameter
    {
    }
    public class MaterialExpressionMeshEmitterVertexColor : MaterialExpression
    {
    }
    public class MaterialExpressionMeshSubUV : MaterialExpressionTextureSample
    {
    }
    public class MaterialExpressionMeshSubUVBlend : MaterialExpressionMeshSubUV
    {
    }
    public class MaterialExpressionMultiply : MaterialExpression
    {
        public ExpressionInput A;
        public ExpressionInput B;
    }
    public class MaterialExpressionNormalize : MaterialExpression
    {
        public ExpressionInput VectorInput;
    }
    public class MaterialExpressionObjectOrientation : MaterialExpression
    {
    }
    public class MaterialExpressionObjectRadius : MaterialExpression
    {
    }
    public class MaterialExpressionObjectWorldPosition : MaterialExpression
    {
    }
    public class MaterialExpressionOcclusionPercentage : MaterialExpression
    {
    }
    public class MaterialExpressionOneMinus : MaterialExpression
    {
        public ExpressionInput Input;
    }
    public class MaterialExpressionPanner : MaterialExpression
    {
        public ExpressionInput Coordinate;
        public ExpressionInput Time;
        public float SpeedX;
        public float SpeedY;
    }
    public class MaterialExpressionParticleMacroUV : MaterialExpression
    {
        public bool bUseViewSpace;
    }
    public class MaterialExpressionParticleSubUV : MaterialExpressionTextureSample
    {
    }
    public class MaterialExpressionPerInstanceRandom : MaterialExpression
    {
    }
    public class MaterialExpressionPixelDepth : MaterialExpression
    {
        public bool bNormalize;
    }
    public class MaterialExpressionPower : MaterialExpression
    {
        public ExpressionInput Base;
        public ExpressionInput Exponent;
    }
    public class MaterialExpressionReflectionVector : MaterialExpression
    {
    }
    public class MaterialExpressionRotateAboutAxis : MaterialExpression
    {
        public ExpressionInput NormalizedRotationAxisAndAngle;
        public ExpressionInput PositionOnAxis;
        public ExpressionInput Position;
    }
    public class MaterialExpressionRotator : MaterialExpression
    {
        public ExpressionInput Coordinate;
        public ExpressionInput Time;
        public float CenterX;
        public float CenterY;
        public float Speed;
    }
    public class MaterialExpressionSceneDepth : MaterialExpression
    {
        public ExpressionInput Coordinates;
        public bool bNormalize;
    }
    public class MaterialExpressionSceneTexture : MaterialExpression
    {
        public ExpressionInput Coordinates;
        public bool ScreenAlign;
        public ESceneTextureType SceneTextureType;
    }
    public class MaterialExpressionScreenPosition : MaterialExpression
    {
        public bool ScreenAlign;
    }
    public class MaterialExpressionSine : MaterialExpression
    {
        public ExpressionInput Input;
        public float Period;
    }
    public class MaterialExpressionSphereMask : MaterialExpression
    {
        public ExpressionInput A;
        public ExpressionInput B;
        public float AttenuationRadius;
        public float HardnessPercent;
    }
    public class MaterialExpressionSquareRoot : MaterialExpression
    {
        public ExpressionInput Input;
    }
    public class MaterialExpressionStaticComponentMaskParameter : MaterialExpressionParameter
    {
        public ExpressionInput Input;
        public bool DefaultR;
        public bool DefaultG;
        public bool DefaultB;
        public bool DefaultA;
    }
    public class MaterialExpressionStaticSwitchParameter : MaterialExpressionParameter
    {
        public ExpressionInput A;
        public ExpressionInput B;
        public bool DefaultValue;
        public bool ExtendedCaptionDisplay;
    }
    public class MaterialExpressionSubtract : MaterialExpression
    {
        public ExpressionInput A;
        public ExpressionInput B;
    }
    public class MaterialExpressionTextureCoordinate : MaterialExpression
    {
        public int CoordinateIndex;
        public float UTiling;
        public float VTiling;
        public bool UnMirrorU;
        public bool UnMirrorV;
    }
    public class TextureCube : Texture
    {
        public int FacePosX;
        public int FaceNegX;
        public int FacePosY;
        public int FaceNegY;
        public int FacePosZ;
        public int FaceNegZ;
    }
    public class MaterialExpressionTextureSampleParameterCube : MaterialExpressionTextureSampleParameter
    {
    }
    public class MaterialExpressionTextureSampleParameterMeshSubUV : MaterialExpressionTextureSampleParameter2D
    {
    }
    public class MaterialExpressionTextureSampleParameterMeshSubUVBlend : MaterialExpressionTextureSampleParameterMeshSubUV
    {
    }
    public class MaterialExpressionTextureSampleParameterMovie : MaterialExpressionTextureSampleParameter
    {
    }
    public class MaterialExpressionTextureSampleParameterNormal : MaterialExpressionTextureSampleParameter
    {
    }
    public class MaterialExpressionTextureSampleParameterSubUV : MaterialExpressionTextureSampleParameter2D
    {
    }
    public class MaterialExpressionTime : MaterialExpression
    {
        public bool bIgnorePause;
    }
    public class MaterialExpressionTransform : MaterialExpression
    {
        public ExpressionInput Input;
        public EMaterialVectorCoordTransformSource TransformSourceType;
        public EMaterialVectorCoordTransform TransformType;
    }
    public class MaterialExpressionTransformPosition : MaterialExpression
    {
        public ExpressionInput Input;
        public EMaterialPositionTransform TransformType;
    }
    public class MaterialExpressionTwoSidedSign : MaterialExpression
    {
    }
    public class MaterialExpressionVectorParameter : MaterialExpressionParameter
    {
        public LinearColor DefaultValue;
    }
    public class MaterialExpressionVertexColor : MaterialExpression
    {
    }
    public class MaterialExpressionWindDirectionAndSpeed : MaterialExpression
    {
    }
    public class MaterialExpressionWorldNormal : MaterialExpression
    {
    }
    public class MaterialExpressionWorldPosition : MaterialExpression
    {
    }
    public class MaterialInstanceActor : Actor
    {
        public int MatInst;
    }
    public class MaterialInstanceTimeVarying : MaterialInstance
    {
        public FontParameterValueOverTime[] FontParameterValues;
        public ScalarParameterValueOverTime[] ScalarParameterValues;
        public TextureParameterValueOverTime[] TextureParameterValues;
        public VectorParameterValueOverTime[] VectorParameterValues;
        public bool bAutoActivateAll;
    }
    public class MatineeActor : Actor
    {
        public int InterpAction;
        public float PlayRate;
        public float Position;
        public float ClientSidePositionErrorTolerance;
        public bool bIsPlaying;
        public bool bReversePlayback;
        public bool bPaused;
    }
    public class Pawn : Actor
    {
        public RootMotionCurve RootMotionInterpCurve;
        public string MenuName;
        public int ControllerClass;
        public int HitDamageType;
        public int InventoryManagerClass;
        public Vector SerpentineDir;
        public Vector Floor;
        public Vector RMVelocity;
        public Vector noise1spot;
        public Vector noise2spot;
        public Vector TakeHitLocation;
        public Vector TearOffMomentum;
        public Rotator DesiredRotation;
        public Vector FlashLocation;
        public Vector LastFiringFlashLocation;
        public Vector RootMotionInterpCurveLastValue;
        public NameReference LandMovementState;
        public NameReference WaterMovementState;
        public float MaxStepHeight;
        public float MaxJumpHeight;
        public float WalkableFloorZ;
        public float LedgeCheckThreshold;
        public int Controller;
        public int NextPawn;
        public float NetRelevancyTime;
        public int LastRealViewer;
        public int LastViewer;
        public float UncrouchTime;
        public float CrouchHeight;
        public float CrouchRadius;
        public int FullHeight;
        public float NonPreferredVehiclePathMultiplier;
        public int PathConstraintList;
        public int PathGoalList;
        public float DesiredSpeed;
        public float MaxDesiredSpeed;
        public float HearingThreshold;
        public float Alertness;
        public float SightRadius;
        public float PeripheralVision;
        public float AvgPhysicsTime;
        public float Mass;
        public float Buoyancy;
        public float MeleeRange;
        public int Anchor;
        public int AnchorItem;
        public int LastAnchor;
        public float FindAnchorFailedTime;
        public float LastValidAnchorTime;
        public float DestinationOffset;
        public float NextPathRadius;
        public float SerpentineDist;
        public float SerpentineTime;
        public float SpawnTime;
        public int MaxPitchLimit;
        public float GroundSpeed;
        public float WaterSpeed;
        public float AirSpeed;
        public float LadderSpeed;
        public float AccelRate;
        public float JumpZ;
        public float OutofWaterZ;
        public float MaxOutOfWaterStepHeight;
        public float AirControl;
        public float WalkingPct;
        public float CrouchedPct;
        public float MaxFallSpeed;
        public float AIMaxFallSpeedFactor;
        public float BaseEyeHeight;
        public float EyeHeight;
        public float SplashTime;
        public float OldZ;
        public int Health;
        public int HealthMax;
        public float BreathTime;
        public float UnderWaterTime;
        public float LastPainTime;
        public float noise1time;
        public int noise1other;
        public float noise1loudness;
        public float noise2time;
        public int noise2other;
        public float noise2loudness;
        public float SoundDampening;
        public float DamageScaling;
        public int PlayerReplicationInfo;
        public int OnLadder;
        public int LastStartSpot;
        public float LastStartTime;
        public int Mesh;
        public int CylinderComponent;
        public float RBPushRadius;
        public float RBPushStrength;
        public int DrivenVehicle;
        public float AlwaysRelevantDistanceSquared;
        public float VehicleCheckRadius;
        public int LastHitBy;
        public float ViewPitchMin;
        public float ViewPitchMax;
        public int AllowedYawError;
        public int InvManager;
        public int Weapon;
        public float m_fWallSlideSpeedAdj;
        public int ShotCount;
        public int PreRagdollCollisionComponent;
        public int PhysicsPushBody;
        public int FailedLandingCount;
        public float RootMotionInterpRate;
        public float RootMotionInterpCurrentTime;
        public bool bUseDeltaReplication;
        public bool bSkipPawnPropertyReplication;
        public bool BioSoftwareSkinned;
        public bool bUpAndOut;
        public bool bIsWalking;
        public bool bWantsToCrouch;
        public bool bIsCrouched;
        public bool bTryToUncrouch;
        public bool bCanCrouch;
        public bool bCrawler;
        public bool bReducedSpeed;
        public bool bJumpCapable;
        public bool bCanJump;
        public bool bCanWalk;
        public bool bCanSwim;
        public bool bCanFly;
        public bool bCanClimbLadders;
        public bool bCanStrafe;
        public bool bAvoidLedges;
        public bool bStopAtLedges;
        public bool bAllowLedgeOverhang;
        public bool bSimulateGravity;
        public bool bIgnoreForces;
        public bool bCanWalkOffLedges;
        public bool bCanBeBaseForPawns;
        public bool bSimGravityDisabled;
        public bool bDirectHitWall;
        public bool bPushesRigidBodies;
        public bool bForceFloorCheck;
        public bool bForceKeepAnchor;
        public bool bCanMantle;
        public bool bCanClimbUp;
        public bool bCanClimbCeilings;
        public bool bCanSwatTurn;
        public bool bCanLeap;
        public bool bCanCoverSlip;
        public bool bDisplayPathErrors;
        public bool bIsFemale;
        public bool bCanPickupInventory;
        public bool bAmbientCreature;
        public bool bLOSHearing;
        public bool bMuffledHearing;
        public bool bDontPossess;
        public bool bAutoFire;
        public bool bRollToDesired;
        public bool bStationary;
        public bool bCachedRelevant;
        public bool bSpecialHUD;
        public bool bNoWeaponFiring;
        public bool bCanUse;
        public bool bModifyReachSpecCost;
        public bool bModifyNavPointDest;
        public bool bPathfindsAsVehicle;
        public bool bRunPhysicsWithNoController;
        public bool bForceMaxAccel;
        public bool bLimitFallAccel;
        public bool bReplicateHealthToAll;
        public bool bForceRMVelocity;
        public bool bForceRegularVelocity;
        public bool bPlayedDeath;
        public bool bDesiredRotationSet;
        public bool bLockDesiredRotation;
        public bool bUnlockWhenReached;
        public bool m_bEnableRagdollRecovery;
        public bool m_bIsWallSliding;
        public bool bNeedsBaseTickedFirst;
        public bool bRootMotionFromInterpCurve;
        public bool bDebugShowCameraLocation;
        public EPathSearchType PathSearchType;
        public byte RemoteViewPitch;
        public byte FlashCount;
        public byte FiringMode;
    }
    public class MatineePawn : Pawn
    {
    }
    public class MCPTools : GameInfo
    {
    }
    public class PrimitiveComponentFactory : Object
    {
        public bool CollideActors;
        public bool BlockActors;
        public bool BlockZeroExtent;
        public bool BlockNonZeroExtent;
        public bool BlockRigidBody;
        public bool HiddenGame;
        public bool HiddenEditor;
        public bool CastShadow;
    }
    public class MeshComponentFactory : PrimitiveComponentFactory
    {
        public int[] Materials;
    }
    public class ModelComponent : PrimitiveComponent
    {
    }
    public class MorphNodeBase : AnimObject
    {
        public NameReference NodeName;
        public bool bDrawSlider;
    }
    public class MorphNodeMultiPose : MorphNodeBase
    {
        public NameReference[] MorphNames;
        public float[] Weights;
    }
    public class MorphNodePose : MorphNodeBase
    {
        public NameReference MorphName;
        public float Weight;
    }
    public class MorphNodeWeightBase : MorphNodeBase
    {
        public MorphNodeConn[] NodeConns;
    }
    public class MorphNodeWeight : MorphNodeWeightBase
    {
        public float NodeWeight;
    }
    public class MorphNodeWeightByBoneAngle : MorphNodeWeightBase
    {
        public BoneAngleMorph[] WeightArray;
        public NameReference BaseBoneName;
        public NameReference AngleBoneName;
        public NameReference ScalarParameterName;
        public int MaterialSlotId;
        public bool bInvertBaseBoneAxis;
        public bool bInvertAngleBoneAxis;
        public bool bControlMaterialParameter;
        public EAxis BaseBoneAxis;
        public EAxis AngleBoneAxis;
    }
    public class MorphNodeWeightByBoneRotation : MorphNodeWeightBase
    {
        public BoneAngleMorph[] WeightArray;
        public NameReference BoneName;
        public NameReference ScalarParameterName;
        public int MaterialSlotId;
        public bool bInvertBoneAxis;
        public bool bControlMaterialParameter;
        public EAxis BoneAxis;
    }
    public class MorphTarget : Object
    {
        public int[] MorphLODModels;
        public int MaterialSlotId;
        public NameReference ScalarParameterName;
        public int[] OffsetSkeleton;
        public int[] OffsetSkeleton_dep;
    }
    public class MorphTargetSet : Object
    {
        public int[] Targets;
        public int BaseSkelMesh;
    }
    public class MorphWeightSequence : Object
    {
    }
    public class MotionBlurEffect : PostProcessEffect
    {
        public float MaxVelocity;
        public float MotionBlurAmount;
        public float CameraRotationThreshold;
        public float CameraTranslationThreshold;
        public bool FullMotionBlur;
    }
    public class MultiFont : Font
    {
        public float[] ResolutionTestTable;
    }
    public class MusicTrackDataStructures : Object
    {
    }
    public class Mutator : Info
    {
        public string[] GroupNames;
        public int NextMutator;
        public bool bUserAdded;
    }
    public class NavigationHandle : Object
    {
        public NavMeshPathParams CachedPathParams;
        public PathStore PathCache;
        public Pointer AnchorPoly;
        public Pointer CurrentEdge;
        public Pointer SubGoal_DestPoly;
        public BasedPosition FinalDestination;
        public int AnchorPylon;
        public int PathConstraintList;
        public int PathGoalList;
        public bool bSkipRouteCacheUpdates;
        public bool bUseORforEvaluateGoal;
        public bool bDebugConstraintsAndGoalEvals;
        public bool bUltraVerbosePathDebugging;
    }
    public class NavMeshBoundsVolume : Volume
    {
    }
    public class NavMeshPathGoalEvaluator : Object
    {
        public int NextEvaluator;
        public int MaxPathVisits;
        public int NumNodesThrownOut;
        public int NumNodesProcessed;
        public bool bAlwaysCallEvaluateGoal;
    }
    public class NavMeshGoal_At : NavMeshPathGoalEvaluator
    {
        public Pointer GoalPoly;
        public Pointer PartialGoal;
        public Vector Goal;
        public float GoalDist;
        public bool bKeepPartial;
    }
    public class NavMeshGoal_ClosestActorInList : NavMeshPathGoalEvaluator
    {
        public BiasedGoalActor[] GoalList;
        public Pointer CachedAnchorPoly;
    }
    public class NavMeshGoal_Null : NavMeshPathGoalEvaluator
    {
        public Pointer PartialGoal;
    }
    public class NavMeshGoal_PolyEncompassesAI : NavMeshPathGoalEvaluator
    {
    }
    public class SpriteComponent : PrimitiveComponent
    {
        public int Sprite;
        public float ScreenSize;
        public float U;
        public float UL;
        public float V;
        public float VL;
        public bool bIsScreenSizeScaled;
    }
    public class NavMeshObstacle : Actor
    {
        public Pointer VfTable_IInterface_NavMeshPathObstacle;
        public bool bEnabled;
        public bool bPreserveInternalGeo;
    }
    public class NavMeshPathConstraint : Object
    {
        public int NextConstraint;
        public int NumNodesProcessed;
        public int NumThrownOutNodes;
        public float AddedDirectCost;
        public float AddedHeuristicCost;
    }
    public class NavMeshPath_AlongLine : NavMeshPathConstraint
    {
        public Vector Direction;
    }
    public class NavMeshPath_EnforceTwoWayEdges : NavMeshPathConstraint
    {
    }
    public class NavMeshPath_MinDistBetweenSpecsOfType : NavMeshPathConstraint
    {
        public Vector InitLocation;
        public float MinDistBetweenEdgeTypes;
        public ENavMeshEdgeType EdgeType;
    }
    public class NavMeshPath_Toward : NavMeshPathConstraint
    {
        public Vector GoalPoint;
        public int GoalActor;
    }
    public class NavMeshPath_WithinDistanceEnvelope : NavMeshPathConstraint
    {
        public Vector EnvelopeTestPoint;
        public float MaxDistance;
        public float MinDistance;
        public float SoftStartPenalty;
        public bool bSoft;
        public bool bOnlyThrowOutNodesThatLeaveEnvelope;
    }
    public class NavMeshPath_WithinTraversalDist : NavMeshPathConstraint
    {
        public float MaxTraversalDist;
        public float SoftStartPenalty;
        public bool bSoft;
    }
    public class NavMeshRenderingComponent : PrimitiveComponent
    {
    }
    public class Note : Actor
    {
        public string Text;
    }
    public class NxForceField : Actor
    {
        public int ExcludeChannel;
        public RBCollisionChannelContainer CollideWithChannels;
        public int SceneIndex;
        public bool bForceActive;
        public ERBCollisionChannel RBChannel;
    }
    public class NxCylindricalForceField : NxForceField
    {
        public float RadialStrength;
        public float RotationalStrength;
        public float LiftStrength;
        public float ForceRadius;
        public float ForceTopRadius;
        public float LiftFalloffHeight;
        public float EscapeVelocity;
        public float ForceHeight;
        public float HeightOffset;
        public bool UseSpecialRadialForce;
    }
    public class NxCylindricalForceFieldCapsule : NxCylindricalForceField
    {
        public int RenderComponent;
    }
    public class NxForceFieldGeneric : NxForceField
    {
        public Vector Constant;
        public Vector PositionMultiplierX;
        public Vector PositionMultiplierY;
        public Vector PositionMultiplierZ;
        public Vector PositionTarget;
        public Vector VelocityMultiplierX;
        public Vector VelocityMultiplierY;
        public Vector VelocityMultiplierZ;
        public Vector VelocityTarget;
        public Vector Noise;
        public Vector FalloffLinear;
        public Vector FalloffQuadratic;
        public int Shape;
        public int DrawComponent;
        public float RoughExtentX;
        public float RoughExtentY;
        public float RoughExtentZ;
        public float TorusRadius;
        public FFG_ForceFieldCoordinates Coordinates;
    }
    public class NxForceFieldRadial : NxForceField
    {
        public int Shape;
        public int DrawComponent;
        public float ForceStrength;
        public float ForceRadius;
        public float SelfRotationStrength;
        public ERadialImpulseFalloff ForceFalloff;
    }
    public class NxForceFieldTornado : NxForceField
    {
        public int Shape;
        public int DrawComponent;
        public float RadialStrength;
        public float RotationalStrength;
        public float LiftStrength;
        public float ForceRadius;
        public float ForceTopRadius;
        public float LiftFalloffHeight;
        public float EscapeVelocity;
        public float ForceHeight;
        public float HeightOffset;
        public float SelfRotationStrength;
        public bool BSpecialRadialForceMode;
    }
    public class NxGenericForceField : NxForceField
    {
        public Vector Constant;
        public Vector PositionMultiplierX;
        public Vector PositionMultiplierY;
        public Vector PositionMultiplierZ;
        public Vector PositionTarget;
        public Vector VelocityMultiplierX;
        public Vector VelocityMultiplierY;
        public Vector VelocityMultiplierZ;
        public Vector VelocityTarget;
        public Vector Noise;
        public Vector FalloffLinear;
        public Vector FalloffQuadratic;
        public float TorusRadius;
        public FFG_ForceFieldCoordinates Coordinates;
    }
    public class NxGenericForceFieldBox : NxGenericForceField
    {
        public Vector BoxExtent;
        public int RenderComponent;
    }
    public class NxGenericForceFieldBrush : Volume
    {
        public Vector Constant;
        public Vector PositionMultiplierX;
        public Vector PositionMultiplierY;
        public Vector PositionMultiplierZ;
        public Vector PositionTarget;
        public Vector VelocityMultiplierX;
        public Vector VelocityMultiplierY;
        public Vector VelocityMultiplierZ;
        public Vector VelocityTarget;
        public Vector Noise;
        public Vector FalloffLinear;
        public Vector FalloffQuadratic;
        public int ExcludeChannel;
        public RBCollisionChannelContainer CollideWithChannels;
        public float TorusRadius;
        public ERBCollisionChannel RBChannel;
        public FFB_ForceFieldCoordinates Coordinates;
    }
    public class NxGenericForceFieldCapsule : NxGenericForceField
    {
        public int RenderComponent;
        public float CapsuleHeight;
        public float CapsuleRadius;
    }
    public class NxRadialForceField : NxForceField
    {
        public int RenderComponent;
        public float ForceStrength;
        public float ForceRadius;
        public ERadialImpulseFalloff ForceFalloff;
    }
    public class NxRadialCustomForceField : NxRadialForceField
    {
        public float SelfRotationStrength;
    }
    public class NxTornadoAngularForceField : NxForceField
    {
        public float RadialStrength;
        public float RotationalStrength;
        public float LiftStrength;
        public float ForceRadius;
        public float ForceTopRadius;
        public float LiftFalloffHeight;
        public float EscapeVelocity;
        public float ForceHeight;
        public float HeightOffset;
        public float SelfRotationStrength;
        public bool BSpecialRadialForceMode;
    }
    public class NxTornadoAngularForceFieldCapsule : NxTornadoAngularForceField
    {
        public int RenderComponent;
    }
    public class NxTornadoForceField : NxForceField
    {
        public float RadialStrength;
        public float RotationalStrength;
        public float LiftStrength;
        public float ForceRadius;
        public float ForceTopRadius;
        public float LiftFalloffHeight;
        public float EscapeVelocity;
        public float ForceHeight;
        public float HeightOffset;
        public bool BSpecialRadialForceMode;
    }
    public class NxTornadoForceFieldCapsule : NxTornadoForceField
    {
        public int RenderComponent;
    }
    public class Objective : NavigationPoint
    {
    }
    public class ObjectReferencer : Object
    {
        public int[] ReferencedObjects;
    }
    public class OnlineAccountInterface : Interface
    {
        public int __OnCreateOnlineAccountCompleted__Delegate;
    }
    public class OnlineCommunityContentInterface : Interface
    {
        public int __OnReadFriendsContentListComplete__Delegate;
        public int __OnUploadContentComplete__Delegate;
        public int __OnDownloadContentComplete__Delegate;
        public int __OnGetContentPayloadComplete__Delegate;
        public int __OnReadContentListComplete__Delegate;
    }
    public class OnlineContentInterface : Interface
    {
        public int __OnReadContentComplete__Delegate;
        public int __OnQueryAvailableDownloadsComplete__Delegate;
        public int __OnContentChange__Delegate;
    }
    public class OnlineEventsInterface : Interface
    {
    }
    public class OnlineGameInterface : Interface
    {
        public int __OnRegisterPlayerComplete__Delegate;
        public int __OnUpdateOnlineGameComplete__Delegate;
        public int __OnDestroyOnlineGameComplete__Delegate;
        public int __OnFindOnlineGamesComplete__Delegate;
        public int __OnCancelFindOnlineGamesComplete__Delegate;
        public int __OnJoinOnlineGameComplete__Delegate;
        public int __OnCreateOnlineGameComplete__Delegate;
        public int __OnUnregisterPlayerComplete__Delegate;
        public int __OnStartOnlineGameComplete__Delegate;
        public int __OnEndOnlineGameComplete__Delegate;
        public int __OnArbitrationRegistrationComplete__Delegate;
        public int __OnGameInviteAccepted__Delegate;
        public int __OnQuickMatchComplete__Delegate;
    }
    public class OnlineGameplayEvents : Object
    {
        public PlayerInformation[] PlayerList;
        public string[] EventDescList;
        public NameReference[] EventNames;
        public GameplayEvent[] GameplayEvents;
        public PlayerEvent[] PlayerEvents;
        public string GameplaySessionStartTime;
        public Guid GameplaySessionID;
        public bool bGameplaySessionInProgress;
    }
    public class OnlineGameSearch : Settings
    {
        public OverrideSkill ManualSkillOverride;
        public OnlineGameSearchQuery FilterQuery;
        public OnlineGameSearchResult[] Results;
        public NamedObjectProperty[] NamedProperties;
        public string AdditionalSearchCriteria;
        public int GameSettingsClass;
        public LocalizedStringSetting Query;
        public int MaxSearchResults;
        public int PingBucketSize;
        public bool bIsLanQuery;
        public bool bUsesArbitration;
        public bool bIsSearchInProgress;
    }
    public class OnlineGameSettings : Settings
    {
        public QWord ServerNonce;
        public UniqueNetId OwningPlayerId;
        public string OwningPlayerName;
        public int NumPublicConnections;
        public int NumPrivateConnections;
        public int NumOpenPublicConnections;
        public int NumOpenPrivateConnections;
        public int PingInMs;
        public float MatchQuality;
        public int BuildUniqueId;
        public bool bShouldAdvertise;
        public bool bIsLanMatch;
        public bool bUsesStats;
        public bool bAllowJoinInProgress;
        public bool bAllowInvites;
        public bool bUsesPresence;
        public bool bAllowJoinViaPresence;
        public bool bAllowJoinViaPresenceFriendsOnly;
        public bool bUsesArbitration;
        public bool bAntiCheatProtected;
        public bool bWasFromInvite;
        public bool bIsDedicated;
        public bool bHasSkillUpdateInProgress;
        public EOnlineGameState GameState;
    }
    public class OnlineNewsInterface : Interface
    {
        public int __OnReadNewsCompleted__Delegate;
    }
    public class OnlinePartyChatInterface : Interface
    {
        public int __OnSendPartyGameInvitesComplete__Delegate;
    }
    public class OnlinePlayerInterface : Interface
    {
        public int __OnReadPlayerStorageForNetIdComplete__Delegate;
        public int __OnLoginCancelled__Delegate;
        public int __OnMutingChange__Delegate;
        public int __OnFriendsChange__Delegate;
        public int __OnLoginFailed__Delegate;
        public int __OnLogoutCompleted__Delegate;
        public int __OnLoginStatusChange__Delegate;
        public int __OnReadProfileSettingsComplete__Delegate;
        public int __OnWriteProfileSettingsComplete__Delegate;
        public int __OnReadPlayerStorageComplete__Delegate;
        public int __OnLoginChange__Delegate;
        public int __OnWritePlayerStorageComplete__Delegate;
        public int __OnReadFriendsComplete__Delegate;
        public int __OnKeyboardInputComplete__Delegate;
        public int __OnAddFriendByNameComplete__Delegate;
        public int __OnFriendInviteReceived__Delegate;
        public int __OnReceivedGameInvite__Delegate;
        public int __OnJoinFriendGameComplete__Delegate;
        public int __OnFriendMessageReceived__Delegate;
        public int __OnUnlockAchievementComplete__Delegate;
        public int __OnReadAchievementsComplete__Delegate;
    }
    public class OnlinePlayerInterfaceEx : Interface
    {
        public int __OnProfileDataChanged__Delegate;
        public int __OnDeviceSelectionComplete__Delegate;
    }
    public class OnlinePlayerStorage : Object
    {
        public OnlineProfileSetting[] ProfileSettings;
        public SettingsPropertyPropertyMetaData[] ProfileMappings;
        public int __NotifySettingValueUpdated__Delegate;
        public int VersionNumber;
        public EOnlinePlayerStorageAsyncState AsyncState;
    }
    public class UIResourceDataProvider : UIPropertyDataProvider
    {
        public Pointer VfTable_IUIListElementProvider;
        public Pointer VfTable_IUIListElementCellProvider;
        public bool bDataBindingPropertiesOnly;
        public bool bSkipDuringEnumeration;
    }
    public class OnlinePlaylistGameTypeProvider : UIResourceDataProvider
    {
        public string DisplayName;
        public string Description;
        public NameReference PlaylistGameTypeName;
        public int GameTypeId;
    }
    public class OnlinePlaylistManager : Object
    {
        public Playlist[] Playlists;
        public string[] PlaylistFileNames;
        public NameReference[] DatastoresToRefresh;
        public int __OnReadPlaylistComplete__Delegate;
        public int DownloadCount;
        public int SuccessfulCount;
        public int VersionNumber;
    }
    public class OnlinePlaylistProvider : UIResourceDataProvider
    {
        public NameReference[] PlaylistGameTypeNames;
        public string DisplayName;
        public int PlaylistId;
        public int Priority;
        public bool bIsArbitrated;
    }
    public class OnlineProfileSettings : OnlinePlayerStorage
    {
        public int[] ProfileSettingIds;
        public OnlineProfileSetting[] DefaultSettings;
        public IdToStringMapping[] OwnerMappings;
    }
    public class OnlineRecentPlayersList : Object
    {
        public RecentParty LastParty;
        public UniqueNetId[] RecentPlayers;
        public RecentParty[] RecentParties;
        public CurrentPlayerMet[] CurrentPlayers;
        public int MaxRecentPlayers;
        public int MaxRecentParties;
        public int RecentPlayersAddIndex;
        public int RecentPartiesAddIndex;
    }
    public class OnlineStats : Object
    {
        public StringIdToStringMapping[] ViewIdMappings;
    }
    public class OnlineStatsInterface : Interface
    {
        public int __OnFlushOnlineStatsComplete__Delegate;
        public int __OnRegisterHostStatGuidComplete__Delegate;
        public int __OnReadOnlineStatsComplete__Delegate;
    }
    public class OnlineStatsRead : OnlineStats
    {
        public int[] ColumnIds;
        public OnlineStatsRow[] Rows;
        public ColumnMetaData[] ColumnMappings;
        public string ViewName;
        public int ViewId;
        public int SortColumnId;
        public int TotalRowsInView;
        public int TitleId;
    }
    public class OnlineStatsWrite : OnlineStats
    {
        public StringIdToStringMapping[] StatMappings;
        public SettingsProperty[] Properties;
        public int[] ViewIds;
        public int[] ArbitratedViewIds;
        public int __OnStatsWriteComplete__Delegate;
        public int RatingId;
    }
    public class OnlineSystemInterface : Interface
    {
        public int __OnExternalUIChange__Delegate;
        public int __OnControllerChange__Delegate;
        public int __OnConnectionStatusChange__Delegate;
        public int __OnStorageDeviceChange__Delegate;
        public int __OnReadTitleFileComplete__Delegate;
        public int __OnLinkStatusChange__Delegate;
    }
    public class OnlineVoiceInterface : Interface
    {
        public int __OnRecognitionComplete__Delegate;
        public int __OnPlayerTalkingStateChange__Delegate;
    }
    public class ParticleEmitter : Object
    {
        public int[] SpawnRateModules;
        public int[] LODLevels;
        public NameReference EmitterName;
        public int PeakActiveParticles;
        public int InitialAllocationCount;
        public bool ConvertedModules;
        public bool bCookedOut;
        public EEmitterRenderMode EmitterRenderMode;
    }
    public class ParticleEventManager : Actor
    {
    }
    public class ParticleLightEnvironmentComponent : DynamicLightEnvironmentComponent
    {
        public bool bAllowDLESharing;
    }
    public class ParticleLODLevel : Object
    {
        public int[] SpawningModules;
        public int[] SpawnModules;
        public int[] UpdateModules;
        public int[] OrbitModules;
        public int[] EventReceiverModules;
        public int[] SpawnRateModules;
        public int[] Modules;
        public int Level;
        public int TypeDataModule;
        public int SpawnModule;
        public int EventGenerator;
        public int PeakActiveParticles;
        public int RequiredModule;
        public bool bEnabled;
        public bool ConvertedModules;
    }
    public class ParticleModule : Object
    {
        public bool bSpawnModule;
        public bool bUpdateModule;
        public bool bFinalUpdateModule;
        public bool bCurvesAsColor;
        public bool b3DDrawMode;
        public bool bSupported3DDrawMode;
        public bool bEnabled;
        public bool bEditable;
        public bool LODDuplicate;
        public bool bSpawnRateModule;
        public byte LODValidity;
    }
    public class ParticleModuleAccelerationBase : ParticleModule
    {
        public bool bAlwaysInWorldSpace;
    }
    public class ParticleModuleAcceleration : ParticleModuleAccelerationBase
    {
        public BioRawDistributionRwVector3 AccelerationRw;
        public bool bApplyOwnerScale;
    }
    public class ParticleModuleAccelerationOverLifetime : ParticleModuleAccelerationBase
    {
        public BioRawDistributionRwVector3 AccelOverLifeRw;
    }
    public class ParticleModuleAttractorBase : ParticleModule
    {
    }
    public class ParticleModuleAttractorLine : ParticleModuleAttractorBase
    {
        public RawDistributionFloat Range;
        public RawDistributionFloat Strength;
        public Vector EndPoint0;
        public Vector EndPoint1;
    }
    public class ParticleModuleAttractorParticle : ParticleModuleAttractorBase
    {
        public RawDistributionFloat Range;
        public RawDistributionFloat Strength;
        public NameReference EmitterName;
        public int LastSelIndex;
        public bool bStrengthByDistance;
        public bool bAffectBaseVelocity;
        public bool bRenewSource;
        public bool bInheritSourceVel;
        public EAttractorParticleSelectionMethod SelectionMethod;
    }
    public class ParticleModuleAttractorPoint : ParticleModuleAttractorBase
    {
        public BioRawDistributionRwVector3 PositionRw;
        public RawDistributionFloat Range;
        public RawDistributionFloat Strength;
        public bool StrengthByDistance;
        public bool bAffectBaseVelocity;
        public bool bOverrideVelocity;
        public bool bUseWorldSpacePosition;
    }
    public class ParticleModuleBeamBase : ParticleModule
    {
    }
    public class ParticleModuleBeamModifier : ParticleModuleBeamBase
    {
        public BioRawDistributionRwVector3 PositionRw;
        public BioRawDistributionRwVector3 TangentRw;
        public RawDistributionFloat Strength;
        public BeamModifierOptions PositionOptions;
        public BeamModifierOptions TangentOptions;
        public BeamModifierOptions StrengthOptions;
        public bool bAbsoluteTangent;
        public BeamModifierType ModifierType;
    }
    public class ParticleModuleBeamNoise : ParticleModuleBeamBase
    {
        public BioRawDistributionRwVector3 NoiseRangeRw;
        public BioRawDistributionRwVector3 NoiseSpeedRw;
        public RawDistributionFloat NoiseRangeScale;
        public RawDistributionFloat NoiseTangentStrength;
        public RawDistributionFloat NoiseScale;
        public int Frequency;
        public int Frequency_LowRange;
        public float NoiseLockRadius;
        public float NoiseLockTime;
        public float NoiseTension;
        public int NoiseTessellation;
        public float FrequencyDistance;
        public bool bLowFreq_Enabled;
        public bool bNRScaleEmitterTime;
        public bool bSmooth;
        public bool bNoiseLock;
        public bool bOscillate;
        public bool bUseNoiseTangents;
        public bool bTargetNoise;
        public bool bApplyNoiseScale;
    }
    public class ParticleModuleBeamSource : ParticleModuleBeamBase
    {
        public BioRawDistributionRwVector3 SourceRw;
        public BioRawDistributionRwVector3 SourceTangentRw;
        public RawDistributionFloat SourceStrength;
        public NameReference SourceName;
        public bool bSourceAbsolute;
        public bool bLockSource;
        public bool bLockSourceTangent;
        public bool bLockSourceStength;
        public Beam2SourceTargetMethod SourceMethod;
        public Beam2SourceTargetTangentMethod SourceTangentMethod;
    }
    public class ParticleModuleBeamTarget : ParticleModuleBeamBase
    {
        public BioRawDistributionRwVector3 TargetRw;
        public BioRawDistributionRwVector3 TargetTangentRw;
        public RawDistributionFloat TargetStrength;
        public NameReference TargetName;
        public float LockRadius;
        public bool bTargetAbsolute;
        public bool bLockTarget;
        public bool bLockTargetTangent;
        public bool bLockTargetStength;
        public Beam2SourceTargetMethod TargetMethod;
        public Beam2SourceTargetTangentMethod TargetTangentMethod;
    }
    public class ParticleModuleCollisionBase : ParticleModule
    {
    }
    public class ParticleModuleCollision : ParticleModuleCollisionBase
    {
        public BioRawDistributionRwVector3 DampingFactorRw;
        public BioRawDistributionRwVector3 DampingFactorRotationRw;
        public RawDistributionFloat MaxCollisions;
        public RawDistributionFloat ParticleMass;
        public RawDistributionFloat DelayAmount;
        public float DirScalar;
        public float VerticalFudgeFactor;
        public bool bApplyPhysics;
        public bool bCollidePawns;
        public bool bPawnsDoNotDecrementCount;
        public bool bOnlyVerticalNormalsDecrementCount;
        public bool bDropDetail;
        public EParticleCollisionComplete CollisionCompletionOption;
    }
    public class ParticleModuleColorBase : ParticleModule
    {
    }
    public class ParticleModuleColor : ParticleModuleColorBase
    {
        public BioRawDistributionRwVector3 StartColorRw;
        public RawDistributionFloat StartAlpha;
        public bool bClampAlpha;
    }
    public class ParticleModuleColorByParameter : ParticleModuleColorBase
    {
        public NameReference ColorParam;
        public Color DefaultColor;
    }
    public class ParticleModuleColorOverLife : ParticleModuleColorBase
    {
        public BioRawDistributionRwVector3 ColorOverLifeRw;
        public RawDistributionFloat AlphaOverLife;
        public bool bClampAlpha;
    }
    public class ParticleModuleColorScaleOverLife : ParticleModuleColorBase
    {
        public BioRawDistributionRwVector3 ColorScaleOverLifeRw;
        public RawDistributionFloat AlphaScaleOverLife;
        public bool bEmitterTime;
    }
    public class ParticleModuleEventBase : ParticleModule
    {
    }
    public class ParticleModuleEventGenerator : ParticleModuleEventBase
    {
        public ParticleEvent_GenerateInfo[] Events;
    }
    public class ParticleModuleEventReceiverBase : ParticleModuleEventBase
    {
        public NameReference EventName;
        public EParticleEventType EventGeneratorType;
    }
    public class ParticleModuleEventReceiverKillParticles : ParticleModuleEventReceiverBase
    {
        public bool bStopSpawning;
    }
    public class ParticleModuleEventReceiverSpawn : ParticleModuleEventReceiverBase
    {
        public BioRawDistributionRwVector3 InheritVelocityScaleRw;
        public RawDistributionFloat SpawnCount;
        public bool bUseParticleTime;
        public bool bUsePSysLocation;
        public bool bInheritVelocity;
    }
    public class ParticleModuleEventSendToGame : Object
    {
    }
    public class ParticleModuleKillBase : ParticleModule
    {
    }
    public class ParticleModuleKillBox : ParticleModuleKillBase
    {
        public BioRawDistributionRwVector3 LowerLeftCornerRw;
        public BioRawDistributionRwVector3 UpperRightCornerRw;
        public bool bAbsolute;
        public bool bKillInside;
    }
    public class ParticleModuleKillHeight : ParticleModuleKillBase
    {
        public RawDistributionFloat Height;
        public bool bAbsolute;
        public bool bFloor;
    }
    public class ParticleModuleLifetimeBase : ParticleModule
    {
    }
    public class ParticleModuleLifetime : ParticleModuleLifetimeBase
    {
        public RawDistributionFloat Lifetime;
    }
    public class ParticleModuleLocationBase : ParticleModule
    {
        public int m_Seed;
        public bool m_bUseSeed;
        public bool m_bUpdateSeed;
    }
    public class ParticleModuleLocation : ParticleModuleLocationBase
    {
        public BioRawDistributionRwVector3 StartLocationRw;
    }
    public class ParticleModuleLocationDirect : ParticleModuleLocationBase
    {
        public BioRawDistributionRwVector3 LocationRw;
        public BioRawDistributionRwVector3 LocationOffsetRw;
        public BioRawDistributionRwVector3 ScaleFactorRw;
        public BioRawDistributionRwVector3 DirectionRw;
    }
    public class ParticleModuleLocationEmitter : ParticleModuleLocationBase
    {
        public NameReference EmitterName;
        public float InheritSourceVelocityScale;
        public float InheritSourceRotationScale;
        public bool InheritSourceVelocity;
        public bool bInheritSourceRotation;
        public ELocationEmitterSelectionMethod SelectionMethod;
    }
    public class ParticleModuleLocationEmitterDirect : ParticleModuleLocationBase
    {
        public NameReference EmitterName;
    }
    public class ParticleModuleLocationPrimitiveBase : ParticleModuleLocationBase
    {
        public BioRawDistributionRwVector3 StartLocationRw;
        public RawDistributionFloat VelocityScale;
        public bool Positive_X;
        public bool Positive_Y;
        public bool Positive_Z;
        public bool Negative_X;
        public bool Negative_Y;
        public bool Negative_Z;
        public bool SurfaceOnly;
        public bool Velocity;
    }
    public class ParticleModuleLocationPrimitiveCylinder : ParticleModuleLocationPrimitiveBase
    {
        public RawDistributionFloat StartRadius;
        public RawDistributionFloat StartHeight;
        public bool RadialVelocity;
        public CylinderHeightAxis HeightAxis;
    }
    public class ParticleModuleLocationPrimitiveSphere : ParticleModuleLocationPrimitiveBase
    {
        public RawDistributionFloat StartRadius;
    }
    public class ParticleModuleMaterialBase : ParticleModule
    {
    }
    public class ParticleModuleMaterialByParameter : ParticleModuleMaterialBase
    {
        public NameReference[] MaterialParameters;
        public int[] DefaultMaterials;
    }
    public class ParticleModuleMeshMaterial : ParticleModuleMaterialBase
    {
        public int[] MeshMaterials;
    }
    public class ParticleModuleRotationBase : ParticleModule
    {
    }
    public class ParticleModuleMeshRotation : ParticleModuleRotationBase
    {
        public BioRawDistributionRwVector3 StartRotationRw;
        public bool bInheritParent;
    }
    public class ParticleModuleRotationRateBase : ParticleModule
    {
    }
    public class ParticleModuleMeshRotationRate : ParticleModuleRotationRateBase
    {
        public BioRawDistributionRwVector3 StartRotationRateRw;
    }
    public class ParticleModuleMeshRotationRateMultiplyLife : ParticleModuleRotationRateBase
    {
        public BioRawDistributionRwVector3 LifeMultiplierRw;
    }
    public class ParticleModuleOrbitBase : ParticleModule
    {
        public bool bUseEmitterTime;
    }
    public class ParticleModuleOrbit : ParticleModuleOrbitBase
    {
        public BioRawDistributionRwVector3 OffsetAmountRw;
        public BioRawDistributionRwVector3 RotationAmountRw;
        public BioRawDistributionRwVector3 RotationRateAmountRw;
        public OrbitOptions OffsetOptions;
        public OrbitOptions RotationOptions;
        public OrbitOptions RotationRateOptions;
        public EOrbitChainMode ChainMode;
    }
    public class ParticleModuleOrientationBase : ParticleModule
    {
    }
    public class ParticleModuleOrientationAxisLock : ParticleModuleOrientationBase
    {
        public EParticleAxisLock LockAxisFlags;
    }
    public class ParticleModuleParameterBase : ParticleModule
    {
    }
    public class ParticleModuleParameterDynamic : ParticleModuleParameterBase
    {
        public EmitterDynamicParameter[] DynamicParams;
    }
    public class ParticleSpriteEmitter : ParticleEmitter
    {
    }
    public class ParticleModuleRequired : ParticleModule
    {
        public RawDistributionFloat SpawnRate;
        public ParticleBurst[] BurstList;
        public Vector NormalsSphereCenter;
        public Vector NormalsCylinderDirection;
        public int Material;
        public float EmitterDuration;
        public float EmitterDurationLow;
        public int EmitterLoops;
        public float EmitterDelay;
        public float EmitterDelayLow;
        public int SubImages_Horizontal;
        public int SubImages_Vertical;
        public float RandomImageTime;
        public int RandomImageChanges;
        public int MaxDrawCount;
        public float DownsampleThresholdScreenFraction;
        public bool bUseLocalSpace;
        public bool bKillOnDeactivate;
        public bool bKillOnCompleted;
        public bool bUseLegacyEmitterTime;
        public bool bEmitterDurationUseRange;
        public bool bDurationRecalcEachLoop;
        public bool bEmitterDelayUseRange;
        public bool bDelayFirstLoopOnly;
        public bool bScaleUV;
        public bool bDirectUV;
        public bool bUseMaxDrawCount;
        public EParticleScreenAlignment ScreenAlignment;
        public EParticleSortMode SortMode;
        public EParticleBurstMethod ParticleBurstMethod;
        public EParticleSubUVInterpMethod InterpolationMethod;
        public EEmitterNormalsMode EmitterNormalsMode;
    }
    public class ParticleModuleRotation : ParticleModuleRotationBase
    {
        public RawDistributionFloat StartRotation;
    }
    public class ParticleModuleRotationOverLifetime : ParticleModuleRotationBase
    {
        public RawDistributionFloat RotationOverLife;
        public bool Scale;
    }
    public class ParticleModuleRotationRate : ParticleModuleRotationRateBase
    {
        public RawDistributionFloat StartRotationRate;
    }
    public class ParticleModuleRotationRateMultiplyLife : ParticleModuleRotationRateBase
    {
        public RawDistributionFloat LifeMultiplier;
    }
    public class ParticleModuleSizeBase : ParticleModule
    {
    }
    public class ParticleModuleSize : ParticleModuleSizeBase
    {
        public BioRawDistributionRwVector3 StartSizeRw;
    }
    public class ParticleModuleSizeMultiplyLife : ParticleModuleSizeBase
    {
        public BioRawDistributionRwVector3 LifeMultiplierRw;
        public bool MultiplyX;
        public bool MultiplyY;
        public bool MultiplyZ;
    }
    public class ParticleModuleSizeMultiplyVelocity : ParticleModuleSizeBase
    {
        public BioRawDistributionRwVector3 VelocityMultiplierRw;
        public bool MultiplyX;
        public bool MultiplyY;
        public bool MultiplyZ;
    }
    public class ParticleModuleSizeScale : ParticleModuleSizeBase
    {
        public BioRawDistributionRwVector3 SizeScaleRw;
        public bool EnableX;
        public bool EnableY;
        public bool EnableZ;
    }
    public class ParticleModuleSizeScaleByTime : ParticleModuleSizeBase
    {
        public BioRawDistributionRwVector3 SizeScaleByTimeRw;
        public bool bEnableX;
        public bool bEnableY;
        public bool bEnableZ;
    }
    public class ParticleModuleSourceMovement : ParticleModuleLocationBase
    {
        public BioRawDistributionRwVector3 SourceMovementScaleRw;
    }
    public class ParticleModuleSpawnBase : ParticleModule
    {
        public bool bProcessSpawnRate;
        public bool bProcessBurstList;
    }
    public class ParticleModuleSpawn : ParticleModuleSpawnBase
    {
        public RawDistributionFloat Rate;
        public RawDistributionFloat RateScale;
        public ParticleBurst[] BurstList;
        public EParticleBurstMethod ParticleBurstMethod;
    }
    public class ParticleModuleSpawnPerUnit : ParticleModuleSpawnBase
    {
        public RawDistributionFloat SpawnPerUnit;
        public float UnitScalar;
        public float MovementTolerance;
        public bool bIgnoreSpawnRateWhenMoving;
    }
    public class ParticleModuleStoreSpawnTimeBase : ParticleModule
    {
    }
    public class ParticleModuleStoreSpawnTime : ParticleModuleStoreSpawnTimeBase
    {
    }
    public class ParticleModuleSubUVBase : ParticleModule
    {
    }
    public class ParticleModuleSubUV : ParticleModuleSubUVBase
    {
        public RawDistributionFloat SubImageIndex;
    }
    public class ParticleModuleSubUVDirect : ParticleModuleSubUVBase
    {
        public BioRawDistributionRwVector3 SubUVPositionRw;
        public BioRawDistributionRwVector3 SubUVSizeRw;
    }
    public class ParticleModuleSubUVMovie : ParticleModuleSubUV
    {
        public RawDistributionFloat FrameRate;
        public int StartingFrame;
        public bool bUseEmitterTime;
    }
    public class ParticleModuleSubUVSelect : ParticleModuleSubUVBase
    {
        public BioRawDistributionRwVector3 SubImageSelectRw;
    }
    public class ParticleModuleTrailBase : ParticleModule
    {
    }
    public class ParticleModuleTrailSource : ParticleModuleTrailBase
    {
        public RawDistributionFloat SourceStrength;
        public RwVector3[] SourceOffsetDefaults;
        public NameReference SourceName;
        public int SourceOffsetCount;
        public bool bLockSourceStength;
        public bool bInheritRotation;
        public ETrail2SourceMethod SourceMethod;
        public EParticleSourceSelectionMethod SelectionMethod;
    }
    public class ParticleModuleTrailSpawn : ParticleModuleTrailBase
    {
        public int SpawnDistanceMap;
        public float MinSpawnVelocity;
    }
    public class ParticleModuleTrailTaper : ParticleModuleTrailBase
    {
        public RawDistributionFloat TaperFactor;
        public ETrailTaperMethod TaperMethod;
    }
    public class ParticleModuleTypeDataBase : ParticleModule
    {
    }
    public class ParticleModuleTypeDataAnimTrail : ParticleModuleTypeDataBase
    {
        public NameReference ControlEdgeName;
        public int SheetsPerTrail;
        public float TilingDistance;
        public float DistanceTessellationStepSize;
        public float TangentTessellationScalar;
        public bool bDeadTrailsOnDeactivate;
        public bool bClipSourceSegement;
        public bool bEnablePreviousTangentRecalculation;
        public bool bTangentRecalculationEveryFrame;
        public bool bRenderGeometry;
        public bool bRenderSpawnPoints;
        public bool bRenderTangents;
        public bool bRenderTessellation;
    }
    public class ParticleModuleTypeDataBeam : ParticleModuleTypeDataBase
    {
        public BioRawDistributionRwVector3 EndPointRw;
        public BioRawDistributionRwVector3 EndPointDirectionRw;
        public RawDistributionFloat Distance;
        public RawDistributionFloat EmitterStrength;
        public RawDistributionFloat TargetStrength;
        public int TessellationFactor;
        public int TextureTile;
        public bool RenderGeometry;
        public bool RenderDirectLine;
        public bool RenderLines;
        public bool RenderTessellation;
        public EBeamMethod BeamMethod;
        public EBeamEndPointMethod EndPointMethod;
    }
    public class ParticleModuleTypeDataBeam2 : ParticleModuleTypeDataBase
    {
        public RawDistributionFloat Distance;
        public RawDistributionFloat TaperFactor;
        public RawDistributionFloat TaperScale;
        public NameReference BranchParentName;
        public int TextureTile;
        public float TextureTileDistance;
        public int Sheets;
        public int MaxBeamCount;
        public float Speed;
        public int InterpolationPoints;
        public int UpVectorStepSize;
        public bool bAlwaysOn;
        public bool RenderGeometry;
        public bool RenderDirectLine;
        public bool RenderLines;
        public bool RenderTessellation;
        public EBeam2Method BeamMethod;
        public EBeamTaperMethod TaperMethod;
    }
    public class ParticleModuleTypeDataMesh : ParticleModuleTypeDataBase
    {
        public int Mesh;
        public float Pitch;
        public float Roll;
        public float Yaw;
        public bool CastShadows;
        public bool DoCollisions;
        public bool bAllowMotionBlur;
        public bool bOverrideMaterial;
        public bool bCameraFacing;
        public EMeshScreenAlignment MeshAlignment;
        public EParticleAxisLock AxisLockOption;
        public EMeshCameraFacingOptions CameraFacingOption;
    }
    public class ParticleModuleTypeDataMeshPhysX : ParticleModuleTypeDataMesh
    {
        public Pointer RenderInstance;
        public PhysXEmitterVerticalLodProperties VerticalLod;
        public int PhysXParSys;
        public float FluidRotationCoefficient;
        public EPhysXMeshRotationMethod PhysXRotationMethod;
    }
    public class ParticleModuleTypeDataPhysX : ParticleModuleTypeDataBase
    {
        public PhysXEmitterVerticalLodProperties VerticalLod;
        public int PhysXParSys;
    }
    public class ParticleModuleTypeDataRibbon : ParticleModuleTypeDataBase
    {
        public int MaxTessellationBetweenParticles;
        public int SheetsPerTrail;
        public int MaxTrailCount;
        public int MaxParticleInTrailCount;
        public float TangentSpawningScalar;
        public float TilingDistance;
        public float DistanceTessellationStepSize;
        public float TangentTessellationScalar;
        public bool bDeadTrailsOnDeactivate;
        public bool bClipSourceSegement;
        public bool bEnablePreviousTangentRecalculation;
        public bool bTangentRecalculationEveryFrame;
        public bool bRenderGeometry;
        public bool bRenderSpawnPoints;
        public bool bRenderTangents;
        public bool bRenderTessellation;
        public ETrailsRenderAxisOption RenderAxis;
    }
    public class ParticleModuleTypeDataTrail : ParticleModuleTypeDataBase
    {
        public RawDistributionFloat Tension;
        public Vector SpawnDistance;
        public int TessellationFactor;
        public bool RenderGeometry;
        public bool RenderLines;
        public bool RenderTessellation;
        public bool Tapered;
        public bool SpawnByDistance;
    }
    public class ParticleModuleTypeDataTrail2 : ParticleModuleTypeDataBase
    {
        public int TessellationFactor;
        public float TessellationFactorDistance;
        public float TessellationStrength;
        public int TextureTile;
        public int Sheets;
        public int MaxTrailCount;
        public int MaxParticleInTrailCount;
        public bool bClipSourceSegement;
        public bool RenderGeometry;
        public bool RenderDirectLine;
        public bool RenderLines;
        public bool RenderTessellation;
    }
    public class ParticleModuleUberBase : ParticleModule
    {
        public NameReference[] RequiredModules;
    }
    public class ParticleModuleUberLTISIVCL : ParticleModuleUberBase
    {
        public RawDistributionFloat Lifetime;
        public RawDistributionVector StartSize;
        public RawDistributionVector StartVelocity;
        public RawDistributionFloat StartVelocityRadial;
        public RawDistributionVector ColorOverLife;
        public RawDistributionFloat AlphaOverLife;
    }
    public class ParticleModuleUberLTISIVCLIL : ParticleModuleUberBase
    {
        public RawDistributionFloat Lifetime;
        public RawDistributionVector StartSize;
        public RawDistributionVector StartVelocity;
        public RawDistributionFloat StartVelocityRadial;
        public RawDistributionVector ColorOverLife;
        public RawDistributionFloat AlphaOverLife;
        public RawDistributionVector StartLocation;
    }
    public class ParticleModuleUberLTISIVCLILIRSSBLIRR : ParticleModuleUberBase
    {
        public RawDistributionFloat Lifetime;
        public RawDistributionVector StartSize;
        public RawDistributionVector StartVelocity;
        public RawDistributionFloat StartVelocityRadial;
        public RawDistributionVector ColorOverLife;
        public RawDistributionFloat AlphaOverLife;
        public RawDistributionVector StartLocation;
        public RawDistributionFloat StartRotation;
        public RawDistributionVector SizeLifeMultiplier;
        public RawDistributionFloat StartRotationRate;
        public bool SizeMultiplyX;
        public bool SizeMultiplyY;
        public bool SizeMultiplyZ;
    }
    public class ParticleModuleUberRainDrops : ParticleModuleUberBase
    {
        public Vector StartSizeMin;
        public Vector StartSizeMax;
        public Vector StartVelocityMin;
        public Vector StartVelocityMax;
        public Vector ColorOverLife;
        public Vector PC_StartLocation;
        public Vector StartLocationMin;
        public Vector StartLocationMax;
        public float LifetimeMin;
        public float LifetimeMax;
        public float StartVelocityRadialMin;
        public float StartVelocityRadialMax;
        public float AlphaOverLife;
        public float PC_VelocityScale;
        public float PC_StartRadius;
        public float PC_StartHeight;
        public bool bIsUsingCylinder;
        public bool bPositive_X;
        public bool bPositive_Y;
        public bool bPositive_Z;
        public bool bNegative_X;
        public bool bNegative_Y;
        public bool bNegative_Z;
        public bool bSurfaceOnly;
        public bool bVelocity;
        public bool bRadialVelocity;
        public CylinderHeightAxis PC_HeightAxis;
    }
    public class ParticleModuleUberRainImpacts : ParticleModuleUberBase
    {
        public RawDistributionFloat Lifetime;
        public RawDistributionVector StartSize;
        public RawDistributionVector StartRotation;
        public RawDistributionVector LifeMultiplier;
        public RawDistributionFloat PC_VelocityScale;
        public RawDistributionVector PC_StartLocation;
        public RawDistributionFloat PC_StartRadius;
        public RawDistributionFloat PC_StartHeight;
        public RawDistributionVector ColorOverLife;
        public RawDistributionFloat AlphaOverLife;
        public bool bInheritParent;
        public bool MultiplyX;
        public bool MultiplyY;
        public bool MultiplyZ;
        public bool bIsUsingCylinder;
        public bool bPositive_X;
        public bool bPositive_Y;
        public bool bPositive_Z;
        public bool bNegative_X;
        public bool bNegative_Y;
        public bool bNegative_Z;
        public bool bSurfaceOnly;
        public bool bVelocity;
        public bool bRadialVelocity;
        public CylinderHeightAxis PC_HeightAxis;
    }
    public class ParticleModuleUberRainSplashA : ParticleModuleUberBase
    {
        public RawDistributionFloat Lifetime;
        public RawDistributionVector StartSize;
        public RawDistributionVector StartRotation;
        public RawDistributionVector LifeMultiplier;
        public RawDistributionVector ColorOverLife;
        public RawDistributionFloat AlphaOverLife;
        public bool bInheritParent;
        public bool MultiplyX;
        public bool MultiplyY;
        public bool MultiplyZ;
    }
    public class ParticleModuleUberRainSplashB : ParticleModuleUberBase
    {
        public RawDistributionFloat Lifetime;
        public RawDistributionVector StartSize;
        public RawDistributionVector ColorOverLife;
        public RawDistributionFloat AlphaOverLife;
        public RawDistributionVector LifeMultiplier;
        public RawDistributionFloat StartRotationRate;
        public bool MultiplyX;
        public bool MultiplyY;
        public bool MultiplyZ;
    }
    public class ParticleModuleVelocityBase : ParticleModule
    {
        public bool bInWorldSpace;
    }
    public class ParticleModuleVelocity : ParticleModuleVelocityBase
    {
        public BioRawDistributionRwVector3 StartVelocityRw;
        public RawDistributionFloat StartVelocityRadial;
    }
    public class ParticleModuleVelocityInheritParent : ParticleModuleVelocityBase
    {
        public BioRawDistributionRwVector3 ScaleRw;
    }
    public class ParticleModuleVelocityOverLifetime : ParticleModuleVelocityBase
    {
        public BioRawDistributionRwVector3 VelOverLifeRw;
        public bool Absolute;
    }
    public class ParticleSystemReplay : Object
    {
        public ParticleSystemReplayFrame[] Frames;
        public int ClipIDNumber;
    }
    public class PathConstraint : Object
    {
        public int CacheIdx;
        public int NextConstraint;
    }
    public class Path_AlongLine : PathConstraint
    {
        public Vector Direction;
    }
    public class Path_AvoidInEscapableNodes : PathConstraint
    {
        public int Radius;
        public int Height;
        public int MaxFallSpeed;
        public int MoveFlags;
    }
    public class Path_MinDistBetweenSpecsOfType : PathConstraint
    {
        public int ReachSpecClass;
        public Vector InitLocation;
        public float MinDistBetweenSpecTypes;
    }
    public class Path_TowardGoal : PathConstraint
    {
        public int GoalActor;
    }
    public class Path_TowardPoint : PathConstraint
    {
        public Vector GoalPoint;
    }
    public class Path_WithinDistanceEnvelope : PathConstraint
    {
        public Vector EnvelopeTestPoint;
        public float MaxDistance;
        public float MinDistance;
        public float SoftStartPenalty;
        public bool bSoft;
        public bool bOnlyThrowOutNodesThatLeaveEnvelope;
    }
    public class Path_WithinTraversalDist : PathConstraint
    {
        public float MaxTraversalDist;
        public float SoftStartPenalty;
        public bool bSoft;
    }
    public class PathBlockingVolume : Volume
    {
    }
    public class PathNode : NavigationPoint
    {
    }
    public class PathNode_Dynamic : PathNode
    {
    }
    public class PathRenderingComponent : PrimitiveComponent
    {
    }
    public class PathTargetPoint : Keypoint
    {
    }
    public class PBRuleNodeBase : Object
    {
        public PBRuleLink[] NextRules;
    }
    public class ProcBuildingRuleset : Object
    {
        public PBVariationInfo[] Variations;
        public int DefaultRoofMaterial;
        public int DefaultFloorMaterial;
        public int DefaultNonRectWallMaterial;
        public float RoofZOffset;
        public float NotRoofZOffset;
        public float FloorZOffset;
        public float NotFloorZOffset;
        public float RoofPolyInset;
        public float FloorPolyInset;
        public float BuildingLODSpecular;
        public float RoofEdgeScopeRaise;
        public int LODCubemap;
        public int InteriorTexture;
        public int RootRule;
        public bool bEnableInteriorTexture;
        public bool bLODOnlyRoof;
    }
    public class PBRuleNodeAlternate : PBRuleNodeBase
    {
        public float ASize;
        public float BMaxSize;
        public bool bInvertPatternOrder;
        public bool bEqualSizeAB;
        public EProcBuildingAxis RepeatAxis;
    }
    public class PBRuleNodeComment : PBRuleNodeBase
    {
        public int SizeX;
        public int SizeY;
        public int BorderWidth;
        public Color BorderColor;
        public Color FillColor;
        public bool bFilled;
    }
    public class ProcBuilding : Volume
    {
        public PBMeshCompInfo[] BuildingMeshCompInfos;
        public PBFracMeshCompInfo[] BuildingFracMeshCompInfos;
        public int[] LODMeshComps;
        public PBMaterialParam[] BuildingMaterialParams;
        public int SimpleMeshComp;
        public int NumMeshedTopLevelScopes;
        public float MaxFacadeZ;
        public float MinFacadeZ;
        public float SimpleMeshMassiveLODDistance;
        public float RenderToTexturePullBackAmount;
        public int RoofLightmapRes;
        public int NonRectWallLightmapRes;
        public int LowLODPersistentActor;
        public int BuildingInstanceVersion;
        public bool bGenerateRoofMesh;
        public bool bGenerateFloorMesh;
        public bool bApplyRulesToRoof;
        public bool bApplyRulesToFloor;
        public bool bSplitWallsAtRoofLevels;
        public bool bSplitWallsAtWallEdges;
        public bool bBuildingBrushCollision;
        public bool bDebugDrawEdgeInfo;
        public bool bDebugDrawScopes;
    }
    public class PBRuleNodeCorner : PBRuleNodeBase
    {
        public RBCornerAngleInfo[] Angles;
        public float CornerSize;
        public float FlatThreshold;
        public float CornerShapeOffset;
        public int RoundTesselation;
        public float RoundCurvature;
        public bool bNoMeshForConcaveCorners;
        public bool bUseAdjacentRulesetForRightGap;
        public EPBCornerType CornerType;
    }
    public class PBRuleNodeEdgeAngle : PBRuleNodeBase
    {
        public RBEdgeAngleInfo[] Angles;
        public EProcBuildingEdge Edge;
    }
    public class PBRuleNodeEdgeMesh : PBRuleNodeBase
    {
        public float FlatThreshold;
        public float MainXPullIn;
    }
    public class PBRuleNodeExtractTopBottom : PBRuleNodeBase
    {
        public float ExtractTopZ;
        public float ExtractNotTopZ;
        public float ExtractBottomZ;
        public float ExtractNotBottomZ;
    }
    public class PBRuleNodeLODQuad : PBRuleNodeBase
    {
        public float MassiveLODDistanceScale;
    }
    public class PBRuleNodeMesh : PBRuleNodeBase
    {
        public BuildingMeshInfo PartialOccludedBuildingMesh;
        public BuildingMeshInfo[] BuildingMeshes;
        public bool bDoOcclusionTest;
        public bool bBlockAll;
    }
    public class PBRuleNodeOcclusion : PBRuleNodeBase
    {
    }
    public class PBRuleNodeQuad : PBRuleNodeBase
    {
        public int Material;
        public float RepeatMaxSizeX;
        public float RepeatMaxSizeZ;
        public int QuadLightmapRes;
        public float YOffset;
        public bool bDisableMaterialRepeat;
    }
    public class PBRuleNodeRandom : PBRuleNodeBase
    {
        public int NumOutputs;
        public int MinNumExecuted;
        public int MaxNumExecuted;
    }
    public class PBRuleNodeRepeat : PBRuleNodeBase
    {
        public float RepeatMaxSize;
        public EProcBuildingAxis RepeatAxis;
    }
    public class PBRuleNodeSize : PBRuleNodeBase
    {
        public float DecisionSize;
        public bool bUseTopLevelScopeSize;
        public EProcBuildingAxis SizeAxis;
    }
    public class PBRuleNodeSplit : PBRuleNodeBase
    {
        public RBSplitInfo[] SplitSetup;
        public EProcBuildingAxis SplitAxis;
    }
    public class PBRuleNodeSubRuleset : PBRuleNodeBase
    {
        public int SubRuleset;
    }
    public class PBRuleNodeTransform : PBRuleNodeBase
    {
        public int Translation;
        public int Rotation;
        public int Scale;
    }
    public class PBRuleNodeVariation : PBRuleNodeBase
    {
        public bool bVariationOfScopeOnLeft;
    }
    public class PBRuleNodeWindowWall : PBRuleNodeBase
    {
        public float CellMaxSizeX;
        public float CellMaxSizeZ;
        public float WindowSizeX;
        public float WindowSizeZ;
        public float WindowPosX;
        public float WindowPosZ;
        public float YOffset;
        public int Material;
        public bool bScaleWindowWithCell;
    }
    public class PhysicalMaterial : Object
    {
        public Vector AnisoFrictionDir;
        public NameReference m_nmPhysicsCollisionSound;
        public float Friction;
        public float Restitution;
        public float FrictionV;
        public float Density;
        public float AngularDamping;
        public float LinearDamping;
        public float MagneticResponse;
        public float WindResponse;
        public float ImpactThreshold;
        public float ImpactReFireDelay;
        public int ImpactEffect;
        public int ImpactSound;
        public float SlideThreshold;
        public float SlideReFireDelay;
        public int SlideEffect;
        public int SlideSound;
        public int FractureSoundExplosion;
        public int FractureSoundSingle;
        public float AudioObstruction;
        public float AudioOcclusion;
        public int Parent;
        public int PhysicalMaterialProperty;
        public bool bForceConeFriction;
        public bool bEnableAnisotropicFriction;
        public bool m_bIgnoreSelfCollisions;
    }
    public class PhysicalMaterialPropertyBase : Object
    {
    }
    public class PhysicsAsset : Object
    {
        public Map_Mirror BodySetupIndexMap;
        public int[] BodySetup;
        public int[] BoundsBodies;
        public int[] ConstraintSetup;
        public int DefaultInstance;
    }
    public class PhysicsAssetInstance : Object
    {
        public Map_Mirror CollisionDisableTable;
        public int[] Bodies;
        public int[] Constraints;
        public float LinearSpringScale;
        public float LinearDampingScale;
        public float LinearForceLimitScale;
        public float AngularSpringScale;
        public float AngularDampingScale;
        public float AngularForceLimitScale;
        public bool bInitBodies;
        public bool bHasFixedBody;
    }
    public class PhysXDestructible : Object
    {
        public PhysXDestructibleParameters DestructibleParameters;
        public int[] DestructibleAssets;
        public Vector[] CookingScales;
        public int FracturedStaticMesh;
    }
    public class PhysXDestructibleActor : FracturedStaticMeshActor
    {
        public PhysXDestructibleParameters DestructibleParameters;
        public int[] PartFirstChunkIndices;
        public int[] Parts;
        public int[] Neighbors;
        public int DestructibleComponent;
        public int LightEnvironment;
        public int PhysXDestructible;
        public int Structure;
        public int PerFrameProcessBudget;
        public int SupportDepth;
        public bool bSupportChunksTouchWorld;
        public bool bSupportChunksInSupportFragment;
        public byte NumPartsRemaining;
    }
    public class PhysXDestructibleAsset : Object
    {
        public PhysXDestructibleAssetChunk[] ChunkTree;
        public int[] Meshes;
        public int[] Assets;
        public int MaxDepth;
    }
    public class PhysXDestructibleComponent : PrimitiveComponent
    {
        public byte[] Fragmented;
        public int[] BoxElemStart;
        public int[] ConvexElemStart;
        public int DetailedCollision;
    }
    public class PhysXDestructiblePart : Actor
    {
        public int[] SkeletalMeshComponents;
        public byte[] NumChunksRemaining;
        public int Structure;
        public int DestructibleActor;
        public int DestructibleAsset;
        public int LightEnvironment;
        public byte NumMeshesRemaining;
    }
    public class PhysXDestructibleStructure : Object
    {
        public Pointer Manager;
    }
    public class PhysXEmitterSpawnable : Emitter
    {
        public Pointer VolumeFill;
        public int ParticleTemplate;
    }
    public class PhysXParticleSystem : Object
    {
        public Pointer CascadeScene;
        public Pointer PSys;
        public Vector ExternalAcceleration;
        public int MaxParticles;
        public RBCollisionChannelContainer RBCollideWithChannels;
        public float CollisionDistance;
        public float RestitutionWithStaticShapes;
        public float RestitutionWithDynamicShapes;
        public float FrictionWithStaticShapes;
        public float FrictionWithDynamicShapes;
        public float MaxMotionDistance;
        public float Damping;
        public float RestParticleDistance;
        public float RestDensity;
        public float KernelRadiusMultiplier;
        public float Stiffness;
        public float Viscosity;
        public float CollisionResponseCoefficient;
        public bool bDynamicCollision;
        public bool bDisableGravity;
        public bool bStaticCollision;
        public bool bTwoWayCollision;
        public ERBCollisionChannel RBChannel;
        public ESimulationMethod SimulationMethod;
        public EPacketSizeMultiplier PacketSizeMultiplier;
    }
    public class PickupDataProvider : UIDynamicDataProvider
    {
    }
    public class PickupFactory : NavigationPoint
    {
        public int InventoryType;
        public float RespawnEffectTime;
        public float MaxDesireability;
        public int ReplacementFactory;
        public int OriginalFactory;
        public bool bOnlyReplicateHidden;
        public bool bPickupHidden;
        public bool bPredictRespawns;
        public bool bIsSuperItem;
        public bool bRespawnPaused;
    }
    public class PlayerDataProvider : UIDynamicDataProvider
    {
    }
    public class PlayerManagerInteraction : Interaction
    {
    }
    public class PlayerOwnerDataProvider : PlayerDataProvider
    {
    }
    public class PlayerOwnerDataStore : UIDataStore_GameState
    {
        public PlayerDataProviderTypes ProviderTypes;
        public int[] WeaponList;
        public int[] PowerupList;
        public int PlayerData;
        public int CurrentWeapon;
    }
    public class PlayerReplicationInfo : ReplicationInfo
    {
        public UniqueNetId UniqueId;
        public string PlayerName;
        public string OldName;
        public string StringSpectating;
        public string StringUnknown;
        public string SavedNetworkAddress;
        public int GameMessageClass;
        public NameReference SessionName;
        public AutomatedTestingDatum AutomatedTestingData;
        public float Score;
        public int Deaths;
        public int PlayerLocationHint;
        public int NumLives;
        public int PlayerID;
        public int Team;
        public int SplitscreenIndex;
        public int StartTime;
        public int Kills;
        public float ExactPing;
        public int StatConnectionCounts;
        public int StatPingTotals;
        public int StatPingMin;
        public int StatPingMax;
        public int StatPKLTotal;
        public int StatPKLMin;
        public int StatPKLMax;
        public int StatMaxInBPS;
        public int StatAvgInBPS;
        public int StatMaxOutBPS;
        public int StatAvgOutBPS;
        public bool bAdmin;
        public bool bIsFemale;
        public bool bIsSpectator;
        public bool bOnlySpectator;
        public bool bWaitingPlayer;
        public bool bReadyToPlay;
        public bool bOutOfLives;
        public bool bBot;
        public bool bHasFlag;
        public bool bHasBeenWelcomed;
        public bool bIsInactive;
        public bool bFromPreviousLevel;
        public byte Ping;
    }
    public class PlayerStart : NavigationPoint
    {
        public int TeamIndex;
        public bool bEnabled;
        public bool bPrimaryStart;
    }
    public class PointLightMovable : PointLight
    {
    }
    public class PointLightToggleable : PointLight
    {
    }
    public class PortalMarker : NavigationPoint
    {
        public int MyPortal;
    }
    public class SceneCaptureActor : Actor
    {
        public int SceneCapture;
    }
    public class SceneCaptureComponent : ActorComponent
    {
        public Color ClearColor;
        public int SceneLOD;
        public float FrameRate;
        public int PostProcess;
        public float MaxUpdateDist;
        public float MaxViewDistanceOverride;
        public float MaxStreamingUpdateDist;
        public bool bEnabled;
        public bool bEnablePostProcess;
        public bool bEnableFog;
        public bool bUseMainScenePostProcessSettings;
        public bool bSkipUpdateIfTextureUsersOccluded;
        public bool bSkipUpdateIfOwnerOccluded;
        public bool bSkipRenderingDepthPrepass;
        public ESceneCaptureViewMode ViewMode;
    }
    public class SceneCaptureReflectComponent : SceneCaptureComponent
    {
        public int TextureTarget;
        public float ScaleFOV;
    }
    public class SceneCaptureReflectActor : SceneCaptureActor
    {
        public int StaticMesh;
    }
    public class SceneCapturePortalComponent : SceneCaptureComponent
    {
        public int TextureTarget;
        public float ScaleFOV;
        public int ViewDestination;
    }
    public class SceneCapturePortalActor : SceneCaptureReflectActor
    {
    }
    public class PortalTeleporter : SceneCapturePortalActor
    {
        public int SisterPortal;
        public int TextureResolutionX;
        public int TextureResolutionY;
        public int MyMarker;
        public bool bMovablePortal;
        public bool bAlwaysTeleportNonPawns;
        public bool bCanTeleportVehicles;
    }
    public class PortalVolume : Volume
    {
        public int[] Portals;
    }
    public class PostProcessVolume : Volume
    {
        public PostProcessSettings Settings;
        public float Priority;
        public bool bEnabled;
    }
    public class PotentialClimbWatcher : Info
    {
    }
    public class PowerupDataProvider : InventoryDataProvider
    {
    }
    public class Prefab : Object
    {
        public int[] PrefabArchetypes;
        public int PrefabVersion;
        public int PrefabSequence;
    }
    public class PrefabInstance : Actor
    {
        public byte[] PI_Bytes;
        public int[] PI_CompleteObjects;
        public int[] PI_ReferencedObjects;
        public string[] PI_SavedNames;
        public int TemplatePrefab;
        public int TemplateVersion;
        public int SequenceInstance;
        public int PI_PackageVersion;
        public int PI_LicenseePackageVersion;
    }
    public class Sequence : SequenceOp
    {
        public int[] SequenceObjects;
        public int[] ActiveSequenceOps;
        public int[] UnregisteredEvents;
        public ActivateOp[] DelayedActivatedOps;
        public QueuedActivationInfo[] QueuedActivations;
        public int[] m_aBioNotifyOfStasis;
        public int[] m_aSFXSharedAnimsets;
        public string m_sBioSequenceName;
        public Pointer LogFile;
        public int DefaultViewX;
        public int DefaultViewY;
        public float DefaultViewZoom;
        public bool IsLocalized;
        public bool bEnabled;
    }
    public class PrefabSequence : Sequence
    {
        public int OwnerPrefab;
    }
    public class PrefabSequenceContainer : Sequence
    {
    }
    public class ProcBuilding_SimpleLODActor : StaticMeshActor
    {
    }
    public class Projectile : Actor
    {
        public int __OnExplode__Delegate;
        public int MyDamageType;
        public float Speed;
        public float MaxSpeed;
        public int ZeroCollider;
        public int ZeroColliderComponent;
        public float Damage;
        public float DamageRadius;
        public float MomentumTransfer;
        public int SpawnSound;
        public int ImpactSound;
        public int InstigatorController;
        public int ImpactedActor;
        public float NetCullDistanceSquared;
        public int CylinderComponent;
        public int NextProjectile;
        public bool bSwitchToZeroCollision;
        public bool bBlockedByInstigator;
        public bool bBegunPlay;
        public bool bRotationFollowsVelocity;
        public bool bNotBlockedByShield;
    }
    public class ProscribedReachSpec : ReachSpec
    {
    }
    public class PylonSeed : Actor
    {
        public Pointer VfTable_IInterface_NavMeshPathObject;
    }
    public class RadialBlurComponent : ActorComponent
    {
        public int Material;
        public float BlurScale;
        public float BlurFalloffExponent;
        public float BlurOpacity;
        public float MaxCullDistance;
        public float DistanceFalloffExponent;
        public bool bRenderAsVelocity;
        public bool bEnabled;
        public ESceneDepthPriorityGroup DepthPriorityGroup;
    }
    public class RadialBlurActor : Actor
    {
        public int RadialBlur;
    }
    public class RB_BodyInstance : Object
    {
        public Pointer BodyData;
        public Pointer BoneSpring;
        public Pointer BoneSpringKinActor;
        public Vector Velocity;
        public Vector PreviousVelocity;
        public int BodyIndex;
        public int SceneIndex;
        public float BoneLinearSpring;
        public float BoneLinearDamping;
        public float BoneAngularSpring;
        public float BoneAngularDamping;
        public float OverextensionThreshold;
        public float CustomGravityFactor;
        public bool bEnableBoneSpringLinear;
        public bool bEnableBoneSpringAngular;
        public bool bDisableOnOverextension;
        public bool bNotifyOwnerOnOverextension;
        public bool bTeleportOnOverextension;
        public bool bUseKinActorForBoneSpring;
        public bool bMakeSpringToBaseCollisionComponent;
        public bool bOnlyCollideWithPawns;
        public bool bEnableCollisionResponse;
        public bool bPushBody;
        public int PhysMaterialOverride;
        public float ContactReportForceThreshold;
        public float InstanceMassScale;
        public float InstanceDampingScale;
    }
    public class RB_BodySetup : KMeshProps
    {
        public Pointer[] CollisionGeom;
        public Vector[] CollisionGeomScale3D;
        public KCachedConvexData[] PreCachedPhysData;
        public Vector[] PreCachedPhysScale;
        public NameReference BoneName;
        public int PhysMaterial;
        public float MassScale;
        public int PreCachedPhysDataVersion;
        public bool bFixed;
        public bool bNoCollision;
        public bool bBlockZeroExtent;
        public bool bBlockNonZeroExtent;
        public bool bEnableContinuousCollisionDetection;
        public bool bAlwaysFullAnimWeight;
        public bool bConsiderForBounds;
        public EBioPartGroup ePartGroup;
        public ESleepFamily SleepFamily;
    }
    public class RigidBodyBase : Actor
    {
    }
    public class RB_ConstraintDrawComponent : PrimitiveComponent
    {
        public int LimitMaterial;
    }
    public class RB_ConstraintInstance : Object
    {
        public Quat AngularPositionTarget;
        public Pointer ConstraintData;
        public Vector LinearPositionTarget;
        public Vector LinearVelocityTarget;
        public Vector AngularVelocityTarget;
        public int ConstraintIndex;
        public int SceneIndex;
        public float LinearDriveSpring;
        public float LinearDriveDamping;
        public float LinearDriveForceLimit;
        public float AngularDriveSpring;
        public float AngularDriveDamping;
        public float AngularDriveForceLimit;
        public bool bInHardware;
        public bool bLinearXPositionDrive;
        public bool bLinearXVelocityDrive;
        public bool bLinearYPositionDrive;
        public bool bLinearYVelocityDrive;
        public bool bLinearZPositionDrive;
        public bool bLinearZVelocityDrive;
        public bool bSwingPositionDrive;
        public bool bSwingVelocityDrive;
        public bool bTwistPositionDrive;
        public bool bTwistVelocityDrive;
        public bool bAngularSlerpDrive;
        public bool bTerminated;
        public Pointer DummyKinActor;
    }
    public class RB_ConstraintActor : RigidBodyBase
    {
        public int ConstraintActor1;
        public int ConstraintActor2;
        public int PulleyPivotActor1;
        public int PulleyPivotActor2;
        public int ConstraintSetup;
        public int ConstraintInstance;
        public bool bDisableCollision;
        public bool bUpdateActor1RefFrame;
        public bool bUpdateActor2RefFrame;
    }
    public class RB_ConstraintSetup : Object
    {
        public Vector Pos1;
        public Vector PriAxis1;
        public Vector SecAxis1;
        public Vector Pos2;
        public Vector PriAxis2;
        public Vector SecAxis2;
        public Vector PulleyPivot1;
        public Vector PulleyPivot2;
        public NameReference JointName;
        public NameReference ConstraintBone1;
        public NameReference ConstraintBone2;
        public LinearDOFSetup LinearXSetup;
        public LinearDOFSetup LinearYSetup;
        public LinearDOFSetup LinearZSetup;
        public float LinearLimitStiffness;
        public float LinearLimitDamping;
        public float LinearBreakThreshold;
        public float Swing1LimitAngle;
        public float Swing2LimitAngle;
        public float TwistLimitAngle;
        public float SwingLimitStiffness;
        public float SwingLimitDamping;
        public float TwistLimitStiffness;
        public float TwistLimitDamping;
        public float AngularBreakThreshold;
        public float PulleyRatio;
        public bool bEnableProjection;
        public bool bLinearLimitSoft;
        public bool bLinearBreakable;
        public bool bSwingLimited;
        public bool bTwistLimited;
        public bool bSwingLimitSoft;
        public bool bTwistLimitSoft;
        public bool bAngularBreakable;
        public bool bIsPulley;
        public bool bMaintainMinDistance;
    }
    public class RB_BSJointSetup : RB_ConstraintSetup
    {
    }
    public class RB_BSJointActor : RB_ConstraintActor
    {
    }
    public class RB_ConstraintActorSpawnable : RB_ConstraintActor
    {
    }
    public class RB_CylindricalForceActor : RigidBodyBase
    {
        public int RenderComponent;
        public float RadialStrength;
        public float RotationalStrength;
        public float LiftStrength;
        public float LiftFalloffHeight;
        public float EscapeVelocity;
        public float ForceRadius;
        public float ForceTopRadius;
        public float ForceHeight;
        public float HeightOffset;
        public RBCollisionChannelContainer CollideWithChannels;
        public bool bForceActive;
        public bool bForceApplyToCloth;
        public bool bForceApplyToFluid;
        public bool bForceApplyToRigidBodies;
        public bool bForceApplyToProjectiles;
    }
    public class RB_DistanceJointSetup : RB_ConstraintSetup
    {
    }
    public class RB_ForceFieldExcludeVolume : Volume
    {
        public int ForceFieldChannel;
    }
    public class RB_Handle : ActorComponent
    {
        public Vector LinearStiffnessScale3D;
        public Vector LinearDampingScale3D;
        public Vector Destination;
        public Vector StepSize;
        public Vector location;
        public NameReference GrabbedBoneName;
        public int GrabbedComponent;
        public float LinearDamping;
        public float LinearStiffness;
        public float AngularDamping;
        public float AngularStiffness;
        public bool bInterpolating;
    }
    public class RB_HingeSetup : RB_ConstraintSetup
    {
    }
    public class RB_HingeActor : RB_ConstraintActor
    {
    }
    public class RB_LineImpulseActor : RigidBodyBase
    {
        public float ImpulseStrength;
        public float ImpulseRange;
        public int Arrow;
        public bool bVelChange;
        public bool bStopAtFirstHit;
        public bool bCauseFracture;
        public byte ImpulseCount;
    }
    public class RB_PrismaticSetup : RB_ConstraintSetup
    {
    }
    public class RB_PrismaticActor : RB_ConstraintActor
    {
    }
    public class RB_PulleyJointSetup : RB_ConstraintSetup
    {
    }
    public class RB_PulleyJointActor : RB_ConstraintActor
    {
    }
    public class RB_RadialForceActor : RigidBodyBase
    {
        public int RenderComponent;
        public float ForceStrength;
        public float ForceRadius;
        public float SwirlStrength;
        public float SpinTorque;
        public RBCollisionChannelContainer CollideWithChannels;
        public bool bForceActive;
        public bool bForceApplyToCloth;
        public bool bForceApplyToFluid;
        public bool bForceApplyToRigidBodies;
        public bool bForceApplyToProjectiles;
        public ERadialImpulseFalloff ForceFalloff;
        public ERadialForceType RadialForceMode;
    }
    public class RB_RadialImpulseComponent : PrimitiveComponent
    {
        public float ImpulseStrength;
        public float ImpulseRadius;
        public int PreviewSphere;
        public bool bVelChange;
        public bool bCauseFracture;
        public ERadialImpulseFalloff ImpulseFalloff;
    }
    public class RB_RadialImpulseActor : RigidBodyBase
    {
        public int RenderComponent;
        public int ImpulseComponent;
        public byte ImpulseCount;
    }
    public class RB_SkelJointSetup : RB_ConstraintSetup
    {
    }
    public class RB_Spring : ActorComponent
    {
        public InterpCurveFloat SpringMaxForceTimeScale;
        public Pointer SpringData;
        public NameReference BoneName1;
        public NameReference BoneName2;
        public int Component1;
        public int Component2;
        public int SceneIndex;
        public float TimeSinceActivation;
        public float MinBodyMass;
        public float SpringSaturateDist;
        public float SpringMaxForce;
        public float MaxForceMassRatio;
        public float DampSaturateVel;
        public float DampMaxForce;
        public bool bInHardware;
        public bool bEnableForceMassRatio;
    }
    public class RB_StayUprightSetup : RB_ConstraintSetup
    {
    }
    public class RB_Thruster : RigidBodyBase
    {
        public float ThrustStrength;
        public bool bThrustEnabled;
    }
    public class Route : Info
    {
        public Pointer VfTable_IEditorLinkSelectionInterface;
        public ActorReference[] RouteList;
        public float FudgeFactor;
        public ERouteType RouteType;
    }
    public class RouteRenderingComponent : PrimitiveComponent
    {
    }
    public class RvrEffectsMaterialGroup : Object
    {
        public EMG_Entry[] m_lstEffects;
        public Guid m_Guid;
    }
    public class RvrEffectsMaterialUser : MaterialInterface
    {
        public Pointer VfTable_FCallbackEventDevice;
        public Guid[] m_lstParentGuids;
        public int m_pBaseMaterial;
        public int m_pEffectsGroup;
        public int m_pMultiplexor;
        public int m_pParentMaterial;
        public bool m_bSupportsStaticMeshes;
    }
    public class RvrMaterialMultiplexor : MaterialInterface
    {
        public RvrMultiplexorEntry[] m_lstParents;
        public Pointer DefaultMaterialInstances;
        public NameReference m_nmParentNameParameter;
        public int m_pDefaultMaterial;
    }
    public class SavedMove : Object
    {
        public Vector StartLocation;
        public Vector StartRelativeLocation;
        public Vector StartVelocity;
        public Vector StartFloor;
        public Vector SavedLocation;
        public Vector SavedVelocity;
        public Vector SavedRelativeLocation;
        public Vector RMVelocity;
        public Vector Acceleration;
        public Rotator Rotation;
        public Vector RootMotionInterpCurveLastValue;
        public int NextMove;
        public float TimeStamp;
        public float Delta;
        public int StartBase;
        public int EndBase;
        public float CustomTimeDilation;
        public float AccelDotThreshold;
        public float RootMotionInterpCurrentTime;
        public bool bRun;
        public bool bDuck;
        public bool bPressedJump;
        public bool bDoubleJump;
        public bool bPreciseDestination;
        public bool bForceRMVelocity;
        public bool bForceMaxAccel;
        public bool bRootMotionFromInterpCurve;
        public EDoubleClickDir DoubleClickMove;
        public EPhysics SavedPhysics;
        public ERootMotionMode RootMotionMode;
    }
    public class SaveGameSummary : Object
    {
        public string Description;
        public NameReference BaseLevel;
    }
    public class SceneCapture2DComponent : SceneCaptureComponent
    {
        public int TextureTarget;
        public float FieldOfView;
        public float NearPlane;
        public float FarPlane;
        public bool bUpdateMatrices;
    }
    public class SceneCapture2DActor : SceneCaptureActor
    {
        public int DrawFrustum;
    }
    public class SceneCapture2DHitMaskComponent : SceneCaptureComponent
    {
        public int RenderSection;
        public int ForceLOD;
        public float FadingStartTimeAfterHit;
        public float FadingPercentage;
        public float FadingDurationTime;
        public float FadingIntervalTime;
    }
    public class SceneCaptureCubeMapComponent : SceneCaptureComponent
    {
        public int TextureTarget;
        public float NearPlane;
        public float FarPlane;
    }
    public class SceneCaptureCubeMapActor : SceneCaptureActor
    {
        public int StaticMesh;
    }
    public class SceneDataStore : UIDataStore
    {
        public Pointer VfTable_IUIListElementProvider;
        public Pointer VfTable_IUIListElementCellProvider;
        public int SceneDataProvider;
    }
    public class Scoreboard : HUD
    {
        public bool bDisplayMessages;
    }
    public class Scout : Pawn
    {
        public PathSizeInfo[] PathSizes;
        public int DefaultReachSpecClass;
        public float TestJumpZ;
        public float TestGroundSpeed;
        public float TestMaxFallSpeed;
        public float TestFallSpeed;
        public float MaxLandingVelocity;
        public int MinNumPlayerStarts;
        public float NavMeshGen_StepSize;
        public float NavMeshGen_EntityHalfHeight;
        public float NavMeshGen_StartingHeightOffset;
        public float NavMeshGen_MaxDropHeight;
        public float NavMeshGen_MaxStepHeight;
        public float NavMeshGen_VertZDeltaSnapThresh;
        public float NavMeshGen_MinPolyArea;
        public float NavMeshGen_BorderBackfill_CheckDist;
        public float NavMeshGen_MinMergeDotAreaThreshold;
        public float NavMeshGen_MinMergeDotSmallArea;
        public float NavMeshGen_MinMergeDotLargeArea;
        public float NavMeshGen_MaxPolyHeight;
        public float NavMeshGen_HeightMergeThreshold;
        public float NavMeshGen_EdgeMaxDelta;
        public float NavMeshGen_MaxGroundCheckSize;
        public float NavMeshGen_MinEdgeLength;
        public bool bHightlightOneWayReachSpecs;
    }
    public class TextureRenderTarget : Texture
    {
        public bool bNeedsTwoCopies;
        public bool bRenderOnce;
    }
    public class TextureRenderTarget2D : TextureRenderTarget
    {
        public LinearColor ClearColor;
        public int SizeX;
        public int SizeY;
        public EPixelFormat Format;
        public TextureAddress AddressX;
        public TextureAddress AddressY;
    }
    public class ScriptedTexture : TextureRenderTarget2D
    {
        public int __Render__Delegate;
    }
    public class SeqAct_SetSequenceVariable : SequenceAction
    {
    }
    public class SeqAct_AccessObjectList : SeqAct_SetSequenceVariable
    {
        public int OutputObject;
        public int ObjectIndex;
    }
    public class SeqAct_ActivateRemoteEvent : SequenceAction
    {
        public RemoteEventParameter[] Parameters;
        public NameReference EventName;
        public int Instigator;
    }
    public class SeqAct_Latent : SequenceAction
    {
        public int[] LatentActors;
        public bool bAborted;
    }
    public class SeqAct_ActorFactory : SeqAct_Latent
    {
        public int[] SpawnPoints;
        public Vector[] SpawnLocations;
        public Vector[] SpawnOrientations;
        public Vector m_vSpawnOffset;
        public int LastUsedSpawn;
        public int SpawnCount;
        public float SpawnDelay;
        public int LastSpawnIdx;
        public int SpawnedCount;
        public float RemainingDelay;
        public int Factory;
        public bool bEnabled;
        public bool bIsSpawning;
        public bool bCheckSpawnCollision;
        public EPointSelection PointSelection;
    }
    public class SeqAct_ActorFactoryEx : SeqAct_ActorFactory
    {
    }
    public class SeqAct_AddFloat : SeqAct_SetSequenceVariable
    {
        public float ValueA;
        public float ValueB;
        public float FloatResult;
        public int IntResult;
    }
    public class SeqAct_AddInt : SeqAct_SetSequenceVariable
    {
        public int ValueA;
        public int ValueB;
        public float FloatResult;
        public int IntResult;
    }
    public class SeqAct_AddRemoveFaceFXAnimSet : SequenceAction
    {
    }
    public class SeqAct_AIAbortMoveToActor : SequenceAction
    {
    }
    public class SeqAct_AIMoveToActor : SeqAct_Latent
    {
        public int[] Destination;
        public float MovementSpeedModifier;
        public int LookAt;
        public bool bInterruptable;
        public bool bPickClosest;
    }
    public class SeqAct_AndGate : SequenceAction
    {
    }
    public class SeqAct_ApplySoundNode : SequenceAction
    {
        public int PlaySound;
        public int ApplyNode;
    }
    public class SeqAct_AssignController : SequenceAction
    {
        public int ControllerClass;
    }
    public class SeqAct_AttachToActor : SequenceAction
    {
        public Vector RelativeOffset;
        public Rotator RelativeRotation;
        public NameReference BoneName;
        public bool bDetach;
        public bool bHardAttach;
        public bool bUseRelativeOffset;
        public bool bUseRelativeRotation;
    }
    public class SeqAct_AttachToEvent : SequenceAction
    {
        public bool bPreferController;
    }
    public class SeqAct_CameraFade : SequenceAction
    {
        public Color FadeColor;
        public float FadeOpacity;
        public float FadeTime;
        public float FadeTimeRemaining;
        public bool bPersistFade;
    }
    public class SeqAct_CameraLookAt : SequenceAction
    {
        public string TextDisplay;
        public Vector2D InterpSpeedRange;
        public Vector2D InFocusFOV;
        public NameReference FocusBoneName;
        public float TotalTime;
        public float CameraFOV;
        public bool bAffectCamera;
        public bool bAlwaysFocus;
        public bool bTurnInPlace;
        public bool bIgnoreTrace;
        public bool bAffectHead;
        public bool bRotatePlayerWithCamera;
        public bool bToggleGodMode;
        public bool bLeaveCameraRotation;
        public bool bDisableInput;
        public bool bUsedTimer;
        public bool bCheckLineOfSight;
    }
    public class SeqAct_CameraShake : SequenceAction
    {
        public float ShakeScale;
        public float RadialShake_InnerRadius;
        public float RadialShake_OuterRadius;
        public float RadialShake_Falloff;
        public int LocationActor;
        public int Shake;
        public bool bDoControllerVibration;
        public bool bRadialShake;
        public bool bOrientTowardRadialEpicenter;
        public ECameraAnimPlaySpace PlaySpace;
    }
    public class SeqAct_CastToFloat : SeqAct_SetSequenceVariable
    {
        public int Value;
        public float FloatResult;
    }
    public class SeqAct_CastToInt : SeqAct_SetSequenceVariable
    {
        public float Value;
        public int IntResult;
        public bool bTruncate;
    }
    public class SeqAct_ChangeCollision : SequenceAction
    {
        public bool bCollideActors;
        public bool bBlockActors;
        public bool bIgnoreEncroachers;
        public ECollisionType CollisionType;
    }
    public class SeqAct_CommitMapChange : SequenceAction
    {
    }
    public class SeqAct_ConsoleCommand : SequenceAction
    {
        public string Command;
        public string[] Commands;
    }
    public class SeqAct_ConvertToString : SequenceAction
    {
        public string VarSeparator;
        public int NumberOfInputs;
        public bool bIncludeVarComment;
    }
    public class SeqAct_Delay : SeqAct_Latent
    {
        public float DefaultDuration;
        public float Duration;
        public float LastUpdateTime;
        public float RemainingTime;
        public bool bDelayActive;
        public bool bStartWillRestart;
    }
    public class SeqAct_DelaySwitch : SeqAct_Latent
    {
        public int LinkCount;
    }
    public class SeqAct_Destroy : SequenceAction
    {
        public int[] IgnoreBasedClasses;
        public bool bDestroyBasedActors;
    }
    public class SeqAct_DivideFloat : SeqAct_SetSequenceVariable
    {
        public float ValueA;
        public float ValueB;
        public float FloatResult;
        public int IntResult;
    }
    public class SeqAct_DivideInt : SeqAct_SetSequenceVariable
    {
        public int ValueA;
        public int ValueB;
        public float FloatResult;
        public int IntResult;
    }
    public class SeqAct_DrawText : SequenceAction
    {
        public KismetDrawTextInfo DrawTextInfo;
        public float DisplayTimeSeconds;
        public bool bDisplayOnObject;
    }
    public class SeqAct_FinishSequence : SequenceAction
    {
        public string OutputLabel;
    }
    public class SeqAct_FlyThroughHasEnded : SequenceAction
    {
    }
    public class SeqAct_ForceFeedback : SequenceAction
    {
        public int PredefinedWaveForm;
        public int FFWaveform;
    }
    public class SeqAct_ForceGarbageCollection : SeqAct_Latent
    {
    }
    public class SeqAct_Gate : SequenceAction
    {
        public int AutoCloseCount;
        public int CurrentCloseCount;
        public bool bOpen;
    }
    public class SeqAct_GetDistance : SequenceAction
    {
        public float Distance;
    }
    public class SeqAct_GetLocationAndRotation : SequenceAction
    {
        public Vector location;
        public Vector RotationVector;
        public NameReference SocketOrBoneName;
    }
    public class SeqAct_GetProperty : SequenceAction
    {
        public NameReference PropertyName;
    }
    public class SeqAct_GetVectorComponents : SequenceAction
    {
        public Vector InVector;
        public float X;
        public float Y;
        public float Z;
    }
    public class SeqAct_GetVelocity : SequenceAction
    {
        public Vector VelocityVect;
        public float VelocityMag;
    }
    public class SeqAct_GiveInventory : SequenceAction
    {
        public int[] InventoryList;
        public bool bClearExisting;
        public bool bForceReplace;
    }
    public class SeqAct_Interp : SeqAct_Latent
    {
        public int[] LinkedCover;
        public int[] GroupInst;
        public int ReplicatedActorClass;
        public float PlayRate;
        public float Position;
        public float ForceStartPosition;
        public int InterpData;
        public int ReplicatedActor;
        public int PreferredSplitScreenNum;
        public float TerminationTime;
        public bool bIsPlaying;
        public bool bPaused;
        public bool bResetPositionOnFinish;
        public bool bFreeAnimsetsOnFinish;
        public bool bLooping;
        public bool bRewindOnPlay;
        public bool bNoResetOnRewind;
        public bool bRewindIfAlreadyPlaying;
        public bool bReversePlayback;
        public bool bInterpForPathBuilding;
        public bool bForceStartPos;
        public bool bClientSideOnly;
        public bool bSkipUpdateIfNotVisible;
        public bool bIsSkippable;
        public bool bBlockForPriming;
    }
    public class SeqAct_IsInObjectList : SequenceAction
    {
        public bool bCheckForAllObjects;
    }
    public class SeqAct_LevelStreamingBase : SeqAct_Latent
    {
        public bool bMakeVisibleAfterLoad;
        public bool bShouldBlockOnLoad;
        public bool bNeverAutoStreamOut;
    }
    public class SeqAct_LevelStreaming : SeqAct_LevelStreamingBase
    {
        public NameReference LevelName;
        public int Level;
    }
    public class SeqAct_LevelVisibility : SeqAct_Latent
    {
        public NameReference LevelName;
        public int Level;
    }
    public class SeqAct_Log : SequenceAction
    {
        public Vector TargetOffset;
        public float TargetDuration;
        public bool bOutputToScreen;
        public bool bIncludeObjComment;
    }
    public class SeqAct_ModifyCover : SequenceAction
    {
        public int[] Slots;
        public bool bManualAdjustPlayersOnly;
        public ECoverType ManualCoverType;
    }
    public class SeqAct_ModifyHealth : SequenceAction
    {
        public int DamageType;
        public float Momentum;
        public float Amount;
        public float Radius;
        public int Instigator;
        public bool bHeal;
        public bool bRadial;
        public bool bFalloff;
    }
    public class SeqAct_ModifyObjectList : SeqAct_SetSequenceVariable
    {
        public int ListEntriesCount;
    }
    public class SeqAct_MultiLevelStreaming : SeqAct_LevelStreamingBase
    {
        public LevelStreamingNameCombo[] Levels;
        public bool bUnloadAllOtherLevels;
    }
    public class SeqAct_MultiplyFloat : SeqAct_SetSequenceVariable
    {
        public float ValueA;
        public float ValueB;
        public float FloatResult;
        public int IntResult;
    }
    public class SeqAct_MultiplyInt : SeqAct_SetSequenceVariable
    {
        public int ValueA;
        public int ValueB;
        public float FloatResult;
        public int IntResult;
    }
    public class SeqAct_ParticleEventGenerator : SequenceAction
    {
        public RwVector3 EventLocation;
        public RwVector3 EventDirection;
        public RwVector3 EventVelocity;
        public RwVector3 EventNormal;
        public string[] EventNames;
        public int Instigator;
        public float EventTime;
        public bool bEnabled;
        public bool bUseEmitterLocation;
    }
    public class SeqAct_PlayCameraAnim : SequenceAction
    {
        public int CameraAnim;
        public float BlendInTime;
        public float BlendOutTime;
        public float Rate;
        public float IntensityScale;
        public int UserDefinedSpaceActor;
        public bool bLoop;
        public bool bRandomStartTime;
        public ECameraAnimPlaySpace PlaySpace;
    }
    public class SeqAct_PlayFaceFXAnim : SequenceAction
    {
        public string FaceFXGroupName;
        public string FaceFXAnimName;
        public int FaceFXAnimSetRef;
        public int SoundCueToPlay;
    }
    public class SeqAct_PlayMusicTrack : SequenceAction
    {
        public MusicTrackStruct MusicTrack;
    }
    public class SeqAct_PlaySound : SeqAct_Latent
    {
        public int PlaySound;
        public float ExtraDelay;
        public float FadeInTime;
        public float FadeOutTime;
        public float VolumeMultiplier;
        public float PitchMultiplier;
        public bool bSuppressSubtitles;
    }
    public class SeqAct_Possess : SequenceAction
    {
        public bool bKillOldPawn;
        public bool bTryToLeaveVehicle;
    }
    public class SeqAct_PrepareMapChange : SeqAct_Latent
    {
        public NameReference[] InitiallyLoadedSecondaryLevelNames;
        public NameReference MainLevelName;
        public bool bIsHighPriority;
    }
    public class SeqAct_Switch : SequenceAction
    {
        public int[] Indices;
        public int LinkCount;
        public int IncrementAmount;
        public bool bLooping;
        public bool bAutoDisableLinks;
    }
    public class SeqAct_RandomSwitch : SeqAct_Switch
    {
        public int[] AutoDisabledIndices;
    }
    public class SeqAct_RangeSwitch : SequenceAction
    {
        public SwitchRange[] Ranges;
    }
    public class SeqAct_SetBlockRigidBody : SequenceAction
    {
    }
    public class SeqAct_SetBool : SeqAct_SetSequenceVariable
    {
        public bool Target;
        public bool DefaultValue;
    }
    public class SeqAct_SetCameraTarget : SequenceAction
    {
        public ViewTargetTransitionParams TransitionParams;
    }
    public class SeqAct_SetDamageInstigator : SequenceAction
    {
        public int DamageInstigator;
    }
    public class SeqAct_SetDOFParams : SeqAct_Latent
    {
        public Vector FocusPosition;
        public Vector OldFocusPosition;
        public float FalloffExponent;
        public float BlurKernelSize;
        public float MaxNearBlurAmount;
        public float MaxFarBlurAmount;
        public Color ModulateBlurColor;
        public float FocusInnerRadius;
        public float FocusDistance;
        public float InterpolateSeconds;
        public float InterpolateElapsed;
        public float OldFalloffExponent;
        public float OldBlurKernelSize;
        public float OldMaxNearBlurAmount;
        public float OldMaxFarBlurAmount;
        public Color OldModulateBlurColor;
        public float OldFocusInnerRadius;
        public float OldFocusDistance;
    }
    public class SeqAct_SetFloat : SeqAct_SetSequenceVariable
    {
        public float[] Value;
        public float Target;
    }
    public class SeqAct_SetInt : SeqAct_SetSequenceVariable
    {
        public int[] Value;
        public int Target;
    }
    public class SeqAct_SetLocation : SeqAct_SetSequenceVariable
    {
        public Vector LocationValue;
        public Rotator RotationValue;
        public int Target;
        public bool bSetLocation;
        public bool bSetRotation;
    }
    public class SeqAct_SetMaterial : SequenceAction
    {
        public int NewMaterial;
        public int MaterialIndex;
    }
    public class SeqAct_SetMatInstScalarParam : SequenceAction
    {
        public NameReference ParamName;
        public int MatInst;
        public float ScalarValue;
    }
    public class SeqAct_SetMatInstTexParam : SequenceAction
    {
        public NameReference ParamName;
        public int MatInst;
        public int NewTexture;
    }
    public class SeqAct_SetMatInstVectorParam : SequenceAction
    {
        public LinearColor VectorValue;
        public NameReference ParamName;
        public int MatInst;
    }
    public class SeqAct_SetMesh : SequenceAction
    {
        public int NewSkeletalMesh;
        public int NewStaticMesh;
        public bool bIsAllowedToMove;
        public bool bAllowDecalsToReattach;
        public EMeshType MeshType;
    }
    public class SeqAct_SetMotionBlurParams : SeqAct_Latent
    {
        public float MotionBlurAmount;
        public float InterpolateSeconds;
        public float InterpolateElapsed;
        public float OldMotionBlurAmount;
    }
    public class SeqAct_SetName : SeqAct_SetSequenceVariable
    {
        public NameReference Target;
        public NameReference Value;
    }
    public class SeqAct_SetObject : SeqAct_SetSequenceVariable
    {
        public int DefaultValue;
        public int Value;
    }
    public class SeqAct_SetParticleSysParam : SequenceAction
    {
        public ParticleSysParam[] InstanceParameters;
        public float ScalarValue;
        public bool bOverrideScalar;
    }
    public class SeqAct_SetPhysics : SequenceAction
    {
        public EPhysics newPhysics;
    }
    public class SeqAct_SetRigidBodyIgnoreVehicles : SequenceAction
    {
    }
    public class SeqAct_SetSkelControlTarget : SequenceAction
    {
        public int[] TargetActors;
        public NameReference SkelControlName;
    }
    public class SeqAct_SetSoundMode : SequenceAction
    {
        public int SoundMode;
        public bool bTopPriority;
    }
    public class SeqAct_SetString : SeqAct_SetSequenceVariable
    {
        public string Target;
        public string Value;
    }
    public class SeqAct_SetVector : SeqAct_SetSequenceVariable
    {
        public Vector DefaultValue;
    }
    public class SeqAct_SetVectorComponents : SequenceAction
    {
        public Vector OutVector;
        public float X;
        public float Y;
        public float Z;
    }
    public class SeqAct_SetVelocity : SequenceAction
    {
        public Vector VelocityDir;
        public float VelocityMag;
        public bool bVelocityRelativeToActorRotation;
    }
    public class SeqAct_StreamInTextures : SeqAct_Latent
    {
        public int[] LocationActors;
        public int[] ForceMaterials;
        public float Seconds;
        public float StopTimestamp;
        public TextureGroupContainer CinematicTextureGroups;
        public bool bStreamingActive;
    }
    public class SeqAct_SubtractFloat : SeqAct_SetSequenceVariable
    {
        public float ValueA;
        public float ValueB;
        public float FloatResult;
        public int IntResult;
    }
    public class SeqAct_SubtractInt : SeqAct_SetSequenceVariable
    {
        public int ValueA;
        public int ValueB;
        public float FloatResult;
        public int IntResult;
    }
    public class SeqAct_Teleport : SequenceAction
    {
        public Vector m_vSFXTeleportLocation;
        public Rotator m_rSFXTeleportRotation;
        public bool bUpdateRotation;
        public bool m_bPreserveVelocity;
        public bool m_bSnapToFloor;
        public bool m_bSFXTeleportDataIsValid;
        public bool m_bSFXCreatedBeforeStuntActorLocationChange;
    }
    public class SeqAct_Timer : SequenceAction
    {
        public float Time;
    }
    public class SeqAct_Toggle : SequenceAction
    {
    }
    public class SeqAct_ToggleAffectedByHitEffects : SequenceAction
    {
    }
    public class SeqAct_ToggleCinematicMode : SequenceAction
    {
        public bool bDisableMovement;
        public bool bDisableTurning;
        public bool bHidePlayer;
        public bool bDisableInput;
        public bool bHideHUD;
        public bool bDeadBodies;
        public bool bDroppedPickups;
    }
    public class SeqAct_ToggleConstraintDrive : SequenceAction
    {
        public bool bEnableAngularPositionDrive;
        public bool bEnableAngularVelocityDrive;
        public bool bEnableLinearPositionDrive;
        public bool bEnableLinearvelocityDrive;
    }
    public class SeqAct_ToggleGodMode : SequenceAction
    {
    }
    public class SeqAct_ToggleHidden : SeqAct_Toggle
    {
        public int[] IgnoreBasedClasses;
        public bool bToggleBasedActors;
    }
    public class SeqAct_ToggleHUD : SequenceAction
    {
        public bool bLevelStartupEventForceOff;
    }
    public class SeqAct_ToggleInput : SeqAct_Toggle
    {
        public bool bToggleMovement;
        public bool bToggleTurning;
    }
    public class SeqAct_Trace : SequenceAction
    {
        public Vector TraceExtent;
        public Vector StartOffset;
        public Vector EndOffset;
        public Vector HitLocation;
        public int HitObject;
        public float Distance;
        public bool bTraceActors;
        public bool bTraceWorld;
    }
    public class SeqAct_UpdatePhysBonesFromAnim : SequenceAction
    {
    }
    public class SeqAct_WaitForLevelsVisible : SeqAct_Latent
    {
        public NameReference[] LevelNames;
        public bool bShouldBlockOnLoad;
    }
    public class SequenceCondition : SequenceOp
    {
    }
    public class SeqCond_CompareBool : SequenceCondition
    {
    }
    public class SeqCond_CompareFloat : SequenceCondition
    {
        public float ValueA;
        public float ValueB;
    }
    public class SeqCond_CompareInt : SequenceCondition
    {
        public int ValueA;
        public int ValueB;
    }
    public class SeqCond_CompareName : SequenceCondition
    {
        public NameReference ValueA;
        public NameReference ValueB;
    }
    public class SeqCond_CompareObject : SequenceCondition
    {
    }
    public class SeqCond_CompareString : SequenceCondition
    {
        public string ValueA;
        public string ValueB;
    }
    public class SeqCond_GetServerType : SequenceCondition
    {
    }
    public class SeqCond_Increment : SequenceCondition
    {
        public int IncrementAmount;
        public int ValueA;
        public int ValueB;
    }
    public class SeqCond_IncrementFloat : SequenceCondition
    {
        public float IncrementAmount;
        public float ValueA;
        public float ValueB;
    }
    public class SeqCond_IsAlive : SequenceCondition
    {
    }
    public class SeqCond_IsConsole : SequenceCondition
    {
    }
    public class SeqCond_IsInCombat : SequenceCondition
    {
    }
    public class SeqCond_IsLoggedIn : SequenceCondition
    {
        public int NumNeededLoggedIn;
    }
    public class SeqCond_IsSameTeam : SequenceCondition
    {
    }
    public class SeqCond_SwitchBase : SequenceCondition
    {
    }
    public class SeqCond_SwitchClass : SeqCond_SwitchBase
    {
        public SwitchClassInfo[] ClassArray;
    }
    public class SeqCond_SwitchObject : SeqCond_SwitchBase
    {
        public SwitchObjectCase[] SupportedValues;
        public int MetaClass;
    }
    public class SeqCond_SwitchPlatform : SequenceCondition
    {
    }
    public class SequenceEvent : SequenceOp
    {
        public NameReference[] lstTags;
        public int Originator;
        public int Instigator;
        public float ActivationTime;
        public int TriggerCount;
        public int MaxTriggerCount;
        public float ReTriggerDelay;
        public int MaxWidth;
        public bool bEnabled;
        public bool bTagListInclusionary;
        public bool bClientSideOnly;
        public byte Priority;
        public EWhoTriggers WhoTriggers;
    }
    public class SeqEvent_AIReachedRouteActor : SequenceEvent
    {
    }
    public class SeqEvent_AISeeEnemy : SequenceEvent
    {
        public float MaxSightDistance;
    }
    public class SeqEvent_AnimNotify : SequenceEvent
    {
        public NameReference NotifyName;
    }
    public class SeqEvent_Console : SequenceEvent
    {
        public string EventDesc;
        public NameReference ConsoleEventName;
    }
    public class SeqEvent_ConstraintBroken : SequenceEvent
    {
    }
    public class SeqEvent_Death : SequenceEvent
    {
    }
    public class SeqEvent_Destroyed : SequenceEvent
    {
    }
    public class SeqEvent_GetInventory : SequenceEvent
    {
    }
    public class SeqEvent_HitWall : SequenceEvent
    {
    }
    public class SeqEvent_LevelBeginning : SequenceEvent
    {
    }
    public class SeqEvent_LevelLoaded : SequenceEvent
    {
    }
    public class SeqEvent_LevelStartup : SequenceEvent
    {
    }
    public class SeqEvent_LOS : SequenceEvent
    {
        public float ScreenCenterDistance;
        public float TriggerDistance;
        public bool bCheckForObstructions;
    }
    public class SeqEvent_Mover : SequenceEvent
    {
        public float StayOpenTime;
    }
    public class SeqEvent_ParticleEvent : SequenceEvent
    {
        public Vector EventPosition;
        public Vector EventVelocity;
        public Vector EventNormal;
        public float EventEmitterTime;
        public float EventParticleTime;
        public bool UseRelfectedImpactVector;
        public EParticleEventOutputType EventType;
    }
    public class SeqEvent_PickupStatusChange : SequenceEvent
    {
    }
    public class SeqEvent_PlayerSpawned : SequenceEvent
    {
        public int SpawnPoint;
    }
    public class SeqEvent_ProjectileLanded : SequenceEvent
    {
        public float MaxDistance;
    }
    public class SeqEvent_RemoteEvent : SequenceEvent
    {
        public RemoteEventParameter[] Parameters;
        public NameReference EventName;
    }
    public class SeqEvent_RigidBodyCollision : SequenceEvent
    {
        public float MinCollisionVelocity;
    }
    public class SeqEvent_SeeDeath : SequenceEvent
    {
    }
    public class SeqEvent_SequenceActivated : SequenceEvent
    {
        public string InputLabel;
    }
    public class SeqEvent_TakeDamage : SequenceEvent
    {
        public int[] DamageTypes;
        public int[] IgnoreDamageTypes;
        public Vector vHitLocation;
        public float MinDamageAmount;
        public float DamageThreshold;
        public float CurrentDamage;
        public int oDamagedActor;
        public bool bResetDamageOnToggle;
    }
    public class SeqEvent_Touch : SequenceEvent
    {
        public int[] ClassProximityTypes;
        public int[] IgnoredClassProximityTypes;
        public int[] TouchedList;
        public bool bForceOverlapping;
        public bool bUseInstigator;
        public bool m_bIgnoreVehicleTransitions;
        public bool bAllowDeadPawns;
    }
    public class SeqEvent_Used : SequenceEvent
    {
        public string InteractText;
        public int[] ClassProximityTypes;
        public int[] IgnoredClassProximityTypes;
        public float InteractDistance;
        public int InteractIcon;
        public bool bAimToInteract;
    }
    public class SequenceFrame : SequenceObject
    {
    }
    public class SequenceFrameWrapped : SequenceFrame
    {
    }
    public class SequenceReference : Sequence
    {
        public int oSequenceReference;
        public int oDependentPackage;
    }
    public class SeqVar_Bool : SequenceVariable
    {
        public int bValue;
    }
    public class SeqVar_Byte : SequenceVariable
    {
    }
    public class SeqVar_Object : SequenceVariable
    {
        public int[] SupportedClasses;
        public int ObjValue;
        public bool m_bBioPauseAmbPerfOnStart;
        public bool m_bBioUnpauseAmbPerfOnEnd;
        public bool m_bBioRestoreInitialPoseOnEnd;
        public bool m_bBioSkipInitialPlacement;
        public bool m_bBioRestoreInitialLocationOnEnd;
        public bool m_bBioDisableLookAt;
    }
    public class SeqVar_Character : SeqVar_Object
    {
        public int PawnClass;
    }
    public class SeqVar_External : SequenceVariable
    {
        public string VariableLabel;
        public int ExpectedType;
    }
    public class SeqVar_Float : SequenceVariable
    {
        public float FloatValue;
    }
    public class SeqVar_Group : SeqVar_Object
    {
        public NameReference GroupName;
    }
    public class SeqVar_Int : SequenceVariable
    {
        public int IntValue;
    }
    public class SeqVar_Name : SequenceVariable
    {
        public NameReference NameValue;
    }
    public class SeqVar_Named : SequenceVariable
    {
        public int ExpectedType;
        public NameReference FindVarName;
    }
    public class SeqVar_ObjectList : SeqVar_Object
    {
        public int[] ObjList;
    }
    public class SeqVar_ObjectVolume : SeqVar_Object
    {
        public int[] ContainedObjects;
        public int[] ExcludeClassList;
        public float LastUpdateTime;
        public bool bCollidingOnly;
    }
    public class SeqVar_Player : SeqVar_Object
    {
        public int PlayerIdx;
        public bool bAllPlayers;
        public bool bReturnPawns;
    }
    public class SeqVar_RandomFloat : SeqVar_Float
    {
        public float Min;
        public float Max;
    }
    public class SeqVar_RandomInt : SeqVar_Int
    {
        public int Min;
        public int Max;
    }
    public class SeqVar_ScopedNamed : SeqVar_Named
    {
    }
    public class SeqVar_String : SequenceVariable
    {
        public string StrValue;
    }
    public class SeqVar_Union : SequenceVariable
    {
    }
    public class SeqVar_UniqueNetId : SequenceVariable
    {
    }
    public class SeqVar_Vector : SequenceVariable
    {
        public Vector VectValue;
    }
    public class UISettingsProvider : UIPropertyDataProvider
    {
        public NameReference ProviderTag;
    }
    public class SessionSettingsProvider : UISettingsProvider
    {
        public int ProviderClientClass;
        public int ProviderClientMetaClass;
    }
    public class SessionSettingsProvider_GameInfo : SessionSettingsProvider
    {
    }
    public class SFXDynamicCoverLink : CoverLink
    {
        public int m_aContainingActor;
    }
    public class SFXDynamicCoverSlotMarker : CoverSlotMarker
    {
    }
    public class SFXDynamicPathNode : NavigationPoint
    {
        public int m_aContainingActor;
    }
    public class SFXInterpAuditionHelperInterface : Object
    {
    }
    public class SFXLightProbe : Actor
    {
        public int LightRig;
    }
    public class SFXLightProbeBlendVolume : Volume
    {
        public int[] LightProbes;
    }
    public class SFXLightRig : Object
    {
        public SHVectorRGB LightEnvironment;
        public SHVectorRGB NonShadowedLightEnvironment;
        public LinearColor KeyLightModifier;
        public LinearColor FillLightModifier;
        public LinearColor AmbientLightModifier;
        public LinearColor TotalShadowIntensity;
        public Vector ShadowDirection;
    }
    public class SFXModule : Object
    {
        public bool bTickWhilePaused;
        public bool bUserCreated;
    }
    public class SFXModule_DamageBase : SFXModule
    {
    }
    public class SFXPointLightComponent : PointLightComponent
    {
        public bool bUseVSMShadows;
    }
    public class SFXSceneGroup : InterpGroup
    {
        public BioResourcePreloadItem[] m_aBioPreloadData;
        public float m_fSceneLength;
        public float m_fPlayRate;
    }
    public class SFXSceneShopDataInstInterface : Object
    {
        public int m_pSceneGameData;
    }
    public class SFXSceneShopEditorDataInst : SFXSceneShopDataInstInterface
    {
        public MultiMap_Mirror m_mapGroupsToPreview;
        public int[] m_aPreviewNodes;
        public int[] m_aAllPreviewGroups;
        public float m_fPreviewPosition;
    }
    public class SFXSceneShopGameData : Object
    {
        public int[] m_aNodes;
    }
    public class SFXSceneShopGameDataInst : SFXSceneShopDataInstInterface
    {
        public MultiMap_Mirror m_mapSceneTree;
        public Map_Mirror m_mapPlayingScenes;
        public MultiMap_Mirror m_mapSceneGroups;
        public bool m_bProcessingScenes;
    }
    public class SFXSceneShopNode : Object
    {
        public SFXSSNodePin[] m_aOutputPins;
        public SFXSSNodePin[] m_aInputPins;
    }
    public class SFXSeqAct_SetAimTarget : SequenceAction
    {
        public int AimTarget;
    }
    public class UberPostProcessEffect : DOFBloomMotionBlurEffect
    {
        public Vector SceneShadows;
        public Vector SceneHighLights;
        public Vector SceneMidTones;
        public float SceneDesaturation;
        public float EdgeDetectionThreshold;
        public bool EnableDOF;
        public bool EnableBloom;
        public bool EnableColorMapping;
        public bool EnableMotionBlur;
        public EPostProcessAAType PostProcessAAType;
    }
    public class TextureFlipBook : Texture2D
    {
        public Pointer VfTable_FTickableObject;
        public Pointer ReleaseResourcesFence;
        public int HorizontalImages;
        public int VerticalImages;
        public float FrameRate;
        public float FrameTime;
        public bool bPaused;
        public bool bStopped;
        public bool bLooping;
        public bool bAutoPlay;
        public TextureFlipBookMethod FBMethod;
    }
    public class SFXUberPostProcessEffect : UberPostProcessEffect
    {
        public int FilmGrainTexture;
        public int VignetteMaterial;
        public int FilmGrainAndVignetteMaterial;
        public int FilmGrainMaterial;
        public bool EnableFilmicResponse;
        public bool EnableVignette;
        public bool EnableFilmgrain;
        public bool EnableHardwareGamma;
        public bool EnableMergedMaterialEffects;
    }
    public class ShadowMap2D : Object
    {
        public int Texture;
        public Vector2D CoordinateScale;
        public Vector2D CoordinateBias;
        public Guid LightGuid;
        public bool bIsShadowFactorTexture;
    }
    public class ShadowMapTexture2D : Texture2D
    {
        public int ShadowmapFlags;
    }
    public class SkelControlBase : AnimObject
    {
        public NameReference[] StrengthAnimNodeNameList;
        public NameReference ControlName;
        public float ControlStrength;
        public float BlendInTime;
        public float BlendOutTime;
        public float StrengthTarget;
        public float BoneScale;
        public int IgnoreAtOrAboveLOD;
        public int NextControl;
        public bool bPostPhysicsController;
        public bool bSetStrengthFromAnimNode;
        public bool bControlledByAnimMetada;
        public bool bPropagateSetActive;
        public bool bIgnoreWhenNotRendered;
        public bool bShouldTickInScript;
        public AlphaBlendType BlendType;
    }
    public class SkelControl_CCD_IK : SkelControlBase
    {
        public float[] AngleConstraint;
        public Vector EffectorLocation;
        public Vector EffectorTranslationFromBone;
        public NameReference EffectorSpaceBoneName;
        public int NumBones;
        public int MaxPerBoneIterations;
        public int IterationsCount;
        public float Precision;
        public float MaxAngleSteps;
        public bool bStartFromTail;
        public bool bNoTurnOptimization;
        public EBoneControlSpace EffectorLocationSpace;
    }
    public class SkelControl_TwistBone : SkelControlBase
    {
        public NameReference SourceBoneName;
        public float TwistAngleScale;
    }
    public class SkelControlLimb : SkelControlBase
    {
        public Vector EffectorLocation;
        public Vector JointTargetLocation;
        public NameReference EffectorSpaceBoneName;
        public NameReference JointTargetSpaceBoneName;
        public Vector2D StretchLimits;
        public NameReference StretchRollBoneName;
        public bool bInvertBoneAxis;
        public bool bInvertJointAxis;
        public bool bMaintainEffectorRelRot;
        public bool bTakeRotationFromEffectorSpace;
        public bool bAllowStretching;
        public EBoneControlSpace EffectorLocationSpace;
        public EBoneControlSpace JointTargetLocationSpace;
        public EAxis BoneAxis;
        public EAxis JointAxis;
    }
    public class SkelControlFootPlacement : SkelControlLimb
    {
        public Rotator FootRotOffset;
        public float FootOffset;
        public float MaxUpAdjustment;
        public float MaxDownAdjustment;
        public float MaxFootOrientAdjust;
        public bool bInvertFootUpAxis;
        public bool bOrientFootToGround;
        public bool bOnlyEnableForUpAdjustment;
        public EAxis FootUpAxis;
    }
    public class SkelControlSingleBone : SkelControlBase
    {
        public Vector BoneTranslation;
        public Rotator BoneRotation;
        public NameReference TranslationSpaceBoneName;
        public NameReference RotationSpaceBoneName;
        public bool bApplyTranslation;
        public bool bApplyRotation;
        public bool bAddTranslation;
        public bool bAddRotation;
        public bool bRemoveMeshRotation;
        public EBoneControlSpace BoneTranslationSpace;
        public EBoneControlSpace BoneRotationSpace;
    }
    public class SkelControlHandlebars : SkelControlSingleBone
    {
        public NameReference WheelBoneName;
        public int SteerWheelBoneIndex;
        public bool bInvertRotation;
        public EAxis WheelRollAxis;
        public EAxis HandlebarRotateAxis;
    }
    public class SkelControlLookAt : SkelControlBase
    {
        public Vector TargetLocation;
        public Vector DesiredTargetLocation;
        public NameReference TargetSpaceBoneName;
        public NameReference AllowRotationOtherBoneName;
        public float TargetLocationInterpSpeed;
        public float MaxAngle;
        public float OuterMaxAngle;
        public float DeadZoneAngle;
        public bool bInvertLookAtAxis;
        public bool bDefineUpAxis;
        public bool bInvertUpAxis;
        public bool bEnableLimit;
        public bool bLimitBasedOnRefPose;
        public bool bDisableBeyondLimit;
        public bool bNotifyBeyondLimit;
        public bool bShowLimit;
        public bool bAllowRotationX;
        public bool bAllowRotationY;
        public bool bAllowRotationZ;
        public EBoneControlSpace TargetLocationSpace;
        public EAxis LookAtAxis;
        public EAxis UpAxis;
        public EBoneControlSpace AllowRotationSpace;
    }
    public class SkelControlSpline : SkelControlBase
    {
        public int SplineLength;
        public float EndSplineTension;
        public float StartSplineTension;
        public bool bInvertSplineBoneAxis;
        public EAxis SplineBoneAxis;
        public ESplineControlRotMode BoneRotMode;
    }
    public class SkelControlTrail : SkelControlBase
    {
        public Vector FakeVelocity;
        public int ChainLength;
        public float TrailRelaxation;
        public float StretchLimit;
        public float ThisTimstep;
        public bool bInvertChainBoneAxis;
        public bool bLimitStretch;
        public bool bActorSpaceFakeVel;
        public bool bHadValidStrength;
        public EAxis ChainBoneAxis;
    }
    public class SkelControlWheel : SkelControlSingleBone
    {
        public float WheelMaxRenderDisplacement;
        public bool bInvertWheelRoll;
        public bool bInvertWheelSteering;
        public EAxis WheelRollAxis;
        public EAxis WheelSteeringAxis;
    }
    public class SkeletalMesh : Object
    {
        public Vector ValidBoundsMin;
        public Vector ValidBoundsMax;
        public Rotator RotOrigin;
        public Vector Origin;
        public IndirectArray_Mirror LODModels;
        public Map_Mirror ClothTornTriMap;
        public int SoftBodySubdivisionLevel;
        public int SoftBodySolverIterations;
        public int SkeletalDepth;
        public int NumFreeClothVerts;
        public int LODBiasXbox360;
        public int LODBiasPS3;
        public int LODBiasPC;
        public int ClothWeldingDomain;
        public int ClothTearReserve;
        public int ClothIterations;
        public int ClothHierarchyLevels;
        public int ClothHierarchicalIterations;
        public float SoftBodyVolumeStiffness;
        public float SoftBodyStretchingStiffness;
        public float SoftBodySleepLinearVelocity;
        public float SoftBodyRelativeGridSpacing;
        public float SoftBodyParticleRadius;
        public float SoftBodyFriction;
        public float SoftBodyDetailLevel;
        public float SoftBodyDensity;
        public float SoftBodyDamping;
        public float SoftBodyCollisionResponse;
        public float SoftBodyAttachmentThreshold;
        public float SoftBodyAttachmentTearFactor;
        public float SoftBodyAttachmentResponse;
        public float HardStretchLimitFactor;
        public float ClothToAnimMeshMaxDist;
        public float ClothThickness;
        public float ClothTearFactor;
        public float ClothStretchStiffness;
        public float ClothSleepLinearVelocity;
        public float ClothRelativeGridSpacing;
        public float ClothPressure;
        public float ClothMetalPenetrationDepth;
        public float ClothMetalMaxDeformationDistance;
        public float ClothMetalImpulseThreshold;
        public float ClothFriction;
        public float ClothDensity;
        public float ClothDamping;
        public float ClothCollisionResponseCoefficient;
        public float ClothBendStiffness;
        public float ClothAttachmentTearFactor;
        public float ClothAttachmentResponseCoefficient;
        public EAxis SkelMirrorFlipAxis;
        public EAxis SkelMirrorAxis;
        public ClothMovementScaleGen ClothMovementScaleGenMode;
        public bool bUseSoftBodyCOMDamping;
        public bool bUseSimpleLineCollision;
        public bool bUseSimpleBoxCollision;
        public bool bUsePackedPosition;
        public bool bUseFullPrecisionUVs;
        public bool bUseClothCOMDamping;
        public bool bSoftBodyIsoSurface;
        public bool bPerPolyUseSoftWeighting;
        public bool bLimitClothToAnimMesh;
        public bool bHardStretchLimit;
        public bool bForceNoWelding;
        public bool bForceCPUSkinning;
        public bool bEnableValidBounds;
        public bool bEnableSoftBodyTwoWayCollision;
        public bool bEnableSoftBodySelfCollision;
        public bool bEnableSoftBodyLineChecks;
        public bool bEnableSoftBodyDamping;
        public bool bEnableClothTwoWayCollision;
        public bool bEnableClothTearing;
        public bool bEnableClothSelfCollision;
        public bool bEnableClothPressure;
        public bool bEnableClothOrthoBendConstraints;
        public bool bEnableClothLineChecks;
        public bool bEnableClothDamping;
        public bool bEnableClothBendConstraints;
        public bool bClothMetal;
        public Vector[] SoftBodyTetraVertsUnscaled;
        public SoftBodyTetraLink[] SoftBodyTetraLinks;
        public int[] SoftBodyTetraIndices;
        public int[] SoftBodySurfaceToGraphicsVertMap;
        public int[] SoftBodySurfaceIndices;
        public SoftBodySpecialBoneInfo[] SoftBodySpecialBones;
        public NameReference[] SoftBodyBones;
        public int[] Sockets;
        public BoneMirrorInfo[] SkelMirrorTable;
        public BoxSphereBounds Bounds;
        public int[] RefSkeleton;
        public BoneTransform[] RefBasesInvMatrix;
        public NameReference[] PerPolyCollisionBones;
        public int[] PerPolyBoneKDOPs;
        public int[] Materials;
        public SkeletalMeshLODInfo[] LODInfo;
        public bool[] GraphicsIndexIsCloth;
        public int[] ClothWeldingMap;
        public int[] ClothWeldedIndices;
        public int[] ClothToGraphicsVertMap;
        public ClothSpecialBoneInfo[] ClothSpecialBones;
        public float[] ClothMovementScale;
        public int[] ClothingAssets;
        public int[] ClothIndexBuffer;
        public NameReference[] ClothBones;
        public string[] BoneBreakNames;
        public NameReference[] AddToParentPerPolyCollisionBone;
    }
    public class SkeletalMeshActor : Actor
    {
        public SkelMeshActorControlTarget[] ControlTargets;
        public int SkeletalMeshComponent;
        public int LightEnvironment;
        public int FacialAudioComp;
        public int ReplicatedMaterial;
        public bool bDamageAppliesImpulse;
        public bool bCheckpointSaveRotation;
        public bool bShouldDoAnimNotifies;
    }
    public class SkeletalMeshActorBasedOnExtremeContent : SkeletalMeshActor
    {
        public SkelMaterialSetterDatum[] ExtremeContent;
        public SkelMaterialSetterDatum[] NonExtremeContent;
    }
    public class SkeletalMeshCinematicActor : SkeletalMeshActor
    {
    }
    public class SkeletalMeshActorMAT : SkeletalMeshCinematicActor
    {
    }
    public class SkeletalMeshActorMATSpawnable : SkeletalMeshActorMAT
    {
    }
    public class SkeletalMeshActorSpawnable : SkeletalMeshActor
    {
    }
    public class SkeletalMeshSocket : Object
    {
        public Vector RelativeLocation;
        public Rotator RelativeRotation;
        public Vector RelativeScale;
        public NameReference SocketName;
        public NameReference BoneName;
        public NameReference SupermodelName;
    }
    public class SkyLightComponent : LightComponent
    {
        public float LowerBrightness;
        public Color LowerColor;
    }
    public class SkyLight : Light
    {
    }
    public class SkyLightToggleable : SkyLight
    {
    }
    public class SlotToSlotReachSpec : ForcedReachSpec
    {
        public byte SpecDirection;
    }
    public class SoundClass : Object
    {
        public NameReference[] ChildClassNames;
        public SoundClassProperties Properties;
        public bool bIsChild;
    }
    public class WwiseBaseSoundObject : Object
    {
    }
    public class SoundCue : WwiseBaseSoundObject
    {
        public string FaceFXGroupName;
        public string FaceFXAnimName;
        public NameReference SoundClass;
        public int FirstNode;
        public float VolumeMultiplier;
        public float PitchMultiplier;
        public float Duration;
        public int FaceFXAnimSetRef;
        public int MaxConcurrentPlayCount;
    }
    public class SoundMode : Object
    {
        public AudioEQEffect EQSettings;
        public SoundClassAdjuster[] SoundClassEffects;
        public float InitialDelay;
        public float FadeInTime;
        public float Duration;
        public float FadeOutTime;
        public bool bApplyEQ;
    }
    public class SoundNodeConcatenator : SoundNode
    {
        public float[] InputVolume;
    }
    public class SoundNodeDelay : SoundNode
    {
        public float DelayMin;
        public float DelayMax;
    }
    public class SoundNodeDistanceCrossFade : SoundNode
    {
        public DistanceDatum[] CrossFadeInput;
    }
    public class SoundNodeLooping : SoundNode
    {
        public float LoopCountMin;
        public float LoopCountMax;
        public bool bLoopIndefinitely;
    }
    public class SoundNodeMature : SoundNode
    {
    }
    public class SoundNodeMixer : SoundNode
    {
        public float[] InputVolume;
    }
    public class SoundNodeModulator : SoundNode
    {
        public float PitchMin;
        public float PitchMax;
        public float VolumeMin;
        public float VolumeMax;
    }
    public class SoundNodeModulatorContinuous : SoundNode
    {
        public RawDistributionFloat PitchModulation;
        public RawDistributionFloat VolumeModulation;
    }
    public class SoundNodeOscillator : SoundNode
    {
        public float AmplitudeMin;
        public float AmplitudeMax;
        public float FrequencyMin;
        public float FrequencyMax;
        public float OffsetMin;
        public float OffsetMax;
        public float CenterMin;
        public float CenterMax;
        public bool bModulateVolume;
        public bool bModulatePitch;
    }
    public class SoundNodeRandom : SoundNode
    {
        public float[] Weights;
        public bool bRandomizeWithoutReplacement;
    }
    public class SoundNodeWave : SoundNode
    {
        public UntypedBulkData_Mirror RawData;
        public UntypedBulkData_Mirror CompressedPCData;
        public UntypedBulkData_Mirror CompressedXbox360Data;
        public UntypedBulkData_Mirror CompressedPS3Data;
        public string SpokenText;
        public int[] ChannelOffsets;
        public int[] ChannelSizes;
        public SubtitleCue[] Subtitles;
        public LocalizedSubtitle[] LocalizedSubtitles;
        public Pointer VorbisDecompressor;
        public Pointer RawPCMData;
        public Pointer ResourceData;
        public int CompressionQuality;
        public float Volume;
        public float Pitch;
        public float Duration;
        public int NumChannels;
        public int SampleRate;
        public int RawPCMDataSize;
        public bool bForceRealTimeDecompression;
        public bool bLoopingSound;
        public bool bUseTTS;
        public bool bMature;
        public bool bManualWordWrap;
        public ETTSSpeaker TTSSpeaker;
    }
    public class SoundNodeWaveParam : SoundNode
    {
        public NameReference WaveParameterName;
    }
    public class SoundNodeWaveStreaming : SoundNodeWave
    {
        public byte[] QueuedAudio;
    }
    public class SpeechRecognition : Object
    {
        public RecogUserData InstanceData;
        public string Language;
        public RecogVocabulary[] Vocabularies;
        public byte[] VoiceData;
        public byte[] WorkingVoiceData;
        public byte[] UserData;
        public Pointer FnxVoiceData;
        public float ConfidenceThreshhold;
    }
    public class SpeedTree : Object
    {
        public Pointer SRH;
        public Guid LightingGuid;
        public Vector WindDirection;
        public float LeafStaticShadowOpacity;
        public int Branch1Material;
        public int Branch2Material;
        public int FrondMaterial;
        public int LeafCardMaterial;
        public int LeafMeshMaterial;
        public int BillboardMaterial;
        public float WindStrength;
        public bool bLegacySpeedTree;
    }
    public class SpeedTreeComponent : PrimitiveComponent
    {
        public Matrix RotationOnlyMatrix;
        public SpeedTreeStaticLight[] StaticLights;
        public LightMapRef BranchLightMap;
        public LightMapRef FrondLightMap;
        public LightMapRef LeafMeshLightMap;
        public LightMapRef LeafCardLightMap;
        public LightMapRef BillboardLightMap;
        public LightmassPrimitiveSettings LightmassSettings;
        public int SpeedTree;
        public float Lod3DStart;
        public float Lod3DEnd;
        public float LodBillboardStart;
        public float LodBillboardEnd;
        public float LodLevelOverride;
        public int Branch1Material;
        public int Branch2Material;
        public int FrondMaterial;
        public int LeafCardMaterial;
        public int LeafMeshMaterial;
        public int BillboardMaterial;
        public bool bUseLeafCards;
        public bool bUseLeafMeshes;
        public bool bUseBranches;
        public bool bUseFronds;
        public bool bUseBillboards;
    }
    public class SpeedTreeActor : Actor
    {
        public int SpeedTreeComponent;
    }
    public class SpeedTreeActorFactory : ActorFactory
    {
        public int SpeedTree;
    }
    public class SpeedTreeComponentFactory : PrimitiveComponentFactory
    {
        public int SpeedTreeComponent;
    }
    public class SphericalHarmonicLightComponent : LightComponent
    {
        public SHVectorRGB WorldSpaceIncidentLighting;
        public bool bRenderBeforeModShadows;
    }
    public class SplineActor : Actor
    {
        public InterpCurveFloat SplineVelocityOverTime;
        public SplineConnection[] Connections;
        public int[] LinksFrom;
        public Vector SplineActorTangent;
        public Color SplineColor;
        public bool bDisableDestination;
    }
    public class SplineComponent : PrimitiveComponent
    {
        public InterpCurveVector SplineInfo;
        public InterpCurveFloat SplineReparamTable;
        public float SplineCurviness;
        public Color SplineColor;
        public float SplineDrawRes;
        public float SplineArrowSize;
        public bool bSplineDisabled;
    }
    public class SplineLoftActor : SplineActor
    {
        public int[] SplineMeshComps;
        public int[] DeformMeshMaterials;
        public Vector WorldXDir;
        public Vector2D Offset;
        public float ScaleX;
        public float ScaleY;
        public int DeformMesh;
        public float Roll;
        public bool bSmoothInterpRollAndScale;
        public bool bAcceptsLights;
        public bool bCastShadow;
    }
    public class SplineMeshComponent : StaticMeshComponent
    {
        public SplineMeshParams SplineParams;
        public Vector SplineXDir;
        public bool bSmoothInterpRollScale;
    }
    public class SpotLightMovable : SpotLight
    {
    }
    public class SpotLightToggleable : SpotLight
    {
    }
    public class StaticLightCollectionActor : Light
    {
        public int[] LightComponents;
        public int MaxLightComponents;
    }
    public class StaticMeshActorBasedOnExtremeContent : Actor
    {
        public SMMaterialSetterDatum[] ExtremeContent;
        public SMMaterialSetterDatum[] NonExtremeContent;
        public int StaticMeshComponent;
    }
    public class StaticMeshCollectionActor : StaticMeshActorBase
    {
        public int[] StaticMeshComponents;
        public int MaxStaticMeshComponents;
    }
    public class StaticMeshComponentFactory : MeshComponentFactory
    {
        public int StaticMesh;
    }
    public class Vehicle : Pawn
    {
        public Vector[] ExitPositions;
        public int CrushedDamageType;
        public Vector ExitOffset;
        public Vector TargetLocationAdjustment;
        public int Driver;
        public float ExitRadius;
        public float Steering;
        public float Throttle;
        public float Rise;
        public float DriverDamageMult;
        public float MomentumMult;
        public float MinCrushSpeed;
        public float ForceCrushPenetration;
        public float ThrottleTime;
        public float StuckTime;
        public float OldSteering;
        public float OnlySteeringStartTime;
        public float OldThrottle;
        public float AIMoveCheckTime;
        public float VehicleMovingTime;
        public float TurnTime;
        public bool bDriving;
        public bool bDriverIsVisible;
        public bool bAttachDriver;
        public bool bTurnInPlace;
        public bool bSeparateTurretFocus;
        public bool bFollowLookDir;
        public bool bHasHandbrake;
        public bool bScriptedRise;
        public bool bDuckObstacles;
        public bool bAvoidReversing;
        public bool bRetryPathfindingWithDriver;
        public bool bIgnoreStallZ;
        public bool bDoExtraNetRelevancyTraces;
        public byte StuckCount;
    }
    public class SVehicle : Vehicle
    {
        public VehicleState VState;
        public int[] Wheels;
        public Vector COMOffset;
        public Vector InertiaTensorMultiplier;
        public Vector BaseOffset;
        public int SimObj;
        public float StayUprightRollResistAngle;
        public float StayUprightPitchResistAngle;
        public float StayUprightStiffness;
        public float StayUprightDamping;
        public float HeavySuspensionShiftPercent;
        public float MaxSpeed;
        public float MaxAngularVelocity;
        public float TimeOffGround;
        public float UprightLiftStrength;
        public float UprightTorqueStrength;
        public float UprightTime;
        public float UprightStartTime;
        public int EngineSound;
        public int SquealSound;
        public int CollisionSound;
        public int EnterVehicleSound;
        public int ExitVehicleSound;
        public float CollisionIntervalSecs;
        public float SquealThreshold;
        public float SquealLatThreshold;
        public float LatAngleVolumeMult;
        public float EngineStartOffsetSecs;
        public float EngineStopOffsetSecs;
        public float LastCollisionSoundTime;
        public float OutputBrake;
        public float OutputGas;
        public float OutputSteering;
        public float OutputRise;
        public float ForwardVel;
        public int NumPoweredWheels;
        public float CamDist;
        public int DriverViewPitch;
        public int DriverViewYaw;
        public float AngErrorAccumulator;
        public float RadialImpulseScaling;
        public int StayUprightConstraintSetup;
        public int StayUprightConstraintInstance;
        public bool bStayUpright;
        public bool bUseSuspensionAxis;
        public bool bUpdateWheelShapes;
        public bool bVehicleOnGround;
        public bool bVehicleOnWater;
        public bool bIsInverted;
        public bool bChassisTouchingGround;
        public bool bWasChassisTouchingGroundLastTick;
        public bool bCanFlip;
        public bool bFlipRight;
        public bool bIsUprighting;
        public bool bOutputHandbrake;
        public bool bHoldingDownHandbrake;
    }
    public class SVehicleSimBase : ActorComponent
    {
        public float WheelSuspensionStiffness;
        public float WheelSuspensionDamping;
        public float WheelSuspensionBias;
        public float WheelLongExtremumSlip;
        public float WheelLongExtremumValue;
        public float WheelLongAsymptoteSlip;
        public float WheelLongAsymptoteValue;
        public float WheelLatExtremumSlip;
        public float WheelLatExtremumValue;
        public float WheelLatAsymptoteSlip;
        public float WheelLatAsymptoteValue;
        public float WheelInertia;
        public float AutoDriveSteer;
        public bool bWheelSpeedOverride;
        public bool bClampedFrictionModel;
        public bool bAutoDrive;
    }
    public class SVehicleSimCar : SVehicleSimBase
    {
        public InterpCurveFloat MaxSteerAngleCurve;
        public float ChassisTorqueScale;
        public float SteerSpeed;
        public float ReverseThrottle;
        public float EngineBrakeFactor;
        public float MaxBrakeTorque;
        public float StopThreshold;
        public float ActualSteering;
        public float TimeSinceThrottle;
        public bool bIsDriving;
    }
    public class SVehicleSimTank : SVehicleSimCar
    {
        public float LeftTrackVel;
        public float RightTrackVel;
        public float LeftTrackTorque;
        public float RightTrackTorque;
        public float MaxEngineTorque;
        public float EngineDamping;
        public float InsideTrackTorqueFactor;
        public float SteeringLatStiffnessFactor;
        public float TurnInPlaceThrottle;
        public float TurnMaxGripReduction;
        public float TurnGripScaleRate;
        public bool bTurnInPlaceOnSteer;
    }
    public class SVehicleWheel : Component
    {
        public int WheelPSCClass;
        public Vector BoneOffset;
        public Vector WheelPosition;
        public Vector ContactNormal;
        public Vector LongDirection;
        public Vector LatDirection;
        public NameReference SkelControlName;
        public NameReference BoneName;
        public NameReference SlipParticleParamName;
        public float Steer;
        public float MotorTorque;
        public float BrakeTorque;
        public float ChassisTorque;
        public float SteerFactor;
        public int WheelControl;
        public float WheelRadius;
        public float SuspensionTravel;
        public float SuspensionSpeed;
        public int WheelParticleSystem;
        public float LongSlipFactor;
        public float LatSlipFactor;
        public float HandbrakeLongSlipFactor;
        public float HandbrakeLatSlipFactor;
        public float ParkedSlipFactor;
        public float SpinVel;
        public float LongSlipRatio;
        public float LatSlipAngle;
        public float ContactForce;
        public float LongImpulse;
        public float LatImpulse;
        public float DesiredSuspensionPosition;
        public float SuspensionPosition;
        public float CurrentRotation;
        public int WheelParticleComp;
        public bool bPoweredWheel;
        public bool bHoverWheel;
        public bool bCollidesVehicles;
        public bool bCollidesPawns;
        public bool bIsSquealing;
        public bool bWheelOnGround;
        public EWheelSide Side;
    }
    public class SwatTurnReachSpec : ForcedReachSpec
    {
        public byte SpecDirection;
    }
    public class TargetPoint : Keypoint
    {
    }
    public class TeamDataProvider : UIDynamicDataProvider
    {
        public Pointer VfTable_IUIListElementProvider;
        public int[] Players;
        public NameReference PlayerListFieldName;
    }
    public class TeamInfo : ReplicationInfo
    {
        public string TeamName;
        public int Size;
        public float Score;
        public int TeamIndex;
        public Color TeamColor;
    }
    public class Teleporter : NavigationPoint
    {
        public string URL;
        public Vector TargetVelocity;
        public NameReference ProductRequired;
        public float LastFired;
        public bool bChangesVelocity;
        public bool bChangesYaw;
        public bool bReversesX;
        public bool bReversesY;
        public bool bReversesZ;
        public bool bEnabled;
        public bool bCanTeleportVehicles;
    }
    public class TeleportReachSpec : ReachSpec
    {
    }
    public class Terrain : Info
    {
        public CachedTerrainMaterialArray CachedTerrainMaterials;
        public TerrainHeight[] Heights;
        public TerrainInfoData[] InfoData;
        public AlphaMap[] AlphaMaps;
        public TerrainWeightedMaterial[] WeightedMaterials;
        public int[] WeightedTextureMaps;
        public byte[] CachedDisplacements;
        public TerrainLayer[] Layers;
        public TerrainDecoLayer[] DecoLayers;
        public int[] TerrainComponents;
        public Pointer ReleaseResourcesFence;
        public LightmassPrimitiveSettings LightmassSettings;
        public Guid LightingGuid;
        public int NormalMapLayer;
        public int NumSectionsX;
        public int NumSectionsY;
        public int SectionSize;
        public float MaxCollisionDisplacement;
        public int MaxTesselationLevel;
        public int MinTessellationLevel;
        public float TesselationDistanceScale;
        public float TessellationCheckDistance;
        public int CollisionTesselationLevel;
        public int NumVerticesX;
        public int NumVerticesY;
        public int NumPatchesX;
        public int NumPatchesY;
        public int MaxComponentSize;
        public int StaticLightingResolution;
        public int TerrainPhysMaterialOverride;
        public LightingChannelContainer LightingChannels;
        public Color WireframeColor;
        public bool bIsOverridingLightResolution;
        public bool bBilinearFilterLightmapGeneration;
        public bool bCastShadow;
        public bool bForceDirectLightMap;
        public bool bCastDynamicShadow;
        public bool bEnableSpecular;
        public bool bBlockRigidBody;
        public bool bAllowRigidBodyUnderneath;
        public bool bNoPhysCollision;
        public bool bAcceptsDynamicLights;
        public bool bMorphingEnabled;
        public bool bMorphingGradientsEnabled;
        public bool bLocked;
        public bool bHeightmapLocked;
        public bool bShowingCollision;
        public bool bShowWireframe;
    }
    public class TerrainComponent : PrimitiveComponent
    {
        public int[] ShadowMaps;
        public Guid[] IrrelevantLights;
        public int SectionBaseX;
        public int SectionBaseY;
        public int SectionSizeX;
        public int SectionSizeY;
        public int TrueSectionSizeX;
        public int TrueSectionSizeY;
        public Pointer LightMap;
        public Pointer RBHeightfield;
        public bool bDisplayCollisionLevel;
    }
    public class TerrainLayerSetup : Object
    {
        public TerrainFilteredMaterial[] Materials;
    }
    public class TerrainMaterial : Object
    {
        public Matrix LocalToMapping;
        public TerrainFoliageMesh[] FoliageMeshes;
        public float MappingScale;
        public float MappingRotation;
        public float MappingPanU;
        public float MappingPanV;
        public int Material;
        public int DisplacementMap;
        public float DisplacementScale;
        public ETerrainMappingType MappingType;
    }
    public class TerrainWeightMapTexture : Texture2D
    {
        public Pointer[] WeightedMaterials;
        public int ParentTerrain;
    }
    public class TestSplittingVolume : Volume
    {
        public Pointer VfTable_IInterface_NavMeshPathObject;
    }
    public class Texture2DComposite : Texture
    {
        public SourceTexture2DRegion[] SourceRegions;
        public int MaxTextureSize;
    }
    public class Texture2DDynamic : Texture
    {
    }
    public class TextureMovie : Texture
    {
        public UntypedBulkData_Mirror Data;
        public int DecoderClass;
        public Guid TextureFileCacheGuid;
        public Guid TFCFileGuid;
        public NameReference TextureFileCacheName;
        public int SizeX;
        public int SizeY;
        public bool Looping;
        public bool AutoPlay;
        public bool m_bIsDroppingFrames;
        public EPixelFormat Format;
        public TextureAddress AddressX;
        public TextureAddress AddressY;
        public EMovieStreamSource MovieStreamSource;
    }
    public class TextureRenderTargetCube : TextureRenderTarget
    {
        public int SizeX;
        public EPixelFormat Format;
    }
    public class Trigger : Actor
    {
        public int CylinderComponent;
        public float AITriggerDelay;
        public bool bRecentlyTriggered;
    }
    public class Trigger_Dynamic : Trigger
    {
    }
    public class Trigger_LOS : Trigger
    {
        public int[] PCsWithLOS;
    }
    public class TriggeredPath : NavigationPoint
    {
        public int MyTrigger;
        public bool bOpen;
    }
    public class TriggerStreamingLevel : Trigger
    {
        public LevelStreamingData[] Levels;
    }
    public class UIAction : SequenceAction
    {
        public bool bAutoTargetOwner;
    }
    public class UIAction_ConsoleCommand : UIAction
    {
        public string Command;
    }
    public class UIAnimation : UIRoot
    {
    }
    public class UIAnimationSeq : UIAnimation
    {
        public UIAnimTrack[] Tracks;
        public NameReference SeqName;
        public EUIAnimationLoopMode LoopMode;
    }
    public class UIScreenObject : UIRoot
    {
        public int[] Children;
        public int[] DefaultStates;
        public int[] InactiveStates;
        public int __NotifyActiveSkinChanged__Delegate;
        public int __OnRawInputKey__Delegate;
        public int __OnRawInputAxis__Delegate;
        public int __OnProcessInputKey__Delegate;
        public int __OnProcessInputAxis__Delegate;
        public int __NotifyPositionChanged__Delegate;
        public int __NotifyResolutionChanged__Delegate;
        public int __NotifyVisibilityChanged__Delegate;
        public int __OnUIAnim_KeyFrameCompleted__Delegate;
        public int __OnUIAnim_TrackCompleted__Delegate;
        public int InitialState;
        public UIScreenValue_Bounds Position;
        public NameReference FocusedCue;
        public NameReference MouseEnterCue;
        public NameReference NavigateUpCue;
        public NameReference NavigateDownCue;
        public NameReference NavigateLeftCue;
        public NameReference NavigateRightCue;
        public float ZDepth;
        public float AnimationDebugMultiplier;
        public float Opacity;
        public int EventProvider;
        public bool bHidden;
        public bool bNeverFocus;
        public bool bSupportsFocusHint;
        public bool bOverrideInputOrder;
        public bool bSupports3DPrimitives;
    }
    public class UIComponent : Component
    {
    }
    public class UIComp_Event : UIComponent
    {
        public DefaultEventSpecification[] DefaultEvents;
        public NameReference[] DisabledEventAliases;
        public int EventContainer;
    }
    public class UIObject : UIScreenObject
    {
        public UIRotation Rotation;
        public UIDataStoreBinding ToolTip;
        public UIDataStoreBinding ContextMenuData;
        public UIStyleReference PrimaryStyle;
        public int __OnCreate__Delegate;
        public int __OnPreSceneUpdate__Delegate;
        public int __OnPostSceneUpdate__Delegate;
        public int __OnValueChanged__Delegate;
        public int __OnRefreshSubscriberValue__Delegate;
        public int __OnPressed__Delegate;
        public int __OnPressRepeat__Delegate;
        public int __OnPressRelease__Delegate;
        public int __OnClicked__Delegate;
        public int __OnDoubleClick__Delegate;
        public int __OnOpenContextMenu__Delegate;
        public int __OnCloseContextMenu__Delegate;
        public int __OnContextMenuItemSelected__Delegate;
        public UIDockingSet DockTargets;
        public UINavigationData NavigationTargets;
        public WIDGET_ID WidgetID;
        public Vector RenderOffset;
        public NameReference WidgetTag;
        public int Owner;
        public int OwnerScene;
        public int TabIndex;
        public int PrivateFlags;
        public int AnimationParent;
        public Color DebugBoundsColor;
        public bool bEnableActiveCursorUpdates;
        public bool bSupportsPrimaryStyle;
        public bool bEnableSceneUpdateNotifications;
        public bool bDebugShowBounds;
        public byte PlayerInputMask;
        public EUIPostProcessGroup MaskPostProcess;
    }
    public class UIEvent : SequenceEvent
    {
        public string Description;
        public int __AllowEventActivation__Delegate;
        public int SubobjectVersionModifier;
        public int EventOwner;
        public int EventActivator;
        public bool bShouldRegisterEvent;
        public bool bPropagateEvent;
    }
    public class UIEvent_Initialized : UIEvent
    {
    }
    public class UIComp_DrawComponents : UIComponent
    {
        public int __OnFadeComplete__Delegate;
    }
    public class UIComp_DrawImage : UIComp_DrawComponents
    {
        public Pointer VfTable_IUIStyleResolver;
        public Pointer VfTable_ICustomPropertyItemHandler;
        public UIStyleReference ImageStyle;
        public UIImageStyleOverride StyleCustomization;
        public NameReference StyleResolverTag;
        public int ImageRef;
    }
    public class UIButton : UIObject
    {
        public NameReference ClickedCue;
        public int BackgroundImageComponent;
    }
    public class UIComp_DrawString : UIComp_DrawComponents
    {
        public Pointer VfTable_IUIStyleResolver;
        public UIStyleReference StringStyle;
        public UITextStyleOverride TextStyleCustomization;
        public AutoSizeData AutoSizeParameters;
        public UIRenderingSubregion ClampRegion;
        public LinearColor DropShadowColor;
        public NameReference StyleResolverTag;
        public Vector2D DropShadowOffset;
        public bool bDropShadow;
        public bool bIgnoreMarkup;
        public bool bAllowBoundsAdjustment;
    }
    public class UILabelButton : UIButton
    {
        public Pointer VfTable_IUIDataStorePublisher;
        public UIDataStoreBinding CaptionDataSource;
        public int StringRenderComponent;
    }
    public class UICalloutButton : UILabelButton
    {
        public string DefaultMarkupStringTemplate;
        public NameReference CalloutDataStoreTag;
        public NameReference InputAliasTag;
        public bool bPlayErrorSoundWhenDisabled;
        public EUIAlignment IconAlignment;
    }
    public class UIContainer : UIObject
    {
        public int AutoAlignment;
    }
    public class UICalloutButtonPanel : UIContainer
    {
        public NameReference[] CalloutButtonAliases;
        public UIScreenValue_Extent ButtonPadding;
        public int ButtonTemplate;
        public bool bSupportsButtonRepeat;
        public EUIOrientation ButtonBarOrientation;
        public ECalloutButtonLayoutType ButtonLayout;
    }
    public class UICharacterSummary : UIResourceDataProvider
    {
        public string ClassPathName;
        public string CharacterName;
        public string CharacterBio;
        public bool bIsDisabled;
    }
    public class UIComp_AutoAlignment : UIComponent
    {
        public EUIAlignment HorzAlignment;
        public EUIAlignment VertAlignment;
    }
    public class UIComp_ListComponentBase : UIComponent
    {
    }
    public class UIComp_ListElementSorter : UIComp_ListComponentBase
    {
        public int __OverrideListSort__Delegate;
        public int InitialSortColumn;
        public int InitialSecondarySortColumn;
        public bool bAllowCompoundSorting;
        public bool bReversePrimarySorting;
        public bool bReverseSecondarySorting;
    }
    public class UIComp_ListPresenterBase : UIComp_ListComponentBase
    {
    }
    public class UITexture : UIRoot
    {
        public int ImageTexture;
    }
    public class UIComp_ListPresenter : UIComp_ListPresenterBase
    {
        public Pointer VfTable_ICustomPropertyItemHandler;
        public UIElementCellSchema ElementSchema;
        public TextureCoordinates ListItemOverlayCoordinates;
        public TextureCoordinates ColumnHeaderBackgroundCoordinates;
        public int ListItemOverlay;
        public int ColumnHeaderBackground;
        public UIScreenValue_Extent SelectionHintPadding;
        public int MaxElementsPerPage;
        public bool bDisplayColumnHeaders;
    }
    public class UIConfigProvider : UIDataProvider
    {
    }
    public class UIScrollbar : UIObject
    {
        public UIStyleReference IncrementStyle;
        public UIStyleReference DecrementStyle;
        public UIStyleReference MarkerStyle;
        public int __OnScrollActivity__Delegate;
        public int __OnClickedScrollZone__Delegate;
        public UIScreenValue_Extent BarWidth;
        public UIScreenValue_Extent MinimumMarkerSize;
        public UIScreenValue_Extent ButtonsExtent;
        public int BackgroundImageComponent;
        public int IncrementButton;
        public int DecrementButton;
        public int MarkerButton;
        public float NudgeMultiplier;
        public bool bAddCornerPadding;
        public EUIOrientation ScrollbarOrientation;
    }
    public class UIList : UIObject
    {
        public Pointer VfTable_IUIDataStorePublisher;
        public UIStyleReference GlobalCellStyle;
        public UIStyleReference ItemOverlayStyle;
        public UIStyleReference ColumnHeaderBackgroundStyle;
        public UIDataStoreBinding DataSource;
        public UIStyleReference ColumnHeaderStyle;
        public int __OnSubmitSelection__Delegate;
        public int __OnListElementsSorted__Delegate;
        public int __ShouldDisableElement__Delegate;
        public int __OnOverrideListElementState__Delegate;
        public UIScreenValue_Extent RowHeight;
        public UIScreenValue_Extent MinColumnSize;
        public UIScreenValue_Extent ColumnWidth;
        public UIScreenValue_Extent HeaderCellPadding;
        public UIScreenValue_Extent HeaderElementSpacing;
        public UIScreenValue_Extent CellSpacing;
        public UIScreenValue_Extent CellPadding;
        public NameReference SubmitDataSuccessCue;
        public NameReference SubmitDataFailedCue;
        public NameReference DecrementIndexCue;
        public NameReference IncrementIndexCue;
        public NameReference SortAscendingCue;
        public NameReference SortDescendingCue;
        public int ColumnCount;
        public int RowCount;
        public int VerticalScrollbar;
        public int BackgroundImageComponent;
        public int SortComponent;
        public int CellDataComponent;
        public bool bEnableMultiSelect;
        public bool bEnableVerticalScrollbar;
        public bool bAllowDisabledItemSelection;
        public bool bSingleClickSubmission;
        public bool bUpdateItemUnderCursor;
        public bool bHoverStateOverridesSelected;
        public bool bForceFullPageDisplay;
        public bool bAllowColumnResizing;
        public ECellAutoSizeMode ColumnAutoSizeMode;
        public ECellAutoSizeMode RowAutoSizeMode;
        public ECellLinkType CellLinkType;
        public EListWrapBehavior WrapType;
    }
    public class UIContextMenu : UIList
    {
    }
    public class UISkin : UIDataStore
    {
        public int[] Styles;
        public string[] StyleGroups;
        public UISoundCue[] SoundCues;
    }
    public class UICustomSkin : UISkin
    {
    }
    public class UIDataProvider_MenuItem : UIResourceDataProvider
    {
        public NameReference[] OptionSet;
        public string DataStoreMarkup;
        public string DescriptionMarkup;
        public string FriendlyName;
        public string CustomFriendlyName;
        public string Description;
        public NameReference[] SchemaCellFields;
        public string IniName;
        public UIRangeData RangeData;
        public NameReference RequiredGameMode;
        public int EditBoxMaxLength;
        public bool bEditableCombo;
        public bool bNumericCombo;
        public bool bKeyboardOrMouseOption;
        public bool bOnlineOnly;
        public bool bOfflineOnly;
        public bool bSearchAllInis;
        public bool bRemoveOn360;
        public bool bRemoveOnPC;
        public bool bRemoveOnPS3;
        public EMenuOptionType OptionType;
        public EEditBoxCharacterSet EditboxAllowedChars;
    }
    public class UIDataProvider_OnlinePlayerDataBase : UIDataProvider
    {
        public int Player;
    }
    public class UIDataProvider_OnlineClanMates : UIDataProvider_OnlinePlayerDataBase
    {
        public Pointer VfTable_IUIListElementCellProvider;
    }
    public class UIDataProvider_OnlineFriendMessages : UIDataProvider_OnlinePlayerDataBase
    {
        public Pointer VfTable_IUIListElementCellProvider;
        public OnlineFriendMessage[] Messages;
        public string SendingPlayerNameCol;
        public string bIsFriendInviteCol;
        public string bWasAcceptedCol;
        public string bWasDeniedCol;
        public string MessageCol;
        public string LastInviteFrom;
    }
    public class UIDataProvider_OnlineFriends : UIDataProvider_OnlinePlayerDataBase
    {
        public Pointer VfTable_IUIListElementCellProvider;
        public OnlineFriend[] FriendsList;
        public string NickNameCol;
        public string PresenceInfoCol;
        public string FriendStateCol;
        public string bIsOnlineCol;
        public string bIsPlayingCol;
        public string bIsPlayingThisGameCol;
        public string bIsJoinableCol;
        public string bHasVoiceSupportCol;
        public string bHaveInvitedCol;
        public string bHasInvitedYouCol;
        public string OfflineText;
        public string OnlineText;
        public string AwayText;
        public string BusyText;
    }
    public class UIDataProvider_OnlinePartyChatList : UIDataProvider_OnlinePlayerDataBase
    {
        public Pointer VfTable_IUIListElementCellProvider;
        public OnlinePartyMember[] PartyMembersList;
        public string[] NatTypes;
        public string NickNameCol;
        public string NatTypeCol;
        public string IsLocalCol;
        public string IsInPartyVoiceCol;
        public string IsTalkingCol;
        public string IsInGameSessionCol;
        public string IsPlayingThisGameCol;
    }
    public class UIDataProvider_OnlinePlayers : UIDataProvider_OnlinePlayerDataBase
    {
        public Pointer VfTable_IUIListElementCellProvider;
    }
    public class UIDataProvider_OnlinePlayerStorage : UIDataProvider_OnlinePlayerDataBase
    {
        public PlayerStorageArrayProvider[] PlayerStorageArrayProviders;
        public NameReference ProviderName;
        public int Profile;
        public bool bWasErrorLastRead;
    }
    public class UIDataProvider_OnlinePlayerStorageArray : UIDataProvider
    {
        public Pointer VfTable_IUIListElementProvider;
        public Pointer VfTable_IUIListElementCellProvider;
        public string ColumnHeaderText;
        public NameReference[] Values;
        public NameReference PlayerStorageName;
        public int PlayerStorage;
        public int PlayerStorageId;
    }
    public class UIDataProvider_OnlineProfileSettings : UIDataProvider_OnlinePlayerStorage
    {
    }
    public class UIDataProvider_PlayerAchievements : UIDataProvider_OnlinePlayerDataBase
    {
        public Pointer VfTable_IUIListElementCellProvider;
    }
    public class UIDataProvider_Settings : UIDynamicDataProvider
    {
        public SettingsArrayProvider[] SettingsArrayProviders;
        public int Settings;
        public bool bIsAListRow;
    }
    public class UIDataProvider_SettingsArray : UIDataProvider
    {
        public Pointer VfTable_IUIListElementProvider;
        public Pointer VfTable_IUIListElementCellProvider;
        public string ColumnHeaderText;
        public IdToStringMapping[] Values;
        public NameReference SettingsName;
        public int Settings;
        public int SettingsId;
    }
    public class UIDataStore_Color : UIDataStore
    {
    }
    public class UIDataStore_DynamicResource : UIDataStore
    {
        public Pointer VfTable_IUIListElementProvider;
        public DynamicResourceProviderDefinition[] ResourceProviderDefinitions;
    }
    public class UIDataStore_Fonts : UIDataStore
    {
    }
    public class UIDataStore_GameResource : UIDataStore
    {
        public Pointer VfTable_IUIListElementProvider;
        public GameResourceDataProvider[] ElementProviderTypes;
    }
    public class UIDataStore_Gamma : UIDataStore
    {
    }
    public class UIDataStore_Images : UIDataStore
    {
    }
    public class UIDataStore_StringBase : UIDataStore
    {
    }
    public class UIDataStore_InputAlias : UIDataStore_StringBase
    {
        public UIDataStoreInputAlias[] InputAliases;
    }
    public class UIDataStore_MenuItems : UIDataStore_GameResource
    {
        public NameReference CurrentGameSettingsTag;
    }
    public class UIDataStore_Remote : UIDataStore
    {
    }
    public class UIDataStore_OnlineGameSearch : UIDataStore_Remote
    {
        public Pointer VfTable_IUIListElementProvider;
        public Pointer VfTable_IUIListElementCellProvider;
        public GameSearchCfg[] GameSearchCfgList;
        public NameReference SearchResultsName;
        public int OnlineSub;
        public int SelectedIndex;
        public int ActiveSearchIndex;
    }
    public class UIDataStore_Settings : UIDataStore
    {
    }
    public class UIDataStore_OnlineGameSettings : UIDataStore_Settings
    {
        public GameSettingsCfg[] GameSettingsCfgList;
        public int SettingsProviderClass;
        public int SelectedIndex;
    }
    public class UIDataStore_OnlinePlayerData : UIDataStore_Remote
    {
        public Pointer VfTable_IUIListElementProvider;
        public string PlayerNick;
        public string ProfileSettingsClassName;
        public string PlayerStorageClassName;
        public string FriendsProviderClassName;
        public string PlayersProviderClassName;
        public string ClanMatesProviderClassName;
        public string FriendMessagesProviderClassName;
        public string AchievementsProviderClassName;
        public string PartyChatProviderClassName;
        public int ProfileSettingsClass;
        public int PlayerStorageClass;
        public int FriendsProviderClass;
        public int PlayersProviderClass;
        public int ClanMatesProviderClass;
        public int FriendMessagesProviderClass;
        public int AchievementsProviderClass;
        public int PartyChatProviderClass;
        public int FriendsProvider;
        public int PlayersProvider;
        public int ClanMatesProvider;
        public int Player;
        public int NumNewDownloads;
        public int NumTotalDownloads;
        public int ProfileProvider;
        public int StorageProvider;
        public int FriendMessagesProvider;
        public int AchievementsProvider;
        public int PartyChatProvider;
    }
    public class UIDataStore_OnlinePlaylists : UIDataStore
    {
        public Pointer VfTable_IUIListElementProvider;
        public string ProviderClassName;
        public int[] RankedDataProviders;
        public int[] UnRankedDataProviders;
    }
    public class UIDataStore_OnlineStats : UIDataStore_Remote
    {
        public Pointer VfTable_IUIListElementProvider;
        public Pointer VfTable_IUIListElementCellProvider;
        public PlayerNickMetaData PlayerNickData;
        public RankMetaData RankNameMetaData;
        public int[] StatsReadClasses;
        public int[] StatsReadObjects;
        public NameReference StatsReadName;
        public NameReference TotalRowsName;
        public int StatsRead;
        public EStatsFetchType CurrentReadType;
    }
    public class UIDataStore_Registry : UIDataStore
    {
        public int RegistryDataProvider;
    }
    public class UIDataStore_SessionSettings : UIDataStore_Settings
    {
        public string[] SessionSettingsProviderClassNames;
    }
    public class UIDataStore_StringAliasMap : UIDataStore_StringBase
    {
        public UIMenuInputMap[] MenuInputMapArray;
    }
    public class UIDataStoreSubscriber : Interface
    {
    }
    public class UIDataStorePublisher : UIDataStoreSubscriber
    {
    }
    public class UIDynamicFieldProvider : UIDataProvider
    {
        public Map_Mirror PersistentCollectionData;
        public UIProviderScriptFieldValue[] PersistentDataFields;
    }
    public class UIEvent_CalloutButtonInputProxy : UIEvent
    {
        public int ButtonPanel;
    }
    public class UIEvent_MetaObject : UIEvent
    {
        public Pointer VfTable_FCallbackEventDevice;
    }
    public class UIEvent_ProcessInput : UIEvent
    {
    }
    public class UIEventContainer : Interface
    {
    }
    public class UILabel : UIObject
    {
        public Pointer VfTable_IUIDataStoreSubscriber;
        public Pointer VfTable_IUIStringRenderer;
        public UIDataStoreBinding DataSource;
        public int StringRenderComponent;
        public int LabelBackground;
    }
    public class UIFocusHint : UILabel
    {
    }
    public class UIImage : UIObject
    {
        public Pointer VfTable_IUIDataStorePublisher;
        public UIDataStoreBinding ImageDataSource;
        public int ImageComponent;
    }
    public class UIInputConfiguration : UIRoot
    {
        public UIInputAliasClassMap[] WidgetInputAliases;
        public UIAxisEmulationDefinition[] AxisEmulationDefinitions;
    }
    public class UIInteraction : Interaction
    {
        public Pointer VfTable_FExec;
        public Pointer VfTable_FGlobalDataStoreClientManager;
        public Pointer VfTable_FCallbackEventDevice;
        public string UISkinName;
        public NameReference[] UISoundCueNames;
        public int SceneClientClass;
        public float UIJoystickDeadZone;
        public float UIAxisMultiplier;
        public float AxisRepeatDelay;
        public float MouseButtonRepeatDelay;
        public float DoubleClickTriggerSeconds;
        public int DoubleClickPixelTolerance;
        public float ToolTipInitialDelaySeconds;
        public float ToolTipExpirationSeconds;
        public bool bDisableToolTips;
        public bool bFocusOnActive;
        public bool bFocusedStateRules;
    }
    public class UILayerBase : UIRoot
    {
    }
    public class UIListElementCellProvider : Interface
    {
    }
    public class UIListElementProvider : Interface
    {
    }
    public class UIString : UIRoot
    {
    }
    public class UIListString : UIString
    {
    }
    public class UIMapSummary : UIResourceDataProvider
    {
        public string MapName;
        public string ScreenshotPathName;
        public string DisplayName;
        public string Description;
    }
    public class UIScene : UIScreenObject
    {
        public int __GetSceneInputModeOverride__Delegate;
        public int __OnInterceptRawInputKey__Delegate;
        public int __OnSceneActivated__Delegate;
        public int __OnSceneDeactivated__Delegate;
        public int __OnQueryCloseSceneAllowed__Delegate;
        public int __OnTopSceneChanged__Delegate;
        public int __ShouldModulateBackgroundAlpha__Delegate;
        public int __OnQueryBeginAnimation_DisableInput__Delegate;
        public int __OnQueryEndAnimation_EnableInput__Delegate;
        public int DefaultContextMenuClass;
        public NameReference SceneTag;
        public Vector2D CurrentViewportSize;
        public NameReference SceneAnimation_Open;
        public NameReference SceneAnimation_Close;
        public NameReference SceneAnimation_LoseFocus;
        public NameReference SceneAnimation_RegainingFocus;
        public NameReference SceneAnimation_RegainedFocus;
        public NameReference SceneOpenedCue;
        public NameReference SceneClosedCue;
        public int SceneSkin;
        public int SceneStackPriority;
        public int UIPostProcessForeground;
        public int UIPostProcessBackground;
        public int SceneData;
        public bool bDisplayCursor;
        public bool bRenderParentScenes;
        public bool bAlwaysRenderScene;
        public bool bPauseGameWhileActive;
        public bool bExemptFromAutoClose;
        public bool bCloseOnLevelChange;
        public bool bSaveSceneValuesOnClose;
        public bool bEnableScenePostProcessing;
        public bool bEnableSceneDepthTesting;
        public bool bRequiresNetwork;
        public bool bRequiresOnlineService;
        public bool bMenuLevelRestoresScene;
        public bool bFlushPlayerInput;
        public bool bCaptureMatchedInput;
        public bool bDisableWorldRendering;
        public EScreenInputMode SceneInputMode;
        public ESplitscreenRenderMode SceneRenderMode;
        public EUIPostProcessGroup ScenePostProcessGroup;
    }
    public class UIMessageBoxBase : UIScene
    {
        public int __OnOptionSelected__Delegate;
        public NameReference TitleWidgetName;
        public NameReference MessageWidgetName;
        public NameReference QuestionWidgetName;
        public NameReference ChoicesWidgetName;
        public NameReference QuestionWidgetImageName;
        public NameReference ButtonBarButtonBGStyleName;
        public NameReference ButtonBarButtonTextStyleName;
        public bool bPerformAutomaticLayout;
    }
    public class UIMessageBox : UIMessageBoxBase
    {
    }
    public class UIPrefab : UIObject
    {
        public UIScreenValue_Extent OriginalWidth;
        public UIScreenValue_Extent OriginalHeight;
        public int PrefabVersion;
        public int InternalPrefabVersion;
    }
    public class UIPrefabInstance : UIObject
    {
        public int SourcePrefab;
        public int PrefabInstanceVersion;
    }
    public class UIResourceCombinationProvider : UIDataProvider
    {
        public Pointer VfTable_IUIListElementProvider;
        public Pointer VfTable_IUIListElementCellProvider;
    }
    public class UISafeRegionPanel : UIContainer
    {
        public float RegionPercentages;
        public bool bForce4x3AspectRatio;
        public bool bUseFullRegionIn4x3;
        public bool bPrimarySafeRegion;
        public ESafeRegionType RegionType;
    }
    public class UIScrollbarButton : UIButton
    {
    }
    public class UIScrollbarMarkerButton : UIScrollbarButton
    {
        public int __OnButtonDragged__Delegate;
    }
    public class UISequence : Sequence
    {
        public Pointer VfTable_IUIEventContainer;
    }
    public class UISettingsClient : Interface
    {
    }
    public class UIState : UIRoot
    {
        public Pointer VfTable_IUIEventContainer;
        public InputKeyAction[] StateInputActions;
        public InputKeyAction[] DisabledInputActions;
        public NameReference MouseCursorName;
        public int StateSequence;
    }
    public class UIState_Active : UIState
    {
    }
    public class UIState_Disabled : UIState
    {
    }
    public class UIState_Enabled : UIState
    {
    }
    public class UIState_Focused : UIState
    {
    }
    public class UIState_Pressed : UIState
    {
    }
    public class UIStateSequence : UISequence
    {
    }
    public class UIStringRenderer : Interface
    {
    }
    public class UIStyle : UIRoot
    {
        public string StyleName;
        public string StyleGroupName;
        public int StyleDataClass;
        public STYLE_ID StyleID;
        public NameReference StyleTag;
    }
    public class UIStyle_Data : UIRoot
    {
        public int __MatchesStyleData__Delegate;
        public LinearColor StyleColor;
        public float StylePadding;
        public bool bEnabled;
    }
    public class UIStyle_Combo : UIStyle_Data
    {
        public StyleDataReference ImageStyle;
        public StyleDataReference TextStyle;
    }
    public class UIStyle_Image : UIStyle_Data
    {
        public UIImageAdjustmentData AdjustmentType;
        public TextureCoordinates Coordinates;
        public int DefaultImage;
    }
    public class UIStyle_Text : UIStyle_Data
    {
        public TextAutoScaleValue AutoScaling;
        public Vector2D Scale;
        public Vector2D SpacingAdjust;
        public int StyleFont;
        public UITextAttributes Attributes;
        public EUIAlignment Alignment;
        public ETextClipMode ClipMode;
        public EUIAlignment ClipAlignment;
    }
    public class UIStyleResolver : Interface
    {
    }
    public class UITickableObject : Interface
    {
    }
    public class UITickableObjectProxy : UIRoot
    {
        public Pointer VfTable_IUITickableObject;
        public int __OnScriptTick__Delegate;
    }
    public class UIWeaponSummary : UIResourceDataProvider
    {
        public string ClassPathName;
        public string FriendlyName;
        public string WeaponDescription;
        public bool bIsDisabled;
    }
    public class VolumePathNode : PathNode
    {
        public float StartingRadius;
        public float StartingHeight;
        public bool bManualSizing;
    }
    public class VolumeTimer : Info
    {
        public int V;
    }
    public class WallTransReachSpec : ForcedReachSpec
    {
    }
    public class WaterVolume : PhysicsVolume
    {
        public int EntryActor;
        public int ExitActor;
        public int PawnEntryActor;
        public int EntrySound;
        public int ExitSound;
    }
    public class WaveFormBase : Object
    {
        public int TheWaveForm;
    }
    public class Weapon : Inventory
    {
        public NameReference[] FiringStatesArray;
        public EWeaponFireType[] WeaponFireTypes;
        public int[] WeaponProjectiles;
        public float[] FireInterval;
        public float[] Spread;
        public float[] InstantHitDamage;
        public float[] InstantHitMomentum;
        public int[] InstantHitDamageTypes;
        public byte[] ShouldFireOnRelease;
        public Vector FireOffset;
        public float EquipTime;
        public float PutDownTime;
        public float WeaponRange;
        public int Mesh;
        public float DefaultAnimSpeed;
        public float Priority;
        public int AIController;
        public float AIRating;
        public float CachedMaxRange;
        public bool bWeaponPutDown;
        public bool bCanThrow;
        public bool bWasOptionalSet;
        public bool bWasDoNotActivate;
        public bool bInstantHit;
        public bool bMeleeWeapon;
        public byte CurrentFireMode;
    }
    public class WindDirectionalSourceComponent : ActorComponent
    {
        public float Strength;
        public float Phase;
        public float Frequency;
        public float Speed;
    }
    public class WindDirectionalSource : Info
    {
        public int Component;
    }
    public class WindPointSourceComponent : WindDirectionalSourceComponent
    {
        public int PreviewRadiusComponent;
        public float Radius;
    }
    public class WindPointSource : Info
    {
        public int Component;
    }
    public class TestFrameworkBase : BioTestFramework
    {
        public Pointer[] m_lstSuccesses;
        public Pointer[] m_lstFailures;
        public Pointer[] m_lstDisables;
        public string[] m_lstRequiredPackages;
        public int m_UnitTestResources;
    }
    public class UnitTestCase : Object
    {
        public string m_sRequiredMap;
        public int m_pRunner;
        public float m_fExpectedTestTime;
        public float m_fMaxTestTime;
        public bool m_bRequiresLevelLoads;
    }
    public class UnitTestAnimation : UnitTestCase
    {
        public string m_sSkelMesh;
        public Vector m_vSavedLocation;
        public int m_pActor;
    }
    public class UnitTestAudio : UnitTestCase
    {
    }
    public class UnitTestContainerClasses : UnitTestCase
    {
    }
    public class UnitTestLoadTestAsset : UnitTestCase
    {
        public string m_sExpectedAsset;
    }
    public class UnitTestRequireOtherMap : UnitTestCase
    {
    }
    public class UnitTestRunner : TestFrameworkBase
    {
        public string m_sFilterClass;
        public string m_sFilterFunction;
        public int m_nHeapCheckFrequency;
        public float m_fMaxTestTime;
        public bool m_bIsConsoleDriven;
        public bool m_bIsConsolePausingDeferrals;
        public bool m_bIsConsoleUnPauseSignalReceived;
    }
    public class BioSeqAct_ActivateCharacterCreation : SequenceAction
    {
        public NameReference m_sCharacterCreationMap;
    }
    public class BioSeqAct_ShowMainMenu : SequenceAction
    {
        public int[] m_GuiResources;
    }
    public class BioSeqAct_ShowSplash : SequenceAction
    {
        public int m_oGuiReferenced;
        public bool bShowLegal;
    }
    public class GameAICommand : Object
    {
        public bool bAllowNewSameClassInstance;
        public bool bReplaceActiveSameClassInstance;
        public bool bIgnoreNotifies;
    }
    public class GameAIController : AIController
    {
        public NameReference[] AILogFilter;
        public string DemoActionString;
        public bool bAILogging;
        public bool bAILogToWindow;
        public bool bFlushAILogEachLine;
        public bool bMapBasedLogName;
        public bool bAIDrawDebug;
        public bool bUseIterativePathFinding;
    }
    public class GameTypes : Object
    {
    }
    public class SeqAct_ModifyProperty : SequenceAction
    {
        public PropertyInfo[] Properties;
    }
    public class GFxAction_CloseMovie : SequenceAction
    {
        public int movie;
        public bool bUnload;
    }
    public class GFxAction_GetVariable : SequenceAction
    {
        public string Variable;
        public int movie;
    }
    public class GFxMovie : Object
    {
        public int RenderTexture;
        public int MovieInfo;
        public int FSCmdHandler;
        public int ExternalInterface;
        public int nZOrder;
        public float fRenderTime;
        public float CreationTime;
        public GFxTimingMode TimingMode;
        public ESceneDepthPriorityGroup SceneDPG;
        public GFxRenderTextureMode RenderTextureMode;
        public bool bOnlyOwnerFocusable;
        public bool bGammaCorrection;
        public bool bDisplayWithHudOff;
        public bool bDiscardNonOwnerInput;
        public NameReference[] FocusIgnoreKeys;
        public ExternalTexture[] ExternalTextures;
        public GFxDataStoreBinding[] DataStoreBindings;
        public NameReference[] CaptureKeys;
    }
    public class GFxAction_Invoke : SequenceAction
    {
        public string methodName;
        public ASValue[] Arguments;
        public int movie;
    }
    public class GFxAction_OpenMovie : SequenceAction
    {
        public int movie;
        public bool bTakeFocus;
        public bool bCaptureInput;
        public bool bStartPaused;
    }
    public class GFxAction_SetCaptureKeys : SequenceAction
    {
        public NameReference[] CaptureKeys;
        public int movie;
    }
    public class GFxAction_SetFocus : SequenceAction
    {
        public int movie;
        public bool bCaptureInput;
    }
    public class GFxAction_SetVariable : SequenceAction
    {
        public string Variable;
        public int movie;
    }
    public class GFxDataStoreSubscriber : Object
    {
        public Pointer VfTable_IUIDataStorePublisher;
        public int movie;
    }
    public class GFxEngine : Object
    {
    }
    public class GFxEvent_FsCommand : SequenceEvent
    {
        public string FSCommand;
        public int movie;
    }
    public class GFxFSCmdHandler : Object
    {
    }
    public class GFxFSCmdHandler_Kismet : GFxFSCmdHandler
    {
    }
    public class GFxGameViewportClient : GameViewportClient
    {
        public int GFxUIControllerClass;
        public int GFxUIController;
    }
    public class GFxInteraction : Interaction
    {
        public Pointer VfTable_FCallbackEventDevice;
    }
    public class GFxMovieInfo : Object
    {
        public byte[] RawData;
        public int[] References;
        public int[] UserReferences;
        public int[] CompressedTextureReferences;
        public bool bUsesFontlib;
    }
    public class GFxValue : Object
    {
        public int Value;
    }
    public class SFXCharacterClassMP_Adept : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPowerCustomActionMP_HumanMeleePassiveBase : SFXPowerCustomActionMP_MeleePassiveBase
    {
    }
    public class SFXPowerCustomActionMP_HumanMeleePassive_Adept : SFXPowerCustomActionMP_HumanMeleePassiveBase
    {
    }
    public class SFXPowerCustomActionMP_HumanPassive : SFXPowerCustomActionMP_PassiveBase
    {
    }
    public class SFXPowerCustomActionMP_Shockwave : SFXPowerCustomAction_Shockwave
    {
    }
    public class SFXPowerCustomActionMP_Singularity : SFXPowerCustomAction_Singularity
    {
    }
    public class SFXCharacterClassMP_Engineer : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Engineer : SFXPawn_PlayerMP
    {
    }
    public class SFXPowerCustomActionMP_CombatDrone : SFXPowerCustomAction_CombatDrone
    {
    }
    public class SFXPowerCustomActionMP_HumanMeleePassive_Engineer : SFXPowerCustomActionMP_HumanMeleePassiveBase
    {
    }
    public class SFXPowerCustomActionMP_Incinerate : SFXPowerCustomAction_Incinerate
    {
    }
    public class SFXPowerCustomActionMP_Overload : SFXPowerCustomAction_Overload
    {
    }
    public class SFXCharacterClassMP_Infiltrator_BF3 : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Infiltrator : SFXPawn_PlayerMP
    {
    }
    public class SFXPowerCustomActionMP_Cloak : SFXPowerCustomAction_Cloak
    {
    }
    public class SFXPowerCustomActionMP_HumanMeleePassive_Infiltrator : SFXPowerCustomActionMP_HumanMeleePassiveBase
    {
    }
    public class SFXPowerCustomActionMP_StickyGrenade : SFXPowerCustomAction_StickyGrenade
    {
    }
    public class SFXCharacterClassMP_Infiltrator : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPowerCustomActionMP_CryoBlast : SFXPowerCustomAction_CryoBlast
    {
    }
    public class SFXCharacterClassMP_Sentinel : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Sentinel : SFXPawn_PlayerMP
    {
    }
    public class SFXPowerCustomActionMP_HumanMeleePassive_Sentinel : SFXPowerCustomActionMP_HumanMeleePassiveBase
    {
    }
    public class SFXPowerCustomActionMP_TechArmor : SFXPowerCustomAction_TechArmor
    {
    }
    public class SFXCharacterClassMP_Soldier : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Soldier : SFXPawn_PlayerMP
    {
    }
    public class SFXPowerCustomActionMP_AdrenalineRush : SFXPowerCustomAction_AdrenalineRush
    {
    }
    public class SFXPowerCustomActionMP_ConcussiveShot : SFXPowerCustomAction_ConcussiveShot
    {
    }
    public class SFXPowerCustomActionMP_FragGrenade : SFXPowerCustomAction_FragGrenade
    {
    }
    public class SFXPowerCustomActionMP_HumanMeleePassive_Soldier : SFXPowerCustomActionMP_HumanMeleePassiveBase
    {
    }
    public class SFXCharacterClassMP_Vanguard : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPowerCustomActionMP_Discharge : SFXPowerCustomAction_Discharge
    {
    }
    public class SFXPowerCustomActionMP_HumanMeleePassive_Vanguard : SFXPowerCustomActionMP_HumanMeleePassiveBase
    {
    }
    public class SFXCharacterClassMP_Soldier_BF3 : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPowerCustomActionMP_Carnage : SFXPowerCustomAction_Carnage
    {
    }
    public class ClientBeaconAddressResolver : Object
    {
        public NameReference BeaconName;
        public int BeaconPort;
    }
    public class WebApplication : Object
    {
        public string Path;
        public int WorldInfo;
        public int WebServer;
    }
    public class HelloWeb : WebApplication
    {
    }
    public class ImageServer : WebApplication
    {
    }
    public class InternetLink : Info
    {
        public Pointer Socket;
        public Pointer RemoteSocket;
        public Pointer PrivateResolveInfo;
        public int Port;
        public int DataPending;
        public ELinkMode LinkMode;
        public ELineMode InLineMode;
        public ELineMode OutLineMode;
        public EReceiveMode ReceiveMode;
    }
    public class MCPBase : Object
    {
        public Pointer VfTable_FTickableObject;
    }
    public class MeshBeacon : Object
    {
        public Pointer VfTable_FTickableObject;
        public NameReference BeaconName;
        public int MeshBeaconPort;
        public float HeartbeatTimeout;
        public float ElapsedHeartbeatTime;
        public int SocketSendBufferSize;
        public int SocketReceiveBufferSize;
        public int MaxBandwidthTestBufferSize;
        public int MinBandwidthTestBufferSize;
        public float MaxBandwidthTestSendTime;
        public float MaxBandwidthTestReceiveTime;
        public int MaxBandwidthHistoryEntries;
        public bool bShouldTick;
    }
    public class MeshBeaconClient : MeshBeacon
    {
        public ClientConnectionRequest ClientPendingRequest;
        public string ResolverClassName;
        public int __OnConnectionRequestResult__Delegate;
        public int __OnReceivedBandwidthTestRequest__Delegate;
        public int __OnReceivedBandwidthTestResults__Delegate;
        public int __OnTravelRequestReceived__Delegate;
        public int __OnCreateNewSessionRequestReceived__Delegate;
        public OnlineGameSearchResult HostPendingRequest;
        public int ResolverClass;
        public ClientBandwidthTestData CurrentBandwidthTest;
        public float ConnectionRequestTimeout;
        public float ConnectionRequestElapsedTime;
        public int Resolver;
        public EMeshBeaconClientState ClientBeaconState;
        public EMeshBeaconPacketType ClientBeaconRequestType;
    }
    public class MeshBeaconHost : MeshBeacon
    {
        public UniqueNetId OwningPlayerId;
        public ClientMeshBeaconConnection[] ClientConnections;
        public UniqueNetId[] PendingPlayerConnections;
        public int __OnReceivedClientConnectionRequest__Delegate;
        public int __OnStartedBandwidthTest__Delegate;
        public int __OnFinishedBandwidthTest__Delegate;
        public int __OnAllPendingPlayersConnected__Delegate;
        public int __OnReceivedClientCreateNewSessionResult__Delegate;
        public int ConnectionBacklog;
        public bool bAllowBandwidthTesting;
    }
    public class OnlineEventsInterfaceMcp : MCPBase
    {
        public Pointer[] HttpPostObjects;
        public EventUploadConfig[] EventUploadConfigs;
        public EEventUploadType[] DisabledUploadTypes;
        public bool bBinaryStats;
    }
    public class OnlineGameInterfaceImpl : Object
    {
        public int[] CreateOnlineGameCompleteDelegates;
        public int[] UpdateOnlineGameCompleteDelegates;
        public int[] DestroyOnlineGameCompleteDelegates;
        public int[] JoinOnlineGameCompleteDelegates;
        public int[] StartOnlineGameCompleteDelegates;
        public int[] EndOnlineGameCompleteDelegates;
        public int[] FindOnlineGamesCompleteDelegates;
        public int[] CancelFindOnlineGamesCompleteDelegates;
        public int __OnFindOnlineGamesComplete__Delegate;
        public int __OnCreateOnlineGameComplete__Delegate;
        public int __OnUpdateOnlineGameComplete__Delegate;
        public int __OnDestroyOnlineGameComplete__Delegate;
        public int __OnCancelFindOnlineGamesComplete__Delegate;
        public int __OnJoinOnlineGameComplete__Delegate;
        public int __OnRegisterPlayerComplete__Delegate;
        public int __OnUnregisterPlayerComplete__Delegate;
        public int __OnStartOnlineGameComplete__Delegate;
        public int __OnEndOnlineGameComplete__Delegate;
        public int __OnArbitrationRegistrationComplete__Delegate;
        public int __OnGameInviteAccepted__Delegate;
        public int __OnQuickMatchComplete__Delegate;
        public int OwningSubsystem;
        public int GameSettings;
        public int GameSearch;
        public int LanAnnouncePort;
        public int LanGameUniqueId;
        public int LanPacketPlatformMask;
        public float LanQueryTimeLeft;
        public float LanQueryTimeout;
        public byte LanNonce;
        public EOnlineGameState CurrentGameState;
        public ELanBeaconState LanBeaconState;
    }
    public class OnlineNewsInterfaceMcp : MCPBase
    {
        public NewsCacheEntry[] NewsItems;
        public int[] ReadNewsDelegates;
        public int __OnReadNewsCompleted__Delegate;
    }
    public class OnlineSubsystemCommonImpl : OnlineSubsystem
    {
        public int MaxLocalTalkers;
        public int MaxRemoteTalkers;
        public int GameInterfaceImpl;
        public bool bIsUsingSpeechRecognition;
    }
    public class OnlineTitleFileDownloadMcp : MCPBase
    {
        public int[] ReadTitleFileCompleteDelegates;
        public TitleFile[] TitleFiles;
        public string BaseUrl;
        public int __OnReadTitleFileComplete__Delegate;
        public Pointer HttpDownloader;
        public float TimeOut;
    }
    public class PartyBeacon : Object
    {
        public Pointer VfTable_FTickableObject;
        public int __OnDestroyComplete__Delegate;
        public NameReference BeaconName;
        public int PartyBeaconPort;
        public float HeartbeatTimeout;
        public float ElapsedHeartbeatTime;
        public bool bIsInTick;
        public bool bWantsDeferredDestroy;
        public bool bShouldTick;
    }
    public class PartyBeaconClient : PartyBeacon
    {
        public PartyReservation PendingRequest;
        public string ResolverClassName;
        public int __OnReservationRequestComplete__Delegate;
        public int __OnReservationCountUpdated__Delegate;
        public int __OnTravelRequestReceived__Delegate;
        public int __OnHostIsReady__Delegate;
        public int __OnHostHasCancelled__Delegate;
        public OnlineGameSearchResult HostPendingRequest;
        public int ResolverClass;
        public float ReservationRequestTimeout;
        public float ReservationRequestElapsedTime;
        public int Resolver;
        public EPartyBeaconClientState ClientBeaconState;
        public EPartyBeaconClientRequest ClientBeaconRequestType;
    }
    public class PartyBeaconHost : PartyBeacon
    {
        public ClientBeaconConnection[] Clients;
        public PartyReservation[] Reservations;
        public int __OnReservationChange__Delegate;
        public int __OnReservationsFull__Delegate;
        public int __OnClientCancellationReceived__Delegate;
        public NameReference OnlineSessionName;
        public int NumTeams;
        public int NumPlayersPerTeam;
        public int NumReservations;
        public int NumConsumedReservations;
        public int ConnectionBacklog;
        public int ReservedHostTeamNum;
        public bool bBestFitTeamAssignment;
    }
    public class TcpLink : InternetLink
    {
        public byte[] SendFIFO;
        public string RecvBuf;
        public int AcceptClass;
        public IpAddr RemoteAddr;
        public ELinkState LinkState;
    }
    public class WebConnection : TcpLink
    {
        public string ReceivedData;
        public int WebServer;
        public int request;
        public int Response;
        public int Application;
        public int RawBytesExpecting;
        public int MaxValueLength;
        public int MaxLineLength;
        public int ConnId;
        public bool bDelayCleanup;
    }
    public class WebRequest : Object
    {
        public Map_Mirror HeaderMap;
        public Map_Mirror VariableMap;
        public string RemoteAddr;
        public string URI;
        public string Username;
        public string Password;
        public string ContentType;
        public int ContentLength;
        public ERequestType RequestType;
    }
    public class WebResponse : Object
    {
        public Map_Mirror ReplacementMap;
        public string[] headers;
        public string IncludePath;
        public string CharSet;
        public int Connection;
        public bool bSentText;
        public bool bSentResponse;
    }
    public class WebServer : TcpLink
    {
        public string Applications;
        public string ApplicationPaths;
        public string ServerName;
        public string ServerURL;
        public int ApplicationObjects;
        public int ListenPort;
        public int MaxConnections;
        public int DefaultApplication;
        public int ExpirationSeconds;
        public int ConnectionCount;
        public int ConnId;
        public bool bEnabled;
    }
    public class SFXCustomAction_KroganMeleeOne : SFXCustomAction_PlayerMeleeBase
    {
        public int AnimSet;
    }
    public class SFXDamageType_KroganHeavyMelee : SFXDamageType_HeavyMelee
    {
    }
    public class SFXCharacterClassMP_Sentinel_Krogan : SFXCharacterClass_ContentMP
    {
    }
    public class SFXCustomAction_KroganRoar : SFXCustomAction_SingleAnim
    {
        public NameReference RageEffectCategory;
        public int AnimInfo;
        public float RageDuration;
        public int LocalPlayerRoar;
        public int NonLocalPlayerRoar;
    }
    public class SFXCustomAction_KroganSyncCoverGrab : SFXCustomAction_SyncCoverGrab
    {
    }
    public class SFXCustomActionMP_KroganPunch : SFXCustomAction_PlayerHeavyMeleeBase
    {
        public float MoveDist;
    }
    public class SFXGameEffect_KroganRoar : SFXGameEffect
    {
        public Guid KroganRoarEffectGuid;
        public int CE_KroganRoarEffect;
        public float RageDuration;
    }
    public class SFXPawn_Krogan_MP : SFXPawn_PlayerMP
    {
    }
    public class SFXPowerCustomActionMP_KroganMeleePassive : SFXPowerCustomActionMP_MeleePassiveBase
    {
        public PowerData RageDamageReduction;
        public PowerData RageMeleeDamageBonus;
        public float[] KillTimeStamps;
        public int RageNumEnemies;
        public float RageKillWindow;
        public int Evolve_RageNumEnemies;
        public float Evolve_RageMeleeDamageBonus;
        public float Evolve_RageDamageReductionBonus1;
        public float Evolve_RageDamageReductionBonus2;
        public float RageStartTimestamp;
        public float RageDuration;
    }
    public class SFXPowerCustomActionMP_KroganPassive : SFXPowerCustomActionMP_PassiveBase
    {
    }
    public class SFXPowerCustomActionMP_TechArmor_Krogan : SFXPowerCustomActionMP_TechArmor
    {
    }
    public class SFXCharacterClassMP_Soldier_Krogan : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPowerCustomActionMP_Fortification : SFXPowerCustomAction_Fortification
    {
    }
    public class SFXPowerCustomActionMP_InfernoGrenade : SFXPowerCustomAction_InfernoGrenade
    {
    }
    public class SFXSeqAct_CloseMPWeaponSelect : SequenceAction
    {
    }
    public class SFXCharacterClassMP_Engineer_Quarian_Female : SFXCharacterClass_ContentMP
    {
    }
    public class SFXCustomAction_TechEvadeLeft : SFXCustomAction_PlayerEvadeBase
    {
        public float MoveDist;
        public int AnimInfo;
    }
    public class SFXCustomAction_TechEvadeRight : SFXCustomAction_PlayerEvadeBase
    {
        public float MoveDist;
        public int AnimInfo;
    }
    public class SFXPowerCustomActionMP_FemQuarianMeleePassive : SFXPowerCustomActionMP_MeleePassiveBase
    {
    }
    public class SFXPowerCustomActionMP_FemQuarianPassive : SFXPowerCustomActionMP_PassiveBase
    {
    }
    public class SFXPowerCustomActionMP_SentryTurret : SFXPowerCustomAction_SentryTurret
    {
    }
    public class SFXCharacterClassMP_Infiltrator_Quarian_Female : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPowerCustomActionMP_AIHacking : SFXPowerCustomAction_AIHacking
    {
    }
    public class SFXCharacterClassMP_Infiltrator_Salarian : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPowerCustomActionMP_EnergyDrain : SFXPowerCustomAction_EnergyDrain
    {
    }
    public class SFXPowerCustomActionMP_ProximityMine : SFXPowerCustomAction_ProximityMine
    {
    }
    public class SFXPowerCustomActionMP_SalarianMeleePassive : SFXPowerCustomActionMP_MeleePassiveBase
    {
    }
    public class SFXPowerCustomActionMP_SalarianPassive : SFXPowerCustomActionMP_PassiveBase
    {
    }
    public class SFXCharacterClassMP_Engineer_Salarian : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPowerCustomActionMP_Decoy : SFXPowerCustomAction_Decoy
    {
    }
    public class SFXAI_AutoBot : SFXAI_Cover
    {
    }
    public class SFXAICmd_Base_AutoBot : SFXAICmd_Base_Cover
    {
    }
    public class SFXAnnexZone : Actor
    {
        public Vector AnnexZoneEmitterTranslation;
        public int GroundDecal;
        public int GroundDecalArchetype;
        public int PS_AnnexZoneTemplate;
        public int AnnexZoneEmitter;
        public float AnnexZoneTemplateScale;
        public int AnnexObjective;
    }
    public class SFXObjective_Annex_DefendZone : SFXOperationObjective
    {
        public PlayerAnnexState[] PlayerAnnexStates;
        public int InAnnexZoneArray;
        public NameReference ZoneStartGuiSound;
        public NameReference ZoneFailGuiSound;
        public NameReference ZoneSuccessGuiSound;
        public NameReference ZoneEnterExitGuiSound;
        public float CompletionCount;
        public float CompletionCountTimer;
        public float CompletionCountFrequency;
        public float CompletionRatePerPlayer;
        public int CE_OmniTool;
        public float ScoreRewardFrequency;
        public float ScoreRewardTimer;
        public float CompletionAtLastScoreReward;
        public float LeaveZoneVOChance;
        public float NotInZoneVOMinTime;
        public float NotInZoneVOMaxTime;
        public int HackStartSound;
        public int HackStopSound;
        public int AnnexStartedSound;
        public int AnnexSucceededSound;
        public int AnnexFailedSound;
        public int AnnexWave;
        public int AnnexZone;
        public int PlayersInZone;
        public float PlayerUpdateDelayTime;
        public bool bIsComplete;
        public bool bHalfWayMessageSent;
    }
    public class SFXObjective_Annex_DefendZone_Hack : SFXObjective_Annex_DefendZone
    {
    }
    public class SFXObjective_Annex_DefendZone_Upload : SFXObjective_Annex_DefendZone
    {
    }
    public class SFXObjective_Assassination : SFXObjective_AssassinationBase
    {
        public AssassinationTargetData[] AssassinationTargetDataArray;
        public float[] DifficultyTimeModifier;
        public int FirstTargetTimeBonus;
        public float InstructionReminderDelay;
        public int srTargetKilledMessage;
        public int srKillNextTargetMessage;
        public int srEndWaveSuccess;
        public float DamageReductionBonus;
        public int TargetStartSoundEvent;
        public int TargetStopSoundEvent;
        public float NewTargetTimestamp;
        public bool bWaitingForWave;
    }
    public class SFXObjective_Disarm_Disable : SFXObjective_Disarm_Base
    {
    }
    public class SFXObjective_Disarm_Enable : SFXObjective_Disarm_Base
    {
    }
    public class SFXObjective_ExtractionPoint : SFXOperationObjective
    {
        public int[] PlayersInZone;
        public Vector ExtractionZoneEmitterTranslation;
        public int GroundDecal;
        public int GroundDecalArchetype;
        public int PS_ExtractionZoneTemplate;
        public int ExtractionZoneEmitter;
        public float ExtractionZoneTemplateScale;
        public int srObjectiveMarker;
        public float ShuttleArriveStart;
        public float ShuttleMatineeDuration;
        public float LastNotificationTime;
        public float ShuttleArrivedEndOfMatchDelay;
        public float ShuttleFarAwayPct;
        public float ShuttleClosePct;
        public float UpdateMusicFrequency;
        public float MusicRTPCValue;
        public float MusicRTPCMax;
        public bool GroundDecalEnabled;
        public bool bShuttleDeparted;
        public bool bShuttleArrived;
    }
    public class Bio2DA : Object
    {
        public Map_Mirror m_CellDataMap;
        public Map_Mirror m_MasterRowNameToIndex;
        public Map_Mirror m_ColumnIndex;
        public Bio2DACellData[] m_CellData;
        public Bio2daMasterRowIndexRec[] m_MasterRowIndex;
        public NameReference[] m_sRowLabel;
    }
    public class Bio2DANumberedRows : Bio2DA
    {
        public Map_Mirror m_MasterRowNumberToArrayIndex;
        public Bio2daMasterRowIndexRec[] m_MasterNumberedRowIndex;
        public int[] m_lstRowNumbers;
    }
    public class SFXActorFactoryRigidBody : ActorFactoryRigidBody
    {
    }
    public class BioActorFactoryPhysicsActor : SFXActorFactoryRigidBody
    {
    }
    public class BioSkelControlAdditiveLookAt : SkelControlLookAt
    {
        public float MaxAngleUpDown;
        public bool bSeparateUpDownLimit;
    }
    public class BioActorLookAtController : BioSkelControlAdditiveLookAt
    {
    }
    public class BioAiController : GameAIController
    {
        public EnemyInfo[] EnemyList;
        public DelayUpdateInfo[] DelayUpdateList;
        public int[] IgnoredTargets;
        public int[] IgnoredSquads;
        public Vector MovePoint;
        public CoverInfo Cover;
        public CoverInfo CoverGoal;
        public CoverInfo LastCover;
        public float EnemyListLastUpdateTime;
        public int SpawnFactory;
        public float InterpEnemyLocSpeed;
        public float Response_MinEnemySeenTime;
        public float Response_MinEnemyHearTime;
        public int FireTarget;
        public int ForcedTarget;
        public int PreferredTarget;
        public float TargetAcquisitionTime;
        public float EnemyDistance_Short;
        public float EnemyDistance_Medium;
        public float EnemyDistance_Long;
        public float EnemyDistance_Melee;
        public float m_fActivateTime;
        public int MyBP;
        public int MoveGoal;
        public float MoveOffset;
        public float AdjustToSlotTime;
        public float UnawarePeripheralVision;
        public bool bDebug_AI;
        public bool bDebug_AIRange;
        public bool bDebug_AIEnemyList;
        public bool bDebug_ThreatRadius;
        public bool bAcquireNewCover;
        public bool bHighCoverOnly;
        public bool bReachedMoveGoal;
        public bool bReachedCover;
    }
    public class BioAnim_TurnInPlace_Rotator : AnimNodeBlendBase
    {
    }
    public class BioAnimCheckBlendOut : Object
    {
    }
    public class BioAnimMovementSync : Object
    {
    }
    public class BioAnimNodeAimOffset : AnimNodeAimOffset
    {
        public float TurnAroundBlendTime;
        public float AngVelAimOffsetChangeSpeed;
        public float AngVelAimOffsetScale;
        public EAimInputType AimInput;
    }
    public class BioAnimNodeBlend_TurnInPlace : AnimNodeBlendList
    {
        public int[] OffsetNodes;
        public RotTransitionInfo[] RotTransitions;
        public float TransitionBlendInTime;
        public float TransitionBlendOutTime;
        public int CurrentTransitionIndex;
        public float TransitionThresholdAngle;
        public float fRotationResetRate;
        public float AbortThresholdPercentage;
        public float AbortTransitionBlendTime;
        public bool bDelayBlendOutToPlayAnim;
        public bool bPlayingTurnTransition;
        public bool bTransitioningToIdle;
    }
    public class BioAnimNodeBlendBase : AnimNodeBlendBase
    {
        public float m_fBlendTime;
        public float m_fRemainingTime;
        public float m_fTotalBlendTime;
        public float m_fTargetWeight;
        public int m_nLastChild;
        public int m_nTargetChild;
        public bool m_bIsBlending;
        public bool m_bTriggerTimeBlend;
        public bool m_bBlendDirect;
        public bool m_bShowSlider;
    }
    public class BioAnimNodeBlendAdditive : BioAnimNodeBlendBase
    {
    }
    public class BioAnimNodeBlendAdditiveCover : BioAnimNodeBlendAdditive
    {
        public float BlendInDuration;
        public float BlendOutDuration;
    }
    public class BioAnimNodeBlendAdditiveDamage : BioAnimNodeBlendAdditive
    {
        public Vector m_vDamageDir;
        public int DamageNodeIndex;
        public float MaxDamageThreshold;
        public bool bLastDamageNode;
        public bool bProcessDamage;
    }
    public class BioAnimNodeBlendAdditivePower : BioAnimNodeBlendAdditive
    {
    }
    public class BioAnimNodeBlendByAction : AnimNodeBlendList
    {
        public BlendTimeFrom m_aBlendTimeNode;
    }
    public class BioAnimNodeBlendByAim : AnimNodeBlendBase
    {
        public BioAnimNodeBlendByAimLimits LimitsDefault;
        public BioAnimNodeBlendByAimLimits LimitsMirrored;
        public float AimBlendOutDuration;
        public float YawRate;
    }
    public class BioAnimNodeBlendByCustomAnim : AnimNodeBlend
    {
    }
    public class BioAnimNodeBlendByDamage : AnimNodeBlendList
    {
        public bool bAdditiveMode;
    }
    public class BioAnimNodeBlendByDeath : BioAnimNodeBlendBase
    {
        public NameReference Head;
        public NameReference LeftArm;
        public NameReference RightArm;
        public NameReference LeftLeg;
        public NameReference RightLeg;
        public NameReference DeathEventName;
        public int m_nHeadRoot;
        public int m_nLeftArmRoot;
        public int m_nRightArmRoot;
        public int m_nLeftLegRoot;
        public int m_nRightLegRoot;
        public float m_fTimeToRagdoll;
        public float m_fCurrentTime;
        public bool m_bEventTriggered;
    }
    public class BioAnimNodeBlendByFireSequence : AnimNodeBlendList
    {
        public float BlendDuration;
    }
    public class BioAnimNodeBlendByIncline : BioAnimNodeBlendBase
    {
        public float BlendDuration;
        public float MaxInclineUpAngle;
        public float MaxInclineDownAngle;
        public float m_fInclineAngle;
        public bool bForceLevelReferenceAngle;
    }
    public class BioAnimNodeBlendByLean : BioAnimNodeBlendBase
    {
        public float BlendDuration;
        public float BlendAcrossDuration;
        public float MaxLeanAngle;
        public float m_fLeanAngle;
        public float m_fLastLeanAngle;
        public bool m_bSwitchingLean;
    }
    public class BioAnimNodeBlendByPosture : AnimNodeBlend
    {
        public float BlendDuration;
    }
    public class BioAnimNodeBlendByPower : AnimNodeBlendList
    {
    }
    public class BioAnimNodeBlendByReload : AnimNodeBlendList
    {
    }
    public class BioAnimNodeBlendByStorm : AnimNodeBlendList
    {
        public float Idle2StormBlendDuration;
        public float Storm2IdleBlendDuration;
    }
    public class BioAnimNodeBlendByWeaponAction : AnimNodeBlendList
    {
    }
    public class BioAnimNodeBlendByWeaponEquip : AnimNodeBlendList
    {
        public float IdleToDrawBlendDuration;
        public float IdleToHolsterBlendDuration;
        public float HolsterToDrawBlendDuration;
        public float HolsterToIdleBlendDuration;
    }
    public class BioAnimNodeBlendDirectional : BioAnimNodeBlendBase
    {
        public float DirDegreesPerSecond;
        public float ForeBackBlendTime;
        public float RotationDeadzone;
        public float m_fDirAngle;
        public bool m_bForward;
        public bool m_bWasMoving;
    }
    public class BioAnimNodeBlendDirStart : BioAnimNodeBlendBase
    {
        public float m_fStartHeading;
        public float LeftStartTime;
        public float RightStartTime;
        public bool m_bIsStarting;
    }
    public class BioAnimNodeBlendMultiAdditive : BioAnimNodeBlendBase
    {
        public int m_nNumAdditiveChildren;
        public bool m_bBasePoseForEachChild;
    }
    public class BioAnimNodeBlendEyeNoiseAndBlink : BioAnimNodeBlendMultiAdditive
    {
        public int m_nBlinkState;
        public float m_fCachedRegularBlinkWeight;
        public float m_fBlinkBlendOutTime;
    }
    public class BioAnimNodeBlendFall : AnimNodeBlendList
    {
        public float BlendIntoFallingTime;
        public float BlendIntoLandingTime;
    }
    public class BioAnimNodeBlendGetUp : BioAnimNodeBlendBase
    {
    }
    public class BioAnimNodeBlendMovement : AnimNodeBlendList
    {
        public NameReference WalkSynchGroupName;
        public NameReference RunSynchGroupName;
        public float IdleSpeed;
        public float MinWalkSpeed;
        public float MidWalkSpeed;
        public float MaxWalkSpeed;
        public float MinRunSpeed;
        public float MidRunSpeed;
        public float MaxRunSpeed;
        public float IdleTimeout;
        public float BlendTimeIdle2Walk;
        public float BlendTimeIdle2Run;
        public float BlendTimeWalk2Idle;
        public float BlendTimeWalk2Run;
        public float BlendTimeRun2Idle;
        public float BlendTimeRun2Walk;
    }
    public class BioAnimNodeBlendMoveStop : BioAnimNodeBlendBase
    {
    }
    public class BioAnimNodeBlendPerBone : AnimNodeBlendPerBone
    {
        public NameReference[] BioBranchStartBoneName;
        public NameReference BlendName;
        public float OverblendFactor;
        public float FadeInTime;
        public float FadeOutTime;
        public bool m_bNotifiedBlendComplete;
        public bool m_bBoneSwitchOn;
        public EBoneBlendType BoneBlendType;
    }
    public class BioAnimNodeBlendPose : BioAnimNodeBlendBase
    {
        public NameReference[] m_aChildAnimsets;
        public float m_fTransEndTime;
        public float m_fEndBlendDuration;
    }
    public class BioAnimNodeBlendPoseAndGestures : BioAnimNodeBlendMultiAdditive
    {
        public NameReference[] m_aChildAnimsets;
        public NameReference[] m_aRefPoseAnimsets;
        public BioChildPinData[] m_aChildPinData;
    }
    public class BioAnimNodeBlendScalar : BioAnimNodeBlendBase
    {
        public BioScalarBlendParams[] m_aChildBlendParams;
        public string m_sDescription;
        public BioScalarPrecomputedValues[] m_aChildPrecomputes;
        public float m_fBlendPctPerSecond;
        public float m_fBlendSpanTime;
        public float m_fRangeMin;
        public float m_fRangeMax;
        public float m_fUnitsPerSecond;
        public float m_fCurrentScalar;
        public float m_fTargetScalar;
        public int m_oBehavior;
        public bool m_bBlendInstant;
        public bool m_bUseBlendSpanTime;
    }
    public class BioAnimNodeBlendScalarBehavior : Object
    {
        public BioAnimScalarNodeBehaviorDef[] m_aNodeDefinitions;
    }
    public class BioAnimNodeBlendScalarMovementBehavior : BioAnimNodeBlendScalarBehavior
    {
        public bool bUseSprint;
        public bool bUseSnapshotSpeed;
        public bool bUseSnapshotStartSpeed;
        public bool bUseLocalSpace;
        public EBioAnimNodeBlendScalarMovementBehavior MovementBehavior;
        public EBioAnimNodeBlendScalarMoveAxis MoveAxis;
        public EBioAnimNodeBlendScalarMoveAxisDir AxisDir;
        public EBioAnimNodeBlendScalarMoveAxisDirMode AxisDirMode;
    }
    public class BioAnimNodeBlendSkidTurn : BioAnimNodeBlendBase
    {
        public float m_fSkidHeading;
        public float RightNearAngle;
        public float RightFarAngle;
        public float LeftNearAngle;
        public float LeftFarAngle;
        public float LeftStartTime;
        public float RightStartTime;
        public bool m_bIsSkidding;
        public bool m_bFinishSkidStarted;
    }
    public class BioAnimNodeBlendSpeed : BioAnimNodeBlendBase
    {
        public float BlendTimeToIdle;
        public float BlendTimeFromIdle;
        public float BlendTimeMoving;
        public float WalkSpeed;
        public float RunSpeed;
        public float WalkRateScaled;
        public float RunRateScaled;
        public float m_fStartSpeed;
        public float m_fCurrentSpeed;
        public float m_fStartCheckTime;
        public bool m_bIsStarting;
        public bool m_bIsStarted;
        public EBioAnim_SpeedType SpeedType;
    }
    public class BioAnimNodeBlendState : BioAnimNodeBlendBase
    {
        public BioAnimBlendParams[] m_aChildBlendParams;
        public int m_nActiveChild;
        public int m_oBehavior;
    }
    public class BioAnimNodeBlendStateBehavior : Object
    {
        public BioAnimStateNodeBehaviorDef[] m_aNodeDefinitions;
        public float m_fQueryPlayTime;
    }
    public class BioAnimNodeBlendStateActionBehavior : BioAnimNodeBlendStateBehavior
    {
        public bool m_bPlayedRecoverAnim;
        public EBioAnimNodeBlendStateActionBehavior ActionBehavior;
    }
    public class BioAnimNodeBlendStateCombatBehavior : BioAnimNodeBlendStateBehavior
    {
        public bool bUseCoverAnimState;
        public bool bOnlyDuringWeaponSwitch;
        public bool bOnlyDuringNoOffensiveAction;
        public EBioAnimNodeBlendStateCombatBehavior CombatBehavior;
    }
    public class BioAnimNodeBlendStateMovementBehavior : BioAnimNodeBlendStateBehavior
    {
        public float BlendDownPerc;
        public float ScaleByValue;
        public float WalkRate;
        public float RunRate;
        public float BlendResetWeight;
        public float m_fStartCheckTime;
        public int m_nLastPhys;
        public bool bUseSprint;
        public bool bUseSnapshotSpeed;
        public bool bUseSnapshotStartSpeed;
        public bool bUseDirStartControl;
        public bool m_bIsStarted;
        public bool m_bInTakeoff;
        public bool m_bInLanding;
        public bool m_bPlayedAnim;
        public bool m_bRootMotionOn;
        public EBioAnimNodeBlendStateMovementBehavior MovementBehavior;
        public EBioAnimNodeBlendStateMoveAxisDir AxisDir;
        public EBioAnimNodeBlendStateMoveAxisDirMode AxisDirMode;
    }
    public class BioAnimNodeBlendStrafe : AnimNodeBlendBase
    {
        public NameReference SynchGroupName;
        public float BlendSpeed;
        public float IdleRelativePos;
        public float IdleAngle;
    }
    public class BioAnimNodeBlendStuntActor : AnimNodeBlendList
    {
    }
    public class BioAnimNodeBlendTurn : AnimNodeBlendList
    {
        public float BlendTime;
        public float YawTurnTriggerDegrees;
    }
    public class BioAnimNodeBlendWeaponEquip : AnimNodeBlendBase
    {
    }
    public class BioAnimNodeCameraShake : BioAnimNodeBlendAdditive
    {
    }
    public class BioAnimNodeCombatMode : BioAnimNodeBlendBase
    {
        public float m_blendIntoTransitionDuration;
        public float m_blendOutOfTransitionDuration;
        public float m_blendFromNonCombatToCombatDuration;
        public float m_blendFromCombatToNonCombatDuration;
        public bool m_isInitialStateDetermined;
        public EBioAnimNodeCombatModeState m_currentState;
    }
    public class BioAnimNodeCover2Actions : AnimNodeBlendList
    {
        public float Default2LeanBlendDuration;
        public float Lean2DefaultBlendDuration;
        public float Default2PopupBlendDuration;
        public float Popup2DefaultBlendDuration;
        public float Default2PeekBlendDuration;
        public float Peek2DefaultBlendDuration;
        public float Default2PartialLeanBlendDuration;
        public float PartialLean2DefaultBlendDuration;
        public float Default2PartialPopUpBlendDuration;
        public float PartialPopUp2DefaultBlendDuration;
        public float Default2AimbackBlendDuration;
        public float Aimback2DefaultBlendDuration;
    }
    public class BioAnimNodeCover2ChangeDirection : AnimNodeBlendList
    {
        public float IdleToTransitionBlendDuration;
        public float TransitionToIdleBlendDuration;
    }
    public class BioAnimNodeCover2Move : AnimNodeBlendList
    {
        public float Idle2MoveBlendDuration;
        public float Move2IdleBlendDuration;
    }
    public class BioAnimNodeCover2Neutral : AnimNodeBlendList
    {
        public float BlendTime;
    }
    public class BioAnimNodeCover2Transition : AnimNodeBlendList
    {
        public float Intro2BodyBlendDuration;
        public float Body2OutroBlendDuration;
        public float Intro2OutroBlendDuration;
        public float Outro2IntroBlendDuration;
        public bool IntroIsBlocking;
        public bool OutroIsBlocking;
        public bool bStopInputOnBlockingTransitions;
        public ERootMotionMode IntroRootMotionMode;
        public ERootMotionRotationMode IntroRootRotationMode;
        public ERootMotionMode OutroRootMotionMode;
        public ERootMotionRotationMode OutroRootRotationMode;
    }
    public class BioAnimNodeCover2Type : AnimNodeBlendList
    {
    }
    public class BioAnimNodeFrame : AnimNode
    {
        public bool m_bCaptureOnRelevant;
    }
    public class BioAnimNodeLocomotion : AnimNodeBlendList
    {
        public float ToIdleBlendDuration;
        public float ToMovingBlendDuration;
        public float ToStopBlendDuration;
        public float IdleToStartBlendDuration;
        public float StopToStartBlendDuration;
    }
    public class BioAnimNodeLocomotionMoving : AnimNodeBlendBase
    {
        public NameReference SynchGroupName;
        public float BlendSpeed;
        public float BlendSpeedLeanIn;
        public float BlendSpeedLeanOut;
        public float AngleLeanLeft;
        public float AngleLeanRight;
        public float AngleAscend;
        public float AngleDescend;
        public float MinSpeed;
        public float MidSpeed;
        public float MaxSpeed;
    }
    public class BioAnimNodeLocomotionSpeed : AnimNodeBlendList
    {
        public float BlendTime;
        public float RunSpeed;
        public float WalkSpeed;
    }
    public class BioAnimNodeLocomotionStart : AnimNodeBlendBase
    {
        public float BlendOutRelPos;
        public float FreeRotationRelPos;
        public NameReference SynchGroupName;
        public float LeftFootNormalizedRange;
    }
    public class BioAnimNodeLocomotionStop : AnimNodeBlendList
    {
        public float LeftFootNormalizedRange;
        public float BlendOutTime;
    }
    public class BioAnimNodeRandom : AnimNodeRandom
    {
        public int nChildOnActive;
        public bool bForceChildOnActive;
    }
    public class BioAnimNodeSequence : AnimNodeSequence
    {
        public Pointer m_pDFCurTimeProp;
        public Pointer m_pDFRateProp;
        public Pointer m_pDFSeqLenProp;
        public NameReference DF_CurrentTime;
        public NameReference DF_Rate;
        public NameReference DF_SequenceLength;
        public bool bRandomizeStartTime;
    }
    public class BioAnimNodeSequenceByBoneRotation : AnimNodeSequence
    {
        public AnimByRotation[] AnimList;
        public NameReference BoneName;
        public EAxis BoneAxis;
    }
    public class BioAnimNodeSequenceMirror : AnimNodeSequence
    {
        public NameReference MirroredAnimSeqName;
    }
    public class BioAnimNotify_CustomAction : AnimNotify_Scripted
    {
        public NameReference Info;
    }
    public class BioAnimNotifyEvent : AnimNotify
    {
        public NameReference EventName;
        public bool IsGlobal;
    }
    public class BioAnimNotifyVFX : AnimNotify
    {
        public NameReference m_nmVisualEffectLabel;
    }
    public class BioAreaTransition : TriggerVolume
    {
        public NameReference sMoveToArea;
        public NameReference sMoveToStartPoint;
    }
    public class BioSquadLinesComponent : PrimitiveComponent
    {
    }
    public class BioBaseSquad : Actor
    {
        public int[] Members;
        public int[] PlaypenVolumes;
        public int[] CombatZones;
        public int TargetData;
        public bool m_bSquadHasVehicle;
        public bool bIsPlayerSquad;
        public bool bSquadEnabled;
        public bool PathingTowardCombatZone;
    }
    public class BioBaseSquadDesign : BioBaseSquad
    {
    }
    public class BioBaseSquadDesignCombat : BioBaseSquadDesign
    {
    }
    public class SFXCameraInput : Object
    {
        public Vector2D CameraSensitivity;
        public float TimeToReachFullSpeed;
        public float MaxCameraRotationSpeed;
        public float StickDeadZone;
        public float MouseClampMax;
        public bool m_bUseExplorationSensitivity;
        public bool bSwitchSticks;
        public bool bClampMouse;
    }
    public class SFXCameraMode : Object
    {
        public TViewTarget ViewTarget;
        public Vector Offset;
        public Vector HookOffset;
        public Rotator CameraTargetDir;
        public NameReference HookName;
        public NameReference CameraName;
        public float FOV;
        public float AspectRatio;
        public float TimeToRecenter;
        public float RotationSpeedLimit;
        public float RecenterStrength;
        public bool bIsCameraShakeEnabled;
        public bool bCollisionEnabled;
        public bool bConstrainAspectRatio;
        public bool bRecenterCamera;
        public bool bFirstPerson;
        public bool bCameraRubberBand;
        public bool bAllowSpectate;
        public bool bRecenterCameraNew;
        public bool bAutoCancelCameraRecentering;
        public bool bRecenterCancelled;
    }
    public class BioCameraUtility : SFXCameraMode
    {
        public float m_fCameraCollisionTestPointRange;
    }
    public class BioCameraBehavior : BioCameraUtility
    {
    }
    public class BioCameraBehaviorConversation : BioCameraBehavior
    {
        public Vector m_vFixedCamPosition;
        public Rotator m_rFixedCamRotation;
        public Vector m_vProceduralCamPosition;
        public Rotator m_rProceduralCamRotation;
        public BioStageDOFData m_tDOFData;
        public Rotator m_rRotationOffset;
        public int ViewSource;
        public int Target;
        public float m_fNearPlane;
        public float CAMERA_FOV;
        public float m_fLateralOffset;
        public int m_pIdleCamAnimSet;
        public float m_fIdleCamTimeIndex;
        public int m_idleCamAnimIndex;
        public bool m_bIdleCamEnabled;
    }
    public class BioCameraBehaviorFlourish : BioCameraBehavior
    {
        public Vector CameraHook;
        public float ZOffset;
        public float SpeedYaw;
        public float DesiredPitch;
        public float SpeedPitch;
        public float DesiredDistance;
        public float SpeedDistance;
        public float fPitchDir;
        public float fDesiredPitch;
    }
    public class BioCameraBehaviorFree : BioCameraBehavior
    {
        public bool m_bCameraLocked;
    }
    public class BioDefine : Object
    {
    }
    public class BioCameraBehaviorGalaxy : BioCameraBehavior
    {
        public Map_Mirror m_mapObjectLookup;
        public Map_Mirror m_mapActorLookup;
        public Map_Mirror m_mapActorPool;
        public SFXSystemScanData[] m_aSystemScans;
        public int[] m_aSystemScanCandidates;
        public float m_fShipMinRotationSpeed;
        public float m_fShipMaxRotationSpeed;
        public float m_fShipControlDeadzone;
        public float m_fShipSystemAccel;
        public float m_fShipSystemDeccel;
        public float m_fShipClusterAccel;
        public float m_fShipClusterDeccel;
        public float m_fSystemScanCooldownTime;
        public float m_fSystemScanRange;
        public float m_fSystemScanPropagationSpeed;
        public int srReaperTutorialMessage;
        public int srScanningTutorialMessage;
    }
    public class BioCameraBehaviorLocked : BioCameraBehavior
    {
    }
    public class BioCameraZoom : Object
    {
        public BioZoomFocusConfig m_focusConfig;
        public BioZoomMagnificationConfig m_magnificationConfig;
        public int m_nCurrentMagnificationLevel;
        public float m_fFOVTarget;
        public float m_fFOVRate;
        public float m_fFOVMin;
        public float m_fFOVMax;
        public float m_fCamStickScalarTarget;
        public float m_fCamStickScalarRate;
        public float m_fCamStickScalarMin;
        public float m_fFocusDistance;
        public float m_fFocusDistanceTarget;
    }
    public class RvrClientEffectInterface : Object
    {
        public int m_nPriority;
        public bool m_bIgnoreAttachedActorHiddenState;
    }
    public class SFXSaveGame : Object
    {
        public SaveTimeStamp TimeStamp;
        public Rotator SaveRotation;
        public Vector SaveLocation;
        public PlotTableSaveRecord PlotRecord;
        public PlayerSaveRecord PlayerRecord;
        public ME1PlotTableRecord ME1PlotRecord;
        public GalaxyMapSaveRecord GalaxyMapRecord;
        public int SavedObjectiveText;
        public NameReference BaseLevelNameDisplayOverrideToWriteAndClear;
        public NameReference BaseLevelNameDisplayOverrideAsRead;
        public NameReference BaseLevelName;
        public int EndGameState;
        public int Disc;
        public int CurrentLoadingTip;
        public float SecondsPlayed;
        public EDifficultyOptions Difficulty;
        public EAutoReplyModeOptions ConversationMode;
        public Guid[] UseModuleRecords;
        public LevelTreasureSaveRecord[] TreasureRecords;
        public StreamingStateSaveRecord[] StreamingRecords;
        public PlayerVariableSaveRecord[] PlayerVariableRecords;
        public PlaceableSaveRecord[] PlaceableRecords;
        public Guid[] PawnRecords;
        public ObjectiveMarkerSaveRecord[] ObjectiveMarkerRecords;
        public ME2ImportPowerMapping[] ME2ImportPowerMappings;
        public LevelSaveRecord[] LevelRecords;
        public KismetBoolSaveRecord[] KismetRecords;
        public HenchmanSaveRecord[] HenchmanRecords;
        public DoorSaveRecord[] DoorRecords;
        public DependentDLCRecord[] DependentDLC;
    }
    public class SFXLoadoutData : Object
    {
        public int[] Weapons;
        public ShieldLoadout[] ShieldLoadouts;
        public int[] Powers;
        public PowerLevelUp[] PowerLevelUpInfo;
        public Vector ShieldOffset;
        public Vector2D WeaponLevelRange;
        public float ShieldScale;
    }
    public class SFXPlayerSquadLoadoutData : SFXLoadoutData
    {
        public LoadoutWeaponInfo[] AssaultRifles;
        public LoadoutWeaponInfo[] Shotguns;
        public LoadoutWeaponInfo[] SniperRifles;
        public LoadoutWeaponInfo[] AutoPistols;
        public LoadoutWeaponInfo[] HeavyPistols;
        public LoadoutWeaponInfo[] HeavyWeapons;
        public PlotWeapon[] PlotWeapons;
        public ELoadoutWeapons[] StandardWeapons;
        public UnlockableWeaponClass[] UnlockableStandardWeapons;
        public PlayerLoadoutInfoStruct[] PlayerLoadoutInfo;
        public LoadoutInfo[] HenchLoadoutInfo;
        public BonusWeaponInfo[] PlayerBonusWeapons;
        public SpecialWeaponInfo[] PlayerSpecialWeapons;
        public SpecialWeaponInfo[] HenchmenSpecialWeapons;
        public int MaxWeapons;
    }
    public class SFXEngine : GameEngine
    {
        public GalaxyMapSaveRecord SavedGalaxyMapRecord;
        public Guid[] DeadPawnList;
        public Guid[] UseModuleList;
        public LevelTreasureSaveRecord[] SavedTreasure;
        public KismetBoolSaveRecord[] SavedKismetList;
        public HenchmanSaveRecord[] HenchmanRecords;
        public DoorSaveRecord[] SavedDoorList;
        public PlaceableSaveRecord[] SavedPlaceableList;
        public string[] CorruptedCareers;
        public SFXCareerCacheEntry[] CareerCache;
        public int ResumeGameCompleteDelegate;
        public string[] MultiDisc1;
        public string[] MultiDisc2;
        public ELoadoutWeapons[] PlayerLoadoutGroups;
        public WeaponModSaveRecord[] PlayerWeaponMods;
        public DynamicLoadInfo[] DynamicLoadMapping;
        public SeekfreeCommonPackageInfo[] SeekfreeCommonPackageMap;
        public string sLastNetworkError;
        public string[] SFXUniqueIDs;
        public int __SFXSaveCommandCallback__Delegate;
        public int __OnResumeGameComplete__Delegate;
        public NameReference PlayerLoadoutWeapons;
        public int GUIMultiDisplayMaxWidth;
        public float GUIMultiDisplayBezelTolerance;
        public float LastSaveTime;
        public float LastSecondsPlayed;
        public int CurrentDeviceID;
        public int CurrentLoadingTip;
        public int CurrentSaveGame;
        public int LegacyImportSaveGame;
        public int PlusImportSaveGame;
        public int AutoSaveInsufficientSpaceText;
        public int QuickSaveInsufficientSpaceText;
        public int InsufficentSpaceAcknowledgedText;
        public float LoadingScreenTimeout;
        public float DebugLoadingScreenTimeout;
        public float DesiredLoadingScreenTimeout;
        public float ActualLoadingScreenTimeout;
        public int Player1ControllerID;
        public bool CopySaveToSkynet;
        public bool GenerateQASaveLibrary;
        public bool bEnableAccomplishmentManager;
        public bool bEnableFastResume;
        public bool bCanWriteSaveToStorage;
        public bool bQuickSaveInProgress;
        public bool bPlayerNeedsLoad;
        public bool bPlayerLoadPosition;
        public bool bMPTransitionToEntryMenu;
        public bool bSimulatedNetworkError;
        public bool bUploadFaceCodesToBlaze;
        public ESFXNetworkErrorStatus eNetworkErrorStatus;
    }
    public class SFXCustomActionTypes : Object
    {
    }
    public class SFXDamageType : DamageType
    {
        public HitReactionSet[] HitReactions;
        public ResistanceInfo Resistance;
        public float WoundPct;
        public float DamageRadius;
        public float HeadGibChance;
        public int ShieldHitFFWaveform;
        public int CE_DeathEffect;
        public int DeathEffectPriority;
        public int CE_PlayerFrameBufferEffect;
        public float Range_Melee;
        public float Range_Short;
        public float Range_Medium;
        public float Range_Long;
        public float FlinchChance;
        public float FlinchDistance;
        public int SourceDisplayName;
        public int DeathSoundEffect;
        public bool bSpawnWeaponImpacts;
        public bool bIgnoreShields;
        public bool bPartBasedDamageDisabled;
        public bool bHealthDamage;
        public bool bDamagesFriends;
        public bool bCanGibHead;
        public bool bIsMelee;
        public bool bCausesNormalizedDamage;
        public bool bUsesDamageScaling;
        public bool bIgnoreDamageGating;
        public bool bAlwaysPlayHitReact;
        public bool bCriticalHit;
        public bool bMPKillDamage;
        public bool bCausesRagdoll;
        public bool bCausesRagdollOnDeath;
        public bool bDisableAIControl;
        public bool bImmediateDeath;
        public bool bIgnoresCoverDirection;
        public bool bNoShake;
        public bool bCorpseDestroyedOnDeath;
        public ESFXDamageFalloffType FalloffType;
        public EWoundDamage WoundDamage;
    }
    public class SFXAI_NativeBase : BioAiController
    {
        public int PathWeightLog;
        public int CombatIdleNode;
        public EAICombatMood CombatMood;
    }
    public class SFXVocalizationTypes : Object
    {
        public int[] EnumForType;
    }
    public class SFXVocalizationManagerNativeBase : Actor
    {
        public SFXVocalizationEventProperties[] EventProperties;
        public int OverridesAllIfSet;
    }
    public class SFXVocalizationManager : SFXVocalizationManagerNativeBase
    {
    }
    public class BioCheatManager : CheatManager
    {
        public ProfileData[] AllProfiles;
        public string PendingLoadGameDebugName;
        public string PendingSaveGameFileName;
        public string PendingSendToHost;
        public GFxWatchData[] GFxWatchValues;
        public string CE_Destructible_Name;
        public int __ProfileHandler__Delegate;
        public int __ProfileUtility__Delegate;
        public Guid CoverGuid;
        public NameReference ProfileSubTarget;
        public Vector2D TopLeft;
        public int ProfileTarget;
        public int CurrentColumn;
        public float ColumnWidth;
        public Color ProfileTitleColor;
        public Color ProfileHeaderColor;
        public Color ProfileTextColor;
        public Color ProfileHighlightColor;
        public float ProfilesTime;
        public float ProfilesDisplayTime;
        public Color GAWTextColor;
        public Color GAWHighlightColor;
        public Color GAWHighlightColor2;
        public int PendingSendToPort;
        public int m_nMiniNotificationTest;
        public int m_TestKeyboard;
        public bool bProfileHidesGUI;
        public bool bCoverGuidShowing;
        public bool m_bShowPowerAiming;
        public bool m_bEnablePowerCooldown;
        public bool bDebugAllLevels;
        public EProfileType CurrentProfile;
    }
    public class SFXTreasureData : Object
    {
        public TD[] LevelTreasure;
        public ArmorTreasureData[] ArmorTreasure;
    }
    public class BioCheatManagerNonNative : BioCheatManager
    {
        public string sTreasureLevelOverride;
        public SetupMissionData[] SetupMissionArray;
        public SetupModifierData[] SetupModifierArray;
        public NameReference[] ReplicationTestNames;
        public string[] ReplicationTestNameStrings;
        public string AutoBotAIControllerName;
        public bool bDebugHeadLOD;
    }
    public class BioCodexMap : Object
    {
        public Map_Mirror SectionMap;
        public Map_Mirror PageMap;
    }
    public class BioStateEventMap : Object
    {
        public Map_Mirror StateEventMap;
        public int[] GalaxyAtWarBoolVarIDs;
        public int[] GalaxyAtWarIntVarIDs;
        public int[] GalaxyAtWarFloatVarIDs;
    }
    public class BioConsequenceMap : BioStateEventMap
    {
    }
    public class BioConversation : Object
    {
        public MultiMap_Mirror m_mapStrRefToAnimData;
        public int[] m_StartingList;
        public BioDialogEntryNode[] m_EntryList;
        public BioDialogReplyNode[] m_ReplyList;
        public NameReference[] m_aSpeakerList;
        public NameReference[] m_aScriptList;
        public BioStageDirection[] m_aStageDirections;
        public int[] m_aMaleFaceSets;
        public int[] m_aFemaleFaceSets;
        public int[] m_aMaleSoundObjects;
        public int[] m_aFemaleSoundObjects;
        public int m_nResRefID;
        public int MatineeSequence;
        public int FaceFXSet;
        public int m_pNonSpeakerFaceFXSet;
        public int m_pRubberMouthAnimSet;
        public bool m_bOneLinerConversation;
        public bool m_bHasSpeechGrammar;
        public bool m_bUsesRubberMouth;
    }
    public class BioConversationController : Object
    {
        public Map_Mirror m_mapActorProps;
        public BioSpeakerData[] m_aSpeakerData;
        public BioSpeakerData[] m_aAllFoundActors;
        public BioDialogLookat[] m_aLookAtList;
        public int[] m_aCurrentReplyIndices;
        public BioSavedActorPos[] m_aPrevPositions;
        public string m_sCurrentSubTitle;
        public string m_sCurrentStageDirection;
        public string m_sCurrentFaceFXAnim;
        public int[] m_aPreLoadingSounds;
        public int[] m_aExtraParticipants;
        public int[] PreloadAnimations;
        public int[] PreloadStrRefs;
        public BioConvActorInitMeshTrans[] m_aActorOrigMeshTrans;
        public string m_sWaitingOnReplySubtitle;
        public BioNextLightingData m_tNextLightingOverride;
        public BioNextCamData m_tNextCamOverride;
        public BioInterruptReplyInfo m_tInterruptInfo;
        public Vector m_vLineOfAction;
        public int m_pConvData;
        public int m_pManager;
        public int m_nCurrentEntry;
        public float m_fStartTime;
        public int m_pOwner;
        public int m_pPlayer;
        public int m_pSpeaker;
        public int m_pPreviousSpeaker;
        public int m_pListener;
        public int m_nSelectedReply;
        public int m_pKismetStart;
        public int m_nCurrentReply;
        public int m_nIntimacy;
        public int m_pStage;
        public float m_fShowRepliesOffset;
        public float m_fShowLastLineOffset;
        public float m_fNodePlayTimer;
        public float m_fInterruptRange;
        public float m_fSubtitleTimingModifier;
        public float m_fSubtitleTimingMinimum;
        public float m_fVOPreloadDelayTime;
        public int m_nNodeStateFlags;
        public int m_pCurrentSound;
        public int m_pCurrentFaceFXSet;
        public int m_pCurrentLineMatinee;
        public float m_fRemainingVOElemsLength;
        public float m_fRemainingVOAudioLength;
        public float m_fRemainingLastLineSubtitleDelay;
        public int m_nDelayedReplyChoice;
        public int m_pEvtSysSeq;
        public Color m_colSubtitleColor;
        public float m_fAudioHitchBuffer;
        public float m_fPreLoadTimer;
        public float m_fPreLoadStartDelay;
        public float m_fDefaultInterruptWindowDuration;
        public float m_fDefaultInterruptWindowStart;
        public int m_nTeleLinesHit;
        public int m_nTeleLinesSkipped;
        public int m_nTeleKinectRepliesSelected;
        public int m_nTeleReplyLinesSelected;
        public bool m_bAutoActivate;
        public bool m_bConversationEnded;
        public bool m_bHasAttachedCameraTrack;
        public bool m_bHasAttachedDOFTrack;
        public bool m_bSkipRequested;
        public bool m_bDisplayNonAmbientName;
        public bool m_bSkipProtectionDisabled;
        public bool m_bCurrentlyAmbient;
        public bool m_bForceAmbientStart;
        public bool m_bPutPlayerIntoCombat;
        public bool m_bDisableTargeting;
        public bool m_bSkippable;
        public bool m_bFailed;
        public bool m_bInterrupted;
        public bool m_bKismetInitiated;
        public bool m_bConversationOver;
        public bool m_bHideCurrentSubtitle;
        public bool m_bNoGestures;
        public bool m_bForceShowReplies;
        public bool m_bNeedsUnprepare;
        public bool m_bNeedsFullCleanup;
        public bool m_bHavePrimedTextures;
        public bool m_bRemoveWeapons;
        public bool m_bPlayingNonTextLine;
        public bool m_bHidePlayerHelmet;
        public bool m_bShowPlayerHelmet;
        public bool m_bHideHenchmenHelmet;
        public bool m_bShowHenchmenHelmet;
        public bool m_bShowCinematicComments;
        public bool m_bAutoAdvanceSkippableLinesWithNoVO;
        public bool m_bReplySubtitleOverridden;
        public EBioConversationType m_eControllerType;
    }
    public class BioConversationManager : Object
    {
    }
    public class SFXGameInterpTrack : BioInterpTrack
    {
    }
    public class BioConvNodeTrackDebug : SFXGameInterpTrack
    {
        public string[] m_aDbgStrings;
    }
    public class SFXGameInterpTrackInst : BioInterpTrackInst
    {
    }
    public class BioConvNodeTrackDebugInst : SFXGameInterpTrackInst
    {
    }
    public class BioCurveDrivenParameter : Object
    {
        public RawDistributionFloat m_curve;
        public string sParameterName;
        public NameReference nmParameterName;
        public bool bScaleToLifetime;
        public bool bLoop;
    }
    public class BioCustomAction : Object
    {
        public int[] OverrideList;
        public int AICommand;
        public int PlayerCameraMode;
        public Vector PreciseDestination;
        public Rotator PreciseRotation;
        public int m_oPawn;
        public int m_oPC;
        public int m_oAI;
        public float SpeedModifier;
        public float GravityScale;
        public float MoveSpeed;
        public float MinTimeBetweenActions;
        public float PreciseRotationInterpolationTime;
        public float DamageReductionLength;
        public float DamageReductionAmount;
        public float fCameraTransitionIn;
        public float fCameraTransitionOut;
        public float CheckMoveMaximumVelocitySq;
        public int TimelineTemplate;
        public int ImpactTimeline;
        public bool bLockPawnRotation;
        public bool bBreakFromCover;
        public bool bDisableMovement;
        public bool bDisableLook;
        public bool bDisableCollision;
        public bool bDisablePhysics;
        public bool bDisableLeftHandIK;
        public bool bIgnoreDamage;
        public bool bHideWeapon;
        public bool bNotifyKnockedOutOfCover;
        public bool bTurnOffZoom;
        public bool bTurnOffReticle;
        public bool bDisableShooting;
        public bool bAllowChargeHolding;
        public bool bDisableAiming;
        public bool bDisableCoverAdjust;
        public bool bDisableUse;
        public bool bDisableCustomActionQueuing;
        public bool bBlockingAction;
        public bool bProceduralMovement;
        public bool bLockRotationAfterPreciseRotation;
        public bool bCameraFocusOnPawn;
        public bool bLastCanDoCustomAction;
        public bool bIgnoreInputForCustomAction;
        public bool bReachPreciseDestination;
        public bool bReachedPreciseDestination;
        public bool bReachPreciseRotation;
        public bool bReachedPreciseRotation;
        public bool bStartedCustomAction;
        public bool bAllowDamageReduction;
        public bool bPushAICommand;
        public bool bReplicateCustomAction;
        public bool bClientPredictCustomAction;
        public bool bForceLocalSimulation;
        public bool bCreatesGibs;
        public ECustomActionPriority Priority;
        public ESFXVocalizationEventID VocalizationEvent;
        public ENetRole OriginalRole;
        public ENetRole OriginalRemoteRole;
    }
    public class BioCustomAction_CombatActivate : BioCustomAction
    {
        public BodyStance BS_CombatActivate;
    }
    public class BioCustomAction_CoverClimbMantleBase : BioCustomAction
    {
        public BodyStance m_BS_StanceFromExplore;
        public BodyStance m_BS_StanceFromCombat;
        public BodyStance m_BS_StanceFromCover;
        public float m_fCollisionOffPerioud;
        public bool bWasInCover;
        public ECoverBodyStanceID m_CurrentBodyStance;
    }
    public class BioCustomAction_CoverClimb : BioCustomAction_CoverClimbMantleBase
    {
    }
    public class BioCustomAction_CoverMantle : BioCustomAction_CoverClimbMantleBase
    {
    }
    public class BioCustomAction_KroganCharge : BioCustomAction
    {
        public BodyStance BS_Start;
        public BodyStance BS_Miss;
        public BodyStance BS_Hit;
    }
    public class BioDebugMenu : Object
    {
    }
    public class BioDecalComponent : DecalComponent
    {
        public RawDistributionFloat FadeInTime;
        public RawDistributionFloat FadeOutTime;
        public RawDistributionFloat DecalLifetime;
        public RawDistributionFloat DecalSize;
        public RawDistributionFloat DecalRoll;
        public RawDistributionFloat DecalYaw;
        public RawDistributionFloat DecalPitch;
        public RawDistributionFloat SizeScale;
        public int[] aDecalMaterialParameters;
        public bool bScaleByDistance;
        public bool bProjectOnShields;
    }
    public class BioDeprecated : Object
    {
    }
    public class BioDestinationArrow : Actor
    {
    }
    public class BioDiscoveredCodexMap : Object
    {
        public Map_Mirror DiscoveredCodex;
    }
    public class BioDynamicLoadInterface : Interface
    {
    }
    public class BioEmissionAreaList : Object
    {
    }
    public class BioEmissionAreaListBoneList : BioEmissionAreaList
    {
        public BoneListEmissionArea[] m_EmissionAreas;
    }
    public class BioEventNotifier : Object
    {
        public string sWwiseMusicVolumeRTPCName;
        public string sWwiseParaReneRTPCName;
        public int srTalentOk;
        public int srTalentSkipRemainder;
        public int srLevelUp;
        public int srQuestAdded;
        public int srQuestUpdated;
        public int srQuestCompleted;
        public int srCodexEntry;
        public int srParagonReceived;
        public int srRenegadeReceived;
        public int srMedigel;
        public int srSalvage;
        public int srMap;
        public int srAbility;
        public int nParagonPlotVar;
        public int nRenegadePlotVar;
        public int nWwiseMusicVolumeRTPCPlotVar;
        public float fPassivePopupDisplayTime;
        public bool bDissableTallentNotifications;
    }
    public class BioEvtSysTrackDOF : SFXGameInterpTrack
    {
        public BioDOFTrackData[] m_aDOFData;
    }
    public class BioEvtSysTrackDOFInst : SFXGameInterpTrackInst
    {
    }
    public class SFXGameActorInterpTrack : SFXGameInterpTrack
    {
        public NameReference m_nmFindActor;
        public ESFXFindByTagTypes m_eFindActorMode;
    }
    public class BioEvtSysTrackGesture : SFXGameActorInterpTrack
    {
        public BioGestureData[] m_aGestures;
        public NameReference nmStartingPoseSet;
        public NameReference nmStartingPoseAnim;
        public float m_fStartPoseOffset;
        public bool m_bARPUGenerated;
        public bool m_bAutoGenFemaleTrack;
        public bool m_bUseDynamicAnimsets;
        public EBioTrackAllPoseGroups ePoseFilter;
        public EBioGestureAllPoses eStartingPose;
    }
    public class BioEvtSysTrackGestureAudHelper : Object
    {
    }
    public class SFXGameActorInterpTrackInst : SFXGameInterpTrackInst
    {
    }
    public class BioEvtSysTrackGestureInst : SFXGameActorInterpTrackInst
    {
    }
    public class BioEvtSysTrackInterrupt : SFXGameInterpTrack
    {
        public BioInterruptTrackData[] m_aInterruptData;
    }
    public class BioEvtSysTrackInterruptInst : SFXGameInterpTrackInst
    {
    }
    public class BioEvtSysTrackLighting : SFXGameActorInterpTrack
    {
        public BioConvLightingData[] m_aLightingKeys;
    }
    public class BioEvtSysTrackLightingInst : SFXGameActorInterpTrackInst
    {
        public BioConvLightingData InitialLightingData;
        public bool ResetLightingData;
    }
    public class BioEvtSysTrackLookAt : SFXGameActorInterpTrack
    {
        public BioLookAtTrackData[] m_aLookAtKeys;
    }
    public class BioEvtSysTrackLookAtInst : SFXGameActorInterpTrackInst
    {
    }
    public class BioEvtSysTrackProp : SFXGameActorInterpTrack
    {
        public BioPropTrackData[] m_aPropKeys;
    }
    public class BioEvtSysTrackPropInst : SFXGameActorInterpTrackInst
    {
    }
    public class BioEvtSysTrackSetFacing : SFXGameActorInterpTrack
    {
        public BioSetFacingData[] m_aFacingKeys;
    }
    public class BioEvtSysTrackSetFacingInst : SFXGameActorInterpTrackInst
    {
    }
    public class BioEvtSysTrackSubtitles : SFXGameInterpTrack
    {
        public BioSubtitleTrackData[] m_aSubtitleData;
    }
    public class BioEvtSysTrackSubtitlesInst : SFXGameInterpTrackInst
    {
    }
    public class BioEvtSysTrackSwitchCamera : SFXGameInterpTrack
    {
        public BioCameraSwitchData[] m_aCameras;
    }
    public class BioEvtSysTrackSwitchCameraInst : SFXGameInterpTrackInst
    {
    }
    public class BioEvtSysTrackVOElements : SFXGameInterpTrack
    {
        public int m_nStrRefID;
        public float m_fJCutOffset;
    }
    public class BioEvtSysTrackVOElementsInst : SFXGameInterpTrackInst
    {
    }
    public class BioGestChainNode : Object
    {
        public int m_pGestTrack;
        public int m_nIndex;
    }
    public class BioGestChainTree : BioGestChainNode
    {
        public int[] m_aChildren;
    }
    public class BioGestureAnimSetMgr : Object
    {
        public Map_Mirror m_mapAnimSetReference;
        public BioGestDataKey[] m_aNewGestureData;
        public int m_nGestureState;
    }
    public class BioGestureRulesData : Object
    {
        public MultiMap_Mirror m_mapARPUCurves;
        public Map_Mirror m_mapPoses;
        public MultiMap_Mirror m_mapTransitions;
        public MultiMap_Mirror m_mapGestures;
        public Map_Mirror m_mapPerformances;
        public MultiMap_Mirror m_mapPerfPoses;
        public MultiMap_Mirror m_mapPerfGestures;
        public BioARPUBodyConfig[] m_aARPUItems;
        public BioGestPose[] m_aPosesTemp;
        public BioGestTransition[] m_aTransTemp;
        public BioGestGesture[] m_aGestTemp;
        public NameReference[] m_aGestureGroups;
        public NameReference[] m_aPoseGroups;
        public NameReference[] m_aPerfGroups;
        public BioAmbientPerformance[] m_aPerfTemp;
        public BioAmbPerfPose[] m_aPerfPoseTemp;
        public BioAmbPerfGesture[] m_aPerfGestTemp;
        public NameReference[] m_aDeletedPerfs;
        public NameReference m_nmDefaultGestGroup;
        public NameReference m_nmDefaultPoseGroup;
        public NameReference m_nmDefaultPerfGroup;
    }
    public class BioGestureRuntimeData : Object
    {
        public Map_Mirror m_mapAnimSetOwners;
        public Map_Mirror m_mapMeshProps;
        public BioWeaponPropData m_tWeaponPropData;
        public string m_sGlobalDefaultPose;
        public NameReference m_nmDefaultPoseAnim;
        public int m_pDefaultPoseSet;
    }
    public class BioGlobalVariableTable : Object
    {
        public Map_Mirror IntVariables;
        public Map_Mirror FloatVariables;
        public int[] BoolVariables;
        public NewGameCanonPlot[] ME1CanonPlotVariables;
        public NewGameCanonPlot[] ME2CanonPlotVariables;
        public CopyPlot[] ME1ToME3PlotCopy;
        public CopyPlot[] ME2ToME3PlotCopy;
        public PlotIdenfitier[] NewGamePlusPlotsToPersist;
        public TimedPlotUnlock_t[] TimedPlotUnlocks;
        public int ME1PlotTable_IndexOffset;
        public int ME1PlotTable_Bool_CutoffIndex;
        public int ME1PlotTable_Int_CutoffIndex;
        public int ME1PlotTable_Float_CutoffIndex;
        public int ME3_Plots_Utility_Player_Info_Paragon;
        public int ME3_Plots_Utility_Player_Info_Renegade;
        public int ME3_Plots_Utility_Player_Info_ReputationPoints;
        public int ME3_Plots_Utility_Player_Info_ME2Paragon;
        public int ME3_Plots_Utility_Player_Info_ME2Renegade;
        public int ME3_Plots_Utility_Player_Info_Childhood;
        public int ME3_Plots_Utility_Player_Info_Reputation;
        public int ME3_Plots_Utility_Player_Info_PersuadeMultiplier;
        public int ME3_Plots_Utility_Player_Info_Character_Class;
        public int ME3_Plots_Utility_Player_Info_Female_Player;
        public int ME3_Plots_Bool_Is_ME2_Import;
        public int ME3_Plots_Bool_Is_ME1_Import;
        public int ME3_Plots_Int_ME3_NewGamePlus_Count;
        public int PS3DarkHorseME1PlayedPlotCheck_Bool;
        public int ME2__ME1_Plots_for_ME2__Background_and_Relationships__Kaidan_romance_True;
        public int ME2__ME1_Plots_for_ME2__Background_and_Relationships__Ashley_romance_True;
        public int ME2__ME1_Plots_for_ME2__Background_and_Relationships__Liara_romance_True;
        public int ME2__ME1_Plots_for_ME2__Background_and_Relationships__NoRomance_True;
        public int ME2__ME1_Plots_for_ME2__CH2_Virmire__Ash_died;
        public int ME2__ME1_Plots_for_ME2__CH2_Virmire__Kaidan_died;
        public int ME2__ME1_Plots_for_ME2__CH2_Noveria__Rachni_Alive;
        public int ME2__ME1_Plots_for_ME2__CH2_Virmire_Wrex_Died;
        public int ME2__ME1_Plots_for_ME2__CH2_Virmire_Ash_Killed_Wrex;
        public int ME2__ME1_Plots_for_ME2__CH4_Star_Citadel__Council_Dead;
        public int ME2__ME1_Plots_for_ME2__CH4_Star_Citadel__Council_Alive;
        public int ME2__ME1_Plots_for_ME2__CH4_Star_Citadel__Udina_Chosen;
        public int ME2__ME1_Plots_for_ME2__CH4_Star_Citadel__Anderson_chosen;
        public int ME3__ME1_Plots_for_ME3__Global_Plots__Henchman_Kaidan__Romance_Buddy_dialog_count;
        public int ME3__ME1_Plots_for_ME3__Global_Plots__Henchman_Kaidan__Romance_active;
        public int ME3__ME1_Plots_for_ME3__Global_Plots__Henchman_Ash__Romance_Buddy_dialog_count;
        public int ME3__ME1_Plots_for_ME3__Global_Plots__Henchman_Ash__romance_active;
        public int ME3__ME1_Plots_for_ME3__Global_Plots__Henchman_Liara__Romance_Buddy_dialog_count;
        public int ME3__ME1_Plots_for_ME3__Global_Plots__Henchman_Liara__Romance_active;
        public int ME3__ME1_Plots_for_ME3__CH2_Virmire__The_Choice__Rescued_Kaidan;
        public int ME3__ME1_Plots_for_ME3__CH2_Virmire__The_Choice__Rescued_Ash;
        public int ME3__ME1_Plots_for_ME3__CH2_Noveria__Rachni_Queen__Queen_Dealt_With__Queen_Released;
        public int ME3__ME1_Plots_for_ME3__CH2_Noveria__Rachni_Queen__Queen_Dealt_With__Queen_eliminated;
        public int ME3__ME1_Plots_for_ME3__CH2_Virmire__Krogan_conundrum__Failure__Failure_KilledBy_Player;
        public int ME3__ME1_Plots_for_ME3__Utility__Henchman__InParty__Krogan;
        public int ME3__ME1_Plots_for_ME3__Utility__Henchman__InParty__HumanMale;
        public int ME3__ME1_Plots_for_ME3__Utility__Henchman__InParty__HumanFemale;
        public int ME3__ME1_Plots_for_ME3__CH4_Star_Citadel__Final_Choice__Choice_Is_Made__Save_the_Council;
        public int ME3__ME1_Plots_for_ME3__CH4_Star_Citadel__Final_Choice__Choice_Is_Made__Destroy_the_Council;
        public int ME3__ME1_Plots_for_ME3__CH4_Star_Citadel__Final_Choice__Chose_ambassador;
        public int ME3__ME1_Plots_for_ME3__CH4_Star_Citadel__Final_Choice__Chose_Anderson;
        public int ME3__ME1_Plots_for_ME3__CH2_Virmire__Krogan_conundrum__Failure__Failure_KilledBy_Ashley;
        public int ME3__ME1_Plots_for_ME3__CH2_Virmire__Krogan_conundrum__Failure__Failure_AshKilledWithoutPermission;
        public int ME3__ME2_Plots_for_ME3__Loyalty_Missions__Professor_Loyalty__Mission_Complete__Saved_Data;
        public int ME3__ME2_Plots_for_ME3__Loyalty_Missions__Professor_Loyalty__Mission_Complete__Destroyed_Data;
        public int ME3__ME2_Plots_for_ME3__Loyalty_Missions__Geth_Loyalty__Heretic_Resolution__Blow_Them_Up;
        public int ME3__ME2_Plots_for_ME3__Loyalty_Missions__Geth_Loyalty__Heretic_Resolution__Rewrite_Them;
        public int ME3__ME2_Plots_for_ME3__Act_3__Final_Decision__Work_with_Cerberus;
        public int ME3__ME2_Plots_for_ME3__Act_3__Final_Decision__Destroy_Base;
        public int ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Vixen;
        public int ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Leading;
        public int ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Grunt;
        public int ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Assassin;
        public int ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Veteran;
        public int ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Thief;
        public int ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Mystic;
        public int ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Professor;
        public int ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Geth;
        public int ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Tali;
        public int ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Convict;
        public int ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Garrus;
        public int ME3__ME2_Plots_for_ME3__Global__Henchmen__Vixen__Relationship;
        public int ME3__ME2_Plots_for_ME3__Global__Henchmen__Garrus__Relationship;
        public int ME3__ME2_Plots_for_ME3__Global__Henchmen__Leading__Relationship;
        public int ME3__ME2_Plots_for_ME3__Global__Henchmen__Assassin__Relationship;
        public int ME3__ME2_Plots_for_ME3__Global__Henchmen__Convict__Relationship;
        public int ME3__ME2_Plots_for_ME3__Global__Henchmen__Tali__Relationship;
        public int ME3__ME2_Plots_for_ME3__Global__Achievements__ChangedDifficulty;
        public int oNameLookupTable;
        public int AchievementTable;
    }
    public class BioGUIBox : Object
    {
    }
    public class BioHardLinks : Object
    {
        public BioHardLinkReference[] References;
    }
    public class BioHintSystemBase : Object
    {
        public HintDefinition[] m_aHints;
        public SFXNotificationData[] m_NotificationData;
        public float m_fMinimumTimeBetweenAnyHints;
        public int m_DefaultImage;
        public float m_fDisplayDelay;
        public bool m_bEnabled;
        public bool m_bDisabledForTutorial;
    }
    public class BioHintSystem : BioHintSystemBase
    {
    }
    public class SFXGameModeManager : Object
    {
        public int[] SupportedModes;
        public LocalizedKeyName[] KeyNames;
        public string sAudioGameModeRTPCName;
        public bool bDisableInput;
    }
    public class SFXGUIMovie : GFxMovie
    {
        public int[] m_OnCloseCallbacks;
        public int[] m_aMovieExtensions;
        public int __OnMovieClosedDelegate__Delegate;
        public ScreenRect MouseCaptureRect;
        public Rotator m_UIWorldMPPawnInitialRotation;
        public Vector m_UIWorldMPPawnInitialLocation;
        public NameReference nmTag;
        public NameReference OpenSound;
        public NameReference CloseSound;
        public int oWorldInfo;
        public int m_nFSCommandHandlerID;
        public int m_srNuiSpeechCommandFormatting;
        public float MovieAlpha;
        public bool bCache;
        public bool m_bInCache;
        public bool m_bInAdvanceCall;
        public bool m_bPendingClose;
        public bool m_bUnloadInPendingClose;
        public bool m_bFocusOnStart;
        public bool m_bDesiresFocus;
        public bool m_bHandleKeyPresses;
        public bool m_bUseThumbstickAsDPad;
        public bool m_bRequiresUIWorld;
        public bool m_bMouseVisibleWhenFocused;
        public bool m_bApplyLeftThumbstickDeadzone;
        public bool m_bApplyRightThumbstickDeadzone;
        public bool m_bAcceptingFSCommands;
        public bool m_bBeingUnitTested;
        public bool ProcessMouseMovementWithRTT;
        public bool AllowRTTMouseInputWithLowerZOrder;
        public bool m_InputEnabled;
        public GUILayout ScreenLayout;
    }
    public class SFXGUIMovieLegacyAdapter : SFXGUIMovie
    {
        public SFXGUILegacyScaleformResource MovieResource;
        public BioSFQueuedCommand[] lstQueuedCommands;
        public int oPanel;
        public int oParentManager;
        public int nHandlerID;
        public bool bSetGameMode;
        public bool bIgnoreGCOnPanelCleanup;
        public bool bPipeDirectInputToGFx;
        public EGameModes eGameMode;
    }
    public class BioSFHandler_DesignerUI : SFXGUIMovieLegacyAdapter
    {
        public BioDUIPulseDetails[] lstPulsingElements;
        public BioDUIElementStatus lstElementStatus;
        public BioDUITimerDetails stModalTimer;
        public BioDUITimerDetails stPassiveTimer;
        public int nElementVisibleCount;
        public int m_nLayout;
        public bool m_bCanInvoke;
    }
    public class BioHUD : HUD
    {
        public int[] DebugDrawList;
        public TraceStripChannel[] TraceStrips;
        public DesignerText[] DesignerHudText;
        public DesignerBar[] DesignerHudBars;
        public int __DebugDraw__Delegate;
        public LinearColor TraceStripTickColor;
        public int m_oActorForInfoDisplay;
        public float TraceStripTickInterval;
        public float TraceStripTimeSeconds;
        public float TraceStripDrawHeight;
        public float m_ShowCoverLastTime;
        public int oGUIMaterial;
        public float SafeAreaRatioX;
        public float SafeAreaRatioY;
        public float m_fSafeXOffset;
        public float m_fSafeYOffset;
        public int SafeAreaTexture;
        public int m_textX;
        public int m_textY;
        public int m_lineHeight;
        public int m_charWidth;
        public int m_leftColumnX;
        public int m_rightColumnX;
        public int m_farrightColumnX;
        public int m_topRowY;
        public float LastSaveStartTime;
        public float LastSaveEndTime;
        public Color YellowColor;
        public Color OrangeColor;
        public Color DarkGreyColor;
        public float FadeTime;
        public float MinFadeDuration;
        public bool m_bLockActorInfo;
        public bool TraceStripsPaused;
        public bool m_bShowCoverRotation;
        public bool m_bShowClaimedCoverOnly;
        public bool bDisplaySafeArea;
        public bool bDisplayingSave;
        public bool m_bUseGeneratedItemNames;
        public bool bDesignerHud;
    }
    public class BioInGamePropertyEditor : Object
    {
        public string m_sFooterText;
        public string m_sFileName;
        public string m_sEditableRootName;
        public string m_sCameraRootName;
        public string m_sAnimNodeName;
        public string m_sNewLoadSaveNodeName;
        public string m_sStateNodeName;
        public string m_sActionMappingName;
        public int m_oPropertyEditorNodes;
        public float m_fHUDRelativePropertyEditorOriginX;
        public float m_fHUDRelativePropertyEditorOriginY;
        public float m_fPropertyEditorSizeX;
        public float m_fPropertyEditorSizeY;
        public float m_fPropertyEditorRelativeColumnOneX;
        public float m_fPropertyEditorRelativeColumnTwoX;
        public float m_fPropertyEditorRelativeColumnThreeX;
        public float m_fPropertyEditorRelativeColumnY;
        public float m_fColumnHeight;
        public bool m_bIsActive;
        public bool m_bDebugBones;
        public bool m_bSortByType;
        public bool m_bSortByName;
    }
    public class BioInterpolator : Object
    {
    }
    public class BioInterpTrackInstMove : InterpTrackInstMove
    {
    }
    public class BioInterpTrackInstRotationMode : SFXGameInterpTrackInst
    {
        public float LastUpdatePosition;
    }
    public class BioInterpTrackMove : InterpTrackMove
    {
        public NameReference FacingController;
    }
    public class BioInterpTrackRotationMode : SFXGameInterpTrack
    {
        public RotationModeTrackKey[] EventTrack;
    }
    public class BioLevelUpSystem : Object
    {
        public float ME2ImportReputationAmount;
    }
    public class BioLoadingMovie : Object
    {
        public string MovieName;
        public int LoopBackFrame;
        public int LoadingMovieWwisePair;
        public float FadeInTime;
        public float FadeOutTime;
        public int FadeOutWwiseEvent;
        public float MinPlayTime;
    }
    public class BioLookAtDefinition : Object
    {
        public LookAtBoneDefinition[] BoneDefinitions;
        public NameReference RootAnimBoneName;
        public float ValidTargetAngleRange;
        public bool RootAnimBoneLookAtInverted;
        public bool RootAnimBoneUpInverted;
        public bool RootBoneYawOnly;
        public byte RootAnimBoneLookAtAxis;
        public byte RootAnimBoneUpAxis;
    }
    public class BioLookAtTarget : Actor
    {
        public float m_fDelay;
        public float m_fConeDeg;
        public float m_fMinDistance;
        public float m_fCODelayRemaining;
        public float m_fNCODelayRemaining;
        public float m_fConeCos;
        public bool m_bCOSeen;
        public bool m_bNCOSeen;
    }
    public class SFXDefine : Object
    {
    }
    public class SFXModule_Radar : SFXModule
    {
        public bool bRadarDisabled;
        public EBioRadarType RadarType;
    }
    public class BioMapNote : Actor
    {
        public float m_fVisibleRange;
        public int m_oAreaMap;
        public int m_sMapNoteName;
        public int Argument;
        public int m_nIndex;
        public float m_fUpdateDelay;
        public bool m_bReducedVisibility;
        public bool m_bShowOnRadar;
        public bool m_bShowOnAreamap;
        public bool m_bLinkedToJournal;
        public bool m_bRenderInWorld;
        public EBioRegionAutoSet Region;
        public EBioPlotAutoSet Plot;
        public EBioAutoSet Conditional;
    }
    public class BioMaterialExpressionAnisoSpec : MaterialExpression
    {
        public ExpressionInput Direction;
        public ExpressionInput SpecColor;
        public ExpressionInput SpecPower;
    }
    public class BioMaterialExpressionBlinnSpec : MaterialExpression
    {
        public ExpressionInput Normal;
        public ExpressionInput SpecColor;
        public ExpressionInput SpecPower;
    }
    public class BioMaterialExpressionDirt : MaterialExpression
    {
        public ExpressionInput Input;
        public NameReference GrimeScaleParamName;
        public NameReference GrimeTexParamName;
        public int GrimeTex;
    }
    public class BioMaterialExpressionFresnel : MaterialExpression
    {
        public ExpressionInput Normal;
        public float Power;
        public bool Inverted;
    }
    public class BioMaterialExpressionHalfAngle : MaterialExpression
    {
    }
    public class BioMaterialExpressionKeyedFlipbook : MaterialExpression
    {
        public ExpressionInput Coord;
        public ExpressionInput Time;
        public int FlipTexRows;
        public int FlipTexCols;
        public int FlipTex;
    }
    public class BioMaterialExpressionPhongSpec : MaterialExpression
    {
        public ExpressionInput Normal;
        public ExpressionInput SpecColor;
        public ExpressionInput SpecPower;
    }
    public class BioMaterialExpressionSineSubtend : MaterialExpression
    {
        public ExpressionInput A;
        public ExpressionInput B;
    }
    public class BioMaterialExpressionSpecPower : MaterialExpression
    {
        public ExpressionInput Input;
    }
    public class BioMaterialExpressionWound : MaterialExpression
    {
        public int m_nWoundNumber;
    }
    public class BioMaterialOverride : Object
    {
        public TextureParameter[] m_aTextureOverrides;
        public ColorParameter[] m_aColorOverrides;
        public ScalarParameter[] m_aScalarOverrides;
    }
    public class BioMessageBox : Object
    {
    }
    public class BioMetaVFX : Object
    {
    }
    public class BioMorphFace : Object
    {
        public Pointer[] m_aVertexBuffers;
        public int[] m_oOtherMeshes;
        public MorphFeature[] m_aMorphFeatures;
        public OffsetBonePos[] m_aFinalSkeleton;
        public Pointer ReleaseResourcesFence;
        public int m_oBaseHead;
        public int m_oHairMesh;
        public int m_oMorphTargetSet;
        public int m_oAnimTree;
        public int CurrentMorphFaceContentVersion;
        public int m_nInternalMorphFaceContentVersion;
        public int m_oMaterialOverrides;
        public bool bRequiresDynamicUpdates;
    }
    public class BioMorphFaceFESliderBase : Object
    {
        public string m_nName;
        public int m_oMorphFaceFrontEnd;
        public bool m_bStepped;
    }
    public class BioMorphFaceFESliderColour : BioMorphFaceFESliderBase
    {
        public string m_sParameterName;
        public Color[] m_acColours;
    }
    public class BioMorphFaceFESliderHair : BioMorphFaceFESliderBase
    {
    }
    public class BioMorphFaceFESliderMorph : BioMorphFaceFESliderBase
    {
        public string m_sMorph_Positive;
        public string m_sMorph_Negative;
        public float m_fRange;
        public float m_fRandomRange;
        public bool m_bSingle;
    }
    public class BioMorphFaceFESliderScalar : BioMorphFaceFESliderBase
    {
        public string m_sParameterName;
        public float[] m_afValues;
    }
    public class BioMorphFaceFESliderSetMorph : BioMorphFaceFESliderBase
    {
        public string m_sMorphName;
        public float[] m_afValues;
    }
    public class BioMorphFaceFESliderTexture : BioMorphFaceFESliderBase
    {
        public string m_sParameterName;
        public int[] m_atTexture;
    }
    public class BioMorphUtility : Object
    {
    }
    public class BioMorphFaceFrontEnd : BioMorphUtility
    {
        public Slider m_pModifierData;
        public Map_Mirror CachedFaceCodeRemappings;
        public FaceData m_oFaceData;
        public string m_sPlayerName;
        public BaseHeads m_oBaseSettings;
        public BaseHeads[] m_aBaseHeads;
        public SliderRemapping[] MaleRemappings;
        public SliderRemapping[] FemaleRemappings;
        public int WorkingMorphFace;
        public int m_iCurrentBaseHead;
        public bool m_bDebugStrings;
        public bool bIsMale;
    }
    public class BioOutcomeMap : Object
    {
        public Map_Mirror OutcomeMapping;
    }
    public class BioParticleModuleBase : ParticleModule
    {
    }
    public class BioParticleModuleCollisionDecal : ParticleModuleCollision
    {
        public string CollisionEmitter;
        public NameReference[] ColorParams;
        public int DecalTemplate;
        public int CollisionEmitterTemplate;
        public bool bEnableMultiHitDecal;
    }
    public class BioParticleModuleLocationAttachedMesh : ParticleModuleLocationBase
    {
        public EmissionAreaWeight[] m_EmissionAreaWeights;
        public NameReference[] m_ValidEmissionSet;
        public int m_EmissionAreaList;
        public bool m_bCheckAgainstValidEmissionSet;
        public bool bUseAttachedLocalSpace;
        public bool bUseRenderMeshAsSource;
        public EmissionAreaSpecificationType m_SpecificationType;
    }
    public class BioParticleModuleLocationPrimitiveNearestSurface : ParticleModuleLocationPrimitiveBase
    {
        public Vector[] m_aSearchDirections;
        public float fRadius;
        public bool bInitialLocationOnly;
        public bool bMovingLocationOnly;
        public bool bDirectionRelativeToEmitter;
        public bool bTestActors;
        public ELocationNearestSurface eIfNoCollision;
        public EBioParticleCollisionComplete eOnCollision;
    }
    public class BioParticleModuleMultiplyByEmitterSpeed : BioParticleModuleBase
    {
        public float MinUsedSpeed;
        public float MaxUsedSpeed;
        public float MultiplierAtMin;
        public float MultiplierAtMax;
        public MultiplyByEmitterSpeedProperty MultipliedProperty;
    }
    public class BioParticleModuleSound : BioParticleModuleBase
    {
        public int oWwiseEvent;
        public float m_DuckDistanceThreshold;
        public int WwiseDuckEvent;
        public int ObjInstanceVersion;
        public bool bNoRetriggerWhileSoundPlaying;
        public bool bPerParticle;
        public bool m_bDuck;
    }
    public class BioParticleModuleVelocityWorldSpace : ParticleModuleVelocity
    {
    }
    public class BioPathNodeVolume : Volume
    {
        public float fMaxNodeSeparation;
        public float fMargin;
        public float fNodeTargetRadius;
        public float fMaxSlope;
        public int nLevels;
        public float fLevelHeight;
        public bool bDeleteNodesOnPopulate;
        public bool bDoNotGenerateGroundNodes;
        public EBioPathNodeAlignment eAlignment;
        public EBioPathNodeGenerators ePathNodeGenerator;
    }
    public class BioPathPoint : NavigationPoint
    {
        public bool bEnabled;
        public bool bAlwaysReachable;
    }
    public class BioPathPointFactory : ActorFactory
    {
    }
    public class SFXModule_Locomotion : SFXModule
    {
        public float PawnMoveStartFwdAngle;
        public float PawnMoveStartFwdSpeed;
        public float PawnMoveStartFwdAccelerationTimer;
        public float PawnMoveStartSidewayAccelerationTimer;
        public float PawnMoveStartStopTimerThreshold;
        public float PawnMoveStandTurnDistanceThreshold;
        public float PawnMoveStandTurnRotRate;
        public float PawnMoveStopTimerThreshold;
        public float PawnMoveStopRestartTimerThreshold;
    }
    public class SFXPowerManager : Object
    {
        public int[] PowerReleasedDelegates;
        public int[] BioticComboDelegates;
        public int[] PowerImpactedDelegates;
        public int __OnPowerReleased__Delegate;
        public int __OnBioticCombo__Delegate;
        public int __OnPowerImpacted__Delegate;
        public int CooldownMethod;
        public int NumFreePowers;
        public int PowerCastCounter;
        public int DisableCasterCrusts;
        public bool SharedCooldownDisabled;
    }
    public class SFXModule_GameEffectManager_NativeBase : SFXModule
    {
        public int[] GameEffects;
        public bool EffectListLocked;
    }
    public class SFXGameEffect : Object
    {
        public NameReference Category;
        public float Duration;
        public float CurrentTime;
        public float EffectValue;
        public int Owner;
        public int Instigator;
        public int Causer;
        public bool bPreventGibs;
        public bool bPreventEatable;
        public EDurationType DurationType;
        public EBonusFormula BonusFormula;
    }
    public class SFXModule_GameEffectManager : SFXModule_GameEffectManager_NativeBase
    {
    }
    public class SFXSelectionModule : SFXModule
    {
        public Vector m_TargetOffset;
        public NameReference m_nmNonPawnBoneName;
        public int m_srGameName;
        public float m_fSelectionRadius;
        public float m_fMaxSelectionRangeSqr;
        public int LensFlareComp;
        public int LensFlareTemplate;
        public bool m_bTargetable;
        public bool m_bCombatTargetable;
        public bool bIgnoreFacing;
        public bool bHighPriority;
        public ETargetTipText m_TargetTipText;
    }
    public class SFXSimpleUseModule : SFXSelectionModule
    {
        public int __OnUsed__Delegate;
        public float fUseRange;
        public bool bStickForward;
        public bool bPlayUseAnimation;
    }
    public class SFXModule_AimAssistTarget : SFXSimpleUseModule
    {
        public NameReference[] AimNodes;
        public AimAssistBox[] AimAssistRegions;
    }
    public class SFXModule_DamageNativeBase : SFXModule_DamageBase
    {
        public ScaledFloat MaxHealth;
        public float CurrentHealth;
        public int TOTAL_HEALTH_STEPS;
    }
    public class SFXModule_Damage : SFXModule_DamageNativeBase
    {
        public ScaledFloat DamageMultiplier;
        public ScaledFloat PowerDamageTakenMultiplier;
        public ScaledFloat BioticPowerDamageTakenMultiplier;
        public ScaledFloat TechPowerDamageTakenMultiplier;
        public ScaledFloat CombatPowerDamageTakenMultiplier;
        public ScaledFloat WeaponDamageTakenMultiplier;
        public ScaledFloat PartBasedDamageMultiplier;
        public ScaledFloat AIArmorDamageReduction;
        public DamagePart[] DamageParts;
        public float HeadShotVODistance;
        public float DeathMomentumMultiplier;
        public float AIArmorDamageReductionMinDamage;
        public float AntiArmorDamageThreshold;
        public bool bGoreActorEnabled;
        public bool bPartBasedDamageEnabled;
        public bool bOwnerIsDead;
        public EHealthType HealthType;
    }
    public class SFXModule_Gestures : SFXModule
    {
        public NameReference m_nmDefaultPoseAnim;
        public int m_pDefaultPoseSet;
        public int m_pPerfGameData;
        public int m_pAnimSetMgr;
        public bool m_bDisableBlinksAndNoise;
    }
    public class SFXModule_Conversation : SFXModule
    {
        public Vector m_vCameraFocusPoint;
        public Vector m_vProceduralCameraPosition;
        public Rotator m_rProceduralCameraRotation;
        public float m_fFov;
        public float m_fNearClip;
        public float m_fDOFFocusInnerRadius;
        public float m_fDOFFocusDistance;
        public int m_pDefaultFaceFXAsset;
        public bool m_bDisableFacefx;
    }
    public class SFXModule_LookAt : SFXModule
    {
        public int[] m_Controllers;
        public int m_pTarget;
        public int m_nRank;
        public float LookAtNoticeTimer;
        public int LookAtNoticeActor;
        public int m_Definition;
        public float NoticeDuration;
        public float NoticeEnableDistance;
        public float NoticeDisableDistance;
        public int ReNoticeMinTime;
        public int ReNoticeMaxTime;
        public bool bEnableLookAtTargeting;
        public bool bAutoLookAtPlayer;
    }
    public class SFXModule_Audio : SFXModule
    {
        public RTPCPair[] RTPCs;
        public int DefaultFootStepEvent;
        public float FootstepCullDistance;
        public float TimeBetweenFootsteps;
        public float RunThreshold;
        public bool bPlayFootstepSounds;
    }
    public class BioPawn : Pawn
    {
        public MultiMap_Mirror m_mAnimsetRegistration;
        public ScaledFloat DesiredSpeedMultiplier;
        public NameReference[] AttachSlots;
        public int[] CustomActionClasses;
        public int[] PowerCustomActionClasses;
        public int[] SupportedCustomReachSpecs;
        public NameReference[] SupportedSyncActions;
        public int[] m_aoAccessories;
        public int[] m_aAdditionalResourcesToCook;
        public string AIBarkAnimName;
        public TemporaryAnimSetInfo[] TemporaryAnims;
        public int[] CombatVocVariants;
        public NameReference[] AimNodes;
        public Vector[] AimNodeOffsets;
        public ReactionPart[] ReactionBones;
        public AbilityTimeStamp[] AbilityTimeStamps;
        public WeaponAnimSpec[] WeaponAnimSpecs;
        public int __RBCollisionCallback__Delegate;
        public int __DamageCallback__Delegate;
        public Guid MyGuid;
        public Guid GUID_LifetimeCrust;
        public Rotator ReplicatedRotation;
        public NameReference RightHandSocketName;
        public NameReference LeftHandSocketName;
        public Vector2D AimOffsetPct;
        public NameReference m_nmPhysicsImpactBone;
        public NameReference m_nmRagdollRecoverBone;
        public NameReference m_nmRagdollRecoverDirSwapBone;
        public int CurrentCustomAction;
        public int PreviousCustomAction;
        public int CurrentPowerCustomAction;
        public int GrammarID;
        public int DeathCustomAction;
        public float WalkSpeed;
        public float CombatWalkSpeed;
        public float CombatGroundSpeed;
        public float CoverGroundSpeed;
        public float CoverCrouchGroundSpeed;
        public float TightAimGroundSpeed;
        public float CrouchGroundSpeed;
        public float StormSpeed;
        public float StormTurnSpeed;
        public float StormSpeedScale;
        public float StormSpeedScaleTime;
        public float StormStartSpeed;
        public float HitReactionChanceMultiplier;
        public float LargeReactionInterval;
        public int m_nTalkedToCount;
        public int HeadMesh;
        public int MorphHead;
        public int m_oHairMesh;
        public int m_oHeadGearMesh;
        public int m_oVisorMesh;
        public int m_oFacePlateMesh;
        public float m_fRunAnimPlaybackPos;
        public float m_fRunAnimPlaybackRate;
        public float m_fRunAnimPlaybackLen;
        public float m_fWalkAnimPlaybackPos;
        public float m_fWalkAnimPlaybackRate;
        public float m_fWalkAnimPlaybackLen;
        public float m_fCollisionReadyHeight;
        public float PortArmsDelay;
        public int CurrentLink;
        public int CurrentSlotIdx;
        public int TargetSlotIdx;
        public int PreviousSlotIdx;
        public int LeftSlotIdx;
        public int RightSlotIdx;
        public float CurrentSlotPct;
        public float LastCoverActionTime;
        public int LightEnvironment;
        public float m_fPhysicsForceIncurred;
        public int AIBarkAnimSet;
        public int MaxBodyCount;
        public int DyingSound;
        public int NotifyNewEnemySound;
        public float FallingStateEntranceTime;
        public int m_nMaxTargetTickets;
        public int m_nMaxAttackTickets;
        public float m_fTicketExpiryTime;
        public int ConformTraceInterval;
        public float MeshAdjustFrequency;
        public float AimOffsetInterpSpeed;
        public float RemoteAimOffsetInterpSpeed;
        public float PortArmsAndAimInterpSpeed;
        public float ReloadingAimInterpTimeToGo;
        public float AimOriginOffset;
        public float RadarRange;
        public float RadarFOV;
        public int Squad;
        public float m_fPowerUsePercent;
        public int m_nPhysicsLevel;
        public float m_fPhysicsRecoverSpeedThreshold;
        public int m_nRemainInRagdoll;
        public int CombatVoc;
        public int ExplorationVoc;
        public int StealthVoc;
        public int Loadout;
        public float fSleepPerceptionDistance;
        public float m_fRagdollRecoverPhysBlendTime;
        public float PowerThreshold_Standard;
        public float PowerThreshold_Stagger;
        public float PowerThreshold_Knockback;
        public int CE_LifetimeCrust;
        public float m_fTurningAngle;
        public float m_fAnimStartTime;
        public float m_fMoveStartElapsedTime;
        public float m_fMoveStopElapsedTime;
        public float m_fAnimMoveSpeedSnapshot;
        public float m_fAnimMoveStartSpeedSnapshot;
        public float ReplicatedRotationInterpolationRate;
        public float CoverTransitionStdLeanOutRight;
        public float CoverTransitionStdLeanInRight;
        public float CoverTransitionStdLeanOutLeft;
        public float CoverTransitionStdLeanInLeft;
        public float CoverTransitionMidLeanOutRight;
        public float CoverTransitionMidLeanInRight;
        public float CoverTransitionMidLeanOutLeft;
        public float CoverTransitionMidLeanInLeft;
        public Color BloodColor;
        public int m_pOverrideSndSetFaceFXPkg;
        public int m_pSndSetFaceFXPkg;
        public float FollowDistanceModifier;
        public float AchievementForceThreshold;
        public float CameraHookScale;
        public bool bUseAnimatedRagdoll;
        public bool SupportsCombatGrammar;
        public bool bCombatPawn;
        public bool bInjuredPawn;
        public bool bFullyInitialized;
        public bool bFullyInitializedMP;
        public bool bCanPlayReactions;
        public bool bSpawnPHATInstance;
        public bool bKillOnRagdoll;
        public bool bCollidesAfterDeath;
        public bool bSaveMe;
        public bool bAllowSuperStormSpeed;
        public bool bCanEarlyMantle;
        public bool bCanRagdoll;
        public bool bAffectedByRagdollPowers;
        public bool bCanBeReaped;
        public bool bCanPlayMoveStopAnims;
        public bool bUseLargeReactions;
        public bool bOverrideHeadMat;
        public bool bOverrideBodyMats;
        public bool m_bOldUpdateSkelWhenNotRendered;
        public bool m_bEnableStartRootMotion;
        public bool m_bEnableStopRootMotion;
        public bool m_bUseWallSlidingSpeedAdj;
        public bool m_bHideWithCameraCollision;
        public bool bCanPortArms;
        public bool bDisablePlayerPortArmsEvenIfFriendly;
        public bool bWeaponDebug_Accuracy;
        public bool bWeaponDebug_DamageRadius;
        public bool bWasInCover;
        public bool bIsInStationaryCover;
        public bool bIgnoreDuringCoverSelection;
        public bool bDoUpdateCoverData;
        public bool bDisableVocEvents;
        public bool bAdjustMeshTranslationOnSlopes;
        public bool bReloadingAimInterp;
        public bool bDisableAnimatedTransitions;
        public bool bActive;
        public bool bHeadGearVisible;
        public bool m_bMin1Health;
        public bool m_bPhysicsDamageEnabled;
        public bool m_bPlotProtected;
        public bool bSleeping;
        public bool bShouldSpawnWeapons;
        public bool m_bInvertRagdollRecoverBoneAxis;
        public bool m_bRecoverDirSwap;
        public bool m_bInvertRagdollRecoverDirSwapBoneAxis;
        public bool bInterpolateReplicatedRotation;
        public bool bAchievementDisruptedGranted;
        public bool bAchievementFlyingGranted;
        public bool bAchievementFireGranted;
        public ECoverDirection CurrentSlotDirection;
        public ECoverDirection CoverDirection;
        public ECoverType CoverType;
        public ECoverAction CoverAction;
        public ERaceType RaceType;
        public ECharacterType CharacterType;
        public EAffiliationType AffiliationType;
        public EChallengeType ChallengeType;
        public EAxis m_eRagdollRecoverBoneAxis;
        public EAxis m_eRagdollRecoverDirSwapBoneAxis;
        public EBioAnimNodeCombatModeFadeOut m_eCombatModeFadeoutState;
    }
    public class SFXKActor : KActor
    {
        public bool bImmovable;
        public bool bKinematicUntilMoved;
    }
    public class BioPhysicsActor : SFXKActor
    {
        public float m_fHealth;
        public float m_fCurrentHealth;
        public bool m_bToughPlaceable;
    }
    public class BioPhysicsSounds : Object
    {
        public float m_fMaxMass;
        public float m_fMaxSpeed;
        public float m_fMinTimeBetweenSoundByActor;
        public float m_fMinSpeedToPlay;
        public bool m_bEnableLogging;
    }
    public class SFXGalaxyMapObject : Object
    {
        public int[] Children;
        public NameReference VisitedEvent;
        public NameReference VisitedEventParam;
        public int PosX;
        public int PosY;
        public int DisplayName;
        public float Scale;
        public int Appearance;
        public int VisibleConditional;
        public int VisibleParameter;
        public int UsableConditional;
        public int UsableParameter;
        public float m_fScanDetectionRange;
        public bool VirtualObject;
        public EBioRegionAutoSet VisibleConditionalRegion;
        public EGalaxyObjectVisiblePlotAutoSet VisibleConditionalPlot;
        public EGalaxyObjectVisibleAutoSet VisibleConditionalName;
        public EBioRegionAutoSet UsableConditionalRegion;
        public EGalaxyObjectUsablePlotAutoSet UsableConditionalPlot;
        public EGalaxyObjectUsableAutoSet UsableConditionalName;
        public ESFXGalaxyMapObjectLevel MapObjectLevel;
    }
    public class SFXSystemLevelObject : SFXGalaxyMapObject
    {
        public WwiseAudioPair ScanAudio;
        public int ScanParticleSystem;
        public int SystemActionButtonText;
        public bool ShowOrbitRing;
        public bool IsActualPlanet;
    }
    public class SFXPlanetFeature : SFXGalaxyMapObject
    {
        public string RTPCName;
        public string LandingSiteMapName;
        public int FeatureTransition;
        public int FeatureTransitionParameter;
        public int StartEvent;
        public int StopEvent;
        public int LandingSiteText;
        public int FeatureMarker;
        public float MarkerScale;
        public bool CritPathFeature;
        public bool Hidden;
        public EFeatureType FeatureType;
        public EBioRegionAutoSet FeatureTransitionRegion;
        public ESFXPlanetFeatureEventTransitionPlotAutoSet FeatureTransitionPlot;
        public ESFXPlanetFeatureEventTransitionAutoSet FeatureTransitionName;
    }
    public class BioPlanet : SFXSystemLevelObject
    {
        public PlanetSun[] Suns;
        public int[] Features;
        public int[] AutoGrantedFeatures;
        public string MapName;
        public string ImageBackground;
        public string PlanetEvent;
        public LinearColor RingColor;
        public LinearColor CloudColor;
        public LinearColor CoronaColor;
        public int Description;
        public int ButtonLabel;
        public int PreviewImage;
        public int MissionBriefing;
        public float ResourceRichness;
        public float PlanetRotation;
        public float Opacity;
        public float FringeBloom;
        public int PlanetMaterial;
        public int CloudMaterial;
        public int ScenePrefab;
        public int TextureParam;
        public float RelativeSize;
        public float DefaultDisplaySize;
        public float TerrainDepthFactor;
        public float m_fPlanetScale;
        public float PlacedMineralsPool;
        public float RandomMineralsBase;
        public float EezoMineralsBase;
        public float ScanBarMaxMineralSize;
        public int PlanetLandCondition;
        public int PlanetEventCondition;
        public int PlanetEventParameter;
        public int PlanetEventTransition;
        public int PlanetEventTransitionParameter;
        public int PlanetEventMessage;
        public int PlanetPlotLabel;
        public int PlanetPlotLabelCondition;
        public bool AlreadyExplored;
        public bool LabelAlwaysVisible;
        public bool AlwaysShowMapTag;
        public bool CritPathPlot;
        public EPlanetType PlanetType;
        public EOrbitRingType OrbitRing;
        public ESystemLevelType SystemLevelType;
        public EBioGalaxyMap_PlanetType PlanetLevelType;
        public EBioRegionAutoSet PlanetLandConditionRegion;
        public EBioPlanetLandConditionPlotAutoSet PlanetLandConditionPlot;
        public EBioPlanetLandConditionAutoSet PlanetLandConditionName;
        public EBioRegionAutoSet PlanetEventConditionRegion;
        public EBioPlanetEventConditionPlotAutoSet PlanetEventConditionPlot;
        public EBioPlanetEventConditionAutoSet PlanetEventConditionName;
        public EBioRegionAutoSet PlanetEventTransitionRegion;
        public EBioPlanetEventTransitionPlotAutoSet PlanetEventTransitionPlot;
        public EBioPlanetEventTransitionAutoSet PlanetEventTransitionName;
        public EBioRegionAutoSet PlanetPlotLabelConditionRegion;
        public EBioPlanetPlotLabelConditionPlotAutoSet PlanetPlotLabelConditionPlot;
        public EBioPlanetPlotLabelConditionAutoSet PlanetPlotLabelConditionName;
    }
    public class SFXAI_Core : SFXAI_NativeBase
    {
        public KismetOrder CurrentKismetOrder;
        public int __UsePowerDelegate__Delegate;
        public int __FireWeaponDelegate__Delegate;
        public int __MoveToDelegate__Delegate;
        public int __TryInvalidateTargetRange__Delegate;
        public int __TryInvalidateTargetFlank__Delegate;
        public int DefaultCommand;
        public int FallbackCommand;
        public int AggressiveCommand;
        public int BerserkCommand;
        public int PendingCommand;
        public Vector AimOverrideLoc;
        public Vector2D EvadeDamagePct;
        public NameReference SyncMeleeAbilityName;
        public Vector2D MoveFireDelayTime;
        public Vector2D AI_BurstsToFire;
        public float m_fNearbyEnemyDistance;
        public float MeleeAttackInterval;
        public float SyncMeleeAttackInterval;
        public float EvadeFrequency;
        public float EvadeResetDuration;
        public float PowerEvadeChance;
        public float PartialLeanPct;
        public float MeleeMoveOffset;
        public float CoverLeanAimOffset;
        public float CoverAimOffset;
        public float DirectAimOffset;
        public float AI_Acc_InstabilityDecayRate;
        public float AI_Acc_Base;
        public float AI_Acc_Target;
        public float AI_AccMod_Move;
        public float AI_AccMod_TargMove;
        public float AI_AccMod_BriefAcquire;
        public float AI_AccMod_BriefVisibility;
        public float AI_AccMod_ShortRange;
        public float AI_AccMod_MediumRange;
        public float AI_AccMod_LongRange;
        public float CancelFirePct;
        public float WeaponAimDelay;
        public float StuckTimeout;
        public int PreferredAnchor;
        public float AnchorDistance;
        public float TimeOfLastCombatEvent;
        public float TimeUntilAggressive;
        public int MaxNumAggressive;
        public int m_nTargetTicketCost;
        public float m_fPlayerTargetWeightBonus;
        public bool bUseTicketing;
        public bool bAllowCombatTransitions;
        public bool bNotifyFriendsOnDeath;
        public bool bReceiveDeathNotifications;
        public EAICombatMood PreviousCombatMood;
    }
    public class Goal_AtCover : PathGoalEvaluator
    {
        public int[] CoverGoalConstraints;
        public int AI;
        public int BestMarker;
        public int BestRating;
        public int MaxToRate;
        public int NumMarkersTested;
        public int TetherActor;
    }
    public class SFXAI_Cover : SFXAI_Core
    {
        public Vector2D NearCoverDelayTime;
        public Vector2D FarCoverDelayTime;
        public Vector2D AggressiveCoverDelayTime;
        public Vector2D ActionDelayTime_Normal;
        public Vector2D ActionDelayTime_Aggressive;
        public Vector2D ActionDelayTime_FallBack;
        public float MaxFireWaitTime;
        public float FlankReactionTime;
        public int AtCover_WeaponRange;
        public int AtCover_Defensive;
        public int AtCover_Aggressive;
        public int AtCover_NearMoveGoal;
    }
    public class CoverGoalConstraint : Object
    {
        public int ConstraintEvaluationPriority;
    }
    public class CovGoal_WeaponRange : CoverGoalConstraint
    {
        public float fClosePenalty;
        public float fFarPenalty;
        public float fIdealWeaponRange;
        public float fLongWeaponRange;
        public float fShortWeaponRange;
        public bool bHardConstraint;
    }
    public class CovGoal_Enemies : CoverGoalConstraint
    {
        public ValidEnemyCacheDatum[] ValidEnemyCache;
    }
    public class CovGoal_TeammateProximity : CoverGoalConstraint
    {
        public float fTeammateMinDistanceSq;
        public float fProximityPenalty;
        public float fSquadLeaderProximityPenalty;
        public float fTeammateMaxDistanceSq;
        public float fMaxDistancePenalty;
        public bool bRestrictMaxDistance;
    }
    public class CovGoal_MovementDistance : CoverGoalConstraint
    {
        public float BestCoverDist;
        public float MaxCoverDist;
        public float MinCoverDist;
        public float MinDistTowardGoal;
        public bool bMoveTowardGoal;
        public bool bHardConstraint;
        public bool bIgnoreCoverOutOfRange;
    }
    public class CovGoal_CombatZones : CoverGoalConstraint
    {
        public Vector CombatZoneOrigin;
    }
    public class CovGoal_GoalProximity : CoverGoalConstraint
    {
        public float BestGoalDist;
        public float MinGoalDist;
        public float MaxGoalDist;
        public bool bHardLimits;
    }
    public class SFXAI_Henchman : SFXAI_Cover
    {
        public int __ReachedInteractionPoint__Delegate;
        public int __StoppedWorldInteraction__Delegate;
        public float HenchmanAttackBonus;
        public float HenchmanDefenseBonus;
        public float HenchmanAttackDuration;
        public float HenchmanDefenseDuration;
        public bool m_bAllowInstantPowerWhileVisible;
    }
    public class RvrClientEffect : RvrClientEffectInterface
    {
        public int[] m_lstModules;
    }
    public class SFXSelectionLensFlareComponent : LensFlareComponent
    {
    }
    public class BioPlayerSelection : Object
    {
        public int[] m_lSelectionsInRange;
        public int m_oCurrentSelectionTarget;
        public int m_oLastSelectionTarget;
        public int SelectionFlareComp;
        public float SelectionMaxRange;
        public float SelectionFarRange;
        public float SelectionFarAngle;
        public float SelectionCloseRange;
        public float SelectionCloseAngle;
        public float MaxHighlightRange;
    }
    public class SFXModule_AimAssist : SFXModule
    {
        public Vector LastCamLoc;
        public Vector LastMagneticEllipse;
        public float GlobalFrictionFactor;
        public float GlobalAimCorrectionFactor;
        public float GlobalAdhesionFactor;
        public float GlobalSweepFactor;
        public float EnemyMovementAdhesionFactor;
        public float LastDistToTarget;
        public float LastDistMultiplier;
        public float LastDistFromAimZ;
        public float LastDistFromAimY;
        public float LastFrictionMultiplier;
        public float LastTargetRadius;
        public float LastTargetHeight;
        public float AdhesionSmoothRate;
        public float FrictionSmoothRate;
    }
    public class BioPlayerController : PlayerController
    {
        public Map_Mirror m_RadarDataMap;
        public Map_Mirror m_DamageIndicatorDataMap;
        public int[] OutlineGlowActors;
        public LocalEnemy[] EnemyList;
        public string StormRTPCName;
        public int[] TutorialIDs;
        public int __OnResumeGameComplete__Delegate;
        public int __PauseOnExternalUIState__Delegate;
        public SFXHotKeyDefinition m_aHotKeyDefines;
        public ScreenShakeStruct CoverShake;
        public CoverAcquisitionParams CoverAcquireParams;
        public CoverAcquisitionParams DirectionalCoverAcquireParams;
        public Guid CoverVisualizationClientEffectGuid;
        public Guid JumpClientEffectGuid;
        public Guid LadderUpClientEffectGuid;
        public Guid LadderDownClientEffectGuid;
        public Vector m_vLocationRadarArrowPointsTo;
        public Vector2D FlinchIntervalRange;
        public Vector2D NoShieldFlinchIntervalRange;
        public int ProfileSettings;
        public float MPSeamlessTravelDelay;
        public float MoveStickIdleThreshold;
        public float MoveStickWalkThreshold;
        public float MoveStickRunThreshold;
        public float MoveWalkModifierBlendTime;
        public float DeadZoneThreshold;
        public float PlayerCoverTransitionTime;
        public float CoverBreakTimeThreshold;
        public float MaxCoverEnterDist;
        public float CoverCameraTransitionTime;
        public float CoverSnapScale;
        public float CoverUpdateDelay;
        public float StormCoverUpdateDelay;
        public float CoverSlipCamAlign;
        public float PushOffCoverDuration;
        public int CoverVisualizationClientEffect;
        public int CE_Grab;
        public int CE_Mantle;
        public int CE_SwatLeft;
        public int CE_SwatRight;
        public int CE_HighSwatLeft;
        public int CE_HighSwatRight;
        public int CE_SlipRight;
        public int CE_SlipLeft;
        public int CE_HighSlipRight;
        public int CE_HighSlipLeft;
        public int CE_Jump;
        public int CE_LadderUp;
        public int CE_LadderDown;
        public float LadderFaceDot;
        public float LadderAimDot;
        public float m_fClimbMantleFaceAngleThreshold;
        public float m_fClimbMantleDistanceThreshold;
        public float RemappedJoyRight;
        public float RemappedJoyUp;
        public float RotationSensitivityLow;
        public float RotationSensitivityMedium;
        public float RotationSensitivityHigh;
        public float SawEnemyTypeShoutCooldownTime;
        public int StormStartWwiseEvent_M;
        public int StormPeakWwiseEvent_M;
        public int StormStartWwiseEvent_F;
        public int StormPeakWwiseEvent_F;
        public int StormEndWwiseEvent;
        public int KismetNoSaveReason;
        public int StorageDeviceRemovedText;
        public int DLCRemovedText;
        public int RestartGame;
        public int ProfileChangedText;
        public int ProfileChangedUnrecoverableText;
        public int ControllerRemoved;
        public float m_fMoveToDropDistance;
        public float m_fMaxZDifference;
        public float m_fRelativeZUpLimit;
        public float m_fRelativeZDownLimit;
        public float m_fLastRadarPassTime;
        public float m_fLastRadarRange;
        public float m_fRadarRange;
        public float m_fRadarFOV;
        public float m_fLastRadarFOV;
        public int m_nNavAssistMaxNodeLimit;
        public float m_fDamageIndicatorDisplayTime;
        public int m_srVehicleExitFailureMsg;
        public int m_srVehicleExitAButtonMsg;
        public int NUM_SERVERMOVE_BEFORE_RESET;
        public int MOVEREP_DELAY_FRAME;
        public float RemotePlayersRotationInterpolationSpeed;
        public float BIO_RESET_MAX_POSITION_ERROR_SQUARED;
        public float BIO_WARNING_MAX_POSITION_ERROR_SQUARED;
        public int MAX_CONSECUTIVE_POSITION_ERROR;
        public float ClientTimeoutForPendingCustomActionReset;
        public float AutonomousProxyLocationInterpSpeed;
        public float EdgeCoverSlotSnapRange;
        public int srOK;
        public int srNuiDisconnectError;
        public int HintSystem;
        public int m_oPlayerSelection;
        public bool bUsePackedMoves;
        public bool m_bDisableSquadCommandExit;
        public bool bDebugCover;
        public bool bNoCoverFromStorm;
        public bool bCancelStorm;
        public bool bNoLeaveCover;
        public bool bLockPosition;
        public bool CoverRespectsRotation;
        public bool bCoverGUIShowing;
        public bool bJumpGUIShowing;
        public bool bLadderGUIShowing;
        public bool bShowActionIcons;
        public bool m_bCanMantleOutsideOfCover;
        public bool bProfileSettingsUpdated;
        public bool bKismetNoSave;
        public bool m_bRadarArrow;
        public bool bEnableMultiplayerMotionBlur;
        public byte bBoost;
        public byte bJump;
        public byte bAlternateCamera;
        public byte bMine;
        public ESFXHUDActionIcon m_eCurrentActionIcon;
    }
    public class BioPlayerInput : PlayerInput
    {
        public InterpCurveFloat LookStickResponseCurve;
        public StaticKeyBind[] StaticConsoleBinds;
        public StaticKeyBind[] StaticPCBinds;
        public StaticKeyBind[] m_aFlyCamConsoleBinds;
        public DebugMenuEntry[] DebugMenu;
        public DebugMenuEntry[] DebugSubMenu;
        public int __InputDelegate__Delegate;
        public float AxisBuffer;
        public float LastAxisBuffer;
        public Vector AccumulatedAimVector;
        public float aGuiStrafe;
        public float aGuiBaseY;
        public float aGuiTurn;
        public float aGuiLookUp;
        public float aGuiMouseX;
        public float aGuiMouseY;
        public float GuiDeadzone;
        public float AccumulatedRotationSpeed;
        public float AccumulatedRotationDecayRate;
        public float GlobalStickFactor;
        public bool bUseMouseDampening;
        public byte bWantsToZoom;
    }
    public class BioPlayerReplicationInfo : PlayerReplicationInfo
    {
    }
    public class BioPlayerSquad : BioBaseSquad
    {
        public int MoveIndicators;
        public float m_fRevivalRange;
        public float m_fPercentHealthOnResurrection;
        public bool m_bEngagedHostileAction;
    }
    public class BioPlaypenVolume : Volume
    {
        public Guid PlaypenGuid;
        public bool bSubtractive;
    }
    public class BioPlotTreasure : Object
    {
        public int oPlotTreasureResources2DA;
        public int oPlotTreasureTreasure2DA;
        public int oPlotTreasureTech2DA;
    }
    public class BioPower : Object
    {
        public string m_sRTPCName;
        public NameReference m_nmPower;
        public int Script;
        public int Instigator;
        public int NewPower;
        public int Owner;
    }
    public class BioPowerManager : Object
    {
    }
    public class BioPowerScript : Object
    {
        public int[] m_ImpactedActors;
        public Vector m_vWorldImpactLocation;
        public Vector m_vWorldImpactNormal;
        public Vector m_vProjectileVelocity;
        public Vector m_vProjectileLocation;
        public int m_ImpactWaveForm;
        public int Recommended_TargetVulnerable;
        public int NotRecommended_TargetOrganic;
        public int NotRecommended_TargetMachine;
        public int NotRecommended_TargetHasShields;
        public int NotRecommended_TargetHasBiotics;
        public int NotRecommended_TargetHasArmor;
        public int NotRecommended_NoMedigel;
        public int NotRecommended_NoSquadMemberDead;
        public int NotRecommended_NoSquadMemberInjured;
        public int NotRecommended_WeaponPowerAlreadyOn;
        public int NotRecommended_TargetImmune;
        public bool m_bWeaponModePower;
        public bool bShouldTick;
    }
    public class BioPropertyEditorBaseNode : Object
    {
        public string m_sNodeDisplayName;
        public int[] m_aChildren;
        public int[] m_aTraversedStack;
        public string m_sParentGenName;
        public int m_nCurrentlySelectedChild;
        public int m_nScrollBoxFirstIndex;
        public int m_nScrollBoxSize;
        public int m_oTop;
        public int m_oParent;
        public Color m_colour;
        public int m_nGeneration;
    }
    public class BioPropertyEditorPropertyNode : BioPropertyEditorBaseNode
    {
        public string m_sValueString;
        public string m_sDeliminator;
        public Pointer Base;
    }
    public class BioPropertyEditorArrayNode : BioPropertyEditorPropertyNode
    {
        public int m_Property;
    }
    public class BioPropertyEditorBoneNode : BioPropertyEditorBaseNode
    {
        public int m_oSkeletalMesh;
        public int m_iLodIndex;
        public int m_iBoneIndex;
    }
    public class BioPropertyEditorEditableNode : BioPropertyEditorPropertyNode
    {
        public int prop;
        public int integerVal;
        public float floatVal;
        public int m_arrayProperty;
        public float StepSize;
        public bool boolVal;
        public bool alreadyEdited;
        public byte byteVal;
    }
    public class BioPropertyEditorEditNode : BioPropertyEditorPropertyNode
    {
        public int prop;
        public float StepSize;
        public float floatVal;
        public int otherVal;
    }
    public class BioPropertyEditorLevelNode : BioPropertyEditorBaseNode
    {
        public string m_sCommand;
    }
    public class BioPropertyEditorLoadNode : BioPropertyEditorBaseNode
    {
        public string Filename;
    }
    public class BioPropertyEditorReadOnlyNode : BioPropertyEditorPropertyNode
    {
        public string sDisplay;
    }
    public class BioPropertyEditorSaveNode : BioPropertyEditorBaseNode
    {
        public string Filename;
    }
    public class BioPropertyEditorVolatileNode : BioPropertyEditorBaseNode
    {
    }
    public class BioQuestMap : Object
    {
        public Map_Mirror QuestMap;
        public Map_Mirror TaskEvalMap;
        public Map_Mirror IntTaskEvalMap;
        public Map_Mirror FloatTaskEvalMap;
    }
    public class BioQuestProgressionMap : Object
    {
        public Map_Mirror QuestProgression;
        public int nQuestProgressCounter;
    }
    public class BioRadarMapBoundaries : Actor
    {
        public Vector m_vBoundarySize;
    }
    public class BioScalarParameterInstTrack : InterpTrackInst
    {
        public float ResetFloat;
    }
    public class BioScalarParameterTrack : InterpTrackFloatBase
    {
        public NameReference PropertyName;
        public float InterpValue;
        public int m_pParentEffect;
    }
    public class BioScout : Scout
    {
        public bool m_bAggressivePathPruning;
    }
    public class SFXGalaxyMapGameData : Object
    {
        public SFXGalaxyTemplates_Planet PlanetTemplates;
        public SFXGalaxyAudioData AudioData;
        public SFXGalaxyTemplates_Cluster ClusterTemplates;
        public SFXGalaxyTemplates_System SystemTemplates;
        public SFXGalaxyTemplates_Galaxy GalaxyTemplates;
        public SFXGalaxyTemplates_SystemScanning ScanningTemplates;
    }
    public class BioSeqAct_ActivateGalaxyMap : SequenceAction
    {
        public string m_sGalaxyMapResource;
        public int m_oGalaxyMapReferenced;
        public int m_pGalaxyMap;
        public int Data;
    }
    public class BioSeqAct_AddChoiceGUIElement : SequenceAction
    {
        public NameReference m_nmResource;
        public int m_srChoiceName;
        public int m_srChoiceTitle;
        public int m_oChoiceImage;
        public int m_srChoiceImageTitle;
        public int m_srChoiceDescription;
        public int m_nOptionalPaneItemValue;
        public int m_nChoiceColor;
        public int m_nChoiceID;
        public int m_srActionText;
        public bool OverrideDefaultResource;
        public bool m_bDefaultSelection;
        public bool m_bDisabled;
        public bool m_bNested;
        public EInventoryResourceTypes m_eResource;
    }
    public class BioSeqAct_AddPlaypenVolume : SequenceAction
    {
        public int[] Volumes;
        public int Squad;
    }
    public class BioSeqAct_AddToParty : SequenceAction
    {
        public float TeleportOffsetRear;
        public float TeleportOffsetSide;
        public bool TeleportToLeader;
    }
    public class BioSeqAct_AdjustCostForDiscount : SequenceAction
    {
    }
    public class BioSeqAct_AOECauseDamage : SequenceAction
    {
        public int DamageType;
        public float DamageAmount;
        public float DamageRadius;
        public float MomentumScale;
        public int InstigatorController;
        public bool bDamageFalloff;
        public bool bForceCinematicDamage;
    }
    public class BioSeqAct_AreaTransition : SequenceAction
    {
        public string Arguments;
        public NameReference AreaName;
        public NameReference StartPoint;
    }
    public class BioSeqAct_AttachCrustEffect : SequenceAction
    {
        public int oEffect;
        public float fLifeTime;
        public int Target;
    }
    public class BioSeqAct_AttachVisualEffect : SequenceAction
    {
        public int[] m_oAttachTo;
        public Vector m_vOffset;
        public NameReference m_nmSocketOrBone;
        public int m_oEffect;
    }
    public class BioSeqAct_BioToggleCinematicMode : SeqAct_ToggleCinematicMode
    {
        public string sSkipEvent;
        public bool bCinematicInputMode;
        public bool bDisableCinematicSkip;
        public bool m_bSupportsPlayerHelmet;
        public bool m_bSupportsPlayerFace;
    }
    public class BioSequenceLatentAction : SeqAct_Latent
    {
        public bool bHasTargets;
    }
    public class BioSeqAct_BlackScreen : BioSequenceLatentAction
    {
        public float fTimeDelay;
        public BlackScreenActionSet m_eBlackScreenAction;
    }
    public class BioSeqAct_BlockForTextureStreaming : SequenceAction
    {
    }
    public class BioSeqAct_CauseDamage : SequenceAction
    {
        public int DamageType;
        public float DamageAmount;
        public float MomentumScale;
        public int InstigatorController;
        public bool bForceCinematicDamage;
    }
    public class BioSeqAct_ClearBrowserWheelStateOverrides : SequenceAction
    {
    }
    public class BioSeqAct_CopyPlayerHeadToTarget : SequenceAction
    {
        public bool m_bCopyHeadGearMesh;
        public bool m_bCopyHairMesh;
    }
    public class BioSeqAct_Deprecated : SequenceAction
    {
    }
    public class BioSeqAct_DUIClear : SequenceAction
    {
        public bool bModal;
    }
    public class BioSeqAct_DUISetBarFillDirection : SequenceAction
    {
        public bool bModalBar;
        public bool bLeftToRight;
    }
    public class BioSeqAct_DUISetBarFillPercent : SequenceAction
    {
        public int nPercent;
        public bool bModalBar;
    }
    public class BioSeqAct_DUISetBarMarkers : SequenceAction
    {
        public int nMarker1;
        public int nMarker2;
        public bool bModalBar;
    }
    public class BioSeqAct_DUISetCounterValue : SequenceAction
    {
        public int nValue;
        public bool bModalCounter;
    }
    public class BioSeqAct_DUISetElementColor : SequenceAction
    {
        public Color oColor;
        public BioDUIElements Element;
    }
    public class BioSeqAct_DUISetElementPulsing : SequenceAction
    {
        public float fMinAlpha;
        public float fCycleTime;
        public bool bPulsing;
        public BioDUIElements Element;
    }
    public class BioSeqAct_DUISetElementText : SequenceAction
    {
        public string sText;
        public BioDUIElements Element;
    }
    public class BioSeqAct_DUISetElementVisible : SequenceAction
    {
        public float fFadeTime;
        public bool bVisible;
        public BioDUIElements Element;
    }
    public class BioSeqAct_DUISetTextStringRef : SequenceAction
    {
        public int srText;
        public BioDUIElements Element;
    }
    public class BioSeqAct_DUITimer : SeqAct_Latent
    {
        public float fStartTime;
        public float fEndTime;
        public float fIntervalTime;
        public bool bModalTimer;
        public bool bVisible;
    }
    public class BioSeqAct_EndCurrentConvNode : SequenceAction
    {
    }
    public class BioSeqAct_EndGame : SequenceAction
    {
        public int srEndGameMessage;
    }
    public class BioSeqAct_FaceOnlyVO : BioSequenceLatentAction
    {
        public NameReference m_nmSpeakerTag;
        public int m_pConversation;
        public int m_srLineStrRef;
        public int m_srActorNameOverride;
        public bool m_bForceHideSubtitles;
        public bool m_bIgnoreHenchmanSquadCheck;
        public bool m_bPlaySoundOnly;
        public bool m_bDisableDelayUntilPreload;
        public bool m_bHasPriority;
        public bool m_bInterruptAmbients;
        public bool m_bSubtitleHasPriority;
        public EBioFOVOSpeakers m_eSpeakerList;
        public EBioFOVOLines m_eConvLine;
    }
    public class BioSeqAct_ForceLightEnvUpdate : SequenceAction
    {
    }
    public class BioSeqAct_ForceStreamInTextures : SeqAct_StreamInTextures
    {
        public bool bBlockOnWait;
    }
    public class BioSeqAct_GetFromObjectList : SequenceAction
    {
        public int nListIndex;
    }
    public class BioSeqAct_GetNearestObject : SequenceAction
    {
        public bool bGetFurthest;
    }
    public class BioSeqAct_GetSquad : SequenceAction
    {
        public int oPawn;
        public int oSquad;
    }
    public class BioSeqAct_GiveMissionXP_NativeBase : SequenceAction
    {
        public NameReference CombatToken;
        public float RewardAmount;
        public int ObjectiveStringRef;
        public bool bSkipNotifications;
        public bool bCombatExperience;
    }
    public class BioSeqAct_HideSniperHudOverlay : SequenceAction
    {
    }
    public class BioSeqAct_InitLoadingMovie : SequenceAction
    {
    }
    public class BioSeqAct_InterruptAmbientConversation : SequenceAction
    {
        public int IgnoreConversation;
        public int OnlyInterruptThisConv;
        public bool m_bInterruptFovoToo;
    }
    public class BioSeqAct_IsActiveConversation : SequenceAction
    {
        public int Conversation;
        public bool m_bCheckForFovoToo;
        public bool m_bCheckForFull;
        public bool m_bCheckForAmbient;
    }
    public class BioSeqAct_KillPawn : SequenceAction
    {
    }
    public class BioSeqAct_MovieBink : BioSequenceLatentAction
    {
        public string m_sMovieName;
        public int m_wwiseEvent;
        public bool m_bFiredBinkStartEvent;
    }
    public class BioSeqAct_MultiLand : SeqAct_Latent
    {
        public Rotator ReticleRotStart;
        public Rotator ReticleRotMaxClamp;
        public Rotator ReticleRotMinClamp;
        public int Planet;
        public int Reticle;
        public int LandingSiteMarker;
        public float LandingSiteScale;
    }
    public class BioSeqAct_NonCombatArea : SequenceAction
    {
    }
    public class BioSeqAct_OrbitalGame : SeqAct_Latent
    {
        public int[] MineralStartEvents;
        public int[] MineralStopEvents;
        public string[] MineralRTPCNames;
        public string LandingSiteIndicator_RTPCName;
        public int[] AnomalyDetectedVO;
        public int[] ProbeLaunchedVO;
        public Rotator ReticleRotStart;
        public Rotator ReticleRotMaxClamp;
        public Rotator ReticleRotMinClamp;
        public int Planet;
        public int Clouds;
        public int Probe;
        public int Ring;
        public int ScanSphere;
        public int ProbeTrail;
        public int LandingSiteMarker;
        public int Reticle;
        public int ScanReticle;
        public int LaunchReticle;
        public int ScanWipe;
        public int ScanDirection;
        public int ScanBlip;
        public int ProbeImpact;
        public int ProbeLocationMarker;
        public int ProbeImpactSound;
        public int MineralRecoverySound_None;
        public int MineralRecoverySound_Small;
        public int MineralRecoverySound_Medium;
        public int MineralRecoverySound_Large;
        public int ProbeLaunchSound_NoProbes;
        public int LandingSiteIndicator;
        public int AnomalyStaticStart;
        public int AnomalyStaticStop;
    }
    public class BioSeqAct_PlayLoadingMovie : SequenceAction
    {
    }
    public class BioSeqAct_PMBase : SequenceAction
    {
        public string m_sObjectType;
        public int m_nIndex;
        public EBioRegionAutoSet Region;
        public EBioPlotAutoSet Plot;
    }
    public class BioSeqAct_PMCheckConditional : BioSeqAct_PMBase
    {
        public int Param;
        public bool OutValue;
        public EBioAutoSet Conditional;
    }
    public class BioSeqAct_PMCheckState : BioSeqAct_PMBase
    {
        public bool OutValue;
        public EBioAutoSet State;
    }
    public class BioSeqAct_PMExecuteTransition : BioSeqAct_PMBase
    {
        public int Param;
        public EBioAutoSet Transition;
    }
    public class BioSeqAct_PositionFSActors : SequenceAction
    {
    }
    public class BioSeqAct_Ragdoll : SequenceAction
    {
        public int mActor;
    }
    public class BioSeqAct_RemoveFromParty : SequenceAction
    {
    }
    public class BioSeqAct_ResurrectHenchman : SequenceAction
    {
        public float PctHealthRegained;
    }
    public class BioSeqAct_ScalarMathUnit : SequenceAction
    {
        public int IntX;
        public int IntY;
        public int IntZ;
        public float FloatX;
        public float FloatY;
        public float FloatZ;
        public bool XIsFloat;
        public bool YIsFloat;
        public bool ZIsFloat;
        public EScalarMathOps Operation;
    }
    public class BioSeqAct_SetActive : SequenceAction
    {
        public bool bSetActive;
    }
    public class BioSeqAct_SetBrowserWheelAvailable : SequenceAction
    {
        public bool m_bMakeAvailable;
    }
    public class SFXPlotTreasure : BioPlotTreasure
    {
        public float fFullPriceMultiplier;
        public int nLastUnlockedTech;
        public int srMultiLevelUpgradeName;
        public int nProfessorInPartyId;
        public int nProfessorIsDeadId;
        public int srLabOpenResearchMessage;
        public int srLabClosedResearchMessage;
        public int StateNewResearchAvailable;
        public int StateNewUpgradesAvailable;
        public int srCanAffordResearch;
    }
    public class BioSubtitles : Object
    {
        public ESubtitlesRenderMode m_DefaultRenderMode;
    }
    public class BioUIWorld : Object
    {
        public PostProcessSettings m_CurrentPostProcessSettings;
        public string m_sMapFile;
        public int[] m_SpawnedPawnOriginalReferences;
        public int __UIWorld_DeferredOperator__Delegate;
        public BioConvLightingData m_CustomLightingData;
        public NameReference m_fnCameraActorName;
        public int m_oNCHandler;
        public int m_PostProcessChain;
        public bool m_bEnabled;
    }
    public class BioWorldInfo : WorldInfo
    {
        public int[] SmokeList;
        public string m_sFriendlyName;
        public int[] SelectableActors;
        public int[] RadarActors;
        public int[] Ladders;
        public PlotStreamingSet[] PlotStreaming;
        public WorldStreamingState[] m_WorldStreamingStates;
        public string m_sDestinationAreaMap;
        public int[] m_pScannedClusters;
        public int[] m_pScannedSystems;
        public int[] m_pScannedPlanets;
        public EffectsMaterialPriority[] EffectsMaterialPriorities;
        public int[] m_AutoPersistentObjects;
        public Vector m_vDestination;
        public NameReference m_nmPS3RubberMouthAnimName;
        public int TimerList;
        public int LocalPlayerController;
        public int m_nRichPresenceContextStringIndex;
        public int m_oAreaMap;
        public int m_oParentAreaMap;
        public float m_fConversationInterruptDistance;
        public float m_fIdleCameraSpeed;
        public int m_srProfileNotSignedInWarningMsg;
        public int ForcedCasualAppearanceID;
        public int m_oPropertyEditor;
        public float m_fGameOverPauseTime;
        public int m_pEndGameMusicEvent;
        public int m_UIWorld;
        public int m_oPowerManager;
        public bool m_bInvokesHintMessages;
        public bool m_bPlayerRequiresFullHelmet;
        public bool m_bFlushSFHud;
        public bool m_bDebugCameras;
        public bool m_bPartyMembersImmuneToExternalForce;
        public bool bCombatLevel;
        public bool bCreateAndShowWeapons;
        public bool bUseCasualAppearance;
        public bool m_bAllowBrowserWheel;
        public bool bSupportsPrecomputedLightVolumes;
    }
    public class BioSeqAct_SetBrowserWheelStateOverrides : SequenceAction
    {
        public SubPageState[] PageStates;
    }
    public class BioSeqAct_SetEnvironmentEffectIntensity : SequenceAction
    {
    }
    public class BioSeqAct_SetExploreCameraRotation : SequenceAction
    {
        public int oTarget;
        public bool bForceInstant;
    }
    public class BioSeqAct_SetGestureMode : SequenceAction
    {
        public string[] ActorTags;
        public int[] m_aActors;
        public bool m_bForAmbientActing;
        public EBioSetGestureModes GestureMode;
    }
    public class BioSeqAct_SetLightEnvQuality : SequenceAction
    {
        public EDLEStateType Quality;
    }
    public class BioSeqAct_SetLookAtTarget : SequenceAction
    {
        public int[] Actors;
        public int LookAtTarget;
    }
    public class BioSeqAct_SetStreamingState : SequenceAction
    {
        public NameReference StateName;
        public bool NewValue;
    }
    public class BioSeqAct_SetWeapon : SequenceAction
    {
        public int cWeapon;
        public int oPawn;
        public int nWeapon;
    }
    public class BioSeqAct_ShouldShowSplashSequence : SequenceAction
    {
    }
    public class BioSeqAct_ShowChoiceGUI : BioSequenceLatentAction
    {
        public NameReference m_nmTag;
        public NameReference m_nmResource;
        public int m_srTitle;
        public int m_srSubTitle;
        public int m_srAButton;
        public int m_srBButton;
        public int m_srOptionalPaneTitleText;
        public int m_srOptionalPaneItemValuePrefixText;
        public bool m_ShowOptionalPane;
        public bool m_bAutoClose;
        public EInventoryResourceTypes m_eResource;
    }
    public class BioSeqAct_ShowMessage : BioSequenceLatentAction
    {
        public int srText;
        public int srAButton;
        public int srBButton;
        public float fDisplayTime;
        public int nIconIndex;
        public float m_fRemainingDisplayTime;
        public bool bNoFade;
        public bool m_bFinished;
        public bool m_bAPressed;
        public bool m_bWasPaused;
        public BioMessageBoxIconSets nIconSet;
        public SFX_MB_Skin m_Skin;
        public SFX_MB_TextAlign m_TextAlign;
    }
    public class BioSeqAct_SkillGame_Base : SeqAct_Latent
    {
        public int m_nStartingResource;
        public int m_nPhase2Resource;
        public int m_nPhase2Time;
        public bool m_bCompleted;
        public bool m_bRewardOnTimeFail;
        public ESkillGameComplete m_CompletionState;
    }
    public class BioSeqAct_SkillGame_Bypass : BioSeqAct_SkillGame_Base
    {
        public int m_nNumToSpawn;
        public int m_nPCBurnDown;
        public int m_nConsoleBurnDown;
    }
    public class BioSeqAct_SkillGame_Decryption : BioSeqAct_SkillGame_Base
    {
        public int m_nPercentDanger;
        public int m_nPercentGood;
        public float m_fSpeed;
    }
    public class BioSeqAct_SkynetEvent : SequenceAction
    {
        public string m_sString1;
        public string m_sString2;
        public int m_iInt1;
        public int m_iInt2;
        public bool m_bIsPartyMember;
        public eventEnumID m_eEventType;
    }
    public class BioSeqAct_StopLoadingMovie : SeqAct_Latent
    {
        public bool bDelayStopUntilGameHasRendered;
    }
    public class BioSeqAct_SwitchWeighted : SequenceAction
    {
        public float fWeight;
        public float fWeight0;
        public float fWeight1;
        public float fWeight2;
        public float fWeight3;
        public float fWeight4;
        public float fWeight5;
        public float fWeight6;
        public float fWeight7;
        public float fWeight8;
        public float fWeight9;
    }
    public class BioSeqAct_TalkObjSelect : SequenceAction
    {
        public float f00_Vixen;
        public float f01_Leading;
        public float f02_Convict;
        public float f03_Geth;
        public float f04_Thief;
        public float f05_Garrus;
        public float f06_Assassin;
        public float f07_Tali;
        public float f08_Professor;
        public float f09_Grunt;
        public float f10_Mystic;
        public float f11_Veteran;
        public int oPlayer;
        public int nHench1;
        public int nHench2;
    }
    public class BioSeqAct_ToggleGlobalLookAt : SequenceAction
    {
        public bool ForceState;
        public bool State;
        public bool Instant;
    }
    public class BioSeqAct_ToggleLightEnv : SeqAct_Toggle
    {
    }
    public class BioSeqAct_ToggleSave : SequenceAction
    {
        public int srReason;
        public bool bEnable;
    }
    public class BioSeqCond_Deprecated : SequenceCondition
    {
    }
    public class BioSeqCond_InCombat : SequenceCondition
    {
    }
    public class BioSeqEvt_BackgroundStreamingDone : SequenceEvent
    {
    }
    public class BioSeqEvt_CinematicSkipped : SequenceEvent
    {
        public string sEvent;
    }
    public class BioSeqEvt_Conversation : SequenceEvent
    {
        public NameReference sScriptName;
        public int Conv;
        public bool bFireForFull;
        public bool bFireForAmbient;
        public EConversationScriptType eScriptType;
    }
    public class BioSeqEvt_ConvNode : SequenceEvent
    {
        public int m_nNodeID;
        public int m_nConvResRefID;
    }
    public class BioSeqEvt_Deprecated : SequenceEvent
    {
    }
    public class BioSeqEvt_ForegroundStreamingDone : SequenceEvent
    {
    }
    public class BioSeqEvt_GalaxyMap : SequenceEvent
    {
        public string sEvent;
        public NameReference EventParameter;
    }
    public class BioSeqEvt_LoadingScreenClosed : SequenceEvent
    {
    }
    public class BioSeqEvt_NotifyLimbDetached : SequenceEvent
    {
    }
    public class BioSeqEvt_OnCastAt : SequenceEvent
    {
    }
    public class BioSeqEvt_OnPlayerActivate : SequenceEvent
    {
    }
    public class SFXGameChoiceGUIData : Object
    {
        public SFXTokenMapping[] m_mapTokenIDToActual;
        public SFXChoiceEntry[] lstChoices;
        public int m_srTitle;
        public int m_srSubTitle;
        public int m_srAText;
        public int m_srBText;
        public int m_srOptionalPaneTitleText;
        public int m_srOptionalPaneItemValuePrefixText;
        public bool m_ShowOptionalPane;
        public EInventoryResourceTypes m_eOptionalPaneResourceType;
    }
    public class BioSeqVar_ChoiceGUIData : SeqVar_Object
    {
        public int m_ChoiceData;
    }
    public class BioSeqVar_ObjectFindByTag : SeqVar_Object
    {
        public NameReference m_sObjectTagToFind;
        public bool m_bSearchUniqueTag;
    }
    public class BioSeqVar_StoryManagerBool : SeqVar_Bool
    {
        public string m_sRefName;
        public int m_nIndex;
        public EBioRegionAutoSet Region;
        public EBioPlotAutoSet Plot;
        public EBioAutoSet State;
    }
    public class BioSeqVar_StoryManagerFloat : SeqVar_Float
    {
        public string m_sRefName;
        public int m_nIndex;
        public EBioRegionAutoSet Region;
        public EBioPlotAutoSet Plot;
        public EBioAutoSet Float;
    }
    public class BioSeqVar_StoryManagerInt : SeqVar_Int
    {
        public string m_sRefName;
        public int m_nIndex;
        public EBioRegionAutoSet Region;
        public EBioPlotAutoSet Plot;
        public EBioAutoSet Int;
    }
    public class BioSeqVar_StoryManagerStateId : SeqVar_Int
    {
        public int m_nIndex;
        public EBioRegionAutoSet Region;
        public EBioPlotAutoSet Plot;
        public EBioAutoSet State;
    }
    public class BioSFHandler_Achievement : SFXGUIMovieLegacyAdapter
    {
        public int m_nSelectedItemIndex;
        public int m_nShiftItemIndex;
        public int srEmpty;
        public bool m_bFromMainMenu;
    }
    public class BioSFHandler_BlackScreen : SFXGUIMovieLegacyAdapter
    {
        public string m_ASPath;
        public float m_CurrentAlpha;
        public float m_AccumulatedFadeTime;
        public float m_FadeTime;
        public BlackScreenDisplayModes m_eDisplayMode;
    }
    public class SFXPowerCustomActionBase : BioCustomAction
    {
        public PowerData CooldownTime;
        public PowerData HenchmanCooldownTime;
        public PowerData MinimumRange;
        public PowerData MaximumRange;
        public PowerData ImpactRadius;
        public PowerData MaximumImpactTargets;
        public PowerData MaximumRagdollTargets;
        public PowerData EffectDuration;
        public PowerData Damage;
        public PowerData Force;
        public PowerData VFXIntensity;
        public PowerData ProjectileSpeed;
        public PowerData ConeHalfAngle;
        public RankInfo2[] Ranks;
        public int[] RankCosts;
        public PowerStatBarInfo[] PowerStatBars;
        public int __OnActorImpacted__Delegate;
        public EvolvedChoiceInfo EvolvedChoicesInfo;
        public int EvolvedChoices;
        public int EvolvedRankCosts;
        public NameReference PowerName;
        public int PowerCustomActionID;
        public float Rank;
        public float DelayBeforeFirstUse;
        public float DelayBetweenUses;
        public float TimeUntilNextUse;
        public float CurrentCooldownTime;
        public float TotalCooldownTime;
        public float GlobalCooldownTime;
        public int DisplayName;
        public int Description;
        public int DataDescription;
        public int ImpactText;
        public int Icon;
        public int IconResource;
        public int TalentDescription;
        public int Evolved1DisplayName;
        public int Evolved1TalentDescription;
        public int Evolved2DisplayName;
        public int Evolved2TalentDescription;
        public int WheelDisplayIndex;
        public float InstantCastIgnoreCoverDist;
        public int srTokenizedPowerData;
        public int srFractionSeparator;
        public bool bEnabled;
        public bool bEvolved1;
        public bool bEvolved2;
        public bool AISelectable;
        public bool AimingIgnoresObstructions;
        public bool UsesSharedCooldown;
        public bool DisplayInHUD;
        public bool DisplayInCharacterRecord;
        public bool IsHenchmenUnique;
        public bool IsBonusPower;
        public EPowerType PowerType;
        public EPowerType HenchmanPowerType;
    }
    public class SFXPowerLevelUpHelper : Object
    {
    }
    public class BioSFHandler_BrowserWheel : SFXGUIMovieLegacyAdapter
    {
        public BWPageStruct[] lstPages;
        public Vector vInput;
        public float fLastRadius;
        public int srExitConfirm;
        public int srMainMenuConfirm;
        public int srConfirm;
        public int srCancel;
        public int m_Helper;
    }
    public class BioSFHandler_ChoiceGUI : SFXGUIMovieLegacyAdapter
    {
        public string m_sResourceCostColorHTML_CanAfford;
        public string m_sResourceCostColorHTML_CantAfford;
        public int __InputCallback__Delegate;
        public int __UpdateCallback__Delegate;
        public int __UpdateCallbackEx__Delegate;
        public int m_ChoiceData;
        public int nInputCallbackContext;
        public int m_srResourceTextCredits;
        public int m_srResourceTextEzo;
        public int m_srResourceTextIridium;
        public int m_srResourceTextPalladium;
        public int m_srResourceTextPlatinum;
        public int m_srResourceTextProbes;
        public int m_srResourceCostFormat;
        public int m_srResourceAvailFormat;
        public int m_nInfoScrollSpeed;
    }
    public class BioSFHandler_Conversation : SFXGUIMovieLegacyAdapter
    {
        public int m_aReplyLocations;
        public int m_aInvestigateLocations;
        public int m_nSlotsUsed;
        public Vector vInput;
        public NameReference InterruptAppearRenegade;
        public NameReference InterruptDisappearRenegade;
        public NameReference InterruptAppearParagon;
        public NameReference InterruptDisappearParagon;
        public int m_srTextInvestigate;
        public int m_srTextReturn;
        public int m_nReplyLocationMiddleLeft;
        public int m_nReplyLocationTopLeft;
        public int m_nReplyLocationBottomLeft;
        public int m_nReplyLocationTopRight;
        public int m_nReplyLocationBottomRight;
        public int m_nReplyLocationMiddleRight;
        public int m_nInvestigateLocationMiddleLeft;
        public int m_nInvestigateLocationTopLeft;
        public int m_nInvestigateLocationBottomLeft;
        public int m_nInvestigateLocationTopRight;
        public int m_nInvestigateLocationBottomRight;
        public int m_nInvestigateLocationMiddleRight;
        public float fLastRadius;
        public bool m_bDisplayInvestigateSubMenu;
        public bool m_bDisplayingWheel;
        public bool m_bDisplayingParagonInterrupt;
        public bool m_bDisplayingRenegadeInterrupt;
        public bool m_bMonitor16x9Enforcement;
    }
    public class BioSFHandler_GalaxyMap : SFXGUIMovieLegacyAdapter
    {
        public int aUIActionCallbacks;
        public int __OnCallbackEvent__Delegate;
        public SFXUIControlState aActions;
        public float m_fScrollValue;
        public bool m_bFullCleanupOnClose;
    }
    public class BioSFHandler_GameOver : SFXGUIMovieLegacyAdapter
    {
        public int GameOverString;
        public int BadResumeGameText;
        public int AcceptBadResumeGameText;
        public bool AbleToLoad;
    }
    public class BioSFHandler_IntroText : SFXGUIMovieLegacyAdapter
    {
        public int srText;
    }
    public class BioSFHandler_LoadScreen : SFXGUIMovieLegacyAdapter
    {
    }
    public class SFXGUI_MainMenu_RightComputer : Object
    {
        public SFXOnlineConnection_MessageType[] MessagePriorities;
        public int[] Messages;
        public int[] TickerMessages;
        public int[] DisconnectedTickerMessages;
        public int __OnComputerDisplayRegistered__Delegate;
        public int __OnConnectButtonExecuted__Delegate;
        public int nNextMessageID;
        public int ComputerDisplay;
        public int nCurrentlySelectedMessageIndex;
        public int nLastTickerMessageIDDisplayed;
        public int nCurrentlyDisplayedTickerMessageIndex;
        public int MaxNumberOfImages;
        public bool bComputerOpen;
    }
    public class BioSFHandler_MainMenu : SFXGUIMovieLegacyAdapter
    {
        public NameReference ConnectionMessageBoxId;
        public int srDemo;
        public int srCerb_ActivateCerb;
        public int srCerb_ConnectTo;
        public int srCerb_ConnectingToCerb;
        public int srCerb_ConnectedToCerb;
        public int srNotificationOriginSignin;
        public int srFriendBeatMe;
        public int srFriendBeatByMe;
        public float fPendingLoadMessageCheckThreshold;
    }
    public class BioSFHandler_MessageBox : SFXGUIMovieLegacyAdapter
    {
        public int __InputCallback__Delegate;
        public int __UpdateCallback__Delegate;
        public int __UpdateCallbackEx__Delegate;
        public int __ChoiceDialogCallback__Delegate;
        public int __WeaponChoiceCallback__Delegate;
        public int nInputCallbackContext;
        public int WeaponPickupUITitle;
        public int WeaponPickupAddToInventoryText;
        public int WeaponPickupOpenInventoryText;
        public int WeaponPickupEquipText;
        public bool bHandleInput;
    }
    public class BioSFHandler_NewCharacter : SFXGUIMovieLegacyAdapter
    {
        public string m_sMaleName;
        public string m_sFemaleName;
        public int[] lstClassAnimSetRefs;
        public int[] lstCharacterClasses;
        public int[] lstSpawnableClasses;
        public BonusTalentData[] BonusTalents;
        public int[] NewGameStartingCodexEntries;
        public string[] MalePregeneratedHeadCodes;
        public string[] FemalePregeneratedHeadCodes;
        public string DefaultFemaleME2HeadCode;
        public int __OnCloseCallback__Delegate;
        public TemplateGenderPair lstTemplates;
        public NameReference m_nmAllianceComputerPleaseLogin;
        public NameReference m_nmClassAnimSet;
        public float fLookAtUpDownValue;
        public float fLookAtLeftRightValue;
        public int srCustomMaleName;
        public int srCustomFemaleName;
        public int srNewCharConfirm;
        public int srNewCharCancel;
        public int srNewCharQuestion;
        public int srFacialCategoryDescription;
        public int srConfirm;
        public int srSetName;
        public int srSetCode;
        public int srFailedToFindFaceCode;
        public int m_nDefaultOrigin;
        public int m_nDefaultNotoriety;
        public int m_nDefaultClass;
        public int srNameTitle;
        public int nMaxNameLength;
        public int srCodeTitle;
        public int nMaxCodeLength;
        public int m_nInfoScrollSpeed;
        public int MaleDataSource;
        public int FemaleDataSource;
        public int CE_SchematicEffect;
        public int SchematicAnimSet;
        public int oKeyboard;
        public bool bLookAtLeftRightNulling;
        public bool bLookAtUpDownNulling;
        public bool bZoomedInOnFace;
        public bool bOpenedFromMainMenu;
        public bool m_bSpecialTriggerDeviceSelection;
        public bool bSkipCharacterCreation;
        public bool m_bMaleSelected;
        public bool bEnsureValidFaceCodeOnImport;
        public EPlotChoice m_ePlotChoice;
        public EDataOrigin m_nDataOrigin;
        public BioNewCharacterTemplates m_nCurrentTemplate;
        public BioNewCharacterTemplates m_nLastInitializedTemplate;
        public NewCharacterLookAtTarget CurrentLookAtTarget;
        public NewCharacterLookAtTarget NextLookAtTarget;
    }
    public class BioSFHandler_Options : SFXGUIMovieLegacyAdapter
    {
        public int[] m_aContentOptions;
        public int[] m_lstOptsToReset;
        public TextSliderOption[] TextSliderOptions;
        public RadioGroupOption[] RadioGroupOptions;
        public SliderOption[] SliderOptions;
        public GamePopulatedOptionPage[] GamePopulatedOptionPages;
        public OptionPage[] OptionPages;
        public OptionPage[] NewGameOptionPages;
        public OptionPage[] MPOptionPages;
        public NameReference[] IgnoreDifficultyMapNames;
        public int __AddTelem__Delegate;
        public int __OnCloseCallback__Delegate;
        public int srSkipConfirm;
        public int srYes;
        public int srNo;
        public int ResolutionStory;
        public int GammaLevels;
        public int GammaStory;
        public int VCInputStory;
        public int VCOutputStory;
        public int NewSettings;
        public bool m_bSelfPanelClose;
        public bool bWaitingOnMsgBox;
        public EDifficultyOptions CachedDifficulty;
    }
    public class BioSFHandler_PCAchievement : BioSFHandler_Achievement
    {
    }
    public class BioSFHandler_PCChoiceGUI : BioSFHandler_ChoiceGUI
    {
    }
    public class BioSFHandler_PCConversation : BioSFHandler_Conversation
    {
        public Vector vMouseInput;
        public float AccumulationDivisor;
    }
    public class BioSFHandler_PCDesignerUI : BioSFHandler_DesignerUI
    {
    }
    public class BioSFHandler_PCGalaxyMap : BioSFHandler_GalaxyMap
    {
    }
    public class BioSFHandler_PCGameOver : BioSFHandler_GameOver
    {
    }
    public class BioSFHandler_PCMainMenu : BioSFHandler_MainMenu
    {
    }
    public class BioSFHandler_PCMessageBox : BioSFHandler_MessageBox
    {
    }
    public class BioSFHandler_PCNewCharacter : BioSFHandler_NewCharacter
    {
        public float fScrollValueMouse;
        public float fLookAtThresholdAhead;
        public float fLookAtThreshold;
        public float fLookAtLimit;
        public bool bHeadLookEnabled;
    }
    public class BioSFHandler_PCOptions : BioSFHandler_Options
    {
        public KeyBind[] KeyBinds;
        public int CaptureBindIndex;
        public int CaptureBindNumber;
    }
    public class BioSFHandler_PCPauseMenu : BioSFHandler_BrowserWheel
    {
    }
    public class BioSFHandler_SelectCharacter : SFXGUIMovieLegacyAdapter
    {
    }
    public class SFXGUIMovieExtension : Object
    {
        public int m_nFSHandlerID;
    }
    public class BioSFHandler_SharedIGG : SFXGUIMovieExtension
    {
    }
    public class BioSFHandler_SniperOverlay : SFXGUIMovieLegacyAdapter
    {
    }
    public class BioSFHandler_Splash : SFXGUIMovie
    {
    }
    public class BioSFHandler_XBoxMessageBox : SFXGUIMovieLegacyAdapter
    {
        public int nSelectedButton;
        public bool bMessageBoxVisible;
    }
    public class BioSFResources : Object
    {
        public BioSFSoundAssetResource[] Sounds;
        public int[] LoadScreenTips;
        public int[] Movies;
    }
    public class BioSFScreenTip : Object
    {
        public int Default_Body;
        public int PC_Body;
        public int PS3_Body;
    }
    public class BioSimpleDialog : Object
    {
        public SimpleDialogLine[] DialogLinesMale;
        public SimpleDialogLine[] DialogLinesFemale;
        public SimpleVOEvent[] SimpleVOEvents;
        public Color SubtitleColor;
    }
    public class BioSimpleDialogContainer : Object
    {
        public int Dialog;
    }
    public class BioSkelControl_TurretConstrained : SkelControlSingleBone
    {
        public TurretConstraintData MaxAngle;
        public TurretConstraintData MinAngle;
        public Rotator DesiredBoneRotation;
        public float LagDegreesPerSecond;
        public float m_fLagScale;
        public bool bConstrainPitch;
        public bool bConstrainYaw;
        public bool bConstrainRoll;
        public bool bInvertPitch;
        public bool bInvertYaw;
        public bool bInvertRoll;
    }
    public class BioSkillGame_Base_Handler : SFXGUIMovieLegacyAdapter
    {
        public string m_sBackgroundMusic;
        public int __OnSuccessCallback__Delegate;
        public int __OnFailureCallback__Delegate;
        public int __OnCancelCallback__Delegate;
        public NameReference m_sTecPlotStateName;
        public float m_fTecTimeMultiplier;
        public int m_nStartingResource;
        public int m_nPhase2Resource;
        public int m_nPhase2Time;
        public int m_oDependent;
        public int m_oUsingPawn;
        public bool m_bRewardOnTimeFail;
        public bool m_bSuccessfulEndGame;
        public bool m_bCanceled;
    }
    public class BioSkillGame_Bypass_Handler : BioSkillGame_Base_Handler
    {
        public Vector m_vRightInput;
        public Vector m_vLeftInput;
        public int m_nNumToSpawn;
        public int m_nPCBurnDown;
        public int m_nConsoleBurnDown;
    }
    public class BioSkillGame_Bypass_PCHandler : BioSkillGame_Bypass_Handler
    {
    }
    public class BioSkillGame_Decryption_Handler : BioSkillGame_Base_Handler
    {
        public int m_nPercentDanger;
        public int m_nPercentGood;
        public float m_fSpeed;
    }
    public class BioSkillGame_Decryption_PCHandler : BioSkillGame_Decryption_Handler
    {
    }
    public class BioSkillMap : Object
    {
        public NameReference[] SkillToStateMap;
        public bool m_bClosedIsSkillState;
    }
    public class BioSkillMap_Door : BioSkillMap
    {
    }
    public class BioSkillMap_Test : BioSkillMap
    {
    }
    public class BioSocketSupermodel : SkeletalMesh
    {
        public int[] Dependents;
    }
    public class BioSquadCombat : BioBaseSquadDesignCombat
    {
    }
    public class BioSquadHoldMarker : NavigationPoint
    {
        public string BaseTag;
        public Vector LiftOffset;
        public int MyLift;
    }
    public class BioSquadTargetData : Object
    {
    }
    public class BioStage : Actor
    {
        public BioStageCamera[] m_aCameraList;
        public int m_pMeshComp;
        public bool m_bEnabled;
        public bool m_bDoHeightAdjustment;
        public bool m_bLookAtActive;
        public bool m_bDOFActive;
    }
    public class BioStartLocation : Actor
    {
    }
    public class BioStartPoint : NavigationPoint
    {
    }
    public class BioTacticalMoveToIndicator : Actor
    {
        public int ParticleSystem;
        public float m_fFadeInTime;
        public float m_fTimePassed;
    }
    public class BioTempNavPoint : NavigationPoint
    {
    }
    public class BioTierInfo : Object
    {
        public Pointer[] Triggers;
        public Pointer CurrentTrigger;
        public int Priority;
        public bool Enabled;
        public bool IsFloor;
        public bool IsGlobal;
        public bool IsDynamic;
        public bool ValidCurrentTrigger;
    }
    public class BioTierManager : Object
    {
        public TierDetails_t[] TierDetails;
        public NameReference DefaultTier;
    }
    public class BioTimerList : Object
    {
        public BioTimer[] lstTimers;
        public int __BioTimerDelegate__Delegate;
    }
    public class BioTrigger : Trigger
    {
        public bool Enabled;
        public bool OneShot;
    }
    public class BioTriggerActorFactory : ActorFactory
    {
    }
    public class BioTriggerStream : TriggerVolume
    {
        public BioStreamingState[] StreamingStates;
        public NameReference TierName;
        public int m_nPriorityLevel;
        public int m_oAreaMapOverride;
        public bool m_bIgnoreForStreamingCoverage;
    }
    public class BioTriggerVolume : TriggerVolume
    {
        public bool Enabled;
        public bool OneShot;
    }
    public class BioVectorParameterInstTrack : InterpTrackInst
    {
    }
    public class BioVectorParameterTrack : InterpTrackVectorBase
    {
    }
    public class BioVFXTemplate : Object
    {
    }
    public class BioVisualEffect : PrefabInstance
    {
    }
    public class BioVisualEffectPool : Object
    {
    }
    public class BioVisualEffectTrack : InterpTrack
    {
    }
    public class BioVisualEffectTrackInst : InterpTrackInst
    {
    }
    public class BioWaypointLinesComponent : PrimitiveComponent
    {
        public Pointer VfTable_FTickableObject;
    }
    public class BioWaypointSet : Actor
    {
        public ActorReference[] WaypointReferences;
        public bool AlwaysShow;
    }
    public class BioWaypointSetFactory : ActorFactory
    {
    }
    public class BioWorldInfoTick : Actor
    {
    }
    public class BioWp_Kismet : BioPathPoint
    {
    }
    public class CovGoal_AvoidEnemies : CoverGoalConstraint
    {
    }
    public class DynamicCylindricalForceActor : RB_CylindricalForceActor
    {
    }
    public class Goal_AwayFromPosition : PathGoalEvaluator
    {
        public Vector AvoidPos;
        public Vector AvoidDir;
        public int MaxDist;
        public int BestNode;
        public int BestRating;
    }
    public class RvrAnimNotifyClientEffect : AnimNotify
    {
        public Vector m_vSpawnParameters;
        public int m_pEffect;
        public bool m_bStop;
        public bool m_bAllowCooldown;
    }
    public class RvrClientEffectModule : Object
    {
        public RvrCEParameterDistribution[] m_aParameters;
        public int m_pInstanceClass;
        public NameReference m_nmTag;
        public float m_fDuration;
        public float m_fDrawScale;
        public float m_fTimeScale;
        public int m_nSortBias;
        public float m_fDelay;
        public float m_fMaxDistance;
        public float m_fMaxBehindDistance;
        public float m_fActivationValue;
        public int m_nLoops;
        public bool m_bEnabled;
        public bool m_bSoftStopsAreHard;
        public bool m_bIgnoreSoftStops;
        public bool m_bExclusiveOnTarget;
        public bool m_bLocalPlayerOnly;
        public bool m_bEndOnInstigatorDestroy;
        public bool m_bHideInstigatorOnEnd;
        public bool m_bSinglePlayerOnly;
        public bool m_bOnVisibleInstigatorOnly;
        public bool m_bIsCoolDownModule;
        public bool m_bCapsFailKillsEffect;
        public bool m_bAllowPendingMode;
        public bool m_bLooping;
        public bool m_bLoopsAreHard;
        public bool m_bSupportsInfiniteDuration;
        public EModuleTickGroup m_eModuleTickGroup;
        public EValueModifierOperation m_eActivationOperation;
        public EValueModifierSelection m_eActivationSelection;
    }
    public class RvrCEffectModuleCameraShake : RvrClientEffectModule
    {
        public float ShakeScale;
        public float RadialShake_InnerRadius;
        public float RadialShake_OuterRadius;
        public float RadialShake_Falloff;
        public int Shake;
        public bool bDoControllerVibration;
        public bool bRadialShake;
        public bool bOrientTowardRadialEpicenter;
        public ECameraAnimPlaySpace PlaySpace;
    }
    public class RvrClientEffectModuleInstance : Object
    {
        public bool m_bActive;
        public bool m_bPrimed;
        public bool m_bFinished;
        public bool m_bTick;
        public bool m_bStopRequested;
        public bool m_bHasBeenActivated;
        public bool m_bHidInstigator;
    }
    public class RvrCEffectModuleCameraShakeInstance : RvrClientEffectModuleInstance
    {
    }
    public class RvrCEffectModuleEffectsMaterial : RvrClientEffectModule
    {
        public RawDistributionFloat m_FractionEnabled;
        public NameReference m_nmEffect;
        public bool m_bAllAttachments;
        public EEffectLocationTarget m_eTarget;
    }
    public class RvrCEffectModuleEffectsMaterialInstance : RvrClientEffectModuleInstance
    {
        public int m_pTargetActor;
        public int m_pTargetWeapon;
    }
    public class RvrCEffectModuleEmitter : RvrClientEffectModule
    {
        public int m_pParticleSystem;
        public EEffectLocationTarget m_eEmitterTarget;
        public EEffectLocationTarget m_eEmitterInstigator;
        public ESceneDepthPriorityGroup m_eDPG;
    }
    public class RvrCEffectModuleEmitterInstance : RvrClientEffectModuleInstance
    {
        public int m_pPSysComponent;
    }
    public class RvrCEffectModuleFramebuffer : RvrClientEffectModule
    {
        public int m_pPostProcess;
        public bool m_bResetTime;
        public bool m_bInstantiateMaterials;
        public bool m_bSendTimeParam;
    }
    public class RvrCEffectModuleFramebufferInstance : RvrClientEffectModuleInstance
    {
        public int m_pPostProcessInstance;
    }
    public class RvrCEffectModuleLensFlare : RvrClientEffectModule
    {
        public int m_pLensFlare;
    }
    public class RvrCEffectModuleLensFlareInstance : RvrClientEffectModuleInstance
    {
    }
    public class RvrCEffectModuleLifetime : RvrClientEffectModule
    {
        public float m_fMin;
        public float m_fMax;
        public float m_fRequestStop;
    }
    public class RvrCEffectModuleLifetimeInstance : RvrClientEffectModuleInstance
    {
        public float m_fMin;
        public float m_fMax;
        public float m_fRequestStop;
        public bool m_bSoftStopSent;
    }
    public class RvrCEffectModuleLight : RvrClientEffectModule
    {
        public RawDistributionFloat Brightness;
        public RawDistributionVector ColorOverLife;
        public RawDistributionFloat Radius;
        public int m_pLightClass;
        public bool m_bCastShadows;
        public bool m_bCastStaticShadows;
        public bool m_bCastDynamicShadows;
        public bool m_bCastCompositeShadow;
    }
    public class RvrCEffectModuleLightInstance : RvrClientEffectModuleInstance
    {
        public int m_pLight;
    }
    public class RvrCEffectModuleLocation : RvrClientEffectModule
    {
        public RawDistributionVector m_LocationAdjust;
        public RawDistributionVector m_RotationAdjust;
        public RvrClientEffectParameter m_oLocationParam;
        public RvrClientEffectParameter m_oNormalParam;
        public NameReference m_sAttachment;
        public float m_HitLocationPullback;
        public bool m_bSetEffectLocation;
        public bool m_bContinuous;
        public bool m_bSendLocation;
        public bool m_bSendNormal;
        public bool m_bAttach;
        public EEffectLocationTarget m_eTarget;
        public EEffectLocationReference m_eReference;
        public EEffectRotationTarget m_eRotationTarget;
        public EEffectBoneAxis m_eBoneAxis;
    }
    public class RvrCEffectModuleLocationInstance : RvrClientEffectModuleInstance
    {
        public Vector m_vHitBoneOffset;
        public NameReference m_nmHitBone;
    }
    public class RvrCEffectModuleMeta : RvrClientEffectModule
    {
    }
    public class RvrCEffectModuleMetaInstance : RvrClientEffectModuleInstance
    {
    }
    public class RvrCEffectModuleParameters : RvrClientEffectModule
    {
    }
    public class RvrCEffectModuleParametersInstance : RvrClientEffectModuleInstance
    {
    }
    public class RvrCEffectModuleRadialBlur : RvrClientEffectModule
    {
        public int m_pMaterial;
        public float m_fBlurFalloffExponent;
        public float m_fBlurOpacity;
        public float m_fMaxCullDistance;
        public float m_fDistanceFalloffExponent;
        public bool m_bRenderAsVelocity;
    }
    public class RvrCEffectModuleRadialBlurInstance : RvrClientEffectModuleInstance
    {
    }
    public class RvrCEffectModuleSkelMesh : RvrClientEffectModule
    {
        public int[] m_lstMaterials;
        public NameReference m_nmAnimSeq;
        public int m_pSkeletalMesh;
        public int m_pAnimSet;
        public bool m_bParentToPrimary;
        public bool m_bInstantiateMaterials;
    }
    public class RvrCEffectModuleSkelMeshInstance : RvrClientEffectModuleInstance
    {
        public int m_pSkelMesh;
    }
    public class RvrCEffectModuleSound : RvrClientEffectModule
    {
        public int m_pStartEvent;
        public int m_pStopEvent;
    }
    public class RvrCEffectModuleSoundInstance : RvrClientEffectModuleInstance
    {
    }
    public class RvrCEffectModuleSpawnActor : RvrClientEffectModule
    {
        public RawDistributionFloat m_SpawnRate;
        public RawDistributionFloat m_Lifetime;
        public RawDistributionVector m_Offset;
        public RawDistributionVector m_Rotation;
        public RawDistributionFloat m_CopyDelay;
        public int[] m_lstMaterials;
        public int m_pActorClass;
        public NameReference m_nmEffectsMaterial;
        public NameReference m_nmAnimSeq;
        public int m_nNumActors;
        public int m_pSkeletalMesh;
        public int m_pAnimSet;
        public bool m_bCopyPosition;
        public bool m_bCopyRotation;
        public bool m_bPositionSmoothing;
        public bool m_bCopyAnimation;
        public bool m_bCopySkeletalMesh;
        public bool m_bCopyMaterialParams;
        public bool m_bCopyAttachments;
        public bool m_bCopyAttachmentAnim;
        public bool m_bDontMove;
        public bool m_bHideFirstFrame;
        public bool m_bSendTimeParam;
        public bool m_bInstantiateOtherMaterials;
    }
    public class RvrCEffectModuleSpawnActorInstance : RvrClientEffectModuleInstance
    {
        public RvrClientEffectSpawnedActor[] m_lstSpawns;
        public RvrClientEffectSavedState[] m_lstSavedStates;
        public int[] m_lstBoneMap;
        public int m_nSavedStateHead;
        public int m_nSavedStates;
        public int m_nRemainingSpawns;
        public float m_fSpawnPotential;
    }
    public class RvrClientEffectComponent : ActorComponent
    {
        public RvrClientEffectParameter[] m_lstParameters;
        public int __OnEffectFinished__Delegate;
        public RvrClientEffectTarget m_oTarget;
        public int m_pClientEffect;
    }
    public class RvrClientEffectActor : Actor
    {
        public int m_pCEffectComponent;
    }
    public class RvrPhysicalMaterialProperty : PhysicalMaterialPropertyBase
    {
        public EClientEffectMaterial m_eImpactClientEffect;
    }
    public class RvrClientEffectByImpactMaterial : RvrClientEffectInterface
    {
        public CEImpactByMaterial[] m_lstImpacts;
        public int DefaultEffect;
    }
    public class RvrClientEffectInstanceConstant : RvrClientEffectInterface
    {
        public RvrClientEffectParameter[] m_lstParameters;
        public int m_pClientEffect;
    }
    public class RvrClientEffectManager : Object
    {
    }
    public class RvrClientEffectMulti : RvrClientEffectInterface
    {
        public int[] m_aEffects;
    }
    public class RvrClientEffectPointLight : PointLightMovable
    {
    }
    public class RvrClientEffectPool : Object
    {
    }
    public class RvrClientEffectSpawnable : RvrClientEffectActor
    {
    }
    public class RvrClientEffectTrigger : Trigger
    {
        public int[] m_lstEffects;
        public int[] m_lstTargetActors;
        public Vector m_vSpawnParameters;
    }
    public class RvrComponentPCNetClientEffects : ActorComponent
    {
    }
    public class RvrSeqAct_ActivateClientEffect : SequenceAction
    {
        public bool bAllowCooldown;
    }
    public class RvrSeqAct_SpawnClientEffect : SequenceAction
    {
        public int[] m_lstEffects;
        public Vector m_vSpawnParameters;
    }
    public class RvrSeqAct_StoppableClientEffect : SequenceAction
    {
        public Vector m_vSpawnParameters;
        public int m_pEffect;
        public bool m_bAllowCooldown;
    }
    public class SFXAccomplishmentManager : Object
    {
        public Accomplishment[] AccomplishmentData;
        public int[] AccomplishmentIsComplete;
        public AccomplishmentProgress[] AccomplishmentProgressData;
        public GrinderAccomplishment[] GrinderAccomplishmentData;
        public AchievementReward[] Rewards;
        public int AccomplishmentStorage;
    }
    public class SFXAccomplishmentStorage : Object
    {
    }
    public class SFXActorFactoryEnemySpawnPoint : ActorFactory
    {
    }
    public class SFXActorFactoryPhysicsAsset : ActorFactoryPhysicsAsset
    {
    }
    public class SFXAI_Critter : SFXAI_Core
    {
        public int CritterCommand;
        public Vector m_vRepulsor;
        public Vector m_vCurrentSteeringDirection;
        public bool m_bUnderAttack;
    }
    public class SFXAI_None : SFXAI_Core
    {
    }
    public class SFXAI_TechDrone : SFXAI_Core
    {
    }
    public class SFXAI_TechDrone_NPC : SFXAI_Core
    {
        public bool bHasHowled;
        public bool bHasFlanked;
        public bool bHasTaunted;
        public bool bHasWarned;
    }
    public class SFXAICommand : GameAICommand
    {
        public int __UsePowerDelegate__Delegate;
        public int __FireWeaponDelegate__Delegate;
        public int __MoveToDelegate__Delegate;
    }
    public class SFXAICmd_AcquireCover : SFXAICommand
    {
    }
    public class SFXAICmd_AcquireCoverNearHoldLoc : SFXAICmd_AcquireCover
    {
    }
    public class SFXAICommand_Base_Combat : SFXAICommand
    {
        public Vector2D InitialTransitionCheckTime;
        public Vector2D TransitionCheckTime;
        public bool bFiringWeapon;
    }
    public class SFXAICmd_Base_HordeApproach : SFXAICommand_Base_Combat
    {
        public bool bCombatStarted;
    }
    public class SFXAICmd_Base_Melee : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Base_MountedGunner : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Berserk : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_CustomAction : SFXAICommand
    {
    }
    public class SFXAICmd_CA_CoverMantleClimbBase : SFXAICmd_CustomAction
    {
    }
    public class SFXAICmd_CA_DamageReaction : SFXAICmd_CustomAction
    {
    }
    public class SFXAICmd_CA_KroganCharge : SFXAICmd_CustomAction
    {
    }
    public class SFXAICmd_Combat_Henchman : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Combat_TechDrone : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Combat_TechDroneNPC : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Combat_Turret : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_CombatActivate : SFXAICmd_CustomAction
    {
    }
    public class SFXAICmd_CoverUserStuck : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Critter : SFXAICommand
    {
    }
    public class SFXAICmd_Disabled : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_EnterCover : SFXAICommand
    {
    }
    public class SFXAICmd_EnterMountedGun : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_ExecuteOrders : SFXAICommand
    {
    }
    public class SFXAICmd_Fallen : SFXAICommand
    {
    }
    public class SFXAICmd_FireWeapon : SFXAICommand
    {
    }
    public class SFXAICmd_FollowActor : SFXAICommand
    {
        public bool bActorReachable;
    }
    public class SFXAICmd_HenchFollowActor : SFXAICmd_FollowActor
    {
    }
    public class SFXAICmd_HenchmanInteraction : SFXAICommand
    {
        public int InteractionPoint;
        public float fidelityTimeout;
        public FallBackMethod CurrentFallback;
    }
    public class SFXAICmd_InteractionAnim : SFXAICmd_CustomAction
    {
    }
    public class SFXAICmd_KillingBlow : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_KismetOrder : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_MoveToGoal : SFXAICommand
    {
    }
    public class SFXAICmd_MoveAway : SFXAICmd_MoveToGoal
    {
    }
    public class SFXAICmd_MoveAwayFromPlayer : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_MoveToCover : SFXAICommand
    {
    }
    public class SFXAICmd_MoveToHoldLocation : SFXAICommand
    {
    }
    public class SFXAICmd_MoveToLocation : SFXAICommand
    {
    }
    public class SFXAICmd_MoveToMeleeRange : SFXAICommand
    {
    }
    public class SFXAICmd_None : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Reaction_Flank : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_ResetHenchman : SFXAICommand
    {
    }
    public class SFXAICmd_Resurrect : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_ReturnToPlaypen : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_SwitchWeapon : SFXAICommand
    {
    }
    public class SFXAICmd_UsePower : SFXAICommand
    {
    }
    public class SFXAICmd_WaitForAnimatedTransition : SFXAICommand
    {
    }
    public class SFXAIPerceptionManager : Actor
    {
        public SFXAIPerceptionNoise[] Noises;
    }
    public class SFXAmbPerfGameData : Object
    {
        public SFXAFGDPropActionData[] m_aPropActions;
        public SFXAPGDPose[] m_aPoses;
        public int[] m_aAnimsets;
        public string m_sWepPropClass;
        public NameReference m_nmPropName;
        public int m_nStartPoseIndex;
        public int m_pPropResource;
        public int m_nPropActionIndex;
        public bool m_bEnterEvent;
        public bool m_bExitEvent;
        public bool m_bUseDynamicAnimsets;
        public bool m_bSuppressDamage;
    }
    public class SFXAnimationMarker : Actor
    {
        public string Text;
        public int ZoneMeshComp;
    }
    public class SFXAnimNodeBlendByMoveTransition : AnimNodeBlendList
    {
        public MoveToIdleTransitionBlend[] MoveToIdleBlends;
        public NameReference MoveSyncGroup;
        public float IdleSpeed;
    }
    public class SFXAnimNodeBlendStrafe : AnimNodeBlendBase
    {
        public NameReference SynchGroupName;
        public float BlendSpeed;
        public float IdleRelativePos;
        public float IdleAngle;
    }
    public class SFXAnimNodeBlendStrafeBySpeed : SFXAnimNodeBlendStrafe
    {
        public float BaseSpeeds;
    }
    public class SFXAnimNotify_Exertion : AnimNotify
    {
        public int ExertionEvent;
    }
    public class SFXAnimNotify_RaceWwiseEvent : AnimNotify_WwiseEvent
    {
    }
    public class SFXAnimSetCookSpec : Object
    {
        public int AnimSet;
    }
    public class SFXSFHandler_AreaMap : SFXGUIMovieLegacyAdapter
    {
        public string[] LocationIcons;
        public bool m_bFromBrowserWheel;
    }
    public class SFXAreaMapData : Object
    {
        public SFXMapAssetData[] MapAssetData;
        public SFXCharacterMapData[] CharacterMapData;
        public SFXMapLocationData[] MapLocationData;
        public int __SortLocationMapData__Delegate;
        public Vector RefPoint1_Image_Px;
        public Vector RefPoint1_Unreal_UU;
        public Vector RefPoint2_Image_Px;
        public Vector RefPoint2_Unreal_UU;
        public Vector UUCoorAtPxOrigin;
        public int OverrideGroupID;
        public float PxPerUU;
        public SFXAreaMapLayout Floor;
    }
    public class SFXPointOfInterest : Actor
    {
    }
    public class SFXModule_SavedUse : SFXSimpleUseModule
    {
        public Guid UseModuleGUID;
    }
    public class SFXArmorUseModule : SFXModule_SavedUse
    {
        public float LastUpdateTime;
        public float UpdateFrequency;
        public bool bStopCustomTicking;
        public EArmorTreasurePiece ArmorPiece;
    }
    public class SFXArmorNode : SFXPointOfInterest
    {
        public int SMC;
        public int LightEnvironment;
    }
    public class SFXArmourPiece : Object
    {
        public NameReference[] HideBones;
        public Vector RelativeBoneLocation;
        public Rotator RelativeBoneRotation;
        public Vector RelativeBoneScale;
        public Rotator Rotation;
        public NameReference AttachSocket;
        public NameReference BoneName;
        public NameReference ArmourName;
        public int Mesh;
        public int DestroyedMesh;
        public int PhysMaterialOverride;
        public int PhysicsAsset;
        public int PS_Destruction;
        public int DestructionSound;
        public float MaxHealth;
        public bool bMeshStartsHidden;
        public bool bStartsDetached;
        public bool bCanBeDamaged;
        public bool bNotifyOnHit;
        public bool bPassThroughDamage;
    }
    public class SFXAsyncAssetLoader : Object
    {
        public Pointer VfTable_FTickableObject;
        public SFXAsyncPackageRequest[] m_aPackageRequests;
        public SFXAsyncLoadGroupCallback[] m_OnGroupLoadedCallbacks;
        public int __OnAsyncGroupLoaded__Delegate;
    }
    public class SFXBlockingVolume_Ledge : BlockingVolume
    {
    }
    public class SFXCustomReachSpec : AdvancedReachSpec
    {
        public int BlockingPawn;
    }
    public class SFXBoostReachSpec : SFXCustomReachSpec
    {
    }
    public class SFXCameraAction_FollowTarget : SFXCameraMode
    {
        public Vector TargetLocation;
        public int UnderneathMode;
        public bool ReenableMovement;
    }
    public class SFXCameraMode_Interpolate : SFXCameraMode
    {
        public InterpCurveFloat Curve;
        public Vector AimPoint;
        public Rotator RotationOffset;
        public Vector LocationOffset;
        public float TotalTime;
        public float CurrentTime;
        public int From;
        public int To;
        public float DefaultTime;
        public float AimPointDistance;
        public float MinAimPointPreservationDistance;
        public bool bComplete;
        public EBioInterpolationMethod InterpMethod;
    }
    public class SFXCameraAction_QuickTurn : SFXCameraMode_Interpolate
    {
        public int CurrentOffsetApplied;
    }
    public class SFXCameraMode_Combat : SFXCameraMode
    {
    }
    public class SFXCameraMode_AdeptPunch : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_AIDebug : SFXCameraMode
    {
        public Vector[] HookOffsetList;
        public int CurrentOffsetIdx;
        public int NewOffsetIdx;
        public float BlendTimeRemaining;
        public float TotalBlendTime;
    }
    public class SFXCameraMode_Atlas : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_CombatStorm : SFXCameraMode_Combat
    {
        public float StickFactor;
        public float FullTurnRecenter;
    }
    public class SFXCameraMode_Cover : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_CoverMeleeLeft : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_CoverMeleeRight : SFXCameraMode_CoverMeleeLeft
    {
    }
    public class SFXCameraMode_CoverStorm : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_CoverStormHigh : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_CoverSwatTurnHigh : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_CoverSwatTurnLow : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_CoverSyncMelee : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_CoverSyncMeleeLeft : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_CustomAction : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_EnterCover : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_Explore : SFXCameraMode
    {
    }
    public class SFXCameraMode_ExploreStorm : SFXCameraMode_Explore
    {
        public float StickFactor;
        public float FullTurnRecenter;
    }
    public class SFXCameraMode_ForwardRoll : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_HipAimCover : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_HitReaction : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_IllusiveManConflict : SFXCameraMode
    {
        public ScreenShakeStruct Shake;
        public int YawRange;
        public int YawCenter;
        public float Debug_Speed;
        public float AngleMin;
        public float AngleMax;
        public float MaxSpeed;
        public float AccumulatedYaw;
        public float AccumulatedPitch;
        public float Force;
        public float SmoothedSpeed;
        public float Smoothing;
    }
    public class SFXCameraMode_JumpStart : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_KroganMelee : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_LadderDown : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_LadderUp : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_LockOnPawn : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_Melee : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_TightAim : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_MountedGunTightAim : SFXCameraMode_TightAim
    {
    }
    public class SFXCameraMode_PistolTightAim : SFXCameraMode_TightAim
    {
    }
    public class SFXCameraMode_ReplicationDebug : SFXCameraMode
    {
    }
    public class SFXCameraMode_Roll : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_SniperAim : SFXCameraMode_TightAim
    {
    }
    public class SFXCameraMode_Spectator : SFXCameraMode
    {
    }
    public class SFXCameraMode_SplitScreenCombat : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_TightAimCover : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_Vehicle : SFXCameraMode_Combat
    {
    }
    public class SFXCameraModifier_ScreenShake : CameraModifier
    {
        public ScreenShakeStruct[] Shakes;
        public ScreenShakeStruct TestShake;
    }
    public class SFXCameraNativeBase : Camera
    {
        public bool m_bIgnoreSlowMo;
        public bool m_bCameraSwitchEnabled;
        public bool bUseCameraRotation;
    }
    public class SFXCameraTransition_ZoomSnap : SFXCameraMode_Interpolate
    {
        public Vector ZoomSnapTargetLocation;
        public Rotator StartRotation;
        public Vector StartLocation;
    }
    public class SFXCameraSetup : Object
    {
        public InterpCurveFloat ZoomSnapCurve;
        public float SprintTransitionTime;
        public float SprintFastTransitionTime;
        public float DefaultAimTransitionTime;
        public float DefaultAimTransitionExit;
        public float DefaultCombatTransitionTime;
        public float CoverEnter;
        public float LeanCoverTransitionTime;
        public float CoverTransitionTime;
        public float CoverSlowTransitionTime;
        public float SniperZoomTransitionTime;
        public float ZoomSnapTransitionTime;
        public float PeekTransitionTime;
        public float StormEntranceTime;
        public float VehicleTransitionTime;
        public float fCustomCameraTransitionIn;
        public float fCustomCameraTransitionOut;
        public int CombatCam;
        public int RollCam;
        public int CombatTightAim;
        public int ExploreCam;
        public int CombatStormCam;
        public int ExploreStormCam;
        public int SSCombatCam;
        public int JumpCam;
        public int EnterCoverCam;
        public int MeleeCam;
        public int LadderUp;
        public int LadderDown;
        public int HitReact;
        public int ZoomSnapTransition;
        public int DefaultCrouch;
        public int DefaultStand;
        public int PeekLeftCrouch;
        public int PeekLeftStand;
        public int PeekRightCrouch;
        public int PeekRightStand;
        public int DefaultAimback;
        public int AimbackTightAim;
        public int BlindLeftCrouch;
        public int BlindLeftStand;
        public int BlindRightCrouch;
        public int BlindRightStand;
        public int BlindUp;
        public int PopUp;
        public int LeanLeftCrouch;
        public int LeanLeftStand;
        public int LeanRightCrouch;
        public int LeanRightStand;
        public int PowerCoverPopup;
        public int PowerCoverMidLeanLeft;
        public int PowerCoverMidLeanRight;
        public int PowerCoverStdLeanLeft;
        public int PowerCoverStdLeanRight;
        public bool bCustomCameraMode;
    }
    public class SFXCameraShakeBase : Object
    {
        public ScreenShakeStruct TheShake;
    }
    public class SFXCameraTransition_Animated : SFXCameraMode_Interpolate
    {
        public int Anim;
        public float DefaultBlendInTime;
        public float DefaultBlendOutTime;
        public bool bAnimationBegun;
        public bool bScalePlayRate;
    }
    public class SFXCameraTransition_FaceTarget : SFXCameraMode_Interpolate
    {
        public Vector TargetLocation;
        public Rotator StartRotation;
        public Vector StartLocation;
    }
    public class SFXCameraTransition_GalaxyMap : SFXCameraMode_Interpolate
    {
    }
    public class SFXCameraTransition_VanguardSlam : SFXCameraTransition_Animated
    {
        public InterpCurveFloat FOVCurve;
        public InterpCurveFloat MovementCurve;
        public int TargetActor;
        public float FirstPhaseLength;
    }
    public class SFXCharacterClass_NativeBase : Object
    {
        public int[] CustomActionClasses;
        public int[] PowerCustomActionClasses;
    }
    public class SFXCharacterClass : SFXCharacterClass_NativeBase
    {
        public ScaledFloat WeaponEncumbranceModifiers;
        public string className;
        public NameReference[] MappedPowers;
        public PowerUnlockRequirement[] PowerUnlockRequirements;
        public int[] SquadScreenPowerOrder;
        public PowerStartingRank[] StartingPowerRanks;
        public PowerAutoLevelUp[] AutoLevelUpInfo;
        public int Loadout;
        public float BioticStrength;
        public float TechStrength;
        public float CombatStrength;
        public int srClassName;
        public int srClassDesc;
        public int srClassPrimaryDesc;
        public int srClassSecondaryDesc;
        public Color BloodColor;
        public int RichPresenceContextStringIndex;
        public float StartingEncumbranceCapacity;
        public float EncumbranceMinCooldown;
        public float EncumbranceMaxCooldown;
        public int MaxWeapons;
        public ECharacterClass ClassType;
    }
    public class SFXClimbWallReachSpec : SFXCustomReachSpec
    {
    }
    public class SFXCluster : SFXGalaxyMapObject
    {
        public int[] Systems;
        public int[] RelayConnections;
        public LinearColor StarColor;
        public LinearColor StarColor2;
        public int ClusterTexture;
        public float NebularDensity;
        public float CloudTile;
        public float SphereIntensity;
        public float SphereSize;
        public bool ExploredCluster;
    }
    public class SFXCombatZone : Volume
    {
        public Guid CombatZoneGuid;
    }
    public class SFXCompositeSkeletalMesh : SkeletalMesh
    {
        public string[] SourceMeshNames;
        public BoneOverrideInfo[] OverrideInfo;
    }
    public class SFXConsole : Console
    {
        public bool bShift;
    }
    public class SFXCovGoal_AvoidHazard : CoverGoalConstraint
    {
        public float MaxWeight;
    }
    public class SFXCovGoal_AwayFromFriendlies : CoverGoalConstraint
    {
        public float AvoidDistance;
        public float MaxWeight;
    }
    public class SFXCovGoal_CanFireAtPrimary : CoverGoalConstraint
    {
        public CoverInfo TargetCoverInfo;
        public int PawnTarget;
        public int FireTarget;
        public float MaxWeight;
    }
    public class SFXCovGoal_CanFireAtSecondaries : CoverGoalConstraint
    {
        public SecondaryTargetData[] Secondaries;
        public float MaxWeight;
    }
    public class SFXCovGoal_CoverFromPrimary : CoverGoalConstraint
    {
        public Vector TargetLoc;
        public float FlankDot;
        public float MaxWeight;
    }
    public class SFXCovGoal_CoverFromSecondaries : CoverGoalConstraint
    {
        public Vector[] SecondaryLocs;
        public float FlankDot;
        public float MaxWeight;
    }
    public class SFXCovGoal_FrontArc : CoverGoalConstraint
    {
        public float ForwardDot;
        public float MaxWeight;
    }
    public class SFXCovGoal_NoFriendlyLOF : CoverGoalConstraint
    {
        public float LOFDistance;
        public float MaxWeight;
    }
    public class SFXCustomAction_ProceduralMoveBase : BioCustomAction
    {
        public BodyStance BS_Start;
        public BodyStance BS_Loop;
        public BodyStance BS_End;
        public Vector Destination;
        public float fEndAnimDist;
        public float fStartBlendInTime;
        public float fStartBlendOutTime;
        public float fLoopBlendInTime;
        public float fLoopBlendOutTime;
        public float fEndBlendInTime;
        public float fEndBlendOutTime;
        public float fStartAnimPlayRate;
        public float fEndAnimPlayRate;
        public float fLoopTimeout;
        public bool bAlignPawnBeforeMove;
        public bool bPlayedEndAnim;
        public bool bDelayReplication;
        public EMoveStage MoveStage;
        public AlphaBlendType StartBlendType;
        public AlphaBlendType LoopBlendType;
        public AlphaBlendType EndBlendType;
        public ERootBoneAxis StartRootBoneX;
        public ERootBoneAxis StartRootBoneY;
        public ERootBoneAxis StartRootBoneZ;
        public ERootBoneAxis EndRootBoneX;
        public ERootBoneAxis EndRootBoneY;
        public ERootBoneAxis EndRootBoneZ;
        public ERootMotionMode StartRMM;
        public ERootMotionMode EndRMM;
        public ERootRotationOption StartRootRotationPitch;
        public ERootRotationOption StartRootRotationYaw;
        public ERootRotationOption StartRootRotationRoll;
        public ERootRotationOption EndRootRotationPitch;
        public ERootRotationOption EndRootRotationYaw;
        public ERootRotationOption EndRootRotationRoll;
        public ERootMotionRotationMode StartRMRM;
        public ERootMotionRotationMode EndRMRM;
    }
    public class SFXCustomAction_ReachSpecMove : SFXCustomAction_ProceduralMoveBase
    {
        public int BlockingStartCylinder;
        public int BlockingEndCylinder;
    }
    public class SFXCustomAction_AirRecoverBase : SFXCustomAction_ReachSpecMove
    {
        public float FlightAccel;
    }
    public class SFXCustomAction_AnimatedRagdoll : BioCustomAction
    {
        public BodyStance BS_Start;
        public BodyStance BS_Loop;
        public int AnimInfo;
        public float fLoopAnimPlayRate;
        public ERootMotionMode RootMotionMode;
    }
    public class SFXCustomAction_SyncPawnInstigator_Base : BioCustomAction
    {
        public Vector MarkerOffset;
        public NameReference SyncActionName;
        public float InteractionStartTimeOut;
        public int SyncPartner;
        public int PartnerCustomAction;
        public float MaxPartnerDistance;
        public float SyncCone;
        public float RotationTime;
        public bool bFinishedCustomAction;
        public bool bMoveSyncPawn;
        public bool bHideTargetWeapon;
        public bool bAffectsFriendlies;
        public bool bLockTargetRotation;
        public bool bDisablePartnerCollisionOnMove;
        public bool bIgnoreCameraHiding;
    }
    public class SFXCustomAction_ClassMelee : SFXCustomAction_SyncPawnInstigator_Base
    {
        public BodyStance BS_Attacker;
        public BodyStance BS_Victim;
        public int DamageType;
        public int PowerClass;
        public int AnimInfo;
        public float SyncAttackTimer;
        public float AnimPlayRate;
        public float AttackerBlendInTime;
        public float AttackerBlendOut;
        public float VictimPlayRate;
        public float VictimBlendInTime;
        public float DamageAmount;
        public int Power;
        public ERootMotionMode eVictimRootMotionMode;
    }
    public class SFXTimelineData : Object
    {
        public TimelineEffect[] Timeline;
        public int __AOEEvalFunc__Delegate;
        public int __InputHandler__Delegate;
        public float Lifetime;
    }
    public class SFXCustomAction_BackTakeDown : SFXCustomAction_ClassMelee
    {
    }
    public class SFXCustomAction_BoostDownBase : SFXCustomAction_ReachSpecMove
    {
    }
    public class SFXCustomAction_DamageReaction : BioCustomAction
    {
        public BodyStance BS_Reaction;
        public BodyStance BS_ReactionExplore;
        public float fAnimPlayRate;
        public float fAnimBlendInTime;
        public float fAnimBlendOutTime;
        public float fAnimStartTime;
        public float fReactionDuration;
        public float RotationTime;
        public float ImpactScale;
        public int PS_Impact;
        public bool bAnimLooping;
        public bool bAllowAnimInterrupt;
        public bool bRagdollOnFinish;
        public bool bRotateOnHit;
        public bool bDeathReaction;
        public ERootMotionMode ERootMotionMode;
    }
    public class SFXCustomAction_BovineFortitude : SFXCustomAction_DamageReaction
    {
        public float HealDuration;
        public int Moo;
    }
    public class SFXCustomAction_ClimbDownBase : SFXCustomAction_ReachSpecMove
    {
        public float fClimbSpeed;
    }
    public class SFXCustomAction_ClimbUpBase : SFXCustomAction_ReachSpecMove
    {
        public float fGroundOffset;
        public float fClimbSpeed;
        public float fMaxClimbSpeed;
        public float fMaxAcceleration;
        public float fStopSpeed;
    }
    public class SFXCustomAction_Cover90TurnBase : BioCustomAction
    {
        public BodyStance BS_Anim;
        public float fAnimPlayRate;
        public float fAnimBlendInTime;
        public float fAnimBlendOutTime;
        public float fAnimStartTime;
        public float CameraTransitionTime;
        public ERootMotionMode ERootMotionMode;
        public ERootMotionRotationMode ERootMotionRotationMode;
        public ERootBoneAxis RootBoneX;
        public ERootBoneAxis RootBoneY;
        public ERootBoneAxis RootBoneZ;
        public AlphaBlendType StartBlendType;
    }
    public class SFXCustomAction_Cover90TurnLeft : SFXCustomAction_Cover90TurnBase
    {
    }
    public class SFXCustomAction_Cover90TurnLeftStanding : SFXCustomAction_Cover90TurnLeft
    {
    }
    public class SFXCustomAction_Cover90TurnRight : SFXCustomAction_Cover90TurnBase
    {
    }
    public class SFXCustomAction_Cover90TurnRightStanding : SFXCustomAction_Cover90TurnRight
    {
    }
    public class SFXCustomAction_SingleAnim : BioCustomAction
    {
        public BodyStance BS_Anim;
        public float fAnimPlayRate;
        public float fAnimBlendInTime;
        public float fAnimBlendOutTime;
        public float fAnimStartTime;
        public float fAnimDuration;
        public bool bAllowAnimInterrupt;
        public bool bResetPhysics;
        public ERootMotionMode ERootMotionMode;
        public ERootMotionRotationMode ERootMotionRotationMode;
        public ERootBoneAxis RootBoneX;
        public ERootBoneAxis RootBoneY;
        public ERootBoneAxis RootBoneZ;
        public AlphaBlendType StartBlendType;
    }
    public class SFXCustomAction_CoverSlipBase : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_DrawWeapon : BioCustomAction
    {
        public BodyStance BS_Draw;
        public float fAnimBlendInTime;
        public float fAnimBlendOutTime;
        public float fAnimPlaybackRate;
        public AlphaBlendType BlendType;
    }
    public class SFXCustomAction_EnterMountedGun : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_ExitMountedGun : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_ExplosionBack : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_ExplosionForward : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_ExplosionLeft : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_ExplosionRight : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_Frozen : BioCustomAction
    {
        public bool bWelded;
    }
    public class SFXCustomAction_HackDoor : SFXCustomAction_SingleAnim
    {
        public int CancelSound;
    }
    public class SFXCustomAction_HeavyStdCoverMeleeRight : SFXCustomAction_ClassMelee
    {
    }
    public class SFXCustomAction_HolsterWeapon : BioCustomAction
    {
        public BodyStance BS_Holster;
        public float fAnimBlendInTime;
        public float fAnimBlendOutTime;
        public float fAnimPlaybackRate;
        public AlphaBlendType BlendType;
    }
    public class SFXCustomAction_InteractionPointAnim : BioCustomAction
    {
        public float UnawareVisionCone;
        public float UnawareAlertness;
        public bool bUnawareAI;
    }
    public class SFXCustomAction_LadderClimbDownBase : SFXCustomAction_ReachSpecMove
    {
        public float fClimbDownSpeed;
    }
    public class SFXCustomAction_LeapBase : SFXCustomAction_ReachSpecMove
    {
        public InterpCurveFloat LeapCurve;
        public float LeapSpeed;
    }
    public class SFXCustomAction_LookAtLoop : BioCustomAction
    {
        public BodyStance BS_StartAnim;
        public BodyStance BS_LoopAnim;
        public BodyStance BS_EndAnim;
        public float PlayRate;
        public float BlendInTime;
        public float BlendOutTime;
        public float StartTime;
        public float LoopDuration;
        public ERootMotionMode RootMotionMode;
    }
    public class SFXCustomAction_Loop : BioCustomAction
    {
        public BodyStance BS_Start;
        public BodyStance BS_Loop;
        public BodyStance BS_End;
        public float PlayRate;
        public float BlendInTime;
        public float BlendOutTime;
        public float StartTime;
        public float LoopDuration;
        public ERootMotionMode RootMotionMode;
    }
    public class SFXCustomAction_LoopingInteraction : SFXCustomAction_InteractionPointAnim
    {
        public BodyStance BS_InteractionStart;
        public BodyStance BS_InteractionLoop;
        public BodyStance BS_InteractionEnd;
        public float fStartBlendInTime;
        public float fStartBlendOutTime;
        public float fLoopBlendInTime;
        public float fLoopBlendOutTime;
        public float fEndBlendInTime;
        public float fEndBlendOutTime;
        public bool bTriggeredEnd;
        public EInteractionAnimStage InteractionStage;
    }
    public class SFXCustomAction_MantleOverCoverBase : SFXCustomAction_ProceduralMoveBase
    {
        public MantleInfo MyMantleInfo;
        public int PlaceholderCylinder;
        public int PlaceholderCylinder2;
    }
    public class SFXCustomAction_MountedGunReload : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_MoveAlongCover : BioCustomAction
    {
    }
    public class SFXCustomAction_OmniWave : SFXCustomAction_SingleAnim
    {
        public Guid OmniToolGuid;
        public int CE_OmniTool;
    }
    public class SFXCustomAction_PlayerEvadeBase : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_ProceduralSync : SFXCustomAction_SingleAnim
    {
        public int SyncPartner;
        public float MaxPartnerDistance;
        public float SyncCone;
        public float RotationTime;
        public float DestinationOffset;
        public bool bStopOnImpact;
        public bool bHideTargetWeapon;
        public bool bAffectsFriendlies;
        public bool bTryForceLocalSimulation;
    }
    public class SFXCustomAction_PlayerHeavyMeleeBase : SFXCustomAction_ProceduralSync
    {
        public int DamageType;
        public AreaEffectParameters MeleeImpactParameters;
        public int AnimInfo;
        public int Power;
        public int OmniWeaponPlotID;
    }
    public class SFXCustomAction_PlayerMeleeBase : SFXCustomAction_ProceduralSync
    {
        public int DamageType;
        public ScreenShakeStruct ScreenShake;
        public AreaEffectParameters MeleeImpactParameters;
        public int Power;
        public int ForceFeedback;
        public int ImpactActorEffect1;
        public int ImpactActorEffect2;
        public int ImpactSound;
        public int ImpactSoundPlayer;
        public int RBC_BlurInstance;
        public float BlurScale;
        public float BlurFalloffExponent;
        public float BlurOpacity;
        public float BlurDuration;
        public float SyncMoveSpeed;
        public float NonSyncMoveSpeed;
        public bool bPlayMeleedVoc;
        public bool ApplyBlurEffect;
    }
    public class SFXCustomAction_PlayerShieldStandardImpact : SFXCustomAction_SingleAnim
    {
        public BodyStance BS_Anim1;
    }
    public class SFXCustomAction_PrecisionMove : BioCustomAction
    {
        public Vector m_vDestinationLoc;
        public Rotator m_rDestinationRot;
        public float m_fRotationTime;
    }
    public class SFXCustomAction_Ragdoll : BioCustomAction
    {
        public bool bVelocityChange;
    }
    public class SFXCustomAction_ReloadBase : BioCustomAction
    {
    }
    public class SFXCustomAction_ShieldFace : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_SingleAnimInteraction : SFXCustomAction_InteractionPointAnim
    {
        public BodyStance BS_InteractionAnim;
        public float fBlendInTime;
        public float fBlendOutTime;
        public bool bPauseAnimOnStart;
    }
    public class SFXCustomAction_SwatTurn : SFXCustomAction_ProceduralMoveBase
    {
        public BodyStance BS_Start_Mid;
        public BodyStance BS_Loop_Mid;
        public BodyStance BS_End_Mid;
        public BodyStance BS_ShortStart;
        public int HighSwatTurnCamera;
        public int LowSwatTurnCamera;
        public float fEndBlendInTimeHigh;
        public float fEndBlendOutTimeHigh;
        public float fShortSwatThreshold;
        public float fHighAnimDist;
        public float fLowAnimDist;
        public bool bRightSwatTurn;
    }
    public class SFXCustomAction_SwatTurn_Left : SFXCustomAction_SwatTurn
    {
    }
    public class SFXCustomAction_SwatTurn_Right : SFXCustomAction_SwatTurn
    {
    }
    public class SFXCustomAction_SyncBase : SFXCustomAction_SyncPawnInstigator_Base
    {
        public BodyStance BS_Instigator;
        public BodyStance BS_Target;
        public float InstigatorPlayRate;
        public float InstigatorBlendInTime;
        public float InstigatorBlendOutTime;
        public float TargetAnimDelay;
        public float TargetPlayRate;
        public float TargetBlendInTime;
        public float TargetBlendOutTime;
        public int TargetAnimInfo;
    }
    public class SFXCustomAction_SyncBase_Loop : SFXCustomAction_SyncPawnInstigator_Base
    {
        public BodyStance BS_InstigatorStart;
        public BodyStance BS_InstigatorLoop;
        public BodyStance BS_InstigatorEnd;
        public BodyStance BS_VictimStart;
        public BodyStance BS_VictimLoop;
        public BodyStance BS_VictimEnd;
        public float LoopDuration;
        public float InstigatorPlayRate;
        public float InstigatorBlendInTime;
        public float InstigatorBlendOutTime;
        public float VictimAnimDelay;
        public float VictimPlayRate;
        public float VictimBlendInTime;
        public float VictimBlendOutTime;
        public int VictimAnimSet;
    }
    public class SFXCustomAction_SyncMultiPawnInstigator_Base : BioCustomAction
    {
        public int[] SyncPartners;
        public Vector MarkerOffset;
        public float InteractionStartTimeOut;
        public int PartnerCustomAction;
        public float MaxPartnerDistance;
        public float SyncCone;
        public float RotationTime;
        public bool bMoveSyncPawn;
        public bool bHideTargetWeapon;
        public bool bAffectsFriendlies;
    }
    public class SFXCustomAction_SyncMultiBase : SFXCustomAction_SyncMultiPawnInstigator_Base
    {
        public BodyStance BS_Instigator;
        public float InstigatorPlayRate;
        public float InstigatorBlendInTime;
        public float InstigatorBlendOutTime;
    }
    public class SFXCustomAction_SyncPawnPartner_Base : BioCustomAction
    {
        public float APSBuffer;
        public int Instigator;
        public int InstigatorCustomAction;
        public float APSThreshold;
        public int APSIdx;
        public int APSTimeline;
        public bool bSendReachedDestinationEvent;
    }
    public class SFXCustomAction_Utilize : SFXCustomAction_DamageReaction
    {
        public BodyStance BS_ReactionAlternative1;
        public BodyStance BS_ReactionAlternative2;
        public BodyStance BS_ReactionExploreAlternative;
        public int CancelSound;
    }
    public class SFXCustomAction_VariableExit : SFXCustomAction_SyncBase_Loop
    {
        public BodyStance BS_InstigatorEnd2;
        public BodyStance BS_VictimEnd2;
        public float InstigatorBlendOutTime2;
        public float VictimBlendOutTime2;
        public int SuccessTimeline;
    }
    public class SFXCustomAction_WeaponPickUp : SFXCustomAction_SingleAnim
    {
        public BodyStance BS_AnimExplore;
    }
    public class SFXCustomizationInstance : Object
    {
    }
    public class SFXCustomizationInstance_Player : SFXCustomizationInstance
    {
        public int CasualID;
        public int FullBodyID;
        public int TorsoID;
        public int ShoulderID;
        public int ArmID;
        public int LegID;
        public int SpecID;
        public int Tint1ID;
        public int Tint2ID;
        public int PatternID;
        public int PatternColorID;
        public int HelmetID;
        public int EmissiveID;
        public bool bUseCasualAppearance;
        public EPlayerAppearanceType CombatAppearance;
    }
    public class SFXDamageType_CheatKill : SFXDamageType
    {
    }
    public class SFXDamageType_Default : SFXDamageType
    {
    }
    public class SFXDamageType_Melee : SFXDamageType_Default
    {
    }
    public class SFXDamageType_CoverMelee : SFXDamageType_Melee
    {
    }
    public class SFXDamageType_CriticalMelee : SFXDamageType_Melee
    {
    }
    public class SFXDamageType_Power : SFXDamageType_Default
    {
        public float PowerReactionChance;
        public EBioCapMode Discipline;
    }
    public class SFXDamageType_HeavyMelee : SFXDamageType_Power
    {
    }
    public class SFXDamageType_PowerPhysics : SFXDamageType
    {
    }
    public class SFXDamageType_IllusiveManConflict : SFXDamageType_PowerPhysics
    {
    }
    public class SFXDamageType_KroganCharge : SFXDamageType_Default
    {
    }
    public class SFXDamageType_Power_Control : SFXDamageType_Power
    {
    }
    public class SFXDamageType_Power_Electrocute : SFXDamageType_Power
    {
    }
    public class SFXDamageType_Power_Fire : SFXDamageType_Power
    {
    }
    public class SFXDamageType_Power_Freeze : SFXDamageType_Power
    {
    }
    public class SFXDamageType_Power_Ragdoll : SFXDamageType_Power
    {
        public EAICustomAction AnimatedPowerRagdollType;
    }
    public class SFXDamageType_SecondMelee : SFXDamageType_Default
    {
    }
    public class SFXDamageType_Stasis : SFXDamageType_Power_Control
    {
    }
    public class SFXDamageType_Suicide : SFXDamageType
    {
    }
    public class SFXDamageType_ThirdMelee : SFXDamageType_Default
    {
    }
    public class SFXDamageType_Weapon : SFXDamageType
    {
    }
    public class SFXDecalActorSpawnable : DecalActorMovable
    {
    }
    public class SFXDifficultyHandler : Object
    {
        public DifficultySettings[] Level1DifficultyData;
        public DifficultySettings[] Level2DifficultyData;
        public DifficultySettings[] Level3DifficultyData;
        public DifficultySettings[] Level4DifficultyData;
        public DifficultySettings[] Level5DifficultyData;
        public int CurrentLevel;
        public int MaxPlayerLevel;
        public float DifficultyScore;
        public float StoppingPowerScalar;
        public float AmmoPct;
        public int GrenadesPerDrop;
        public float DownedDistanceRange;
        public float ShieldRegenPct;
        public float ShieldRegenDelay;
        public float PartialShieldRegenDelay;
        public float CoverDamageReduction;
        public float NoCoverDamageBonus;
        public float ReviveDamageReductionLength;
        public float ReviveDamageReductionAmount;
        public float MaxSwarmers;
        public float PlayerPartyHealthGateDuration;
        public float PlayerPartyShieldGateDuration;
        public bool bNeedsUpdate;
        public EDifficultyOptions CurrentDifficulty;
        public EDifficultyOptions NormalizedDifficulty;
    }
    public class SFXDoor : SkeletalMeshActor
    {
        public int[] m_aDoorMarker;
        public NameReference[] m_aIconSocket;
        public Guid MyGuid;
        public Guid OmniGuid;
        public NameReference m_TransitionOpen;
        public NameReference m_TransitionClose;
        public int m_nIndex;
        public int CE_IconClosed;
        public int CE_IconHackable;
        public int CE_IconPlotLocked;
        public int CE_IconDelayed;
        public int CE_IconDelayedActive;
        public int CE_IconPlotHacking;
        public int m_Wwise_Transition_Open;
        public int m_Wwise_Transition_Close;
        public int m_Wwise_GUI_Success_Opening;
        public int m_Wwise_GUI_Delayed_Opening;
        public int m_Wwise_GUI_Failure_PlotLocked;
        public int m_Wwise_GUI_Failure_HackLocked;
        public int m_Wwise_GUI_Kismet_Locked;
        public int m_Wwise_GUI_Kismet_UnLocked;
        public int m_Wwise_GUI_Kismet_Enabled;
        public int m_Wwise_GUI_Kismet_Disabled;
        public int m_Wwise_GUI_Kismet_Delayed;
        public float HackDuration;
        public int OmniToolTemplate;
        public int LastUser;
        public float HackStartTime;
        public float HackRange;
        public float HackUpdateTime;
        public float HackAnimTime;
        public bool m_bOpenWhenInteractedWhileUnlocked;
        public bool bSaveMe;
        public bool bRevertToDelayed;
        public ESFXDoorState m_CurrentDoorState;
        public ESFXDoorState m_PreviousDoorState;
        public ESFXDoorType m_DoorType;
        public EBioRegionAutoSet Region;
        public EBioPlotAutoSet Plot;
        public EBioAutoSet PlotInt;
        public ETargetTipText m_TargetTipTextClosed;
        public ETargetTipText m_TargetTipTextHackLocked;
        public ETargetTipText m_TargetTipTextPlotLocked;
        public ETargetTipText m_TargetTipTextDelayed;
    }
    public class SFXDoorMarker : NavigationPoint
    {
        public int MyDoor;
        public bool bWaitUntilCompletelyOpened;
        public bool bInitiallyClosed;
        public bool bBlockedWhenClosed;
        public bool bDoorOpen;
    }
    public class SFXDroppedAmmo : DroppedPickup
    {
        public int AmmoMesh;
        public int AmmoPickupSound;
        public float DecayTime;
        public int LightEnvironment;
    }
    public class SFXDroppedPickup : DroppedPickup
    {
        public int WeaponClass;
        public int PickupMesh;
        public int LightEnvironment;
        public float PickupTimer;
        public float PlayerPickupTimer;
        public int PickupSound;
        public bool bTargetable;
        public ETargetTipText EquipWeaponToolTip;
    }
    public class SFXDummyWeaponFireActor : Actor
    {
        public int FireAction;
        public int OriginActor;
        public int TargetActor;
        public int ShotCount;
    }
    public class SFXDuringAsyncWorkTicker : Actor
    {
        public SFXDuringAsyncWorkQueuedImpactPSC[] QueuedImpactPSCs;
        public SFXDuringAsyncWorkQueuedImpactDecal[] QueuedImpactDecals;
        public SFXDuringAsyncWorkQueuedTracer[] QueuedTracers;
        public SFXDuringAsyncWorkQueuedEffect[] QueuedEffects;
        public float PSCCullDistance;
        public float DecalCullDistanceBase;
        public float TracerCullDistance;
        public float LocalPlayerCullDistanceBias;
        public bool bNoQueuedImpactPSCs;
        public bool bNoQueuedImpactDecals;
        public bool bNoQueuedTracers;
        public bool bNoQueuedEffects;
        public bool bUseLocalPawnLocation;
        public bool bNoPSCCull;
        public bool bNoDecalCull;
        public bool bNoTracerCull;
        public bool bNoEffectCull;
    }
    public class SFXDynamicPrefabInstance : PrefabInstance
    {
    }
    public class SFXEmitter : Emitter
    {
        public bool bPooled;
    }
    public class SFXEnemySpawnPoint : NavigationPoint
    {
        public EAICustomAction[] SupportedCustomActions;
        public int[] SupportedReachSpecs;
        public float Weight;
    }
    public class SFXGalaxy : SFXGalaxyMapObject
    {
        public int[] Clusters;
        public float m_fGalaxyRadius;
    }
    public class SFXGalaxyMapObjectAppearanceBase : Object
    {
        public int[] MaterialOverrides;
        public Rotator MeshRotation;
        public Rotator MeshRotationSpeed;
        public float MeshScale;
        public int MeshResource;
        public int SkeletalMeshResource;
        public bool NoAppearance;
    }
    public class SFXGame : GameInfo
    {
        public Map_Mirror DecayedCoverMap;
        public int[] Teams;
        public string MaleActorType;
        public string FemaleActorType;
        public string TreasureClassName;
        public string[] NewGamePlusPlayerVariables;
        public TimeDilationStruct[] TimeDilationCurves;
        public string MAdeptArchName;
        public string MEngineerArchName;
        public string MInfiltratorArchName;
        public string MSentinelArchName;
        public string MSoldierArchName;
        public string MVanguardArchName;
        public string MAdeptNCArchName;
        public string MEngineerNCArchName;
        public string MInfiltratorNCArchName;
        public string MSentinelNCArchName;
        public string MSoldierNCArchName;
        public string MVanguardNCArchName;
        public string MAdeptInjuredArchName;
        public string MEngineerInjuredArchName;
        public string MInfiltratorInjuredArchName;
        public string MSentinelInjuredArchName;
        public string MSoldierInjuredArchName;
        public string MVanguardInjuredArchName;
        public string MCharCreationArchName;
        public string FAdeptArchName;
        public string FEngineerArchName;
        public string FInfiltratorArchName;
        public string FSentinelArchName;
        public string FSoldierArchName;
        public string FVanguardArchName;
        public string FAdeptNCArchName;
        public string FEngineerNCArchName;
        public string FInfiltratorNCArchName;
        public string FSentinelNCArchName;
        public string FSoldierNCArchName;
        public string FVanguardNCArchName;
        public string FAdeptInjuredArchName;
        public string FEngineerInjuredArchName;
        public string FInfiltratorInjuredArchName;
        public string FSentinelInjuredArchName;
        public string FSoldierInjuredArchName;
        public string FVanguardInjuredArchName;
        public string FCharCreationArchName;
        public DecayedCover[] DecayedCoverList;
        public ReputationThreshold[] ReputationThresholds;
        public int[] JoinInProgressDelegates;
        public int __OnJoinInProgress__Delegate;
        public int PlayerSquad;
        public int srGameOverString;
        public float fAutoUnlitDownsizeThreshold;
        public int TREASURE;
        public float TimeDilationOverride;
        public int StartSlowEvent;
        public int StopSlowEvent;
        public float AdjacentDecayMult;
        public int DecayRecoveryPerSecond;
        public float DecayRecoveryIntervalRemaining;
        public float MaxSmokeCount;
        public bool bEnableLowDetailProxySilhouettes;
        public bool bAutoUnlitDownsizeInCombat;
        public bool bDilateSound;
        public bool bPerfProto;
    }
    public class SFXGameChoiceGUIData_HeavyWeapons : SFXGameChoiceGUIData
    {
    }
    public class SFXGameChoiceGUIData_PRCShop : SFXGameChoiceGUIData
    {
    }
    public class SFXGameChoiceGUIData_Research : SFXGameChoiceGUIData
    {
        public int m_srTechTitle;
        public int m_srTechSubTitle;
        public int m_srTechAText;
        public int m_srTechBText;
        public int m_srResearchTitle;
        public int m_srResearchSubTitle;
        public int m_srResearchAText;
        public int m_srResearchBText;
        public int m_srResearchErrorTooExpensive;
        public int m_srResearchErrorCanNotLearn;
    }
    public class SFXGameChoiceGUIData_Weapons : SFXGameChoiceGUIData
    {
    }
    public class SFXGameConfig : Object
    {
        public LevelReward[] LevelRewards;
        public PurchasableItem[] MPPlayerVariableMappings;
        public Vector2D AmmoDropChance;
        public int MaxPlayerExperience;
        public float PawnInRagdollDamageMultiplier;
        public float DroppedWeaponLifespan;
        public float EmptyDroppedWeaponLifespan;
        public int CreditsGlobal;
        public int IridiumGlobal;
        public int PlatinumGlobal;
        public int PalladiumGlobal;
        public int EezoGlobal;
        public int IdGlobal;
        public int CreditsLocal;
        public int EezoLocal;
        public int IridiumLocal;
        public int PalladiumLocal;
        public int PlatinumLocal;
        public int IdLocal;
        public bool bShieldsBlockPowers;
        public bool bAimAssistEnabled;
        public bool bUseConsoleControls;
        public bool DropHeavyWeaponOnHolster;
        public bool bCoverProtectedCone;
        public bool ScoreEnabled;
        public bool bBudgetEnforced;
    }
    public class SFXGameEffect_DamageOverTime : SFXGameEffect
    {
        public int DamageType;
        public float DamageInterval;
    }
    public class SFXGameEffect_DamageTakenBonus : SFXGameEffect
    {
    }
    public class SFXGameEffect_DeathEffect : SFXGameEffect
    {
        public int PlayExclusivelyForDamageType;
        public int CE_DeathEffectTemplate;
        public int DeathSoundEffect;
        public int Priority;
        public bool bCorpseDestroyed;
    }
    public class SFXGameEffect_GlobalCooldownBonus : SFXGameEffect
    {
        public bool bRemoved;
    }
    public class SFXGameEffect_HealOverTime : SFXGameEffect
    {
        public bool bPercentOfMaxHealth;
    }
    public class SFXGameEffect_HealthBonus : SFXGameEffect
    {
        public float PercentHealthBonus;
        public bool bEffectValueIsPercent;
    }
    public class SFXGameEffect_HealthRegenPenalty : SFXGameEffect
    {
    }
    public class SFXGameEffect_IgnorePlayerSquad : SFXGameEffect
    {
    }
    public class SFXGameEffect_PassiveWeaponBonus : SFXGameEffect
    {
    }
    public class SFXGameEffect_PassiveWeaponDamageBonus : SFXGameEffect
    {
    }
    public class SFXGameEffect_PhysicsDamageMultiplier : SFXGameEffect
    {
    }
    public class SFXGameEffect_PhysicsPower : SFXGameEffect
    {
    }
    public class SFXGameEffect_PowerBonus : SFXGameEffect
    {
        public int[] IgnoredPowers;
        public NameReference AffectedParameter;
        public bool bApplyToBiotics;
        public bool bApplyToTech;
        public bool bApplyToCombat;
        public bool bApplyToWeapons;
    }
    public class SFXGameEffect_PowerCombo : SFXGameEffect
    {
        public NameReference[] EffectsRemovedOnCombo;
        public int DetonationScreenShakeClass;
        public int DetonationRumbleClass;
        public int DamageType;
        public int MaxRagdollDmgTypeOverride;
        public AreaEffectParameters DetonationParameters;
        public Guid CrustGuid;
        public Vector2D ComboDamage;
        public Vector2D ComboForce;
        public Vector2D ComboRadius;
        public int SourcePower;
        public int CurrentDetonationPower;
        public int DetonationVFX;
        public int DetonationSound;
        public int TargetCrustVFX;
        public int MaxTargets;
        public float fPowerRatio;
        public int MaximumRagdollTargets;
        public int MaximumRagdollTargetsMP;
        public bool bOnlyOnDeath;
    }
    public class SFXGameEffect_ShieldBonus : SFXGameEffect
    {
        public float PercentShieldBonus;
        public bool bEffectValueIsPercent;
        public bool bRemoveEffectWhenShieldsDown;
    }
    public class SFXGameEffect_TimeDilation : SFXGameEffect
    {
        public InterpCurveFloat SlowDown;
        public float TimeRemainingBeforePause;
        public float OwnerCounterScale;
    }
    public class SFXGameEffect_UniqueArmor_Base : SFXGameEffect
    {
        public UniqueArmorEffects[] Children;
    }
    public class SFXGameEffect_WeldPhysics : SFXGameEffect_DeathEffect
    {
        public int Caster;
        public bool bFreezeSucceeded;
        public EAICustomAction CustomActionType;
    }
    public class SFXGameInterpTrackCustom : SFXGameInterpTrack
    {
    }
    public class SFXGameInterpTrackInstCustom : SFXGameInterpTrackInst
    {
    }
    public class SFXGameInterpTrackInstMovieBink : SFXGameInterpTrackInst
    {
    }
    public class SFXGameInterpTrackInstProcFoley : SFXGameActorInterpTrackInst
    {
    }
    public class SFXGameInterpTrackInstWwiseMicLock : SFXGameInterpTrackInst
    {
    }
    public class SFXGameInterpTrackProcFoley : SFXGameActorInterpTrack
    {
        public BioProcFoleyData[] m_aProcFoleyStartStopKeys;
        public int m_TrackFoleySound;
    }
    public class SFXGameInterpTrackWwiseMicLock : SFXGameInterpTrack
    {
        public BioMicLockData[] m_aMicLockKeys;
        public bool m_bUnlockAtEnd;
    }
    public class SFXGameModeBase : Object
    {
        public KeyBind[] Bindings;
        public KeyBind[] LocalizedBindings;
        public int NumReportSkynetMPCustomEventSent;
        public float RadarMapDisplayTime;
        public bool bBindingsCollected;
        public bool bIsActive;
        public bool bShowHUD;
        public bool bShowSelection;
        public bool bShowExploreSelection;
        public bool bShowDamageIndicators;
        public bool bShowRadar;
        public bool bShowHealth;
        public bool bShowWeapon;
        public bool bAllowRotationUpdate;
        public bool bAllowMovement;
        public bool bStopMovement;
        public bool bAllowCamera;
        public bool bAllowCameraMods;
        public bool bAllowSave;
        public bool bAllowPauseMenu;
        public bool bAllowHints;
        public bool bShowSubtitle;
        public bool bClearPendingFire;
        public bool bHasMouseAuthority;
        public bool bMouseVisible;
        public bool bMergeNotifications;
        public bool bQueueAndSuppressNotifications;
        public bool bShowReticles;
        public bool bPlayVocalizations;
        public bool bEnforce16x9Subtitles;
        public bool bAllowMessageUI;
        public bool bRestrictToPrimaryViewport;
        public bool bNuiSpeechGlobal;
        public bool bNuiSpeechExplore;
        public bool bNuiSpeechCombat;
        public bool bAllowPowerWeaponUI;
        public EGameModePriority2 Priority;
    }
    public class SFXGameModeAIDebug : SFXGameModeBase
    {
        public ViewTargetTransitionParams VTTransParms;
        public Vector2D TopLeft;
        public int TotalWeightLog;
        public int CurrentConstraintIndex;
        public int DebugTarget;
        public Color TitleColor;
        public Color DrawWhite;
        public Color DrawRed;
        public Color DrawOrange;
        public Color DrawGreen;
        public int AICamera;
        public bool bPaused;
        public bool bShowAITarget;
        public bool bShowAIPath;
        public bool bShowDecisionLog;
        public bool bViewingConstraintEvals;
        public bool bLoggingAllAI;
        public bool bUnPauseOnExit;
        public bool bShowLegend;
    }
    public class SFXGameModeAtlas : SFXGameModeBase
    {
        public float AtlasCamTransitionTime;
        public float InputDelayTightAimExit;
        public int AtlasCam;
        public int AtlasTrans;
    }
    public class SFXGameModeCheatMenu : SFXGameModeBase
    {
    }
    public class SFXGameModeCinematic : SFXGameModeBase
    {
    }
    public class SFXGameModeCommand : SFXGameModeBase
    {
        public bool bCameraEnabled;
    }
    public class SFXGameModeConversation : SFXGameModeBase
    {
        public int ConversationCam;
        public int InstantTransition;
    }
    public class SFXGameModeDefault : SFXGameModeBase
    {
        public float InputDelayStormExit;
        public float InputDelayTightAimExit;
        public float CoverCamAlign;
        public int UseSucceeded;
        public int UseFailed;
        public int CameraSetup;
    }
    public class SFXGameModeDreamSequence : SFXGameModeBase
    {
    }
    public class SFXGameModeDying : SFXGameModeBase
    {
        public float ProlongLifeBoost;
        public float ProlongLifeDecay;
        public float StartBoostTime;
        public int DeathCam;
    }
    public class SFXGameModeFlyCam : SFXGameModeBase
    {
        public int FreeCam;
    }
    public class SFXGameModeGalaxy : SFXGameModeBase
    {
        public float DeadZone;
        public int GalaxyCam;
        public int InstantTransition;
    }
    public class SFXGameModeGUI : SFXGameModeBase
    {
        public NameReference[] StackedGuis;
        public float DeathTransitionTime;
        public int DeathCam;
        public int InstantTransition;
    }
    public class SFXGameModeIllusiveManConflict : SFXGameModeBase
    {
        public ScreenShakeStruct PainShake;
        public Vector TargetOffset;
        public int DesignerSeq;
        public int Difficulty;
        public float AccumulatedMovement;
        public int CameraMode;
        public bool bPushing;
    }
    public class SFXGameModeInjuredShepard : SFXGameModeBase
    {
        public float InputDelayTightAimExit;
        public int InjuredCamera;
    }
    public class SFXGameModeLobby : SFXGameModeBase
    {
        public NameReference[] StackedGuis;
    }
    public class SFXGameModeMovie : SFXGameModeBase
    {
        public bool bLoadingMovie;
    }
    public class SFXGameModeMultiLand : SFXGameModeGalaxy
    {
        public Rotator ReticleRotStart;
        public Rotator ReticleRotTopLeftClamp;
        public Rotator ReticleRotBottomRightClamp;
        public float ReticleDegreesPerSecond;
        public float InputAttenuation;
        public float ReticleMoveSpeed;
        public float SelectDistance;
    }
    public class SFXGameModeOrbital : SFXGameModeGalaxy
    {
        public ScreenShakeStruct Shake;
        public ScreenShakeStruct BigShake;
        public Rotator ReticleRotStart;
        public Rotator ReticleRotTopLeftClamp;
        public Rotator ReticleRotBottomRightClamp;
        public float PlanetRotationDegreesPerSecond;
        public float ScanningPlanetRotationDegreesPerSecond;
        public float ReticleDegreesPerSecond;
        public float ScanningReticleDegreesPerSecond;
        public float InputAttenuation;
        public float RumbleScale;
        public float MoveDist;
        public float ProbeControlAxisOffset;
        public float ProbeControlTargetOffset;
        public float ScannerRotateSpeed;
        public float ProbeLaunchTime;
        public float ProbeLaunchTimeMax;
        public float ScanDist;
        public float ScanDirectionPulseLifeTime;
        public float ImpactTimeMax;
        public int ScanFFWaveForm;
        public bool Scanning;
    }
    public class SFXGameModePowerWheel : SFXGameModeBase
    {
        public float DisableMoveTime;
    }
    public class SFXGameModeProto : SFXGameModeBase
    {
    }
    public class SFXGameModeReplicationDebug : SFXGameModeBase
    {
        public int ReplicationDebugCam;
    }
    public class SFXGameModeSpectator : SFXGameModeBase
    {
        public int SpectatorCam;
    }
    public class SFXGameModeVehicle : SFXGameModeBase
    {
        public int EnterTightAimSound;
        public int ExitTightAimSound;
        public int VehicleCam;
        public int TightAimCam;
    }
    public class SFXGameModeWeaponWheel : SFXGameModeBase
    {
        public float DisableMoveTime;
    }
    public class SFXGameViewportClient : GFxGameViewportClient
    {
    }
    public class SFXGAWAssetsHandler : Object
    {
        public GAWGUICategory[] GAWGUICategories;
        public GAWAsset[] AllAssets;
        public GAWAssetSaveInfo[] UnlockedGAWAssets;
        public GAWIntelRewardInfo[] IntelRewards;
        public EndGameOptionSet[] EndGameOptionSets;
        public int[] ShepardLivesStates;
        public EndGameOption[] EndGameOptions;
        public CutscenePlotState[] CutscenePlotStates;
        public int[] AllEndingPlotStates;
        public GAWZoneData[] GAWTheatreData;
        public int[] CachedGAWRatings;
        public int[] CachedGAWWarAssets;
        public WarAssetSummaryWithThreshold[] OverallWarAssetSummaries;
        public int __RequestGAWDataCallback__Delegate;
        public int __UpdatedRankingsCallback__Delegate;
        public int AchievementThreshold;
        public int MinimumStrengthForGUI;
        public int MaxStrengthForGUI;
        public int SaveAndersonScoreBonus;
        public int ShepardLivesThreshold;
        public int SaveAndersonPlotBool;
        public int FinalGAWRatingID;
        public int OverallReadinessRating;
        public int GAWExternalAssetStrengthPerTick_Multiplayer;
        public int GAWExternalAssetStrengthPerTick_IPhone;
        public int GAWExternalAssetStrengthPerTick_Facebook;
        public int GUIDescription_Formatter;
        public int GUIDescription_UpdatedTag;
        public bool bInitialized;
        public bool bEvaluateAchievement;
        public bool bBrainUsed;
    }
    public class SFXGAWReinforcementManagerBase : Object
    {
    }
    public class SFXGestures : Object
    {
        public string GesturesPackageName;
    }
    public class SFXGoal_SuppressionPoint : PathGoalEvaluator
    {
        public Vector TargetFacing;
        public float DesiredDistance;
        public float MinDistance;
        public int BestNode;
        public int BestRating;
        public int MaxNodes;
        public bool bFlank;
    }
    public class SFXGoreActor : SkeletalMeshActor
    {
    }
    public class SFXGRI : GameReplicationInfo
    {
        public int __GenericTimerCallback__Delegate;
        public int DifficultyHandlerClass;
        public int VocManagerClass;
        public int ObjectPool;
        public int PreAsyncWorker;
        public int DuringAsyncWorker;
        public int gameconfig;
        public float StormStamina;
        public float StormRegen;
        public float StormStaminaNonCombat;
        public float StormRegenNonCombat;
        public float HackCrouchCoverOffset;
        public int VocManager;
        public int DifficultyHandler;
        public int WaveCoordinator;
        public float WaveDelay;
        public int m_pClientEffectManager;
        public int m_pClientEffectPool;
        public bool bCanSpawnHenchmen;
        public bool bPlayerCanChangeSquad;
        public bool bPauseForCommand;
        public bool bAllowTimeDilation;
        public bool bAlwaysInCombat;
        public bool bMultiplayer;
        public bool bIsMultiplayerCharacter;
        public bool bCanShowMap;
        public bool bCanShowCodex;
        public bool bCanShowJournal;
        public bool bCanSave;
        public bool EnableDamage;
        public bool bForceOperationWave;
    }
    public class SFXGUI_Accomplishments : SFXGUIMovie
    {
        public int srTitle;
        public int srReturn;
        public int srBrowse;
        public int srTree;
        public bool bFromMainMenu;
        public bool bShowChildDetails;
    }
    public class SFXGUI_Credits : SFXGUIMovie
    {
        public SFXCreditEntry[] Credits;
        public SFXCreditEntry[] DLCCredits;
        public SFXCreditEntry[] EndCredits;
        public int __OnCreditsFinished__Delegate;
        public float FadeInTime;
        public float HoldTime;
        public float FadeOutTime;
        public float BreakSpace;
        public float ColumnPadding;
        public float TotalRunningTime;
        public float ScrollingCreditStartTime;
        public int ConfirmExitMessage;
        public int ExitYes;
        public int ExitNo;
    }
    public class SFXGUI_WeaponReticleBase : GFxValue
    {
        public int m_oMovieResource;
        public float m_fCachedDistance;
        public int m_nCachedAmmo;
        public int m_nCachedZoom;
        public int m_srWeaponDistanceUnit;
        public int m_oWeapon;
        public float m_fWeaponRange;
        public bool m_bIsVisible;
        public bool m_bInShowTransition;
        public bool m_bInHideTransition;
        public bool m_bMonitorDistance;
        public bool m_bMonitorAmmo;
        public bool m_bMonitorZoom;
        public bool m_bMonitorCanHitTarget;
        public bool m_bCachedCanHitTarget;
        public bool m_bScriptUpdate;
        public bool m_bSubscribeToImpacts;
    }
    public class SFXGUI_CrosshairReticle : SFXGUI_WeaponReticleBase
    {
        public float m_aCrosshairRawBuffer;
        public int m_oActualReticle;
        public int m_oCrosshairTop;
        public int m_oCrosshairRight;
        public int m_oCrosshairBottom;
        public int m_oCrosshairLeft;
        public float m_fCacheCrosshairRadius;
        public int m_nCrosshairBufferIndex;
        public float m_fCrosshairAccuracyModifier;
        public bool m_fCacheTargetInSights;
    }
    public class SFXGUI_Elevator : SFXGUIMovie
    {
        public int __OnRequestExitDelegate__Delegate;
        public int __OnRequestDestinationDelegate__Delegate;
        public int ElevatorData;
    }
    public class SFXGUI_GalaxyAtWar : SFXGUIMovie
    {
        public GAWZoneGUIData[] GAWRatings;
        public int __OnFinished__Delegate;
        public int __OnSwitchScreens__Delegate;
        public int GAWAssetHandler;
        public int srReadinessPercent;
        public int srRatingsError;
        public int srOK;
        public int srGaWTutorialMessage;
        public bool m_bGAWRatingsError;
    }
    public class SFXGUI_JournalCodex : SFXGUIMovie
    {
        public JCEntry[] lstJCQuests;
        public JCEntry[] lstJCCodexPrimary;
        public JCEntry[] lstJCCodexSecondary;
        public CodexImageDetails[] lstImages;
        public string sDefaultCodexImage;
        public Pointer m_pJCDisplayList;
        public int lstSortLabels;
        public int lstSortTitles;
        public int m_nCurrentDisplayCategory;
        public int m_nCurrentListEntry;
        public int m_nQuestPrimaryUpdatedCount;
        public int m_nQuestSecondaryUpdatedCount;
        public int m_nCodexPrimaryUpdatedCount;
        public int m_nCodexSecondaryUpdatedCount;
        public int srMarkAllCompleteMessage;
        public int srMarkAllCompleteMessageConfirm;
        public int srMarkAllCompleteMessageCancel;
        public int m_nVoiceOverPage;
        public float m_fTimeUntilVoiceOver;
        public float fVoiceOverDelay;
        public float fVoiceOverCancelFadeOut;
        public int m_nUpStamp;
        public int TitleText;
        public int ExitText;
        public int BackText;
        public int CloseSubListText;
        public int Tab1Text;
        public int Tab2Text;
        public int Tab3Text;
        public int MarkAllViewedText;
        public int ViewText;
    }
    public class SFXGUI_Leaderboard : SFXGUIMovie
    {
        public LeaderboardMapGroup[] LeaderboardGroups;
        public RankBypassNotification[] Notifications;
        public LeaderboardRecord[] CachedRecords;
        public SFXLeaderboardRequestData RequestedData;
        public SFXLeaderboardRequestData CurrentData;
        public int RecordsPerRequest;
        public int RowsInTable;
        public int SeamlessRankToMoveTo;
        public int SeamlessRankToSelect;
    }
    public class SFXGUI_MainMenu_Message : Object
    {
        public Pointer VfTable_FTickableObject;
        public string Message;
        public string Title;
        public int __OnMessageDataLoaded__Delegate;
        public int MovieClip;
        public int Id;
        public int ServerID;
        public int DLC_ID;
        public bool bGFxClassLoaded;
        public bool bTelemetryFired;
        public MMM_Status Status;
        public SFXOnlineConnection_MessageType MessageType;
    }
    public class SFXGUI_MainMenu_Message_GAW : SFXGUI_MainMenu_Message
    {
        public GAWZoneGUIData[] GAWRatings;
        public RatingThresholdMessage[] OverallRatingMessages;
        public string GAWGlobalReadinessColor;
        public int __GAWZoneSort__Delegate;
        public int GAWAssetHandler;
        public int GAWOverallReadinessRating;
        public int GAWMessageTitle;
        public int GAWOverallRating;
        public int GAWZoneStatusFormat;
        public int GAWFormattedReadinessPercent;
    }
    public class SFXGUI_MainMenu_Message_Text : SFXGUI_MainMenu_Message
    {
    }
    public class SFXGUI_MainMenu_Message_Image : SFXGUI_MainMenu_Message_Text
    {
        public string ImagePath;
        public int ImageReference;
    }
    public class SFXGUI_MainMenu_Message_NetworkImage : SFXGUI_MainMenu_Message_Image
    {
    }
    public class SFXGUIMovieKismet : SFXGUIMovie
    {
        public int[] ReferencedMovies;
        public bool KismetMonitored;
        public bool CloseRequested;
        public bool UnloadOnClose;
    }
    public class SFXGUI_MainMenu_RTT : SFXGUIMovieKismet
    {
        public MMListEntry[] ListEntries;
        public MMListSequences[] ListSequences;
        public int __MsgBoxInputCallback__Delegate;
        public NameReference ExitToMainMenuSound;
        public float CheckingDataMessageDelay;
        public float CheckingDataMessageMinimum;
        public int CheckingDLCMessage;
        public int CheckingSaveDataMessage;
        public int NoLoginStart;
        public int ConfirmNoLoginStart;
        public int CancelNoLoginStart;
        public int srExitConfirm;
        public int srYes;
        public int srNo;
        public int srOK;
        public int srCancel;
        public int srConnect;
        public int srNoSpaceForCareer;
        public int srContinueWithoutSaving;
        public int srCancelNewCareer;
        public int srDemoNetworkRequired;
        public int srViewKinectManual;
        public int srViewKinectManual_Ok;
        public int srViewKinectManual_Cancel;
        public byte PendingCommand;
    }
    public class SFXGUI_MainMenu_RTT_RC : SFXGUIMovieKismet
    {
        public string ReplacementTextureSymbol;
    }
    public class SFXGUI_MainMenu_RTT_RC_B : SFXGUIMovieKismet
    {
    }
    public class SFXGUI_Manual : SFXGUIMovie
    {
        public ManualCategory Category1;
        public ManualCategory Category2;
        public ManualCategory Category3;
        public ManualChapter[] Chapters;
        public ManualPage[] Pages;
        public int TitleText;
        public int ExitText;
        public int BackText;
        public int CloseSubListText;
        public int Tab1Text;
        public int Tab2Text;
        public int Tab3Text;
        public int ViewText;
        public int ContinueText;
    }
    public class SFXGUI_Markers : SFXGUIMovie
    {
        public int[] Markers;
        public int ObjectiveText;
        public int ObjectiveTextActor;
        public float TextStayUpDuration;
    }
    public class SFXGUI_MPScoretags : SFXGUIMovie
    {
        public SFXGUIScoreTag[] QueuedTags;
        public int ActiveScoreTagAnim;
        public float LocationX;
        public float LocationY;
        public float Lifetime;
        public float ScreenLocationX;
        public float ScreenLocationY;
    }
    public class SFXGUI_OptionsObject : Object
    {
        public byte OptionId;
    }
    public class SFXGUI_Option_LanguageBase : SFXGUI_OptionsObject
    {
        public LanguageOptionInfo[] Languages;
        public int nCurrentValue;
        public bool bInitialized;
        public ESFXLanguageContentType LanguageType;
    }
    public class SFXGUI_Option_SpeechLanguage : SFXGUI_Option_LanguageBase
    {
        public string CurrentTextLanguage;
    }
    public class SFXGUI_Option_TextLanguage : SFXGUI_Option_LanguageBase
    {
    }
    public class SFXGUI_Option_VOLanguage : SFXGUI_Option_LanguageBase
    {
    }
    public class SFXGUI_SplashScreen : BioSFHandler_Splash
    {
        public float fAttractModeTimeout;
        public float fLegalTimeout;
        public float fAttractModeDelay;
        public float fShowLegalTime;
        public int srNotificationAdvanceOrigin;
        public int srNotifificationOriginDRMFail;
        public int srNotificationOptionQuitGame;
        public int srConnectingToOrigin;
        public int srNoLoginStart;
        public int srConfirmNoLoginStart;
        public int srCancelNoLoginStart;
        public int srStartText;
        public int srLegalText;
        public int srDemo;
        public int connectingMessageBox;
        public bool bSuppressAttractMode;
        public bool bPressedStart;
        public bool bWaitingForOrigin;
    }
    public class SFXGUI_PCSplashScreen : SFXGUI_SplashScreen
    {
    }
    public class SFXGUI_SquadRecord : SFXGUIMovieLegacyAdapter
    {
        public float[] m_ParagonRenegadeBarValues;
        public int[] Tutorials;
        public int __OnNewTutorialCallback__Delegate;
        public int __OnDoneTutorialsCallback__Delegate;
        public int __OnCloseCallback__Delegate;
        public int m_RespecMemberIndex;
        public int m_srXPFormat;
        public int m_srSpendTalentPointsMessageXBox;
        public int m_srParagonRenegadeMessageXBox;
        public int m_srSpendTalentPointsMessagePC;
        public int m_srParagonRenegadeMessagePC;
        public int m_srSpendTalentPointsMessagePS3;
        public int m_srParagonRenegadeMessagePS3;
        public int m_srOk;
        public int m_srRespecMessage;
        public int m_srRespecCancel;
        public int m_srShepardLevelClassFormat;
        public int m_srTalentDescriptionFormat;
        public int m_srRequiredLevelFormat;
        public int m_srRankDescriptionFormat;
        public int m_srFaceCodeFormat;
        public int m_srCostTokenFormat;
        public int m_srCantBuyLocked;
        public int m_srCantBuyCost;
        public int m_srCantBuyBought;
        public int m_srCantBuyRank;
        public int m_srExitText;
        public int m_srCostText;
        public int m_srScarHint;
        public int m_AText;
        public int m_BText;
        public int m_XText;
        public int m_YText;
    }
    public class SFXGUI_PCSquadRecord : SFXGUI_SquadRecord
    {
    }
    public class SFXGUIData_Store : SFXGameChoiceGUIData
    {
        public StoreItemData IntelSummary;
        public string StoreHeaderImageRef;
        public string DefaultImage;
        public int srStoreDescription;
        public int srOutOfStockDescription;
        public int srOutOfStock;
        public int ConfirmationMessageATextOverride;
        public NameReference StoreName;
        public int DiscoveryID;
        public int DiscountUnlockID;
        public float MarkupPercent;
        public float DiscountPercent;
        public EItemType ItemType;
        public bool bUseChoiceNameAsConfirmationMessage;
        public bool bApplyIntelSummary;
        public StoreItemData[] StoreItemArray;
        public int[] MallStoreArray;
    }
    public class SFXWeaponMod_NativeBase : Object
    {
        public int PickupFactoryMesh;
    }
    public class SFXWeaponMod : SFXWeaponMod_NativeBase
    {
        public int[] Meshes;
        public int[] GameEffectClasses;
        public WeaponModEffect[] GameEffects;
        public int[] Reticules;
        public SFXWeaponAimMode[] AimModes;
        public int[] ModLevelTokens;
        public string NotificationImage;
        public string LargeNotificationImage;
        public string RTPCName;
        public WeaponModStatConversion[] WeaponModConversions;
        public NameReference SocketName;
        public int Level;
        public int DisplayName;
        public int FormattedName_ModName;
        public int FormattedName_ModCategory;
        public int Description;
        public int NotificationTitle;
        public int NotificationDescription;
        public int Camera;
        public int MyWeapon;
        public int MAX_RANK;
        public bool bMaterialEmissiveChange;
        public bool bMaterialGripColorChange;
        public bool bMaterialBodyColorChange;
        public bool bIsScoped;
        public EWeaponModCategory WeaponModCategory;
        public ETargetTipText ToolTipText;
    }
    public class SFXWeaponUIDataManager : Object
    {
        public int[] RomanNumerals;
        public int __OnDataLoadedDelegate__Delegate;
        public float MaxWeaponLevel;
    }
    public class SFXGUI_Store : SFXGUIMovie
    {
        public string m_sResourceCostColorHTML_CanAfford;
        public string m_sResourceCostColorHTML_CantAfford;
        public string m_DefaultStoreHeaderImageRef;
        public ModStrings[] ModStringsArray;
        public ComparisonStat[] CompStats;
        public GlobalStoreDiscount[] GlobalStoreDiscounts;
        public int[] WeaponUpgradeCosts;
        public int[] RespecCosts;
        public int[] Achievement_UniqueArmorPlotIDs;
        public int __OnCloseCallback__Delegate;
        public int Customer;
        public int StoreGUIData;
        public int NestedStoreGUIData;
        public int ConfirmationMessageBox;
        public int srPurchaseConfirm;
        public int srPurchaseCancel;
        public int srPurchaseConfirmMessage;
        public int srMoreInformation;
        public int srBack;
        public int srNewFlag;
        public int m_srResourceTextCredits;
        public int m_srResourceCostFormat;
        public int m_srResourceAvailFormat;
        public int m_nInfoScrollSpeed;
        public int DisplayCap_Mods;
        public int DisplayCap_Weapons;
        public int ModPriorityModifier;
        public int NewGamePlusID;
        public int MaxWeaponLevel_Normal;
        public int MaxWeaponLevel_NGP;
        public int WeaponLevelIncrease_Normal;
        public int WeaponLevelIncrease_NGP;
        public int ArmorEffectDescriptionFormatter;
        public int WeaponDataManager;
        public bool bAllItemsUnlocked;
        public bool bResetTalents;
        public bool bInNestedStore;
    }
    public class SFXGUI_PCStore : SFXGUI_Store
    {
    }
    public class SFXGUI_PlayerCountdown : SFXGUIMovie
    {
        public int Animations;
        public float LastBleedOutTimer;
        public bool bTappingPromptVisible;
    }
    public class SFXGUIInputHandler : Object
    {
        public SFXInputEventCooldownStruct[] m_aInputEventCooldowns;
        public string BannedChars;
        public Pointer m_pEngine;
        public Vector2D MousePositionOverride;
        public float UDLRInitialCooldown;
        public float UDLRHeldCooldown;
        public int RTT_HitCheckDistance_UU;
        public BioGuiEvents m_eLastUDLREvent;
        public BioThumbstickDir m_nLStickX;
        public BioThumbstickDir m_nLStickY;
    }
    public class SFXGUIInteraction : GFxInteraction
    {
        public Map_Mirror m_PlayerData;
        public Map_Mirror m_UnrealKeyToGfxKeyMap;
        public SFXGUIMovieData[] MovieLibrary;
        public SFXSharedAssetMap[] SharedAssetLibrary;
        public SFXFontMap[] FontMap;
        public SFXSFControlToken[] ControlTokens;
        public SFXControlTokenAlias[] ControlTokenAliases;
        public SFXStringMap[] StringMappings;
        public SFXKeyNameControlToken[] SFXKeyNameControlTokens;
        public GUIDependency[] GUIDependencies;
        public int[] m_aHintStack;
        public int __OnCloseCallback__Delegate;
        public int __OnDependencyEvent__Delegate;
        public NameReference MovieTag_Reticle;
        public NameReference MovieTag_PowerWheel;
        public NameReference MovieTag_HUD;
        public NameReference MovieTag_Conversation;
        public NameReference MovieTag_BlackScreen;
        public NameReference MovieTag_SkillGameDecryption;
        public NameReference MovieTag_SkillGameBypass;
        public NameReference MovieTag_IntroText;
        public NameReference MovieTag_LoadMovieDefault;
        public NameReference MovieTag_SniperOverlay;
        public NameReference MovieTag_MenuBrowser;
        public NameReference MovieTag_MainMenu;
        public NameReference MovieTag_MissionCompletion;
        public NameReference MovieTag_PRCStore;
        public NameReference MovieTag_Store;
        public NameReference MovieTag_Terminal;
        public NameReference MovieTag_Training;
        public NameReference MovieTag_Elevator;
        public NameReference MovieTag_Mail;
        public NameReference MovieTag_Splash;
        public NameReference MovieTag_GalaxyMap;
        public NameReference MovieTag_ChoiceGUI;
        public NameReference MovieTag_PartySelect;
        public NameReference MovieTag_Personalization;
        public NameReference MovieTag_NewCharacter;
        public NameReference MovieTag_Options;
        public NameReference MovieTag_Journal;
        public NameReference MovieTag_Codex;
        public NameReference MovieTag_Manual;
        public NameReference MovieTag_Accomplishments;
        public NameReference MovieTag_NetworkRegistration;
        public NameReference MovieTag_GameOver;
        public NameReference MovieTag_SquadRecord;
        public NameReference MovieTag_Credits;
        public NameReference MovieTag_DesignerUI;
        public NameReference MovieTag_Specialization;
        public NameReference MovieTag_Save;
        public NameReference MovieTag_Load;
        public NameReference MovieTag_AreaMap;
        public NameReference MovieTag_MessageBox;
        public NameReference MovieTag_QueuedMessageBox;
        public NameReference MovieTag_HintBox;
        public NameReference MovieTag_Slideshow;
        public NameReference MovieTag_Markers;
        public NameReference MovieTag_ObjectiveText;
        public NameReference MovieTag_WeaponSelect;
        public NameReference MovieTag_PlayerCountdown;
        public NameReference MovieTag_GalaxyAtWar;
        public NameReference MovieTag_WarAssets;
        public NameReference MovieTag_OpeningTitles;
        public NameReference MovieTag_SaveIndicatorMessage;
        public NameReference MovieTag_AtlasHUD;
        public NameReference MovieTag_MPEndOfMatch;
        public NameReference MovieTag_MPLobby;
        public NameReference MovieTag_MPAppearance;
        public NameReference MovieTag_MPMatchResults;
        public NameReference MovieTag_MPSelectKit;
        public NameReference MovieTag_Leaderboard;
        public NameReference MovieTag_MPScoretags;
        public NameReference MovieTag_MPPauseMenu;
        public NameReference MovieTag_MPOptions;
        public NameReference MovieTag_MPMatchConsumables;
        public NameReference MovieTag_MPStore;
        public NameReference MovieTag_MPReinforcementsReveal;
        public NameReference MovieTag_MPHUD;
        public NameReference MovieTag_MPNewLobby;
        public NameReference MovieTag_MPLobbyStatusBars;
        public NameReference MovieTag_MPPromotion;
        public NameReference m_nmCurrentVoice;
        public NameReference m_nmCurrentMusic;
        public int m_oSFResources;
        public int InputHandler;
        public int m_wwiseComponent;
        public int ImportedTemplatePawn;
        public int m_oSavingLoadingDisplayProxy;
        public int m_nMaxHintStackHeight;
        public int m_oPreloadedHint;
        public bool ReplaceRegisteredTMWithFullHeightChar;
        public bool m_bDesiredMouseVisibility;
        public bool bFullGuiSoundLogging;
        public bool m_bGameWasPaused;
        public bool HACK_IgnoreTurnBlackScreenOffForMP;
        public MEBrowserWheelSubPages m_eLastBrowserWheelSubPage;
    }
    public class SFXGUIData_TeamSelect : SFXGameChoiceGUIData
    {
        public SelectIdentity[] HenchIdentities;
        public AppearanceSet[] SelectAppearances;
        public PowerInfo[] PowerInfos;
        public SelectInfo[] SelectInfos;
        public string DefaultImage;
        public NameReference SelectName;
        public int srSelectTitle;
        public int srDefaultAButtonText;
        public int srDefaultBButtonText;
        public int srDefaultXButtonText;
        public int srDefaultYButtonText;
        public int srPartyConfirm;
        public int srPartyCancel;
        public int srPartyQuestion;
        public int srInfoExit;
    }
    public class SFXGUI_TeamSelect : SFXGUIMovie
    {
        public NameReference[] ForceInParty;
        public NameReference[] ForceOutParty;
        public NameReference[] DeadToParty;
        public int[] Party;
        public int __OnRequestExitDelegate__Delegate;
        public int HenchmenPool;
        public int BaseHenchPool;
        public int DataManager;
    }
    public class SFXGUI_Terminal : SFXGUIMovie
    {
        public int[] OnRequestActionCallbacks;
        public int __OnRequestExitCallback__Delegate;
        public int __OnRequestActionDelegate__Delegate;
        public int TerminalData;
    }
    public class SFXGUI_WarAssets : SFXGUIMovie
    {
        public int __OnFinished__Delegate;
        public int __OnSwitchScreens__Delegate;
        public int srReadinessPercent;
        public int GAWAssetsHandler;
        public int srWarAssetsTutorialMessage;
    }
    public class SFXGUI_WeaponReticleSimple : SFXGUI_WeaponReticleBase
    {
        public int m_oActualReticle;
        public int m_oPipRight;
        public int m_oPipLeft;
    }
    public class SFXGUI_WeaponReticleSimpleAlpha : SFXGUI_WeaponReticleSimple
    {
        public float ReticleOpacity;
    }
    public class SFXGUI_WeaponSelection : SFXGUIMovie
    {
        public WeaponStatesToKeep[] SavedWeaponStates;
        public int DataManager;
        public bool ShowAllWeapons;
        public bool AutoEquipWhenDone;
        public bool bWasPaused;
    }
    public class SFXGUIData_Elevator : SFXGameChoiceGUIData
    {
        public ElevatorDestinationData[] ElevatorDestinations;
        public string DefaultImage;
        public NameReference ElevatorName;
        public int srElevatorTitle;
        public int srElevatorDescription;
        public int srDefaultAButtonText;
        public int srDefaultBButtonText;
    }
    public class SFXGUIData_Terminal : SFXGameChoiceGUIData
    {
        public TerminalItemData[] TerminalItemArray;
        public string DefaultImage;
        public NameReference TerminalName;
        public int srTerminalTitle;
        public int srTerminalDescription;
        public int srDefaultAButtonText;
        public int srDefaultBButtonText;
    }
    public class SFXGUIData_TerminalNoSquadSel : SFXGUIData_Terminal
    {
    }
    public class SFXGUIExt_WeaponMods : SFXGUIMovieExtension
    {
        public int m_oModControlMovieInfo;
        public int m_oModStatsMovieInfo;
        public int ModStatsDisplay;
        public int ModModsDisplay;
    }
    public class SFXGUIHelper_ConsoleKeyboard : Object
    {
        public Pointer VfTable_FTickableObject;
        public string sTitle;
        public string sDescription;
        public string sInputValue;
        public int __OnKeyboardEntryComplete__Delegate;
        public bool bKeyboardVisible;
    }
    public class SFXGUIRenderTarget_InterpActor : InterpActor
    {
        public int RenderTextureUVChannel;
        public MouseSupportLevel MouseSupport;
    }
    public class SFXGUIValue_PowerIcon : GFxValue
    {
        public string m_aPowerStatePaths;
        public SFXPowerWheelButtonIcon oMappedIcon;
        public string sPath;
        public string sID;
        public string sIconResource;
        public string sName;
        public string sDescription;
        public string sMappedBGPath;
        public string CurrentInfoText;
        public NameReference nmPowerName;
        public float fBoundary;
        public int pPower;
        public int pPawn;
        public int nIcon;
        public int nCooldownValue;
        public bool bHenchIcon;
        public bool bDirty;
        public bool bSelected;
        public bool bVisible;
        public bool bDelayedFlash;
        public bool bMapped;
        public bool bDragHover;
        public bool FlashWhenTextChanges;
        public SFXPowerWheelPowerState eState;
        public SFXPowerWheelPowerState eDesiredState;
    }
    public class SFXGUIValue_HUDPowerIcon : SFXGUIValue_PowerIcon
    {
    }
    public class SFXGUIValue_ManualAnimController : GFxValue
    {
        public int __OnAnimStarted__Delegate;
        public int __OnAnimAborted__Delegate;
        public int __OnAnimFinished__Delegate;
        public int StartFrame;
        public int EndFrame;
        public float ElapsedAnimationTime;
        public float TotalAnimationTime;
        public bool IsActive;
        public bool IsPlaying;
        public bool AbortRequested;
    }
    public class SFXGUIValue_Marker : GFxValue
    {
        public ASDisplayInfo MarkerRootDI;
        public ASDisplayInfo MarkerReticuleFreeArrowClipDI;
        public ASDisplayInfo MarkerReticuleClipDI;
        public ASDisplayInfo MarkerMiscTextClipAnimDI;
        public Vector2D ScreenEdgeBorder;
        public int Actor;
        public int SkelMeshComponent;
        public int BoneIndex;
        public int MarkerClip;
        public int MarkerReticuleFreeArrowClip;
        public int MarkerReticuleClip;
        public int MarkerIconClip;
        public int MarkerMiscTextClipAnim;
        public float OffscreenDirectionDampenPower;
        public bool FullyInitialized;
        public bool MarkerReticuleArrowClipDIDirty;
        public bool MarkerMiscTextClipAnimDIDirty;
        public bool PreviousIsOffscreen;
        public EAimNodes DefaultPawnAimNodeToAttachTo;
    }
    public class SFXGUIValue_MarkerGrenade : SFXGUIValue_Marker
    {
        public Vector2D MarkerScale;
        public float FadeInExponent;
        public int Player;
        public float DisplayRange;
    }
    public class SFXGUIValue_MarkerHenchman : SFXGUIValue_Marker
    {
        public int Henchman;
        public bool PreviousHenchmanIsDown;
    }
    public class SFXGUIValue_MarkerObjective : SFXGUIValue_Marker
    {
        public float MarkerReticleStayUpDuration;
        public float MarkerTextStayUpDuration;
        public int LocalPlayer;
        public bool ShouldPlaySpawn;
    }
    public class SFXGUIValue_MarkerObjectiveSP : SFXGUIValue_MarkerObjective
    {
    }
    public class SFXGUIValue_MarkerPlayer : SFXGUIValue_Marker
    {
        public int Player;
        public float TimeToHideDeathIconAt;
        public float MaxWorldDistanceForVisibility;
        public float MaxScreenDistanceFromCenter;
        public float LingeringDeathIconTime;
        public bool PreviousIconIsVisible;
        public bool PreviousPlayerIsDead;
    }
    public class SFXGUIValue_QuickSlotPowerIcon : SFXGUIValue_PowerIcon
    {
    }
    public class SFXWeapon_NativeBase : Weapon
    {
        public int CurrentSpareAmmo;
        public int AmmoUsedCount;
        public bool bWeaponExpanded;
        public bool bInstantExpansion;
        public bool bForceReplayAnimation;
        public bool bCanDropWeapon;
        public bool bCanDropAmmo;
        public bool bIsZoomed;
        public bool bCanBlindUp;
        public bool bInfiniteAmmo;
        public bool bShowGlowInZoom;
        public bool bGlowOnlyThroughSmoke;
        public bool bSuppressAudio;
        public ESFXVocalizationWeapon VocalizationType;
        public byte FizzleCount;
        public EAttachSlot CharacterSlot;
    }
    public class SFXModule_WeaponModManager : SFXModule
    {
        public int[] WeaponMods;
    }
    public class SFXWeapon : SFXWeapon_NativeBase
    {
        public ScaledFloat AI_AccCone_Min;
        public ScaledFloat AI_AccCone_Max;
        public ScaledFloat ReloadDuration;
        public ScaledFloat Damage;
        public ScaledFloat MagSize;
        public ScaledFloat MaxSpareAmmo;
        public ScaledFloat MinAimError;
        public ScaledFloat MaxAimError;
        public ScaledFloat MinZoomAimError;
        public ScaledFloat MaxZoomAimError;
        public ScaledFloat RateOfFire;
        public ScaledFloat NoAmmoUseChance;
        public ScaledFloat HeadshotDamageMultiplier;
        public ScaledFloat ImpactForceModifier;
        public ScaledFloat ReactionChanceModifier;
        public ScaledFloat MeleeDamageModifier;
        public ScaledFloat EncumbranceWeight;
        public ScaledFloat Recoil;
        public ScaledFloat ZoomRecoil;
        public ScaledFloat AccFirePenalty;
        public ScaledFloat AccFireInterpSpeed;
        public ScaledFloat ZoomAccFirePenalty;
        public ScaledFloat ZoomAccFireInterpSpeed;
        public ScaledFloat MinCrosshairRange;
        public ScaledFloat MaxCrosshairRange;
        public ScaledFloat MinZoomCrosshairRange;
        public ScaledFloat MaxZoomCrosshairRange;
        public ScaledFloat PenetrationBonus;
        public ScaledFloat PenetrationDamageBonus;
        public ScaledFloat ArmorPiercing;
        public ScaledFloat StatBarAccuracy;
        public ScaledFloat StatBarDamage;
        public ScaledFloat StatBarRateOfFire;
        public SFXWeaponAimMode[] AimModes;
        public NameReference[] AimOffsetProfileNames;
        public string GUIImage;
        public string NotificationImage;
        public string AmmoRTPCName;
        public ZoomSnapInfo[] ZoomSnapList;
        public NameReference[] FadingParameters;
        public int[] DamageUpgradeTokens;
        public int[] ResearchUpgradeTokens;
        public int[] ResearchUpgradeIds;
        public CoverLeanPosition[] CoverLeanPositions;
        public LinearColor[] WeaponModGripColours;
        public LinearColor[] WeaponModBodyColours;
        public LinearColor[] WeaponModEmissiveColours;
        public string RTPCName;
        public string[] DefaultModOptions;
        public int[] PredictedProjectiles;
        public int __OnWeaponImpact__Delegate;
        public int __GetDamageVocProbabilityMod__Delegate;
        public int __OnWeaponReload__Delegate;
        public int __OnWeaponEquip__Delegate;
        public int __OnWeaponUnequip__Delegate;
        public int DroppedAmmoClass;
        public int GUIReticleClass;
        public int GUIZoomReticleClass;
        public ScreenShakeStruct FiringShake;
        public ScreenShakeStruct TightAimFiringShake;
        public ScreenShakeStruct ChargeCameraShake;
        public TracerSpec TracerInfo;
        public Guid AttachedFlashlightVFXGuid;
        public LinearColor WeaponModBaseGripColour;
        public LinearColor WeaponModBaseBodyColour;
        public LinearColor WeaponModBaseEmissiveColour;
        public Vector DebugShotStartLoc;
        public Rotator DebugShotAimRot;
        public Vector MuzzleIdlePosition;
        public Vector FrictionTargetOffset;
        public Vector DummyFireTargetLoc;
        public Vector StartFireLocation;
        public Vector StartFireDirection;
        public NameReference MeleePowerName;
        public Vector2D AI_BurstFireCount;
        public Vector2D AI_BurstFireDelay;
        public Vector2D AI_AimDelay;
        public NameReference MuzzleSocketName;
        public NameReference ShellCasingSocketName;
        public Vector2D FrictionMultiplierRange;
        public Vector2D AdhesionStrengthRange;
        public int CurrentAimMode;
        public float CoverLeanExitDelay;
        public float CoverPartialLeanExitDelay;
        public int SwitchPriority;
        public int ReloadAnimInfo;
        public int WeaponAnimNode;
        public int PSC_OutOfAmmoEffect;
        public int OutOfAmmoRumble;
        public int WeaponFireWaveForm;
        public int EjectRumble;
        public float ImpactRelevanceDistance;
        public int PS_DefaultImpactEffect;
        public int PS_DefaultMaterialImpactEffect;
        public float ImpactScale;
        public int DefaultDecalMaterial;
        public float ShowTracerDistance;
        public int PSC_ShellCasing;
        public int PSC_ReloadVent;
        public float TracerSpawnOffset;
        public int PSC_MuzFlashEmitter;
        public int PSC_PermanentMuzzle;
        public int OnMuzzleSound;
        public int OffMuzzleSound;
        public float TimeToHideMuzzleFlashPSC;
        public float TimeToDeactivateMuzzleFlashPSC;
        public int AttachedFlashlight;
        public int AttachedAmbientLight;
        public Color FlashlightFireColor;
        public float FlashlightFireBrightnessIncrease;
        public float FlashlightFireRadiusIncrease;
        public float FlashlightStopFireDelay;
        public float WeaponLevel;
        public float EjectShellCasingTimeRatio;
        public float ReloadReactionWindow;
        public float LastBulletStrongerPercent;
        public float DamageHench;
        public float LowAmmoSoundThreshold;
        public float SteamSoundThreshold;
        public float NoAmmoFireSoundDelay;
        public float MinRefireTime;
        public float LazyRateOfFire;
        public float RateOfFireAI;
        public float RoundsPerBurst;
        public float ModCrosshairMultiplier;
        public float AmmoPerShot;
        public float RecoilInterpSpeed;
        public float RecoilFadeSpeed;
        public float RecoilZoomFadeSpeed;
        public float RecoilMinFade;
        public float RecoilCap;
        public float ZoomRecoilCap;
        public float RecoilYawScale;
        public float RecoilYawFrequency;
        public float TraceRange;
        public float MeleeRange;
        public float IdealMinRange;
        public float IdealTargetDistance;
        public float IdealMaxRange;
        public float MagneticCorrectionThresholdAngle;
        public float MaxMagneticCorrectionAngle;
        public float DistancePenetrated;
        public int IconResource;
        public int IconRef;
        public int PrettyName;
        public int ShortPrettyName;
        public int GUIClassName;
        public int GUIClassDescription;
        public int AmmoPrettyName;
        public int ShortDescription;
        public int GeneralDescription;
        public int WeaponUnlockMessage;
        public int WeaponUpgradeMessage;
        public int GUIWeaponOrder;
        public int NuiSpeechName;
        public int DefaultImpactSound;
        public int FireSound;
        public int PlayerFireSound;
        public float WeaponLoudness;
        public int WeaponPowerFireSound;
        public int FireNoAmmoSound;
        public int WeaponWhipSoundLeft;
        public int WeaponWhipSoundRight;
        public int WeaponReloadSound;
        public int WeaponSteamReloadSound;
        public int StopWeaponReloadSound;
        public int WeaponExpandSound;
        public int WeaponCollapseSound;
        public int NeedReloadNotifySound;
        public int SteamReloadNotifySound;
        public int ActivateModScopeZoomWwiseEvent;
        public int DeActivateModScopeZoomWwiseEvent;
        public float MinFrictionDistance;
        public float MaxFrictionDistance;
        public float PeakFrictionDistance;
        public float PeakFrictionRadiusScale;
        public float PeakFrictionHeightScale;
        public float MinAdhesionDistance;
        public float MaxAdhesionDistance;
        public float MinAdhesionVelocity;
        public float CamInputAdhesionDamping;
        public float MaxLateralAdhesionDist;
        public float AimCorrectionAmount;
        public float MinZoomSnapDistance;
        public float MaxZoomSnapDistance;
        public int AmmoPowerPSCO;
        public int AmmoPowerIconPSCO;
        public int DamageUpgradeId;
        public int DummyFireParent;
        public int DummyFireTargetActor;
        public float DummyFireInaccuracy;
        public float DummyFireShotsRemaining;
        public int PreDummyFireInstigator;
        public int CameraSetup;
        public int TaserMeleeModImpactEffect;
        public int TaserMeleeModImpactSound;
        public int BladeMeleeModImpactEffect;
        public int BladeMeleeModImpactSound;
        public float ClientSideHitLeeway;
        public float ClientSideHitMaxDistReallyClose;
        public float ClientSideHitMaxAngle;
        public float ClientSideHitMaxDistClose;
        public float ClientSideHitMaxAngleClose;
        public int NumberOfDefaultModsToAttach;
        public float HearNoiseTimeout;
        public float ChargeAmount;
        public int ChargeUpPS;
        public int ChargeDownPS;
        public int PowerUpSound;
        public int PowerDownSound;
        public int NPCPowerUpSound;
        public int NPCPowerDownSound;
        public float MinChargeTime;
        public float MaxChargeTime;
        public float MaxChargeFireRumble;
        public float MinChargeFireRumble;
        public float MaxChargeCameraShake;
        public float MaxLevel;
        public int WeaponAcquiredID;
        public int WeaponAcquiredID_NGP;
        public int StartFireTarget;
        public int NewGamePlusID;
        public int CodexPlotID;
        public bool bSuperDamage;
        public bool bSuppressMuzzleFlash;
        public bool bSuppressTracers;
        public bool bSuppressImpactFX;
        public bool bSuppressDecal;
        public bool bSuppressDamage;
        public bool bSuppressCameraShake;
        public bool bPlayerUsable;
        public bool bLoopingFlashEmitter;
        public bool bPlayingMuzzleFlashEffect;
        public bool bPermanentMuzzle;
        public bool bForceSpawnTracer;
        public bool bFlashlightAttached;
        public bool bWeaponCanBeReloaded;
        public bool bNotRegularWeaponGUI;
        public bool bPlayZoomSound;
        public bool bPlaySoundOncePerBurst;
        public bool bAIPlaySoundOncePerBurst;
        public bool bFrictionEnabled;
        public bool bFrictionDistanceScalingEnabled;
        public bool bAdhesionEnabled;
        public bool bAdhesionDuringCam;
        public bool bZoomSnapEnabled;
        public bool bScaleAnimDurationByFireRate;
        public bool bDummyFireWeapon;
        public bool bDamagesFriends;
        public bool bSuppressDummyFireLineCheck;
        public bool DummyFireInstigatorSet;
        public bool bDoesNotUnlock;
        public bool bAutoModdingEnabled;
        public bool bNeedPowerDownSound;
        public bool bForceFireAfterCharge;
        public bool bQuickSwitchEligible;
        public AimProfiles AimNodeProfileID;
        public IKProfiles IKProfileID;
        public FireModes DefaultFireMode;
        public WeaponAnimType AnimType;
        public EAttachSlot AttachSlot;
        public byte FireOnceFiringMode;
        public byte DummyTeamIndex;
        public EPlayerPositionRTPC RTPCPlayerPosition;
        public ChargeEffectType RepChargeEffect;
    }
    public class SFXHeavyWeapon : SFXWeapon
    {
        public bool bTossOnWeaponSwitch;
    }
    public class SFXWaveCoordinator : Actor
    {
        public float PostLoadDelay;
        public bool WavesAreLoading;
        public int[] ActiveWaves;
    }
    public class SFXHostMigration : Object
    {
        public bool bNeedRestoration;
    }
    public class SFXInterpTrack_MoveTo : InterpTrackMove
    {
    }
    public class SFXInterpTrackAttachCrustEffect : SFXGameInterpTrackCustom
    {
        public SFXAttachCrustEffectTrackData[] m_aCrustEffectKeyData;
        public int[] m_aTarget;
        public int oEffect;
    }
    public class SFXInterpTrackAttachToActor : SFXGameInterpTrackCustom
    {
        public int[] m_aTarget;
        public Vector RelativeOffset;
        public Rotator RelativeRotation;
        public NameReference BoneName;
        public bool bDetach;
        public bool bHardAttach;
        public bool bUseRelativeOffset;
        public bool bUseRelativeRotation;
    }
    public class SFXInterpTrackAttachVFXToObject : SFXGameInterpTrackCustom
    {
        public int[] m_aAttachToTarget;
        public Vector m_vOffset;
        public NameReference m_nmSocketOrBone;
        public int m_oEffect;
    }
    public class SFXInterpTrackBlackScreen : SFXGameInterpTrackCustom
    {
        public SFXBlackScreenTrackData[] m_aBlackScreenKeyData;
    }
    public class SFXInterpTrackClientEffect : InterpTrackToggle
    {
        public Vector m_vSpawnParameters;
        public int m_pEffect;
        public bool m_bAllowCooldown;
        public bool m_bStopAllMatchingEffects;
    }
    public class SFXInterpTrackDestroy : SFXGameInterpTrackCustom
    {
        public int[] m_aTarget;
    }
    public class SFXInterpTrackForceLightEnvUpdate : SFXGameInterpTrackCustom
    {
    }
    public class SFXInterpTrackInst_MoveTo : InterpTrackInstMove
    {
        public Vector StartLocation;
        public Rotator StartRotation;
    }
    public class SFXInterpTrackInstClientEffect : InterpTrackInstToggle
    {
    }
    public class SFXInterpTrackLightEnvQuality : SFXGameInterpTrackCustom
    {
        public SFXLightEnvTrackData[] m_aLightEnvKeyData;
    }
    public class SFXInterpTrackMovieBase : SFXGameInterpTrackCustom
    {
        public SFXMoviePlayStateData[] m_aMovieKeyData;
    }
    public class SFXInterpTrackMovieBink : SFXInterpTrackMovieBase
    {
        public string m_sMovieName;
        public float m_fAutoResizeBuffer;
        public int m_SoundEvent;
        public bool m_bIgnoreShrinking;
        public bool m_bIgnoreGrowing;
    }
    public class SFXInterpTrackMovieTexture : SFXInterpTrackMovieBase
    {
        public int m_oTextureMovie;
    }
    public class SFXInterpTrackPlayFaceOnlyVO : SFXGameActorInterpTrack
    {
        public BioFOVOTrackData[] m_aFOVOKeys;
    }
    public class SFXInterpTrackPlayFaceOnlyVOInst : SFXGameActorInterpTrackInst
    {
    }
    public class SFXInterpTrackSetEnvEffectIntensity : SFXGameInterpTrackCustom
    {
    }
    public class SFXInterpTrackSetPlayerNearClipPlane : SFXGameInterpTrackCustom
    {
        public SFXNearClipTrackData[] m_aNearClipKeyData;
    }
    public class SFXInterpTrackSetWeaponInstant : SFXGameInterpTrackCustom
    {
        public SFXWeaponClassData[] m_aWeaponClassKeyData;
        public int m_PawnRefTag;
    }
    public class SFXInterpTrackToggleBase : SFXGameInterpTrackCustom
    {
        public SFXToggleTrackData[] m_aToggleKeyData;
        public int[] m_aTarget;
    }
    public class SFXInterpTrackToggleAffectedByHitEffects : SFXInterpTrackToggleBase
    {
    }
    public class SFXInterpTrackToggleHidden : SFXInterpTrackToggleBase
    {
    }
    public class SFXInterpTrackToggleLightEnvironment : SFXInterpTrackToggleBase
    {
    }
    public class SFXTreasureUseModule : SFXModule_SavedUse
    {
        public int ResourcePercent;
        public bool bUseAbsuluteAmount;
        public ETreasureType TreasureType;
    }
    public class SFXInventoryManager : InventoryManager
    {
        public ScaledFloat MaxGrenadeBonus;
        public int CurrentWeaponSelection;
        public Rotator WeaponRecoilOffset;
        public Rotator TotalRecoil;
        public Rotator Drift;
        public Rotator DriftTarget;
        public int Credits;
        public int Medigel;
        public int Grenades;
        public int Eezo;
        public int Iridium;
        public int Palladium;
        public int Platinum;
        public int Probes;
        public float CurrentFuel;
        public int MaxCredits;
        public int MaxEezo;
        public int MaxIridium;
        public int MaxPalladium;
        public int MaxPlatinum;
        public int MaxMedigel;
        public int MaxGrenades;
        public int MaxGrenadesMP;
        public int MaxProbes;
        public float MaxFuel;
        public float FuelEfficiency;
        public int ExtraMedigelPlotInt;
        public float DriftPitch;
        public float DriftYaw;
        public float DriftInterpSpeed;
        public float DriftInterpResetSize;
        public float DriftInterpMinSize;
        public float DriftNoiseMagPitch;
        public float DriftNoiseMagYaw;
        public float DriftRampUpRate;
        public float DriftRampUpDelay;
        public int AttachedFlashlight;
        public int AttachedAmbientLight;
        public int AttachedFlashlightVFX;
        public float AmbientLightCachedBrightness;
        public float FlashlightCachedBrightness;
        public float FlashlightCachedRadius;
        public Color FlashlightCachedColor;
        public Color AmbientLightCachedColor;
        public int ReplicatedWeaponIndex;
        public bool bFlashlightAttached;
        public bool bCanPickUpGrenades;
    }
    public class SFXJumpDownReachSpec : SFXCustomReachSpec
    {
    }
    public class SFXJumpReachSpec : SFXCustomReachSpec
    {
        public float MaxHeight;
        public float MovePercentToReachMaxHeight;
    }
    public class SFXKActorSpawnable : KActorSpawnable
    {
    }
    public class SFXKAsset : KAsset
    {
    }
    public class SFXKAssetSpawnable : SFXKAsset
    {
    }
    public class SFXKillRagdollVolume : TriggerVolume
    {
    }
    public class SFXLadderReachSpec : SFXCustomReachSpec
    {
    }
    public class SFXLargeBoostReachSpec : SFXCustomReachSpec
    {
    }
    public class SFXLargeClimbReachSpec : SFXCustomReachSpec
    {
    }
    public class SFXLargeMantleReachSpec : SFXCustomReachSpec
    {
    }
    public class SFXLeapReachSpecBase : SFXCustomReachSpec
    {
        public float LeapHeight;
    }
    public class SFXLeapReachSpecHumanoid : SFXLeapReachSpecBase
    {
    }
    public class SFXLeapReachSpecLarge : SFXLeapReachSpecBase
    {
    }
    public class SFXLoadMovieManager : Object
    {
        public int MovieStateDelegates;
        public NativeLoadingMovie[] NativeMovies;
        public LoadingLevelTip[] AreaLoadTips;
        public LoadingTip[] LoadTips;
        public string[] LoadingMovieNames;
        public int[] DefaultLoadingMovies;
        public int __LoadingMovieDelegate__Delegate;
        public NameReference WWiseGlobalEvent_LoadMute;
        public NameReference WWiseGlobalEvent_LoadUnMute;
        public int MovieSound;
        public int nLoopBackFrame;
        public int srLevelLoadTipStrRef;
        public float FadeInTime;
        public float FadeOutTime;
        public int FadeOutWwiseEvent;
        public float MinPlayTime;
        public float LoadMovieAudioTimerDelay;
        public bool bPlayToCompletion;
        public bool bRequireExplicitStop;
        public bool bResetToDefaultOnPlayLoadMovie;
        public bool bShowLevelLoadTip;
        public bool bStreamFromDisc;
        public LoadingMovieState PlaybackState;
    }
    public class SFXLocalPlayer : LocalPlayer
    {
        public int GAWReinforcementManager;
    }
    public class SFXMarkerModuleManager : Object
    {
        public int[] AllMarkerActors;
        public int[] ActiveMarkerActors;
        public int[] MarkerActivatedDelegates;
        public int[] MarkerDeactivatedDelegates;
        public int[] ManagerDestroyedDelegates;
        public int __OnActivated__Delegate;
        public int __OnDeactivated__Delegate;
        public int __OnDestroyed__Delegate;
    }
    public class SFXMatchResultsData : Object
    {
        public PlayerScoreData[] PlayerData;
        public int[] SquadMedalIDs;
        public int[] ExtractedPlayerIDs;
        public MatchData CurrentMatchData;
        public PlayerRewardData PlayerRewards;
        public int TotalSquadCredits;
        public int TotalSquadXP;
        public int BonusSquadXP;
    }
    public class SFXMiningNode : SFXPointOfInterest
    {
        public float ImpulseMinStrength;
        public float ImpulseMaxStrength;
        public float ImpulseMinFrequency;
        public float ImpulseMaxFrequency;
        public float Radius;
        public float Duration;
        public int PSC_GroundReticle;
        public bool bAlreadyMined;
    }
    public class SFXModule_Armour : SFXModule
    {
        public int ActiveArmour;
        public int ReplicatedArmourStates;
    }
    public class SFXModule_DamageParty : SFXModule_Damage
    {
        public float HealthRegenDelay;
        public float MinShieldGateInterval;
        public float MinHealthGateInterval;
        public float HealthGateThreshold;
    }
    public class SFXModule_DamagePlayer : SFXModule_DamageParty
    {
        public InterpCurveFloat BleedoutVFXCurve;
        public InterpCurveFloat BleedoutSFXCurve;
        public string BleedOutRTPC;
        public Guid CE_Bleedout_GUID;
        public float HealthRegenPct;
        public float ShieldPresentationTime;
        public float BleedoutStartThreshold;
        public float InitialBleedoutPct;
        public float BleedoutVFXInterpSpeed;
        public float BleedoutSFXInterpSpeed;
        public int CE_BleedOut;
        public int MIC_Bleedout;
        public int BleedOutEventPair;
        public float HealthRatio;
    }
    public class SFXModule_Marker : SFXModule
    {
        public string MarkerType;
        public int GUIMarkerClass;
        public Vector MarkerOffset;
        public NameReference BoneToAttachTo;
        public int MarkerLabel;
        public int PawnWithExclusiveVisibility;
        public int PawnWithExclusiveInvisibility;
        public bool bActive;
    }
    public class SFXModule_MarkerGrenade : SFXModule_Marker
    {
        public float VisibleDistance;
    }
    public class SFXModule_MarkerObjective : SFXModule_Marker
    {
        public EObjectiveMarkerIconType MarkerIconType;
    }
    public class SFXModule_MarkerObjectiveSP : SFXModule_MarkerObjective
    {
        public bool DisplayMarkerOnSpawn;
    }
    public class SFXModule_MarkerPlayer : SFXModule_Marker
    {
        public bool PlayerIsDown;
        public bool PlayerIsDead;
    }
    public class SFXModule_QAModule : SFXModule
    {
        public string barkName;
        public int m_nextBark;
        public float m_fBarkDelay;
        public int AIBarkI;
        public int AIBarkJ;
        public int AIBarkK;
        public int AIBarkVar;
        public bool bDoneCombatBarks;
        public bool bDoneExploreBarks;
        public bool bDoneStealthBarks;
        public bool bDoneCombatVarBarks;
    }
    public class SFXModule_Timeline : SFXModule
    {
        public int __AOEEvalFunc__Delegate;
        public int __InputHandler__Delegate;
    }
    public class SFXModule_Wound : SFXModule
    {
        public BioWoundSpec[] m_aWoundSpecs;
    }
    public class SFXModule_Wrinkles : SFXModule
    {
        public string m_sWrinkleMaterialIdentifier;
        public BioWrinkleConfig[] TextureOverrides;
        public int m_nWrinkleHighestLOD;
        public bool bUseWrinkles;
    }
    public class SFXMorphFaceFrontEndDataSource : Object
    {
        public Slider ModifierData;
        public AdditionalData AdditionalParams;
        public Category[] MorphCategories;
        public int[] Textures;
        public BaseHeads[] m_aDefaultSettings;
        public BaseHeads[] m_aBaseHeads;
        public int MorphFace;
        public int MorphAnimTree;
        public int MorphTargetSet;
        public bool PlayerIsMale;
    }
    public class SFXMPCharacterRecord : Object
    {
        public string CharacterName;
        public PowerRecord[] Powers;
        public WeaponRecord[] Weapons;
        public WeaponModRecord[] WeaponMods;
        public SaveTimeStamp TimeStamp;
        public NameReference className;
        public NameReference KitName;
        public int Tint1ID;
        public int Tint2ID;
        public int PatternID;
        public int PatternColorID;
        public int PhongID;
        public int EmissiveID;
        public int SkinToneID;
        public float SecondsPlayed;
        public int TalentPointsAvailable;
        public bool TalentPointsInitialized;
        public bool Deployed;
        public bool LeveledUp;
        public bool bSerializedFromBlaze;
    }
    public class SFXMPClassRecord : Object
    {
        public int[] Characters;
        public NameReference className;
        public int Level;
        public float XPOffset;
        public int NumPromotions;
    }
    public class SFXMPEventTicker : Object
    {
    }
    public class SFXMutator : Mutator
    {
    }
    public class SFXMutator_DifficultySpeed : SFXMutator
    {
    }
    public class SFXNav_WayPoint : NavigationPoint
    {
        public float m_fDelay;
        public float m_fMoveOffset;
        public bool m_bPrecisionMovement;
        public bool m_bMaintainVelocity;
    }
    public class SFXNav_ActionStationWP : SFXNav_WayPoint
    {
    }
    public class SFXNav_BlockingPathNode : PathNode
    {
        public int PathBlockingVolume;
    }
    public class SFXNav_BoostNode : SFXNav_BlockingPathNode
    {
        public int BoostDest;
        public float BoostDistX;
        public float BoostDistZ;
        public bool bTopNode;
    }
    public class SFXNav_ClimbWallNode : SFXNav_BlockingPathNode
    {
        public int ClimbDest;
    }
    public class SFXNav_ForcedPathNode : NavigationPoint
    {
        public float m_fForcedRadius;
        public float m_fForcedHeight;
    }
    public class SFXNav_GoalPoint : NavigationPoint
    {
        public int m_nPriority;
        public int m_nOverridePriority;
        public bool m_bIsFinalGoal;
    }
    public class SFXNav_InteractionPoint : PathNode
    {
        public int InteractionCustomActionID;
        public int AnimInfo;
        public int PistolAnimInfo;
        public bool bPreciseLocation;
        public bool bPreciseRotation;
        public bool bModifyPerception;
    }
    public class SFXNav_InteractionHenchCover : SFXNav_InteractionPoint
    {
    }
    public class SFXNav_InteractionHenchManual : SFXNav_InteractionPoint
    {
    }
    public class SFXNav_JumpDownNode : SFXNav_BlockingPathNode
    {
        public int JumpDownDest;
        public int TouchingCylinder;
        public float JumpDownDistX;
        public float JumpDownDistZ;
        public bool bTopNode;
    }
    public class SFXNav_JumpNode : SFXNav_BlockingPathNode
    {
        public int[] JumpDest;
        public Vector LandingOffset;
        public int TouchingCylinder;
        public float JumpDist;
    }
    public class SFXNav_KaiLengShield : PathNode
    {
    }
    public class SFXNav_LadderNode : SFXNav_BlockingPathNode
    {
        public int LadderDest;
        public int AnimInfo;
        public float LadderDistX;
        public float MaxJumpHeight;
        public bool bTopNode;
        public bool bDisabled;
    }
    public class SFXNav_LargeBoostNode : SFXNav_BlockingPathNode
    {
        public int BoostDest;
        public float BoostDistX;
        public float BoostDistZ;
    }
    public class SFXNav_LargeClimbNode : PathNode
    {
        public int ClimbDest;
        public bool bTopNode;
    }
    public class SFXNav_LargeMantleNode : PathNode
    {
        public int MantleDest;
    }
    public class SFXNav_LeapNodeBase : SFXNav_BlockingPathNode
    {
        public int[] LeapDest;
        public Vector LandingOffset;
    }
    public class SFXNav_LeapNodeHumanoid : SFXNav_LeapNodeBase
    {
    }
    public class SFXNav_LeapNodeLarge : SFXNav_LeapNodeBase
    {
    }
    public class SFXNav_PlayAnimWP : SFXNav_WayPoint
    {
        public NameReference AnimName;
        public EBodyStance eStance;
    }
    public class SFXNav_SpawnEntrance : PathNode
    {
    }
    public class SFXNav_TurretPoint : PathNode
    {
        public bool bClaimed;
    }
    public class SFXNuiSpeech_Combat : Object
    {
        public Vector TargetLocation;
        public int SelectionTarget;
        public int Target;
    }
    public class SFXNuiSpeech_Explore : Object
    {
    }
    public class SFXOperation_ObjectiveSpawnPoint : BioStartLocation
    {
        public string[] SupportedSpawnTags;
        public float Weight;
        public int CombatZone;
        public int AnnexZoneLocation;
        public EObjectiveLocation SpawnLocation;
    }
    public class SFXObjectiveDrawSpawnPointComponent : PrimitiveComponent
    {
        public SFXObjectiveSpawnLocationSize[] SpawnLocationExtents;
        public LinearColor LineColor;
    }
    public class SFXObjectPool : Actor
    {
        public SFXObjectPoolTracers[] TracerPool;
        public SFXObjectPoolProjectiles[] ProjectilePool;
        public SFXObjectPoolDroppedAmmos[] DroppedPool;
        public SFXObjectPoolImpactPSCs[] ImpactPSCPool;
        public SFXObjectPoolPSCs[] GenericPSCPool;
        public SFXObjectPoolEmitters[] EmitterPool;
        public int WwiseACPool;
        public int MaxTracers;
        public int MaxImpacts;
        public int WwiseNextIdx;
        public bool bDebugLogOnCleanup;
    }
    public class SFXOnlineComponentMatchMakingBot : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponentMatchMakingBot;
        public float mNextActionDelay;
        public float IdleTimeBetweenActions;
        public float ActionProbability_Disconnect;
        public float ActionProbability_Back;
        public float ActionProbability_Forward;
        public bool mActivated;
        public bool SimulateDisconnect;
        public bool FastForwardMode;
    }
    public class SFXSFHandler_EANetworking : SFXGUIMovieLegacyAdapter
    {
        public int __GuiCallback_SubmitIntroPage__Delegate;
        public int __GuiCallback_SubmitNucleusLogin__Delegate;
        public int __GuiCallback_SubmitMessageBox__Delegate;
        public int __GuiCallback_SubmitRedeemCodeConfirmation__Delegate;
        public int __GuiCallback_SubmitCreateNucleusAccount__Delegate;
        public int __GuiCallback_SubmitTermsOfService__Delegate;
        public int __GuiCallback_SubmitNucleusWelcomeMessage__Delegate;
        public int __GuiCallback_SubmitCerberusIntro__Delegate;
        public int __GuiCallback_SubmitRedeemCode__Delegate;
        public int __GuiCallback_SubmitCerberusWelcomeMessage__Delegate;
        public int __GuiCallback_SubmitCreateNucleusAccountEx__Delegate;
        public int __GuiCallback_SubmitEmailPasswordMismatch__Delegate;
        public int __GuiCallback_SubmitAccountDemographics__Delegate;
        public int __GuiCallback_SubmitParentEmail__Delegate;
        public int __OnGFxScreenVisibilityChange__Delegate;
        public int m_srKeyboardEmailTitle;
        public int m_srKeyboardPasswordTitle;
        public int m_srCerberusCodeTitle;
        public int m_nMaxEmailLength;
        public int m_nMaxPasswordLength;
        public int m_nMaxCerberusCodeLength;
        public int m_srOk;
        public int m_srCancel;
        public int m_srConfirmCodeRedemptionTitle;
        public int m_srConfirmCodeRedemptionText;
    }
    public class SFXOnlineComponentUI : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponentUserInterface;
        public int __ExternalCallback_OnDisplayNotification__Delegate;
        public int __ExternalCallback_ClearNotifications__Delegate;
        public int __ExternalCallback_SetState__Delegate;
        public int __ExternalCallback_CloseEANetworking__Delegate;
        public int __ExternalCallback_HasCerberusDLC__Delegate;
        public int __ExternalCallback_ShowStore__Delegate;
        public NameReference HandlerId;
    }
    public class SFXOnlineGameEntryFlow : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponentGameEntryFlow;
        public UniqueNetId ZeroId;
        public NameReference PopupName;
        public int DeferredGameSettings;
        public int srJoiningGame;
        public int srConnecting;
        public int srInvalidControllerJoin;
        public int srMultiplayerUpdate;
        public int srDownloadRequiredDataError;
        public int srOK;
        public int srCancel;
        public int srAlreadyConnected;
        public int srOnlinePassRequired;
        public int KismetEventTicksDelay;
        public byte InvitePlatformData;
        public MPFlowType m_FlowType;
        public SFXOnlineUIState m_LoginUIState;
    }
    public class SFXOnlinePlayerStorage : OnlinePlayerStorage
    {
        public float fMinDelayBetweenWrite;
        public int iMaxBytesPerStorage;
    }
    public class SFXSaveManagerMP : Object
    {
        public MPTutorialPromoMessage DefaultTutorialMessage;
        public MPClassData[] MPClasses;
        public MPKitData[] MPKits;
        public int[] Classes;
        public int[] Characters;
        public MPFaceCodeData[] FaceCodes;
        public StartingMPPlayerVariable[] DefaultMPPlayerVariables;
        public NewReinforcementData[] NewReinforcements;
        public EReinforcementGUICategory[] ValidNewReinforcementCategories;
        public PendingSaveOperation[] PendingSaveOperations;
        public PendingLoadOperation[] PendingLoadOperations;
        public ActiveMatchConsumable[] ActiveMatchConsumablesForOfflineTransfer;
        public string NewlyAffordableStoreItemsPlayerVariableName;
        public int __OnSaveRecordsDelegate__Delegate;
        public int __OnRefreshMPDataDelegate__Delegate;
        public int MaxMPLevelBonus;
        public int AvailableCredits;
        public int NextPackToConsume;
        public int NumCopiesToConsume;
        public int TotalCreditsSpent;
        public int TotalPlatformCurrencySpent;
        public int TotalGamesPlayed;
        public int TotalTimePlayed;
        public int LastLevelUpTime;
        public int OnlineSave;
        public int srTooNewErrorMessage;
        public int srTooNewErrorMessageBoxOK;
        public int CurrentCharacter;
        public int CurrCharacterToModify;
        public bool bInitialized;
        public bool bDisableSaving;
        public bool m_bDebugPlayerVariables;
        public bool m_bSaveInProgress;
        public bool m_bLoadInProgress;
    }
    public class SFXOnlineSaveGameMP : Object
    {
        public string ServerBaseString;
        public string ServerNewReinforcementsString;
        public string[] ServerClassStrings;
        public string[] ServerCharacterStrings;
        public string ServerFaceCodesString;
        public int DevelopmentVersionNumber;
    }
    public class SFXOperation_ObjectiveData : Object
    {
        public string ObjectiveType;
        public string AssetPath;
        public string[] RequiredSpawnTags;
        public SFXOperation_ObjectiveMeshInfo[] MeshAssets;
        public string ChosenMeshUniqueString;
        public float MinDistanceFromPlayerForSpawn;
        public bool PerformVisibilityCheckForSpawn;
    }
    public class SFXOutlineGlowActorBase : Actor
    {
        public LinearColor SeeThroughSmokeColour;
        public Vector SmokeLineOfSightOffset;
        public NameReference ColourParam;
        public NameReference MultiplierParam;
        public float BlendTime;
        public int GlowMaterial;
        public float PostDeathGlowDuration;
        public bool bSourceDied;
    }
    public class SFXOutlineGlowActorMP : SFXOutlineGlowActorBase
    {
        public LinearColor AliveColour;
        public LinearColor DyingColour;
        public LinearColor EnemyColour;
        public float RenderDelay;
    }
    public class SFXOutlineGlowActorSP : SFXOutlineGlowActorBase
    {
        public LinearColor EnemyColour;
        public LinearColor HenchmenColour;
    }
    public class SFXParticleModule_CameraEffect : BioParticleModuleBase
    {
        public RawDistributionFloat RawIntensityVsDistanceDistribution;
        public ScreenShakeStruct ProgrammaticShake;
        public float MaxRange;
        public int FrameBufferEffect;
        public float Duration;
        public bool bPlayerImpact;
        public bool bUseIntensityCurve;
        public bool bPlayProgrammaticShake;
    }
    public class SFXPath_AvoidClaimedCover : PathConstraint
    {
    }
    public class SFXPath_AvoidFireFromCover : PathConstraint
    {
        public EnemyCoverInfo[] EnemyList;
        public int AI;
    }
    public class SFXPath_AvoidPlayer : PathConstraint
    {
    }
    public class SFXPath_AwayFromGoal : PathConstraint
    {
        public int GoalActor;
        public float fDistAway;
    }
    public class SFXPath_TowardCombatZone : PathConstraint
    {
        public Vector CombatZoneOrigin;
    }
    public class SFXPath_WithinPlaypen : PathConstraint
    {
    }
    public class SFXPathWeightLog : Object
    {
    }
    public class SFXPawn : BioPawn
    {
        public ReplicatedGib ReplicatedGibInfo;
        public PowerImpactNotification[] PowerImpactNotifications;
        public ScreenShakeStruct FootstepShake;
        public Guid HeadCapGuid;
        public NameReference MuzzleSocketName;
        public NameReference ShellCasingSocketName;
        public int PS_HeadGib;
        public int PS_LimbGib;
        public int CE_HeadGibCap;
        public int PlayerHeadShot;
        public int NonPlayerHeadShot;
        public int AmbientVoc;
        public int PainVoc;
        public int ShieldsDownVoc;
        public int MoveToCoverVoc;
        public int MeleedVoc;
        public int PrettyName;
        public float fThreatDuration;
        public float fAssistVocDelay;
        public float AmmoDropPct;
        public int MaxConsumeTickets;
        public float PowerControlResistance;
        public int CodexPlotState;
        public float DamageScoreBudget;
        public float KillBonusScore;
        public float PowerControlAssistBudget;
        public int srScoreTickerEntry;
        public int srScoreTickerValueToken;
        public int FootstepForceFeedback;
        public bool bAllowHeadGib;
        public bool bPlayFootstepScreenShake;
        public bool bPlayFootstepRumble;
        public bool bLimitConsoleLOD;
        public bool bCanPartialLean;
        public bool bSupportsVisibleWeapons;
        public bool bCanBeEaten;
        public bool bCorpseDestroyed;
        public bool bRecentlyDeceased;
        public bool bCanUseTurrets;
        public bool bCanDriveAtlas;
        public bool bCanBeRepaired;
        public bool bCanBeMarauderBuffed;
        public bool bCanBeMeleed;
        public bool bIgnoreTarget;
        public bool bIgnoresPets;
        public bool bScoreDistributed;
        public bool bIsPet;
        public bool bCanDropAmmo;
    }
    public class SFXPawn_PlayerParty : SFXPawn
    {
        public PowerUnlockRequirement[] PowerUnlockRequirements;
        public int[] SquadScreenPowerOrder;
        public PowerStartingRank[] StartingPowerRanks;
        public PowerAutoLevelUp[] AutoLevelUpInfo;
        public int UIWorldArchetype;
        public float fTimeToRevive;
        public float fPostResInvulnerability;
        public float fReviveRange;
        public int Reviver;
        public bool bHelmetHidesHead;
        public bool bHelmetHidesHair;
        public bool bHelmetAffectsVO;
        public bool bHelmetIsFull;
        public bool bBeingRevived;
        public bool bRecentlyResurrected;
        public bool bDamagedHarvester;
    }
    public class SFXPawn_Henchman : SFXPawn_PlayerParty
    {
        public int[] ArmorBonuses;
        public int[] ArmorBonusStrings;
        public HenchmanInfoStruct[] HenchmenInfo;
        public NameReference m_nmMappedPower;
        public int m_GUI_Icon;
    }
    public class SFXPawn_Player : SFXPawn_PlayerParty
    {
        public ScaledFloat WeaponEncumbranceModifiers;
        public string firstName;
        public string PlayerClassName;
        public string faceCode;
        public PermanentGameEffect[] PermanentGameEffects;
        public int[] EncumbranceCapacityBonuses;
        public ArmorEffectDescription[] ArmorEffectDescriptions;
        public int __AsyncUpdating_OnCompleted__Delegate;
        public ScreenShakeStruct HitShake;
        public ScreenShakeStruct ZoomHitShake;
        public ScreenShakeStruct CoverShake;
        public Guid CharacterGUID;
        public Vector CamperAverageLoc;
        public NameReference PermanentGameEffect_CategoryPrefix;
        public NameReference EncumbranceEffectName;
        public NameReference PrimaryWeapon;
        public NameReference SecondaryWeapon;
        public Vector2D PopUpDamageMultiplier;
        public int CasualID;
        public int FullBodyID;
        public int TorsoID;
        public int ShoulderID;
        public int ArmID;
        public int LegID;
        public int SpecID;
        public int Tint1ID;
        public int Tint2ID;
        public int PatternID;
        public int PatternColorID;
        public int HelmetID;
        public int EmissiveID;
        public int PlayerCombatVoc;
        public int PlayerExplorationVoc;
        public int PlayerStealthVoc;
        public int GenericPlayerCombatVoc;
        public int MalePhys;
        public int FemalePhys;
        public int PlayerClass;
        public float OutOfAmmoSwapThreshold;
        public int ShieldImpactSound;
        public int ImpactSound;
        public int m_GUI_Icon;
        public int CampingTickCounter;
        public float CampingTolerance;
        public float CamperBusterDelay;
        public float EncumbranceCapacity;
        public float EncumbranceMinCooldown;
        public float EncumbranceMaxCooldown;
        public float CurrentWeaponEncumbrance;
        public int EnterCoverSound;
        public int EnterCoverVoc;
        public int CoverForceFeedback;
        public int CoverEnterFoleySound;
        public float LastCoverEnterDistance;
        public float PopUpDamageMultiplierDuration;
        public int MaxTotalReputation;
        public float ParagonScarBias;
        public float FullParagonScarBiasValue;
        public float NoParagonScarBiasValue;
        public bool bUseCasualAppearance;
        public bool bIgnoreHeadOffsetsInMeshMerge;
        public EPlayerAppearanceType CombatAppearance;
        public EOriginType Origin;
        public ENotorietyType Notoriety;
    }
    public class SFXPawn_PlayerAdept : SFXPawn_Player
    {
    }
    public class SFXPawn_PlayerNonCombat : SFXPawn_Player
    {
    }
    public class SFXPawn_PlayerAdeptNonCombat : SFXPawn_PlayerNonCombat
    {
    }
    public class SFXPawn_PlayerEngineer : SFXPawn_Player
    {
    }
    public class SFXPawn_PlayerEngineerNonCombat : SFXPawn_PlayerNonCombat
    {
    }
    public class SFXPawn_PlayerInfiltrator : SFXPawn_Player
    {
    }
    public class SFXPawn_PlayerInfiltratorNonCombat : SFXPawn_PlayerNonCombat
    {
    }
    public class SFXPawn_PlayerSentinel : SFXPawn_Player
    {
    }
    public class SFXPawn_PlayerSentinelNonCombat : SFXPawn_PlayerNonCombat
    {
    }
    public class SFXPawn_PlayerSoldier : SFXPawn_Player
    {
    }
    public class SFXPawn_PlayerSoldierNonCombat : SFXPawn_PlayerNonCombat
    {
    }
    public class SFXPawn_PlayerVanguard : SFXPawn_Player
    {
    }
    public class SFXPawn_PlayerVanguardNonCombat : SFXPawn_PlayerNonCombat
    {
    }
    public class SFXPhysicalMaterialBase : Object
    {
    }
    public class SFXPhysicalMaterialDecals : SFXPhysicalMaterialBase
    {
        public int[] HeavyPistol;
        public int[] AutoPistol;
        public int[] HandCannon;
        public int[] SMG;
        public int[] Shotgun;
        public int[] HeavyShotgun;
        public int[] FlakGun;
        public int[] AssaultRifle;
        public int[] Needler;
        public int[] Machinegun;
        public int[] SniperRifle;
        public int[] AntiMatRifle;
        public int[] MassCannon;
        public int[] ParticleBeam;
        public float HeavyPistolFadeTime;
        public float AutoPistolFadeTime;
        public float HandCannonFadeTime;
        public float SMGFadeTime;
        public float ShotgunFadeTime;
        public float HeavyShotgunFadeTime;
        public float FlakGunFadeTime;
        public float AssaultRifleFadeTime;
        public float NeedlerFadeTime;
        public float MachinegunFadeTime;
        public float SniperRifleFadeTime;
        public float AntiMatRifleFadeTime;
        public float MassCannonFadeTime;
        public float ParticleBeamFadeTime;
    }
    public class SFXPhysicalMaterialFootSteps : SFXPhysicalMaterialBase
    {
        public int HHWalkingSound;
        public int HHRunningSound;
        public int WalkingSound;
        public int RunningSound;
        public int HLWalkingSound;
        public int HLRunningSound;
        public int RHWalkingSound;
        public int RHRunningSound;
        public int RMWalkingSound;
        public int RMRunningSound;
        public int RLWalkingSound;
        public int RLRunningSound;
        public int HuskWalkingSound;
        public int HuskRunningSound;
        public int CollectorWalkingSound;
        public int CollectorRunningSound;
        public int OtherWalkingSound;
        public int OtherRunningSound;
        public int Landing;
        public int Leaping;
        public int FootstepWalk;
        public int FootstepRun;
        public int TireSound;
    }
    public class SFXPhysicalMaterialImpactEffects : SFXPhysicalMaterialBase
    {
        public int HeavyPistol;
        public int AutoPistol;
        public int HandCannon;
        public int SMG;
        public int Shotgun;
        public int HeavyShotgun;
        public int FlakGun;
        public int AssaultRifle;
        public int Needler;
        public int Machinegun;
        public int SniperRifle;
        public int AntiMatRifle;
        public int MassCannon;
        public int ParticleBeam;
    }
    public class SFXPhysicalMaterialImpactSounds : SFXPhysicalMaterialBase
    {
        public int HeavyPistol;
        public int HeavyPistol_Player;
        public int AutoPistol;
        public int AutoPistol_Player;
        public int HandCannon;
        public int HandCannon_Player;
        public int SMG;
        public int SMG_Player;
        public int Shotgun;
        public int Shotgun_Player;
        public int HeavyShotgun;
        public int HeavyShotgun_Player;
        public int FlakGun;
        public int FlakGun_Player;
        public int AssaultRifle;
        public int AssaultRifle_Player;
        public int Needler;
        public int Needler_Player;
        public int Machinegun;
        public int Machinegun_Player;
        public int SniperRifle;
        public int SniperRifle_Player;
        public int AntiMatRifle;
        public int AntiMatRifle_Player;
        public int MassCannon;
        public int MassCannon_Player;
        public int ParticleBeam;
        public int ParticleBeam_Player;
        public int GraalShotgun;
        public int GraalShotgun_Player;
    }
    public class SFXPhysicalMaterialPhysics : SFXPhysicalMaterialBase
    {
        public int Sound;
        public int WwiseType;
    }
    public class SFXPhysicalMaterialProperty : PhysicalMaterialPropertyBase
    {
        public int PhysicalMaterialDecals;
        public int PhysicalMaterialImpactEffects;
        public int PhysicalMaterialImpactSounds;
        public int PhysicalMaterialFootSteps;
        public int PhysicalMaterialPhysics;
    }
    public class SFXPickupFactory : PickupFactory
    {
        public int LightEnvironment;
        public LightingChannelContainer LightingChannels;
    }
    public class SFXPlaceableBase : InterpActor
    {
        public Guid MyGuid;
        public bool bIsDeactivated;
        public bool bIsDestroyed;
    }
    public class SFXPlayerCamera : SFXCameraNativeBase
    {
        public InterpCurveFloat CameraRubberBandCurve;
        public TPOV CameraDesiredPosition;
        public int FaceTargetTransition;
        public float TransitionTimeout;
        public float CameraRubberBandMaxStretchLength;
        public float CameraRubberBandSpeed;
        public float RotationalDecay;
        public int MaxTransitionStackDepth;
        public int FreeCam;
        public int DefaultTransition;
    }
    public class SFXPlayerController : BioPlayerController
    {
        public int[] m_aPOIKismet;
        public int[] NavList;
        public NameReference[] SPMapNames;
        public NameReference[] SPN7MapNames;
        public int[] OnDestroyDelegates;
        public int __OnDestroyCallback__Delegate;
        public int m_pActivePOI;
        public int CurrentNavIdx;
        public int CurrentNavGoal;
        public int srConnectionLost;
        public int srHostLeft;
        public int srInviteFailure;
        public int srInviteGameFull;
        public int srInviterLeft;
        public int srInviteProtocolMismatch;
        public int srInviteMissingDLCInvitee;
        public int srInviteMissingDLCInviter;
        public int srMultiplayerUpdate;
        public int srPlayerKicked;
        public int nInviteWaitDelay;
        public int nMaxInviteWaitDelay;
        public int ObjectiveTimerPositionY;
        public float QuickMantleDelay;
        public bool bLeanDisabled;
    }
    public class SFXPlayerCustomization : Object
    {
        public CustomizableElement[] CasualAppearances;
        public CustomizableElement[] FullBodyAppearances;
        public CustomizableElement[] FullBodyHelmetAppearances;
        public CustomizableElement[] TorsoAppearances;
        public CustomizableElement[] ShoulderAppearances;
        public CustomizableElement[] ArmAppearances;
        public CustomizableElement[] LegAppearances;
        public CustomizableElement[] HelmetAppearances;
        public CustomizableElement[] SpecAppearances;
        public CustomizableElement[] Tint1Appearances;
        public CustomizableElement[] Tint2Appearances;
        public CustomizableElement[] PatternAppearances;
        public CustomizableElement[] PatternColorAppearances;
        public CustomizableElement[] EmissiveAppearances;
        public string FemaleIconicHeadMesh;
        public string MaleIconicHeadMesh;
        public string FemaleCustomMorphHead;
        public string MaleCustomMorphHead;
        public string MaleIconicFaceFXAsset;
        public string MaleMorphHeadFaceFXAsset;
        public string FemaleIconicFaceFXAsset;
        public string FemaleMorphHeadFaceFXAsset;
        public ScarInfo[] Scars;
        public int CosmeticSurgeryPlotID;
        public int CosmeticSUrgeryPlotID_ME3;
        public int N7ArmourName;
        public int N7ArmourDescription;
        public int IconicFemaleMaterialOverride;
    }
    public class SFXPlayerInventoryManager : SFXInventoryManager
    {
        public Vector2D InterpRange;
        public float Base_Acc_Standing;
        public float Base_Acc_Zoom;
        public float AccMod_Move;
        public float AccMod_ViewTurn;
        public float AccMod_Crouched;
        public float AccMod_MouseMultiplier;
        public float AccMod_MaxCameraLoss;
        public float Base_Interp_Speed;
        public float InterpMod_Move;
        public float InterpMul_ViewTurn;
        public float Accuracy;
    }
    public class SFXPowerCustomAction : SFXPowerCustomActionBase
    {
        public int[] m_ImpactedActors;
        public int[] Projectiles;
        public int[] ComboDetonators;
        public string[] PowerComboTypes;
        public BodyStance BS_StartCastAnimation;
        public BodyStance BS_EndCastAnimation;
        public EvolvedSoundStruct[] EvolvedImpactSounds;
        public EvolvedSoundStruct[] EvolvedReleaseSounds;
        public EvolvedSoundStruct[] EvolvedCastSounds;
        public EvolvedSoundStruct[] HenchmanEvolvedImpactSounds;
        public EvolvedSoundStruct[] HenchmanEvolvedReleaseSounds;
        public EvolvedSoundStruct[] HenchmanEvolvedCastSounds;
        public int DefaultDamageType;
        public int NonRagdollDamageType;
        public int ProjectileClass;
        public int DetonationRumbleClass;
        public int DetonationScreenShakeClass;
        public AreaEffectParameters DetonationParameters;
        public DelayedPowerComboData DelayedPowerCombo;
        public Vector CustomCasterCrustParameters;
        public NameReference ProjectileAttachPoint;
        public NameReference ReleaseEffectBoneName;
        public float ProjectileRadius;
        public float ReleaseTime;
        public float TimeSinceStart;
        public float LastPhysicsCallbackTime;
        public float MinTimeBetweenPhysicsCallbacks;
        public float PhysicsToDamageMultiplier;
        public float PowerAssistFullControlValue;
        public float PowerAssistPartialControlValue;
        public float PowerComboDelay;
        public int Recommended_TargetVulnerable;
        public int NotRecommended_TargetOrganic;
        public int NotRecommended_TargetMachine;
        public int NotRecommended_TargetHasShields;
        public int NotRecommended_TargetHasBiotics;
        public int NotRecommended_TargetHasArmor;
        public int NotRecommended_NoMedigel;
        public int NotRecommended_NoSquadMemberDead;
        public int NotRecommended_NoSquadMemberInjured;
        public int NotRecommended_WeaponPowerAlreadyOn;
        public int NotRecommended_TargetImmune;
        public int StatBarTitle_Damage;
        public int StatBarTitle_DamagePerSecond;
        public int StatBarTitle_Force;
        public int StatBarTitle_Cooldown;
        public int StatBarTitle_Duration;
        public int StatBarTitle_ImpactRadius;
        public int StatBarTitle_Range;
        public int StatBarTitle_ParagonRenegade;
        public int StatBarTitle_PowerDamage;
        public int StatBarTitle_WeaponDamage;
        public int StatBarTitle_WeightCapacity;
        public int StatBarTitle_HealthShield;
        public int StatBarTitle_MeleeDamage;
        public int StatBarTitle_HealthDamage;
        public int StatBarTitle_ArmorDamage;
        public int StatBarTitle_BarrierDamage;
        public int StatBarTitle_ShieldBarrierDamage;
        public int StatBarTitle_FreezeDuration;
        public int StatBarTitle_DamageReduction;
        public int StatBarToken_RawValue;
        public int StatBarToken_Force;
        public int StatBarToken_Time;
        public int StatBarToken_Distance;
        public int StatBarToken_Percent;
        public int StatBarToken_PositivePercent;
        public int StatBarToken_NegativePercent;
        public int CastAnimSet;
        public int HenchCastAnimSet;
        public int CastCameraAnim;
        public float CameraAnimPlayRate;
        public float CameraAnimBlendIn;
        public float CameraAnimBlendOut;
        public float CameraAnimDuration;
        public float fAnimPlayRate;
        public float fStartAnimBlendInTime;
        public float fStartAnimBlendOutTime;
        public float fEndAnimBlendInTime;
        public float fEndAnimBlendOutTime;
        public float fAnimStartTime;
        public int CE_CasterCrustTemplate;
        public int CE_TargetCrustTemplate;
        public int CE_ReleaseEffectTemplate;
        public int CE_ProjectileTemplate;
        public int CE_ImpactTemplate;
        public int ImpactSound;
        public int ReleaseSound;
        public int CastSound;
        public int HenchmanImpactSound;
        public int HenchmanReleaseSound;
        public int HenchmanCastSound;
        public int ImpactDistanceLayer;
        public int HenchmanImpactDistanceLayer;
        public int CancelCastSound;
        public int HenchmanCancelCastSound;
        public bool bProjectileUsePawnRotation;
        public bool bCustomImpactLogic;
        public bool ImpactDeadPawns;
        public bool ImpactFriends;
        public bool ImpactPlaceables;
        public bool BlockedByObjects;
        public bool BuffAppliesToSquad;
        public bool bPowerStarted;
        public bool bPowerReleased;
        public bool RestoreCoverAction;
        public bool WaitingOnLeanOut;
        public bool LeanOutToCast;
        public bool bOverrideComboDetonate;
        public bool bDynamicLoadAnimSet;
        public bool bPlayStartCastAnim;
        public bool bPlayEndCastAnim;
        public bool bAllowAnimInterrupt;
        public bool bCustomCasterCrustParameters;
        public bool bReleaseFBUsesEffectDuration;
        public bool bCustomImpactSound;
        public EBioCapabilityTypes CapabilityType;
        public EBioCapMode Discipline;
        public ECoverAction InitialCoverAction;
        public ECastingPhase CastingPhase;
        public ERootMotionMode ERootMotionMode;
    }
    public class SFXPower : Object
    {
        public float[] ImpactRadius;
        public float[] EffectDuration;
        public float[] Damage;
        public float[] Force;
        public RankInfo[] Ranks;
        public int[] RankCosts;
        public UnlockRequirement[] UnlockRequirements;
        public int PowerScriptClass;
        public int EvolvedPowerClass1;
        public int EvolvedPowerClass2;
        public NameReference PowerName;
        public NameReference BaseName;
        public Vector2D CastingTime;
        public Vector2D CooldownTime;
        public Vector2D GlobalCooldownTime;
        public Vector2D MinimumRange;
        public Vector2D MaximumRange;
        public Vector2D VFXIntensity;
        public Vector2D ProjectileSpeed;
        public Vector2D ProjectileRadius;
        public Vector2D ConeHalfAngle;
        public int DisplayName;
        public int Description;
        public int ImpactText;
        public int Icon;
        public int Animations;
        public float ReleasePlayRate;
        public float DynamicCooldownBonus;
        public float DynamicDurationBonus;
        public float DynamicDamageBonus;
        public float Rank;
        public float MaxRank;
        public float DelayBeforeFirstUse;
        public float DelayBetweenUses;
        public float TimeUntilNextUse;
        public int TalentDescription;
        public int WheelDisplayIndex;
        public bool UsesSharedCooldown;
        public bool BlockedByObjects;
        public bool AimingIgnoresObstructions;
        public bool StopOnFirstHit;
        public bool CanMoveWhileCasting;
        public bool DisplayInHUD;
        public bool AISelectable;
        public bool IsHenchmenUnique;
        public bool DisplayInCharacterRecord;
        public EBioPowerType PowerType;
        public EBioCapabilityTypes CapabilityType;
        public EBioCapMode Discipline;
        public ESFXVocalizationEventID VocalizationEvent;
    }
    public class SFXPowerCustomAction_AmmoPowerBase : SFXPowerCustomAction
    {
    }
    public class SFXPowerCustomAction_PassivePower : SFXPowerCustomAction
    {
    }
    public class SFXPowerCustomAction_MeleePassivePower : SFXPowerCustomAction_PassivePower
    {
        public PowerData MeleeDamage;
        public PowerData MeleeForce;
        public PowerData MeleeImpactRadius;
        public PowerData MeleeConeAngle;
        public PowerData HeavyMeleeDamage;
        public PowerData HeavyMeleeForce;
        public PowerData HeavyMeleeImpactRadius;
        public PowerData HeavyMeleeConeAngle;
        public PowerData CoverMeleeImpactRadius;
        public NameReference MeleeKillCategory;
    }
    public class SFXPowerCustomAction_ParagonRenegade : SFXPowerCustomAction_PassivePower
    {
        public PowerData ParagonRenegadeModifier;
    }
    public class SFXPreAsyncWorkTicker : Actor
    {
        public SFXPreAsyncWorkQueuedShot[] QueuedShots;
        public SFXPreAsyncWorkQueuedPowerImpact[] QueuedPowerImpacts;
        public int __OnActorImpacted__Delegate;
    }
    public class SFXPRI_NativeBase : PlayerReplicationInfo
    {
    }
    public class SFXPRI : SFXPRI_NativeBase
    {
        public ActiveMatchConsumable ActiveMatchConsumables;
        public int TotalPointsAtStartOfWave;
        public float PointsEarned;
        public float CreditsEarned;
        public float ScoreReplicationPeriod;
    }
    public class SFXProfileSettings : OnlineProfileSettings
    {
        public BonusPowerUnlockData[] BonusPowerUnlockDataArray;
        public int MinReadinessRating;
    }
    public class SFXProjectile : Projectile
    {
        public int Mesh;
        public int ProjEffectsTrail;
        public int ProjEffectsHead;
        public int ProjEffectsTrailTemplate;
        public int ProjEffectsHeadTemplate;
        public int CE_ProjectileTemplate;
        public float ProjEffectsTrailWaitTime;
        public float LatestExplodeTime;
        public float ExplodeTimeOut;
        public float CoefficientOfRestitution;
        public float CoefficientOfFriction;
        public float ExplodeSpeedThreshold;
        public int BounceSound;
        public int TargetProjectile;
        public float PredictionInitialSpeedGain;
        public float PredictionMaxSpeedGain;
        public float PredictionSpeedInterpolationSpeed;
        public float PredictionAccelerationRate;
        public float InitEventEndReplicationTime;
        public float ExplosionEventEndReplicationTime;
        public bool bSuppressAudio;
        public bool bShuttingDown;
        public bool bArcing;
        public bool bBouncing;
        public bool bStopAiming;
        public bool bClientPredictProjectile;
        public bool bClientPredictionActive;
        public bool bClientPredictionTarget;
        public bool bGotAPredictionTarget;
        public bool bPooled;
        public bool bActive;
    }
    public class SFXProjectile_Explosive : SFXProjectile
    {
        public int ExplodeRumbleClass;
        public NameReference DecalDissolveParamName;
        public int ExplosionSound;
        public int AdditionalExplosionSound;
        public int StickPawnImpactSound;
        public int NPStickPawnImpactSound;
        public int StickShieldImpactSound;
        public int NPStickShieldImpactSound;
        public int StickEnvironmentImpactSound;
        public int NPStickEnvironmentImpactSound;
        public float DuckDistanceThreshold;
        public int WwiseDuckEvent;
        public float ExplosionLoudness;
        public float fFuseLength;
        public float StickExplodeDelay;
        public int ProjExplosionTemplate;
        public int CE_ExplosionTemplate;
        public int ExplosionDecal;
        public float DecalWidth;
        public float DecalHeight;
        public float DurationOfDecal;
        public float MaxEffectDistance;
        public float AccelRate;
        public float TossZ;
        public float TerminalVelocity;
        public float CustomGravityScaling;
        public float ExplosionParticleLifetime;
        public float ExplosionEffectRadius;
        public float MinExplodeRumbleDistance;
        public float MaxExplodeRumbleDistance;
        public bool bDuckAudio;
        public bool bUseHurtRadius;
        public bool bRandomizeFuse;
        public bool bAdvanceExplosionEffect;
        public bool bSuppressExplosionFX;
        public bool bArmed;
        public bool bStickPawns;
        public bool bStickWalls;
        public bool bProximityCheck;
        public bool bPlayExplodeForceFeedback;
    }
    public class SFXProjectile_PowerCustomAction : SFXProjectile_Explosive
    {
        public float ReplicatedTravelSpeed;
        public float PassThroughCoverDistSq;
    }
    public class SFXProjectile_PowerCustomAction_Grenade : SFXProjectile_PowerCustomAction
    {
        public float ProjectileSpeedMin;
        public float ProjectileSpeedMax;
        public float RotationsPerSecond;
        public int FuseSound;
        public int GrenadeWarningStartSound;
        public int GrenadeWarningStopSound;
        public bool bExploded;
    }
    public class SFXProjectile_Trajectory : Projectile
    {
    }
    public class SFXReachSpecPlaceholderCylinder : Actor
    {
        public int[] PawnsToIgnore;
    }
    public class SFXRpgPickupFactory : SFXPickupFactory
    {
    }
    public class SFXRumble_Explode : WaveFormBase
    {
        public float MinDetonationRumbleDistance;
        public float MaxDetonationRumbleDistance;
    }
    public class SFXRumble_Power : WaveFormBase
    {
        public float MinDetonationRumbleDistance;
        public float MaxDetonationRumbleDistance;
    }
    public class SFXSavedMove : SavedMove
    {
        public NameReference ControllerState;
        public int TimeStampMS;
        public int PawnDesiredYaw;
        public float MoveMag;
        public int AimDeltaRotYaw;
        public int AimDeltaRotPitch;
        public bool bIsInStationaryCover;
        public bool bWantsToStorm;
        public bool bStorming;
        public bool bCancelStorm;
        public bool bWantsToCrouch;
        public bool bWantsToPortArm;
        public bool bAimAssistActive;
        public bool bIsSniping;
        public ESFXSavedMoveType SavedMoveType;
        public ECoverType CoverType;
        public ECoverAction CoverAction;
        public ECoverDirection CoverDirection;
        public ECoverDirection CurrentSlotDirection;
    }
    public class SFXSaveGameCallback : Object
    {
        public int[] SaveCommandCompleteDelegates;
    }
    public class SFXSaveLoadWidgetProxy : Object
    {
        public int LoadingMessage;
        public int SavingMessage;
        public int DeletingMessage;
        public int NetworkMessage;
        public bool m_bShowMessage;
    }
    public class SFXSceneShopNodeKisVarCheck : SFXSceneShopNode
    {
        public NameReference m_nmKismetBoolVarName;
    }
    public class SFXSceneShopNodePlotCheck : SFXSceneShopNode
    {
        public SFXSSPlotValue[] m_aValuesToCheck;
        public int m_nIndex;
        public EBioRegionAutoSet Region;
        public EBioPlotAutoSet Plot;
        public ESFXSSPlotVarType VarType;
        public EBioAutoSet Variable;
    }
    public class SFXSceneShopNodeScene : SFXSceneShopNode
    {
        public int m_pLinkedScene;
    }
    public class SFXSceneShopNodeStart : SFXSceneShopNode
    {
    }
    public class SFXScoreManager : Object
    {
        public DifficultyScoreMultiplier[] DifficultyScoreMultipliers;
        public CreditBudget[] CreditBudgets;
        public MedalDefinition[] PlayerMedalDefinitions;
        public MedalDefinition[] SquadMedalDefinitions;
        public float ScoreMultiplier;
        public int srKillScoreTag;
        public int srAssistScoreTag;
        public int srObjectiveScoreTag;
        public float ScorePerExtractedPlayer;
        public float RandomFactionScoreBonus;
        public float RandomMapScoreBonus;
        public float KillstreakMedalWindow;
        public int srCreditsEarned;
        public int srBonusCreditsEarned;
    }
    public class SFXSeqAct_3DCeberusStateChange : SequenceAction
    {
        public Cerberus3DState m_eCerberus3DStateChange;
    }
    public class SFXSeqAct_AddCombatZone : SequenceAction
    {
        public int[] CombatZones;
        public int Squad;
    }
    public class SFXSeqAct_AIFactory2 : SequenceAction
    {
        public Vector[] ClusterOffsets;
        public AISpawnInfo[] SpawnSets;
        public int[] SpawnPoints;
        public int[] PendingSpawnedPawns;
        public int SpawnerActor;
        public int ProjectileStartLocation;
        public int NumDeadThreshold;
        public int DeadCount;
        public int DefaultSquad;
        public bool bAllSpawned;
        public bool bAllDead;
        public bool bAbortSpawns;
        public bool bEnteredCombat;
        public bool bResetDeadLinkCount;
        public bool bActivatedDeadLink;
        public bool bPreventSave;
        public ESpawnSortType SpawnSelectionType;
    }
    public class SFXSeqAct_AIGoHere : BioSequenceLatentAction
    {
        public float m_fTimeOut;
        public float m_fInvalidateRange;
        public bool m_bInvalidateOnFlank;
        public bool m_bInstanceLogging;
    }
    public class SFXSeqAct_AutoLevelPlayer : SequenceAction
    {
        public MissionScore[] MissionScores;
        public int FullGameExperience;
        public float SideContentXP;
    }
    public class SFXSeqAct_AwardEndGameAchievements : SequenceAction
    {
        public int PlayedME2VarIndex;
    }
    public class SFXSeqAct_AwardGAWAsset : BioSequenceLatentAction
    {
        public string Text;
        public string AssetName;
        public int srErrorText;
        public int srAButton;
        public int Id;
        public bool m_bFinished;
        public bool m_bWasPaused;
        public SFX_MB_Skin m_Skin;
        public SFX_MB_TextAlign m_TextAlign;
    }
    public class SFXSeqAct_AwardGAWAsset_Silent : SequenceAction
    {
        public string AssetName;
        public int Id;
    }
    public class SFXSeqAct_AwardGAWAssetsForLevel : SequenceAction
    {
    }
    public class SFXSeqAct_AwardResource : SequenceAction
    {
        public int ResourcePercent;
        public bool bAbsoluteAmount;
        public bool bIsSalvage;
        public ETreasureType TreasureType;
    }
    public class SFXSeqAct_AwardTreasure_Base : SequenceAction
    {
        public ETreasureIndex TREASURE;
    }
    public class SFXSeqAct_AwardTreasure : SFXSeqAct_AwardTreasure_Base
    {
    }
    public class SFXSeqAct_BeginIllusiveManConflict : SeqAct_Latent
    {
        public float[] Difficulty;
        public ScreenShakeStruct Shake;
        public Vector AndersonOffset;
        public Vector IllusiveManOffset;
        public NameReference AndersonBoneName;
        public NameReference IllusiveManBoneName;
        public int Anderson;
        public int IllusiveMan;
        public float PushSpeed;
        public float PushInputLockoutTime;
        public float PushMiniGameStartingPercent;
        public float PushMiniGameVictoryPercent;
        public float MinStrength;
        public float MaxStrength;
        public float Threshold;
        public float BaseDamageAmount;
        public float CameraShakeMinDot;
        public int StartingDifficulty;
        public bool bLastSideWasAnderson;
        public bool bRunning;
    }
    public class SFXSeqAct_CanAffordTreasure : SequenceAction
    {
        public int nState;
    }
    public class SFXSeqAct_ChangeBehaviour : SequenceAction
    {
        public int ControllerClass;
        public NameReference nmBehaviour;
        public int oPawn;
        public EBioAutoSet eBehaviour;
    }
    public class SFXSeqAct_CharCreateClass : SequenceAction
    {
    }
    public class SFXSeqAct_CharCreateCrust : SeqAct_Latent
    {
    }
    public class SFXSeqAct_CheckResourceBudget : SequenceAction
    {
    }
    public class SFXSeqAct_ChooseLoadoutBase : SeqAct_Latent
    {
        public int[] ModMenu_ModClasses;
        public string ShepardImage;
        public int __OnFinished__Delegate;
        public int ModMenu_WeaponClass;
        public int srButtonText_Choose;
        public int srButtonText_Exit;
        public int srButtonText_SquadWeapons;
        public int srButtonText_CustomizeSquadWeapons;
        public int srButtonText_CustomizeWeapons;
        public int srButtonText_Accept;
        public int srButtonText_Back;
        public int srWeaponMenuSubHeading;
        public int srLeftBracketToken;
        public int srRightBracketToken;
        public int srWeaponClassTokenString;
        public int srClassDescriptionTokenString;
        public int srPawnActiveWeaponsString;
        public int srShepardNameString;
        public int srWeaponDescriptionTokenString;
        public int srModsEntryName;
        public int srModsEntryDescription;
        public int srModsMenuSubTitle;
        public int srModsSubMenuSubTitle;
        public int srSingleCustomToken;
        public int srModTokenizedName;
        public int srModAttachDetach;
        public int srModInstalled;
        public int ModsTopMenuIndex;
        public int ModsSelectedWeapon;
        public int srWeaponGroupEntryName;
        public int srWeaponGroupEntryDescription;
        public int srWeaponGroupTokenizedName;
        public int srWeaponGroupActive;
        public int srWeaponGroupRequired;
        public int srWeaponGroupSubTitle;
        public int WeaponGroupSelection;
        public int WeaponEquipSound;
    }
    public class SFXSeqAct_CloseChoiceGui : SequenceAction
    {
        public NameReference m_nmTag;
    }
    public class SFXSeqAct_CloseGalaxyMap : SequenceAction
    {
    }
    public class SFXSeqAct_CoverUserEvade : SequenceAction
    {
    }
    public class SFXSeqAct_CreateNotification : SequenceAction
    {
        public NameReference nRemoteEvent;
        public int Priority;
        public int sTitle;
        public int sSubtitle;
        public int sBody;
        public float fDisplayTime;
        public int oImage;
    }
    public class SFXSeqAct_DefendActor : SequenceAction
    {
    }
    public class SFXSeqAct_DummyWeaponFire : SeqAct_Latent
    {
        public int WeaponClass;
        public DummyFireObjectListParams MultipleTargetParams;
        public DummyFireObjectListParams MultipleOriginParams;
        public NameReference OriginSocketName;
        public int ShotsToFire;
        public float InaccuracyDegrees;
        public int SpawnedWeapon;
        public float RemainingFireTime;
        public int ShotsFired;
        public int ReplicatedActor;
        public bool bShootUntilStopped;
        public bool bStopped;
        public bool bFinished;
        public bool bSuppressMuzzleFlash;
        public bool bSuppressTracers;
        public bool bSuppressImpactFX;
        public bool bSuppressAudio;
        public bool bSuppressDamage;
        public bool bDamagesFriends;
        public bool bFiring;
        public bool bAlignWeaponMeshToSocket;
        public bool bSuppressCameraShake;
        public bool bSuppressLineCheck;
        public byte FiringMode;
        public byte TeamIndex;
    }
    public class SFXSeqAct_EnableAI : SeqAct_Latent
    {
        public bool m_bEnable;
        public bool m_bFirstPass;
    }
    public class SFXSeqAct_FireWeaponAt : SeqAct_Latent
    {
        public int oPawn;
        public int oTarget;
        public float fTimeOut;
        public float fAttackDuration;
        public int nCompletionReason;
        public float m_fTotalTimeRunning;
        public int m_nReason;
        public bool bCheckLOS;
        public bool bForceShoot;
        public bool m_bDone;
    }
    public class SFXSeqAct_FlushAsyncWork : SequenceAction
    {
    }
    public class SFXSeqAct_ForceCombatOn : SequenceAction
    {
    }
    public class SFXSeqAct_FreezeLevelStreaming : SequenceAction
    {
    }
    public class SFXSeqAct_GenerateVocEvent : SequenceAction
    {
        public int oInstigator;
        public int oRecipient;
        public float fDelay;
        public float fChanceToPlayMod;
        public ESFXVocalizationEventID oEventID;
    }
    public class SFXSeqAct_GetCurrentGoal : SequenceAction
    {
        public int oGoal;
        public int nPriority;
    }
    public class SFXSeqAct_GetTreasureImage : SequenceAction
    {
        public int nTreasureId;
        public int oImage;
    }
    public class SFXSeqAct_GivePlotWeapon : SeqAct_Latent
    {
        public int WeaponClass;
        public int srText;
        public int srAButton;
        public int srNoSquadMembers;
        public int ShepardName;
        public int srSquadListTokens;
        public bool bAutoEquip;
        public bool bShowPopup;
        public bool m_bFinished;
        public bool m_bWasPaused;
        public SFX_MB_Skin m_Skin;
        public SFX_MB_TextAlign m_TextAlign;
    }
    public class SFXSeqAct_GiveWeapon : SequenceAction
    {
        public int[] WeaponList;
        public bool bClearExisting;
        public bool bForceReplace;
    }
    public class SFXSeqAct_HarvesterLand : SeqAct_Latent
    {
        public int AnchorActor;
        public int EndMarker;
        public bool bTakeOff;
    }
    public class SFXSeqAct_HenchmanUseInteractionPoint : SeqAct_Latent
    {
        public int HenchmanPawn;
        public int InteractionPoint;
        public float fFidelityTimeout;
        public bool m_bStartedInteraction;
        public bool m_bDone;
        public bool m_bSuccess;
    }
    public class SFXSeqAct_InitLoadingMovies : SequenceAction
    {
        public int[] Movies;
        public int ScreenTip;
        public bool HideScaleform;
        public bool RequiresExplicitStop;
        public bool PlayToCompletion;
        public bool StreamFromDisc;
    }
    public class SFXSeqAct_InitMainMenu : SequenceAction
    {
    }
    public class SFXSeqAct_InterruptCustomAction : SequenceAction
    {
    }
    public class SFXSeqAct_IsPawnInCover : SequenceAction
    {
        public int oTargetActor;
    }
    public class SFXSeqAct_LaunchWeaponSelection : BioSequenceLatentAction
    {
        public NameReference TableSocket;
        public int TableSkelMesh;
        public int MaxWeapons;
        public int ModStatsRenderTexture;
        public int ModControlsRenderTexture;
        public int oMovie;
        public bool bInitialized;
        public bool ShowAllWeapons;
        public bool ShowAllMods;
        public bool AutoEquipWhenDone;
        public bool PauseGame;
    }
    public class SFXSeqAct_LinkLighting : SequenceAction
    {
        public bool bLinkShadows;
        public bool bLinkEnvironment;
    }
    public class SFXSeqAct_LinkToSaveBool : SequenceAction
    {
        public int oActor;
        public int oTargetBool;
        public int oCombatTargetBool;
    }
    public class SFXSeqAct_LookAtPOI : SeqAct_Latent
    {
        public Vector m_vTargetOffset;
        public Vector m_vExploreModeOffset;
        public NameReference m_nmTargetBoneName;
        public float m_fFov;
        public float m_fTransitionTime;
        public float m_fDuration;
        public bool m_bAutoActivate;
        public bool m_bDisableOtherPOIs;
        public bool m_bDisableMovementInput;
    }
    public class SFXSeqAct_LookupHenchmenFromPlotManager : SequenceAction
    {
        public int[] SelectedIndices;
        public int NumHenchmen;
    }
    public class SFXSeqAct_MainMenu : SequenceAction
    {
    }
    public class SFXSeqAct_MakeLevelLive : SequenceAction
    {
    }
    public class SFXSeqAct_MoveOnSplineNativeBase : SeqAct_Latent
    {
        public bool m_bSFXCreatedBeforeStuntActorLocationChange;
    }
    public class SFXSeqAct_MoveToNode : SeqAct_Latent
    {
        public int oPawn;
        public int oMoveTarget;
        public float fMoveOffset;
        public float fTimeOut;
        public float m_fTotalTimeRunning;
        public int nCompletionReason;
        public int m_nReason;
        public bool bWalking;
        public bool bImmediateMove;
        public bool m_bDone;
        public bool m_bWasWalkingBefore;
    }
    public class SFXSeqAct_PlatformMovieBink : BioSeqAct_MovieBink
    {
        public EMoviePlatform[] Platforms;
    }
    public class SFXSeqAct_PossessTurret : SequenceAction
    {
        public int MountedGun;
    }
    public class SFXSeqAct_PrimeMovie : SeqAct_Latent
    {
        public string MovieName;
    }
    public class SFXSeqAct_RemoveCombatZone : SequenceAction
    {
        public int[] CombatZones;
        public int Squad;
    }
    public class SFXSeqAct_ReportLevelLoadTime : SequenceAction
    {
    }
    public class SFXSeqAct_ResearchChoiceGUI : BioSequenceLatentAction
    {
        public SFXChoiceEntry[] m_TopLevelChoices;
        public SFXChoiceEntry[] m_TechTopChoices;
        public SFXChoiceEntry[] m_ResearchTopChoices;
        public ResearchMenu[] ResearchSubMenus;
        public int m_oMsgBox;
        public int srText;
        public int srErrorAButton;
        public int srErrorCanNotAfford;
        public int srErrorDoNotQualify;
        public int srErrorKnown;
        public int srTechNameLabel;
        public int srResearchConfirmMessage;
        public int srResearchConfirm;
        public int srResearchCancel;
        public int srEezo;
        public int srPlatinum;
        public int srPalladium;
        public int srIridium;
        public int nLastUnlockedResearch;
        public int nLastUnlockedTech;
        public int srResearchDescription;
        public int srResearchTokenizedDescriptionPlural;
        public int srResearchTokenizedDescriptionSingular;
        public int srResearchTokenizedDescriptionResources;
        public int srUpgradeTokenizedDescription;
        public int srTokenizedResearchCategory;
        public int srTokenizedResearchCategoryCounter;
        public int srTopLevelAButton;
        public eMode mode;
        public EResearchMode RMode;
        public eMode InitialMode;
        public EResearchMode InitialResearchMode;
    }
    public class SFXSeqAct_SetAmbientPerformance : SequenceAction
    {
        public NameReference m_nmDefaultPoseAnim;
        public int m_pDefaultPoseSet;
        public int m_pPerfGameData;
        public bool m_bReturnToDefaultPose;
    }
    public class SFXSeqAct_SetDoorState : BioSequenceLatentAction
    {
        public float ActivatedStartTime;
        public float MaxWaitTime;
        public bool m_bInstantTransition;
        public bool bForceFireSuccess;
    }
    public class SFXSeqAct_SetDoorType : SequenceAction
    {
        public ESFXDoorType m_DoorType;
    }
    public class SFXSeqAct_SetGoalPriority : SequenceAction
    {
        public int m_oTarget;
        public int m_oGoal;
        public int m_nSetPriority;
        public bool m_bResetPriorityToDefault;
    }
    public class SFXSeqAct_SetPawnVocState : SequenceAction
    {
        public bool bVocState;
    }
    public class SFXSeqAct_SetStringref : SeqAct_SetSequenceVariable
    {
        public int Target;
        public int Value;
    }
    public class SFXSeqAct_SetTargetable : SequenceAction
    {
        public bool bTargetable;
        public bool bCombatTargetable;
    }
    public class SFXSeqAct_SetTreasure : SequenceAction
    {
        public int ResourcePercent;
        public bool bTargetable;
        public bool bOverrideResource;
        public bool bTreasureTypeOverride;
        public ETreasureType TreasureType;
    }
    public class SFXSeqAct_SetWeaponVisibility : SequenceAction
    {
    }
    public class SFXSeqAct_ShowCharacterRecordGUI : BioSequenceLatentAction
    {
        public bool m_bIsFinished;
    }
    public class SFXSeqAct_ShowOptionsGUI : BioSequenceLatentAction
    {
        public bool m_bIsFinished;
        public EOptionsGuiMode OptionsGUIMode;
    }
    public class SFXSeqAct_StartAmbientConv : BioSequenceLatentAction
    {
        public int Conv;
        public float m_fInterruptRange;
        public bool m_bNoGestures;
        public bool m_bFOVOMode;
        public bool m_bLookAtActive;
        public bool m_bDisableLookAtRangeCheck;
        public bool m_bDisableDelayUntilPreload;
        public bool m_bDisableProceduralFoley;
        public bool m_bAllowStartingIfAlreadyActive;
        public bool m_bSubtitleHasPriority;
    }
    public class SFXSeqAct_StartConversation : SFXSeqAct_StartAmbientConv
    {
        public int m_nbNodes;
        public bool m_bSupportsPlayerHelmet;
        public bool m_bSupportsPlayerFace;
        public bool m_bFadeIn;
        public bool m_bBlackOut;
    }
    public class SFXSeqAct_StoreGUI : BioSequenceLatentAction
    {
        public int StorefrontClass;
        public int m_StoreGUIResource;
    }
    public class SFXSeqAct_ToggleAutoHints : SequenceAction
    {
    }
    public class SFXSeqAct_ToggleBlinking : SequenceAction
    {
    }
    public class SFXSeqAct_ToggleCombatPawn : SeqAct_Latent
    {
        public int ForcedCasualAppearanceID;
        public bool bUseCasualAppearance;
        public bool bCreateAndShowWeapons;
        public bool bShowLoadingIcon;
    }
    public class SFXSeqAct_ToggleInjuredShepardMode : SequenceAction
    {
    }
    public class SFXSeqAct_TogglePrototyping : SequenceAction
    {
    }
    public class SFXSeqAct_UsePowerOn : SeqAct_Latent
    {
        public NameReference nmPower;
        public int oPawn;
        public int oTarget;
        public float fTimeOut;
        public int nCompletionReason;
        public float m_fTotalTimeRunning;
        public int m_nReason;
        public bool m_bDone;
        public EBioAutoSet ePower;
    }
    public class SFXSeqAct_WaitForGFxMovieClose : SeqAct_Latent
    {
        public int movie;
        public bool DeferredClose;
    }
    public class SFXSeqAct_WaitForPlayerSpawn : SeqAct_Latent
    {
    }
    public class SFXSeqAct_WaitForStreamingComplete : SeqAct_Latent
    {
        public bool bWaitForVisibleOnly;
        public bool bBlocking;
        public bool bWaitForUnvisibleAndUnloaded;
    }
    public class SFXSeqAct_WaitUntilLevelIsLive : SeqAct_Latent
    {
    }
    public class SFXSeqAct_WheelController_NativeBase : SeqAct_Latent
    {
        public WheelInfo[] Wheels;
        public int Chassis;
        public int SteeringWheel;
        public float SteeringLimit;
        public float SuspensionVariance;
    }
    public class SFXSeqCond_GetDifficulty : SequenceCondition
    {
        public int Player;
    }
    public class SFXSeqCond_HasPlayerStart : SequenceCondition
    {
    }
    public class SFXSeqEvt_AmbientPerformance : SequenceEvent
    {
        public NameReference m_nmLinkedPerfName;
        public NameReference m_nmPoseSetName;
        public NameReference m_nmPoseAnimName;
        public NameReference m_nmGestureSetName;
        public NameReference m_nmGestureAnimName;
        public ESFXAmbPerfEventType m_eEventType;
    }
    public class SFXSeqEvt_CombatEnded : SequenceEvent
    {
    }
    public class SFXSeqEvt_CombatStarted : SequenceEvent
    {
    }
    public class SFXSeqEvt_HordeEnemyKilled : SequenceEvent
    {
    }
    public class SFXSeqEvt_HordeWaveEnd : SequenceEvent
    {
    }
    public class SFXSeqEvt_HordeWaveStart : SequenceEvent
    {
    }
    public class SFXSeqEvt_ImpactedByPower : SequenceEvent
    {
    }
    public class SFXSeqEvt_LeaveWorld : SequenceEvent
    {
    }
    public class SFXSeqEvt_LeavingStasis : SequenceEvent
    {
    }
    public class SFXSeqEvt_LevelIsLive : SequenceEvent
    {
    }
    public class SFXSeqEvt_OnStoppedSleeping : SequenceEvent
    {
    }
    public class SFXSeqEvt_PersistentLevelStarted : SequenceEvent
    {
        public bool bFreezeLevelStreaming;
        public bool bKeepLoadMovie;
        public bool bSkipTextureStreaming;
    }
    public class SFXSeqEvt_ProtoInputTrap : SequenceEvent
    {
    }
    public class SFXSeqEvt_Ragdoll : SequenceEvent
    {
    }
    public class SFXSeqEvt_SFXDoorInteraction : SequenceEvent
    {
    }
    public class SFXSeqEvt_Touch : SeqEvent_Touch
    {
    }
    public class SFXSeqEvt_Tutorial : SequenceEvent
    {
    }
    public class SFXSeqEvt_VehicleMiningFailure : SequenceEvent
    {
    }
    public class SFXSeqEvt_VehicleMiningSuccess : SequenceEvent
    {
    }
    public class SFXSeqVar_Hench : SeqVar_Object
    {
        public NameReference[] m_aRealPriorities;
        public bool m_bBiggest;
        public bool m_bSmallest;
        public bool m_bFirst;
        public bool m_bSecond;
        public bool m_bPriorityMatchRequired;
    }
    public class SFXSeqVar_SavedBool : SeqVar_Bool
    {
        public Guid MyGuid;
    }
    public class SFXSeqVar_ToolTip : SeqVar_Int
    {
        public ETargetTipText TipText;
    }
    public class SFXSF_ReticleBase : Object
    {
        public string m_sSFPath;
        public string m_sFlashLinkageIdentifier;
        public Vector2D m_vHUDLocation;
        public int m_pTarget;
        public int m_oReticle;
        public int m_nFlashLayerModifier;
        public bool m_bFirstUpdate;
        public bool m_bHasInTransition;
        public bool m_bHasOutTransition;
        public bool m_bVisible;
        public bool m_bInTransitionOut;
    }
    public class SFXSF_ReticleCombatObject : SFXSF_ReticleBase
    {
    }
    public class SFXSF_ReticleCombatTarget : SFXSF_ReticleBase
    {
        public Vector2D m_vExtents;
        public Vector2D m_vExtentShrinkDelta;
        public float m_fMinTargetSelectionWidth;
        public float m_fMinTargetSelectionHeight;
        public float m_fReticleShrinkTime;
        public float m_fFlourishLifeTime;
        public int m_oReticleTarget;
        public int m_oReticleTargetBase;
        public float m_fSelectionBoxScalingFactor;
        public bool m_bPreviouslyInitialized;
        public bool m_bDoingActionFlourish;
    }
    public class SFXSFHandler_HUD : SFXGUIMovieLegacyAdapter
    {
        public SFXHUDSquadMemberInfo m_oShepardInfo;
        public SFXHUDSquadMemberInfo m_oHench1Info;
        public SFXHUDSquadMemberInfo m_oHench2Info;
        public SFXMPTargetUIState MPTargetUIState;
        public string m_sStatusText;
        public string m_sResistanceText;
        public SFXHudDmgIndicatorPaths[] m_aDamageIndicatorPaths;
        public float[] m_aDamageIndicatorAlphas;
        public string m_nCurrentWeaponResource;
        public ESFXHUDPOIIconState[] m_lstQueuedPOIStates;
        public SFXHUDMiniNotification[] MiniNotifications;
        public string m_sShields;
        public string m_sArmour;
        public string m_sBarrier;
        public string m_sHealth;
        public string m_sOverheat;
        public string m_sNoAmmo;
        public int __OnNotificationCompleted__Delegate;
        public SFXHUDResistances m_CurrentResistances;
        public SFXHUDResistances m_ResistanceBarDisplayValues;
        public SFXHUDNotification Notification;
        public int m_pCurrentTarget;
        public int m_nCurrentBarCount;
        public float m_fCurrentBarBackgroundX;
        public int m_nNumMiniNotifications;
        public int m_pPlayerController;
        public int m_pPlayerSquad;
        public float m_fEffectivelyZero;
        public int m_nCurrentWeaponIcon;
        public int m_nCurrentWeaponSpareAmmo;
        public int m_nCurrentClipAmmo;
        public float m_fTimeSinceLastWeaponUpdate;
        public int m_pCurrentDisplayTarget;
        public float m_fCurrentOverheatValue;
        public float m_fMiniClipHeight;
        public float m_fMiniClipBaselineY;
        public int m_nCurrentGrenadeCount;
        public float m_fSuperRegenThreshold;
        public float m_fHealthShieldUpdateDelta;
        public float m_fDamageIndicatorAlphaUpdateDelta;
        public float m_fLowHealthWarning;
        public float m_fWeaponUpdateInterval;
        public float m_fBarAnimRate;
        public float m_fFullStatFadeTime;
        public float m_fMiniNotificationAnimTime;
        public float m_fMiniNotificationPadding;
        public int WeaponIcon;
        public int WeaponAmmo;
        public int WeaponClip;
        public int GrenadeAmmo;
        public int TargetName;
        public int TargetStatus;
        public int ButtonA;
        public int TargetBackground;
        public int HealthBar;
        public int ArmourBar;
        public int BioticBar;
        public int ShieldBar;
        public int ResistanceText;
        public int ResistanceBar;
        public int CenterStatus;
        public int CenterStatusText;
        public int OverheatIndicator;
        public int OverheatIndicatorTextAnim;
        public int OverheatIndicatorTextAnimText;
        public int PlayerPowerLeft;
        public int PlayerPowerRight;
        public int AmmoFull;
        public int ActionIcon;
        public int POI;
        public int MPTargetBarMain;
        public int MPTargetHitDisplay;
        public int m_srStatusBarrierText;
        public int m_srStatusBleedoutText;
        public int m_srStatusHardenedShieldsText;
        public int m_srStatusHeavyArmourText;
        public int m_srStatusMinimalDamageText;
        public int m_srStatusSuperRegenText;
        public int m_srShields;
        public int m_srArmour;
        public int m_srBarrier;
        public int m_srHealth;
        public int m_srOverheat;
        public int m_srNoAmmo;
        public int m_srAmmoFull;
        public int m_srCoverEnterAction;
        public int m_srCoverClimbAction;
        public int m_srCoverMantleAction;
        public int m_srCover90RightAction;
        public int m_srCover90LeftAction;
        public int m_srCoverSlipRightAction;
        public int m_srCoverSlipLeftAction;
        public int m_srCoverSwatRightAction;
        public int m_srCoverSwatLeftAction;
        public int m_srCoverGrabAction;
        public int m_srLadderUpAction;
        public int m_srLadderDownAction;
        public int m_srGapJumpAction;
        public int m_srAtlasSuitAction;
        public int m_nNotificationBodyLength;
        public bool m_bInteractive;
        public bool m_bInRange;
        public bool m_bTargetStatusVisible;
        public bool m_bProcessSquadHenchmen;
        public bool m_bInSquadCommandMode;
        public bool m_bInitializedPlayerResistance;
        public bool m_bWeaponVisible;
        public bool m_bWeaponOverheatBarVisible;
        public bool m_bHealthDisplayVisible;
        public bool m_bForceUpdateDisplayNextTick;
        public bool m_bGrenadesVisible;
        public bool m_bDisplayWeaponOverride;
        public bool m_bHideShieldBarWhenFull;
        public bool m_bDisablePlayerHealth;
        public bool m_bUseMPHealthDisplay;
        public ESFXHUDActionIcon m_eCurrentActionIcon;
        public ESFXHUDPOIIconState m_eCurrentPOIState;
    }
    public class SFXSFHandler_Save : SFXGUIMovieLegacyAdapter
    {
        public SaveGUIAreaInfo[] AreaData;
        public string DefaultImageName;
        public SaveGUIRecord[] SaveList;
        public int DefaultAreaImage;
        public ESaveGuiMode GuiMode;
    }
    public class SFXSFHandler_Load : SFXSFHandler_Save
    {
        public SaveGUICareerRecord[] CareerList;
        public int ImportPlotTable;
        public int loadingCareerMessageBox;
        public bool bShouldRescanCareers;
        public bool bShowingSearchingCharacterOverlay;
        public ELoadGuiMode LoadMode;
    }
    public class SFXSFHandler_PCAreaMap : SFXSFHandler_AreaMap
    {
    }
    public class SFXSFHandler_PCEANetworking : SFXSFHandler_EANetworking
    {
    }
    public class SFXSFHandler_PCHUD : SFXSFHandler_HUD
    {
        public int m_srPOIAction;
    }
    public class SFXSFHandler_PCLoad : SFXSFHandler_Load
    {
    }
    public class SFXSFHandler_Personalization : SFXGUIMovieLegacyAdapter
    {
        public int[] m_ApperanceAssetCache;
        public int[] srBonus;
        public string[] ArmorBonusClassName;
        public string srRotate;
        public string srButtonRevertChanges;
        public string srButtonShowInfo;
        public string srButtonHideInfo;
        public string srButtonBack;
        public string srButtonSelect;
        public string srButtonExpand;
        public int __ExternalCallback_OnComplete__Delegate;
        public int m_nRotating;
        public float RotationDegreesPerSecond;
        public float AssetReleaseMemoryThreshold;
        public float ForceGCMemoryThreshold;
        public int CasualOptionTitle;
        public int TypeOptionTitle;
        public int HelmetOptionTitle;
        public int TorsoOptionTitle;
        public int ShoulderOptionTitle;
        public int ArmOptionTitle;
        public int LegOptionTitle;
        public int SpecOptionTitle;
        public int Tint1OptionTitle;
        public int Tint2OptionTitle;
        public int PatternOptionTitle;
        public int PatternColorOptionTitle;
        public int EmissiveOptionTitle;
        public int CasualID;
        public int FullBodyID;
        public int HelmetID;
        public int TorsoID;
        public int ShoulderID;
        public int ArmID;
        public int LegID;
        public int SpecID;
        public int Tint1ID;
        public int Tint2ID;
        public int PatternID;
        public int PatternColorID;
        public int EmissiveID;
        public int ArmorEffectDescriptionFormatter;
        public bool m_bStopScroll;
        public EPlayerAppearanceType CombatAppearance;
    }
    public class SFXSFHandler_PCPersonalization : SFXSFHandler_Personalization
    {
        public bool bRotationEnabled;
    }
    public class SFXSFHandler_PowerWheel : SFXGUIMovieLegacyAdapter
    {
        public string m_aMappingIconPaths;
        public SFXPowerWheelPawnIndices m_oPowerIndices;
        public SFXPowerWheelPawnIndices m_oWeaponIndices;
        public SFXPowerWheelButtonIcon m_oMapTextIcon1;
        public SFXPowerWheelButtonIcon m_oMapTextIcon2;
        public SFXPowerIconData[] m_aPowerIconInfo;
        public int[] m_aPowerIcons;
        public SFXPowerWheelIconWeapon[] m_aWeaponIcons;
        public SFXRadarElementData[] m_aRadarElementData;
        public string m_sWheelPath;
        public string m_sWheelInnerPath;
        public string m_sTitleTextPath;
        public string m_sNameTextPath;
        public string m_sInfoTextPath;
        public string m_sInfoTextBGPath;
        public string m_sUseButtonPath;
        public string m_sUseTextPath;
        public string m_sMapButton1Path;
        public string m_sMapText1Path;
        public string m_sMapButton2Path;
        public string m_sMapText2Path;
        public string m_sMapText3Path;
        public string m_sMapButton3Path;
        public string[] m_aRadarIconFramePaths;
        public string m_sShepardBlockerPath;
        public string m_sHench1BlockerPath;
        public string m_sHench2BlockerPath;
        public string m_sRadarPath;
        public string m_sTeam1StatusTextPath;
        public string m_sTeam1PowerTextPath;
        public string m_sHench1PortraitImagePath;
        public string m_sHench1PortraitMovieClipPath;
        public string m_sTeam2StatusTextPath;
        public string m_sTeam2PowerTextPath;
        public string m_sHench2PortraitImagePath;
        public string m_sHench2PortraitMovieClipPath;
        public string m_sWheelArrowPath;
        public string m_sNuiSpeechIconPath;
        public string m_sNotSuggestedPrefix;
        public string m_sNotSuggestedSuffix;
        public string m_sMap1Token;
        public string m_sMap2Token;
        public string m_sMap3Token;
        public string m_sMapHench1Token;
        public string m_sMapHench2Token;
        public int __WeaponSort__Delegate;
        public int m_aWeaponStateFrames;
        public Vector m_vLStickInput;
        public Vector2D m_vViewportOffsets;
        public Vector2D m_vCacheRadarBoundaryTopLeft;
        public Vector2D m_vCacheRadarBoundaryBottomRight;
        public Vector2D m_vBoundaryDimensions;
        public int m_pPlayerController;
        public int m_pPlayerSquad;
        public float m_fButtonTextPadding;
        public float m_fMovieWidth;
        public float m_fMovieHeight;
        public float m_fRemainingRadarPulseTime;
        public float m_fInfoTextChangeDelay;
        public float m_fRemainingInfoTextChangeDelay;
        public float m_fTimeToNextVehicleRadarUpdate;
        public float m_fTimeToNextObjectiveUpdate;
        public float m_fLastProcessedStickAngle;
        public float m_fCurrentProcessedStickAngle;
        public float m_fThumbstickInterpSpeed;
        public float m_fLastStickDeflection;
        public float m_fLStickAngleDeltaDeg;
        public float m_fLStickStickyIconAngle;
        public int m_nCurrentPowerIconIndex;
        public int m_nCurrentWeaponIconIndex;
        public int m_nCurrentSelectedWeapon;
        public int m_pShepardPawn;
        public int m_pHench1Pawn;
        public int m_pHench2Pawn;
        public int m_pCurrentPlayerSelection;
        public float m_fCacheTargetDirection;
        public float m_fCacheNorthDirection;
        public float m_fCachePathDirection;
        public float m_fCacheRadarBoundaryRotation;
        public int m_srBlocked;
        public int m_srPawnIncapacitated;
        public int m_srWeaponSwitching;
        public int m_srWeaponOverheating;
        public int m_srWeaponReloading;
        public int m_srDisplayTitle;
        public int m_srWeaponWheelDisplayTitle;
        public int m_srPowerWheelDisplayTitle;
        public int m_srEquip;
        public int m_srUse;
        public int m_srMap;
        public int m_srOverheated;
        public int m_srRecharging;
        public int m_srUnavailable;
        public int m_srRadarRangeUnits;
        public int m_srNorthText;
        public int m_srObjective;
        public float m_fRadarDirectionChangeDelta;
        public float m_fRadarElementLocationChangeDelta;
        public float m_fRadarRadius;
        public float m_fBoundaryShrinkFactor;
        public float m_fVehicleRadarUpdateInterval;
        public float m_fRadarObjectiveUpdateInterval;
        public bool m_bVisible;
        public bool m_bRadarVisible;
        public bool m_bRadarOn;
        public bool m_bInOutTransition;
        public bool m_bProcessSquadHenchmen;
        public bool m_bCanMapPlayerPowers;
        public bool m_bHavePathAssistGoal;
        public bool m_bPingPathAssistArrow;
        public bool m_bInfoTextBackgroundVisible;
        public bool m_bDesiredInfoTextBackgroundVisibility;
        public bool m_bWheelArrowVisible;
        public bool m_bObjectiveRadarOn;
        public bool m_bPulsingRadar;
        public bool m_bShowUseMapText;
        public bool m_bSquadChanged;
        public SFXPowerWheelMode m_ePowerWheelMode;
    }
    public class SFXSFHandler_PCPowerWheel : SFXSFHandler_PowerWheel
    {
        public SFXPowerIconData m_aQuickSlotIconInfo;
        public SFXPowerWheelIconWeapon m_oCenterWeaponIcon;
        public SFXPowerWheelIconWeapon m_oHench1WeaponIcon;
        public SFXPowerWheelIconWeapon m_oHench2WeaponIcon;
        public int m_aQuickSlotIcons;
        public Vector2D m_vMouseDownPos;
        public Vector2D m_vDragOffsets;
        public int m_nDraggingIcon;
        public int m_nCurrentDropTarget;
        public float m_fQuickslotIconUpdateInterval;
        public int m_nCurrentQuickSlot;
        public int m_oDragPowerIcon;
        public int m_oDragSlotIcon;
        public int m_srMaximizeText;
        public int m_srMinimizeText;
        public float m_fDragStartThreshold;
        public bool m_bDashboardWeaponsOpen;
        public bool m_bDraggingPower;
        public bool m_bDraggingKey;
        public bool m_bDoingDrag;
        public bool m_bQuickSlotExpanded;
        public bool m_bQuickSlotVisible;
        public bool m_bEvalQuickSlotPowers;
        public EPhysics m_ShepardPreviousPhysics;
    }
    public class SFXSFHandler_PCSave : SFXSFHandler_Save
    {
    }
    public class SFXSFHandler_Slideshow : SFXGUIMovieLegacyAdapter
    {
        public SFXSlideshowEntry m_CurrentSlide;
        public SFXSlideshowParams m_ShowParams;
        public int __SlideshowFinished__Delegate;
        public float m_fCurrentSlideElapsedTime;
        public int m_nCurrentSlideIndex;
        public int m_nAdjacentPreloadCount;
        public bool m_bWaitingForInit;
        public bool m_bBeginWhenDoneInit;
        public bool m_bCanGoNext;
        public bool m_bCanGoPrev;
        public bool m_bCanExit;
    }
    public class SFXSFHandler_PCSlideshow : SFXSFHandler_Slideshow
    {
    }
    public class SFXSFHandler_PRCShop : BioSFHandler_ChoiceGUI
    {
        public PRCInfo_t[] PRCInfo;
        public int m_ChoiceDataNoStrRef;
    }
    public class SFXSFHandler_PS3Achievement : BioSFHandler_Achievement
    {
    }
    public class SFXSFHandler_PS3EANetworking : SFXSFHandler_EANetworking
    {
    }
    public class SFXSFHandler_PS3MainMenu : BioSFHandler_MainMenu
    {
    }
    public class SFXSFHandler_PS3NewCharacter : BioSFHandler_NewCharacter
    {
    }
    public class SFXSFHandler_PS3Options : BioSFHandler_Options
    {
    }
    public class SFXSFHandler_PS3Personalization : SFXSFHandler_Personalization
    {
    }
    public class SFXSFHandler_Reticle : SFXGUIMovieLegacyAdapter
    {
        public int[] m_aTargets;
        public int[] m_aReticles;
        public int[] m_aWeaponReticles;
        public int[] m_aLoadingReticles;
        public int m_pCameraManager;
        public int m_pPlayerController;
        public int m_pPlayerInput;
        public int m_pPlayerSquad;
        public float m_fTargetHitIndicatorCooldown;
        public float m_fRemainingTargetHitIndicatorCooldownTime;
        public float m_fSFWidth;
        public float m_fSFHeight;
        public float m_fScrn2SF_YOffset;
        public float m_fScrn2SF_YScale;
        public float m_fScrn2SF_XScale;
        public int m_oCurrentWeaponReticle;
        public float m_fUpdateInterval;
        public float m_fScreenChangeDelta;
        public bool m_bSelectionInvalidated;
        public bool m_bReticleVisible;
    }
    public class SFXShake_Power : SFXCameraShakeBase
    {
        public float MinDetonationShakeDistance;
        public float MaxDetonationShakeDistance;
    }
    public class SFXShield_Base : Inventory
    {
        public ScaledFloat MaxShields;
        public ScaledFloat ShieldRegenDelay;
        public ScaledFloat ShieldDamageMultiplier;
        public int __ShieldDestroyedPowerCallback__Delegate;
        public Vector ShieldOffset;
        public int ShieldDisplayName;
        public int PS_Impact;
        public int PS_Recharged;
        public int PS_Breach;
        public float ShieldScale;
        public int PhysMat;
        public int ShieldsBreakSound;
        public int ShieldsUpSound;
        public int PCShieldsUpStopSound;
        public float CurrentShields;
        public float MaxEnemyShieldRecharge;
        public float ShieldRegenPct;
        public float AIEnergyShieldGatePct;
        public int TOTAL_SHIELD_STEPS;
        public bool bRechargeable;
        public bool bRecentShieldDamage;
        public EResistanceType Resistance;
    }
    public class SFXShield_Player : SFXShield_Base
    {
        public InterpCurveFloat TimeDilation;
        public InterpCurveFloat BreachTimeDilation;
        public ScreenShakeStruct BreachShake;
        public float PartialBreakPct;
        public int PS_CriticalHit;
        public int CE_ShieldBreak;
        public float TimeDilationLength;
        public float BreachTimeDilationLength;
        public int PCShieldsBreakSound;
        public int PCShieldsUpSound;
        public int ShieldBreakPainVoc;
    }
    public class SFXVersionDependentSelectionModule : SFXSelectionModule
    {
        public bool selectable;
    }
    public class SFXSignText : Actor
    {
    }
    public class SFXSkelControlLimb : SkelControlLimb
    {
        public SkelControlProfile[] SkelControlProfiles;
        public int CurrentProfile;
    }
    public class SFXSkelControlSingleBoneByGender : SkelControlSingleBone
    {
        public bool bFemale;
    }
    public class SFXSkelCtrl_AnimatedFootPlacement : SkelControl_CCD_IK
    {
        public float LockAlphaBlendTime;
        public float HitZOffset;
    }
    public class SFXSkelCtrl_FootPlanting : SkelControlLimb
    {
        public NameReference FootBoneName;
        public NameReference IKFootBoneName;
        public float FootLockZThreshold;
        public float LockAlphaBlendTime;
        public bool bDoFootLocking;
    }
    public class SFXSkeletalMeshActor : SkeletalMeshActor
    {
        public SMAVectorParameter[] VectorParameters;
        public SMAScalarParameter[] ScalarParameters;
        public SMATextureParameter[] TextureParameters;
        public int HeadMesh;
        public int HairMesh;
        public int HeadGearMesh;
        public int MorphHead;
        public bool bAnimFrozen;
        public bool UpdateSkelWhenNotRendered;
        public bool bHasWrinkles;
    }
    public class SFXSkeletalMeshActorMAT : SkeletalMeshActorMAT
    {
        public SMAVectorParameter[] VectorParameters;
        public SMAScalarParameter[] ScalarParameters;
        public SMATextureParameter[] TextureParameters;
        public int HeadMesh;
        public int HairMesh;
        public int MorphHead;
        public bool UpdateSkelWhenNotRendered;
        public bool bHasWrinkles;
    }
    public class SFXSmokeActorBase : Actor
    {
        public int PSC_Smoke;
        public float SmokeDuration;
    }
    public class SFXStealthVolume : Volume
    {
    }
    public class SFXStuntActor : Actor
    {
        public int BodyMesh;
        public int HeadMesh;
        public int HairMesh;
        public int HeadGearMesh;
        public int MorphHead;
        public int LightEnvironment;
        public bool bHelmetHidesHead;
        public bool bHelmetHidesHair;
        public bool m_bUpdateSkelWhenNotRendered;
        public bool m_bActive;
        public bool bCausesPlayerPortArms;
    }
    public class SFXSystem : SFXGalaxyMapObject
    {
        public int[] Planets;
        public LinearColor SunColor;
        public LinearColor StarColor;
        public LinearColor FlareTint;
        public int ReaperControlCondition;
        public float m_fReaperGraceTime;
        public float m_fGameOverFadeTime;
        public bool m_bHasMassRelay;
        public bool m_bShowNebula;
        public EBioRegionAutoSet ReaperControlConditionRegion;
        public EBioReaperControlConditionPlotAutoSet ReaperControlConditionPlot;
        public EBioReaperControlConditionAutoSet ReaperControlConditionName;
    }
    public class SFXTeamInfo : TeamInfo
    {
    }
    public class SFXTelemetry : Object
    {
        public TelemetryHookConfig[] ConfigHooks;
        public int[] BlacklistPlotsInt;
        public int[] BlacklistPlotsFloat;
        public int[] BlacklistPlotsBool;
        public int GameSession;
        public bool bEnable;
        public bool bCachedCollectionEnabledInProfile;
        public bool bInitialized;
    }
    public class SFXTelemetryGameSession : Object
    {
        public Pointer VfTable_FTickableObject;
        public Pointer VfTable_FCallbackEventDevice;
        public Double CareerTime;
        public Double GameTime;
        public Double SessionTime;
        public Double IdleTime;
        public QWord MatchID;
        public string MapName;
        public string Career;
        public string Base64_CharacterID;
        public string[] SessionStartMapExclusion;
        public NameReference ChunkName;
        public int Difficulty;
        public int MPDifficulty;
        public float MatchStartTime;
        public int RoundID;
        public int EnemyType;
        public int TotalCredits;
        public int TotalScore;
        public int TotalSupplyDrops;
        public float StoreOpenedTime;
        public int StoreOpenCreditsSpent;
        public int StoreOpenCashSpent;
        public bool bStarted;
        public bool bSentBootHooks;
        public bool bSentBugSentryHook;
        public bool bRandomMap;
        public bool bRandomEnemy;
        public bool bPrivateGame;
        public bool bPlayerHasMic;
        public bool bPlayerUsedMic;
    }
    public class SFXTelemetryHooks : SFXTelemetry
    {
    }
    public class SFXTracer : Actor
    {
        public Vector MeshScale;
        public Vector DesiredEndPoint;
        public Vector StartPoint;
        public float MeshScaleTime;
        public float Speed;
        public float MaxSpeed;
        public float TrailWaitTime;
        public int Mesh;
        public int Trail;
        public float ScaleTimeFactor;
        public float UnscaledMeshLength;
        public float ScaleTimeCount;
        public float Lifetime;
        public ESFXTracerState ActiveState;
    }
    public class SFXTracer_Bullet : SFXTracer
    {
    }
    public class SFXTreasureNode : SFXPointOfInterest
    {
    }
    public class SFXVehicle_MountedGun : SVehicle
    {
        public Rotator AimDir;
        public Rotator DesiredAimDir;
        public int Claim;
        public int Loadout;
        public float MaxPitchAngle;
        public int LightEnvironment;
        public float RadarRange;
        public float RadarFOV;
        public int DriverAnimInfo;
        public float YawClamp;
        public float TrackSpeed;
        public float SearchSpeed;
        public float TooCloseDist;
        public float EligibleAIRange;
        public int MountingPoint;
        public float PlayerDamageReduction;
        public float MaxYawSpeed;
        public int TurretLoopStart;
        public int TurretLoopStop;
        public bool bWeaponFiring;
        public bool bAllowedToLeave;
        public bool bAICanUse;
        public bool bForceTightAim;
    }
    public class SFXVehicleSimHover : SVehicleSimBase
    {
        public Vector RandForce;
        public Vector RandTorque;
        public Vector OldVelocity;
        public float MaxThrustForce;
        public float MaxReverseForce;
        public float LongDamping;
        public float MaxStrafeForce;
        public float LatDamping;
        public float DirectionChangeForce;
        public float MaxRiseForce;
        public float UpDamping;
        public float TurnTorqueFactor;
        public float TurnTorqueMax;
        public float TurnDamping;
        public float MaxYawRate;
        public float PitchTorqueFactor;
        public float PitchTorqueMax;
        public float PitchDamping;
        public float RollTorqueTurnFactor;
        public float RollTorqueStrafeFactor;
        public float RollTorqueMax;
        public float RollDamping;
        public float StopThreshold;
        public float MaxRandForce;
        public float RandForceInterval;
        public float StrafeTurnDamping;
        public float TargetHeading;
        public float TargetPitch;
        public float PitchViewCorrelation;
        public float AccumulatedTime;
        public float StabilizationForceMultiplier;
        public float CurrentStabilizationMultiplier;
        public float StoppedBrakeTorque;
        public float HardLimitAirSpeedScale;
        public bool bAllowZThrust;
        public bool bFullThrustOnDirectionChange;
        public bool bShouldCutThrustMaxOnImpact;
        public bool bRecentlyHit;
        public bool bStrafeAffectsTurnDamping;
        public bool bHeadingInitialized;
        public bool bStabilizeStops;
        public bool bDisableWheelsWhenOff;
        public bool bRepulsorCollisionEnabled;
        public bool bCanClimbSlopes;
        public bool bUnPoweredDriving;
    }
    public class SFXVehicleHover : SVehicle
    {
        public Vector JumpForce;
        public Vector BoostForce;
        public Vector OffGroundForce;
        public int Loadout;
        public float MaxThrustJuice;
        public float ThrustRegenerationFactor;
        public int VehicleMotorEventPair;
        public int VehicleVerticalBoostEventPair;
        public int VehicleForwardBoostEventPair;
        public int VehicleVerticalBoostEndEvent;
        public int VehicleForwardBoostEndEvent;
        public int VehicleBottomOutEvent;
        public int VehicleMiningSuccessEvent;
        public int VehicleMiningFailureEvent;
        public int VehicleStartupEvent;
        public int VehicleShutdownEvent;
        public int LeftSuspensionEvent;
        public int RightSuspensionEvent;
        public int HitSomething;
        public int VehicleMiningEventPair;
        public int VehicleTurretMovementStartEventPair;
        public int ThrustFeedback;
        public float OnGroundJumpMultiplier;
        public float ForwardThrustBurnRate;
        public float VerticalThrustBurnRate;
        public float ThrustRegenerationDelay;
        public float BurnOutPercentage;
        public float SelfRepairDelay;
        public float SelfRepairRate;
        public float HitDamage;
        public float MaxPitchAngle;
        public int MiningFeedbackWaveForm;
        public float MiningFlashDelay;
        public float MiningFlashDuration;
        public int m_oMiningVFXTemplate;
        public int MiningPSC;
        public int m_oAfterburnerVisual;
        public int LeftAfterburnerPSC;
        public int RightAfterburnerPSC;
        public int LightEnvironment;
        public float RadarRange;
        public float RadarFOV;
        public bool bWeaponFiring;
    }
    public class SFXVocalizationBank : Object
    {
        public SFXVocalizationRole[] Vocalizations;
        public SFXVocalizationEventV2[] VocalizationsV2;
    }
    public class SFXWallRunReachSpec : SFXCustomReachSpec
    {
    }
    public class SFXWave : Object
    {
    }
    public class SFXWaveManager : Actor
    {
        public int PotentialWavesType;
        public int BioWorldInfo;
    }
    public class SFXWeapon_AssaultRifle_Base : SFXWeapon
    {
        public int ShotsTillMissTracer;
    }
    public class SFXWeapon_Pistol_Base : SFXWeapon
    {
    }
    public class SFXWeapon_Shotgun_Base : SFXWeapon
    {
        public ScaledFloat AccuracyBonus;
        public ScaledFloat ZoomAccuracyBonus;
        public Vector2D[] PelletSpread;
        public Rotator LatentFire_AimRotation;
        public Vector LatentFire_StartLocation;
        public Vector TraceExtent;
        public float StartTraceAdjustDist;
        public int AmmoRestoredPerReload;
        public float LatentFireTime;
        public int LatentFire_CurrentPellet;
    }
    public class SFXWeapon_SMG_Base : SFXWeapon
    {
    }
    public class SFXWeapon_SniperRifle_Base : SFXWeapon
    {
        public ScaledFloat ZoomTimeDilation;
        public ScaledFloat ZoomTimeDilationDuration;
        public ScaledFloat OwnerTimeDilationCounterScale;
        public int ActivateSniperZoomWwiseEvent;
        public int DeActivateSniperZoomWwiseEvent;
        public float SniperRifleDamagePenalty;
    }
    public class SFXWeaponFactory : SFXPickupFactory
    {
        public int WeaponClass;
        public int LastWeaponPickedUp;
        public float RespawnTime;
        public int AmmoInClip;
        public int ReserveAmmo;
        public int WeaponSelectionMovieInfo;
        public int GUI_WeaponSelection;
        public int UpgradeLevels_Normal;
        public int UpgradeLevels_NewGamePlus;
        public int NewGamePlusID;
        public float LastUpdateTime;
        public float UpdateFrequency;
        public int PickupSound;
        public bool ForceRespawn;
        public bool bStopCustomTicking;
    }
    public class SFXWeaponModFactory : SFXRpgPickupFactory
    {
        public int WeaponModClass;
        public float LastUpdateTime;
        public float UpdateFrequency;
        public bool bStopCustomTicking;
    }
    public class SFXWeaponModUseModule : SFXModule_SavedUse
    {
        public int WeaponModClass;
        public float LastUpdateTime;
        public float UpdateFrequency;
        public bool bStopCustomTicking;
    }
    public class SFXWeaponModNode : SFXPointOfInterest
    {
        public int SMC;
        public int LightEnvironment;
    }
    public class SFXWeaponUseModule : SFXModule_SavedUse
    {
        public int WeaponClass;
        public int LightEnvironment;
        public int PickupMesh;
        public int WeaponSelectionMovieInfo;
        public int GUI_WeaponSelection;
        public int UpgradeLevels_Normal;
        public int UpgradeLevels_NewGamePlus;
        public int NewGamePlusID;
        public float LastUpdateTime;
        public float UpdateFrequency;
        public int PickupSound;
        public bool bStopCustomTicking;
    }
    public class SFXWeaponNode : SFXPointOfInterest
    {
        public int SMC;
        public int LightEnvironment;
    }
    public class SFXWeaponUseModule_BonusWeapon : SFXWeaponUseModule
    {
    }
    public class SFXWeaponNode_BonusWeapon : SFXWeaponNode
    {
    }
    public class SFXWeaponUIData : Object
    {
        public SFXWeaponSelectWeaponData[] m_aWeapons;
        public SFXWeaponModData[] m_aMods;
    }
    public class SFXGameEffect_UniqueArmor_BloodDragon : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_MatchConsumable_AmmoPower_ArmorPiercing : SFXGameEffect_MatchConsumable_AmmoPower
    {
        public float[] Damage;
        public float[] Penetration;
        public float[] ArmorReduction;
        public int DamageType;
        public int PS_OrganicImpactEffect;
        public int PS_NonOrganicImpactEffect;
        public float VFXSpawnChance;
    }
    public class SFXGameEffect_MatchConsumable_AmmoPower_Incendiary : SFXGameEffect_MatchConsumable_AmmoPower
    {
        public float[] Damage;
        public int DamageType;
        public float DOTDuration;
        public float LastTimeFlameSpawned;
        public float MinTimeBetweenFlameSpawns;
        public int PS_FlameEffect;
    }
    public class SFXGameEffect_MatchConsumable_AmmoPower_Warp : SFXGameEffect_MatchConsumable_AmmoPower
    {
        public float[] Damage;
        public float[] LiftDamageBonus;
        public float[] ArmorWeakness;
        public int DamageType;
        public float ArmorWeaknessDuration;
    }
    public class SFXGameEffect_MatchConsumable_PowerBonus : SFXGameEffect_MatchConsumableBase
    {
        public NameReference[] AffectedParameter;
        public string[] IgnoredPowers;
        public float[] EffectValues;
        public bool bApplyToBiotics;
        public bool bApplyToTech;
        public bool bApplyToCombat;
        public bool bApplyToWeapons;
    }
    public class SFXGameEffect_MatchConsumable_PowerBonusDamage : SFXGameEffect_MatchConsumable_PowerBonus
    {
    }
    public class SFXGameEffect_MatchConsumable_ShieldBonus : SFXGameEffect_MatchConsumableBase
    {
        public float[] ShieldBonus;
    }
    public class SFXGameEffect_MatchConsumable_SpeedBonus : SFXGameEffect_MatchConsumableBase
    {
        public float[] SpeedBonus;
    }
    public class SFXGameEffect_MatchConsumable_WeaponDamageBonus : SFXGameEffect_MatchConsumableBase
    {
        public float[] DamageBonus;
        public int WeaponType;
    }
    public class SFXGameEffect_MatchConsumable_WeaponDamageBonus_AssaultRifle : SFXGameEffect_MatchConsumable_WeaponDamageBonus
    {
    }
    public class SFXGameEffect_MatchConsumable_WeaponDamageBonus_Pistol : SFXGameEffect_MatchConsumable_WeaponDamageBonus
    {
    }
    public class SFXGameEffect_MatchConsumable_WeaponDamageBonus_Shotgun : SFXGameEffect_MatchConsumable_WeaponDamageBonus
    {
    }
    public class SFXGameEffect_MatchConsumable_WeaponDamageBonus_SMG : SFXGameEffect_MatchConsumable_WeaponDamageBonus
    {
    }
    public class SFXGameEffect_MatchConsumable_WeaponDamageBonus_SniperRifle : SFXGameEffect_MatchConsumable_WeaponDamageBonus
    {
    }
    public class SFXGameEffect_WeaponDamageBonusFromMatchConsumable : SFXGameEffect
    {
    }
    public class SFXGameEffect_PassiveMaxAmmoBonus : SFXGameEffect_PassiveWeaponBonus
    {
    }
    public class SFXGameEffect_PartBasedArmor_AmmoCapacityBonus : SFXGameEffect_PassiveMaxAmmoBonus
    {
    }
    public class SFXGameEffect_PartBasedArmor_AmmoCapacityBonus_Weak : SFXGameEffect_PassiveMaxAmmoBonus
    {
    }
    public class SFXGameEffect_PartBasedArmor_ConstraintDamageBonus : SFXGameEffect_PartBasedDamageBonus
    {
    }
    public class SFXGameEffect_PartBasedArmor_ConstraintDamageBonus_Weak : SFXGameEffect_PartBasedDamageBonus
    {
    }
    public class SFXGameEffect_PartBasedArmor_HealthBonus : SFXGameEffect_HealthPercentBonus
    {
    }
    public class SFXGameEffect_PartBasedArmor_HealthBonus_Weak : SFXGameEffect_HealthPercentBonus
    {
    }
    public class SFXGameEffect_PartBasedArmor_MeleeDamageBonus : SFXGameEffect_MeleeDamageBonus
    {
    }
    public class SFXGameEffect_PartBasedArmor_MeleeDamageBonus_Weak : SFXGameEffect_MeleeDamageBonus
    {
    }
    public class SFXGameEffect_PartBasedArmor_PowerCooldownBonus : SFXGameEffect_PowerBonus_Cooldown
    {
    }
    public class SFXGameEffect_PartBasedArmor_PowerCooldownBonus_Weak : SFXGameEffect_PowerBonus_Cooldown
    {
    }
    public class SFXGameEffect_PartBasedArmor_PowerDamageBonus : SFXGameEffect_PowerBonus_Damage
    {
    }
    public class SFXGameEffect_PartBasedArmor_PowerDamageBonus_Weak : SFXGameEffect_PowerBonus_Damage
    {
    }
    public class SFXGameEffect_PartBasedArmor_ShieldBonus : SFXGameEffect_ShieldPercentBonus
    {
    }
    public class SFXGameEffect_PartBasedArmor_ShieldBonus_Weak : SFXGameEffect_ShieldPercentBonus
    {
    }
    public class SFXGameEffect_PartBasedArmor_ShieldRegenBonus : SFXGameEffect_ShieldRegenBonus
    {
    }
    public class SFXGameEffect_PartBasedArmor_ShieldRegenBonus_Weak : SFXGameEffect_ShieldRegenBonus
    {
    }
    public class SFXGameEffect_PartBasedArmor_WeaponDamageBonus : SFXGameEffect_WeaponDamageBonus
    {
    }
    public class SFXGameEffect_PartBasedArmor_WeaponDamageBonus_Weak : SFXGameEffect_WeaponDamageBonus
    {
    }
    public class SFXGameEffect_UniqueArmor_Reckoning : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_UniqueArmor_Cerberus : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_UniqueArmor_Collector : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_UniqueArmor_Inferno : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_UniqueArmor_Tank : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_UniqueArmor_Terminus : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGUIData_Store_Intel_AdvancedBioticAmps : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_BattleFootage : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_BattleOfArcturus : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_BioticResearchData : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_DestroyedMiniReaper : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_Feron : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_IntactReaperGun : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_IntelligenceArchives : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_LegionIntel1 : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_LegionIntel2 : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_MedicalUpgrade : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_PrejekPaddlefish : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_SamaraMission : SFXGUIData_Store
    {
    }
    public class ISFXOnlineComponent : Interface
    {
    }
    public class ISFXOnlineComponentAchievement : ISFXOnlineComponent
    {
    }
    public class ISFXOnlineComponentAPI : ISFXOnlineComponent
    {
    }
    public class ISFXOnlineComponentCommerce : ISFXOnlineComponent
    {
        public int __OnConsumeResult__Delegate;
        public int __OnGrantEntitlementResult__Delegate;
        public int __OnProcessAutoGrantsComplete__Delegate;
        public int __OnPromptRedeemCodeResult__Delegate;
        public int __OnPurchaseOfferIdResult__Delegate;
        public int __OnFetchOfferDetailsComplete__Delegate;
        public int __OnDimeConfigLoaded__Delegate;
        public int __OnRefreshDigitalRightsResult__Delegate;
    }
    public class ISFXOnlineComponentGalaxyAtWar : ISFXOnlineComponent
    {
        public int __OnGetRatingsComplete__Delegate;
        public int __OnIncreaseRatingsComplete__Delegate;
        public int __OnSendMessageComplete__Delegate;
        public int __OnGetMessagesComplete__Delegate;
        public int __OnTouchMessagesComplete__Delegate;
        public int __AuthenticateCompleted__Delegate;
    }
    public class SFXOnlineDefine : Object
    {
    }
    public class ISFXOnlineComponentGame : ISFXOnlineComponent
    {
    }
    public class ISFXOnlineComponentGameEntryFlow : ISFXOnlineComponent
    {
    }
    public class ISFXOnlineComponentGameFlow : ISFXOnlineComponent
    {
    }
    public class ISFXOnlineComponentLeaderboard : ISFXOnlineComponent
    {
        public int __OnReadLbListCompleted__Delegate;
        public int __OnGetRankNotificationsCompleted__Delegate;
        public int __OnResultsRetrieved__Delegate;
    }
    public class ISFXOnlineComponentLogin : ISFXOnlineComponent
    {
        public int __OnImportFriendListToBlazeCompleted__Delegate;
        public int __OnAuthTokenRetrieved__Delegate;
    }
    public class ISFXOnlineComponentMatchMakingBot : ISFXOnlineComponent
    {
    }
    public class ISFXOnlineComponentMessaging : ISFXOnlineComponent
    {
    }
    public class ISFXOnlineComponentNotification : ISFXOnlineComponent
    {
    }
    public class ISFXOnlineComponentPlatform : ISFXOnlineComponent
    {
    }
    public class ISFXOnlineComponentStats : ISFXOnlineComponent
    {
        public int __OnReadStatsGroupListCompleted__Delegate;
        public int __OnResultsRetrieved__Delegate;
    }
    public class ISFXOnlineComponentTelemetry : ISFXOnlineComponent
    {
        public int __OnAuthenticate__Delegate;
        public int __OnDisconnect__Delegate;
        public int __CanCollect__Delegate;
    }
    public class ISFXOnlineComponentUserInterface : ISFXOnlineComponent
    {
    }
    public class SFXOnlineBlazeJobUtilities : Object
    {
    }
    public class SFXOnlineEvent : Object
    {
        public string ErrorString;
        public int EventId;
        public float TimeOut;
        public float StartTime;
        public float EndTime;
        public int errorCode;
        public bool IsUnique;
        public bool TimeOutEnabled;
        public SFXOnlineEventType EventType;
        public SFXOnlineEventStatus CurrentStatus;
        public SFXOnlineEventStatusFinished Outcome;
        public SFXOnlineErrorContext ErrorContext;
    }
    public class SFXOnlineComponent : Object
    {
        public SFXOnlineSubscriberEventType[] EventSubscriberTable;
        public int __OnEvent__Delegate;
        public NameReference APIName;
        public int OnlineSubsystem;
        public bool NeedsStateMachine;
    }
    public class SFXOnlineComponentAchievementPS3 : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponentAchievement;
    }
    public class SFXOnlineComponentAchievementXenon : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponentAchievement;
    }
    public class SFXOnlineComponentAvatarAwardXenon : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponent;
    }
    public class SFXOnlineComponentBlaze : SFXOnlineComponent
    {
    }
    public class SFXOnlineComponentBlazeGame : SFXOnlineComponentBlaze
    {
        public Pointer VfTable_IISFXOnlineComponentGame;
        public Pointer _VfTable_BlazeBlazeStateEventHandler;
        public Pointer _VfTable_BlazeGameManagerGameManagerAPIListener;
        public Pointer _VfTable_BlazeGameManagerGameListener;
        public UniqueNetId m_InviterId;
        public InviteData InviteCache;
        public int[] ValidHostingNatTypes;
        public string m_DLC_Protocol;
        public int[] EndOnlineGameCompleteDelegates;
        public int[] FindOnlineGamesCompleteDelegates;
        public int[] CreateOnlineGameCompleteDelegates;
        public int[] QuickMatchCompleteDelegates;
        public int[] JoinOnlineGameCompleteDelegates;
        public int[] UpdateOnlineGameCompleteDelegates;
        public int[] DestroyOnlineGameCompleteDelegates;
        public MPDLCInfo[] m_MPDLCInfo;
        public MPDLCInfo[] m_MissingDLCsInvitee;
        public MPDLCInfo[] m_MissingDLCsInviter;
        public int __OnQuickMatchComplete__Delegate;
        public int __OnCreateOnlineGameComplete__Delegate;
        public int __OnUpdateOnlineGameComplete__Delegate;
        public int __OnFindOnlineGamesComplete__Delegate;
        public int __OnCancelFindOnlineGamesComplete__Delegate;
        public int __OnDestroyOnlineGameComplete__Delegate;
        public int __OnJoinOnlineGameComplete__Delegate;
        public int __OnRegisterPlayerComplete__Delegate;
        public int __OnUnregisterPlayerComplete__Delegate;
        public int __OnStartOnlineGameComplete__Delegate;
        public int __OnEndOnlineGameComplete__Delegate;
        public int __OnArbitrationRegistrationComplete__Delegate;
        public int __OnGameInviteAccepted__Delegate;
        public Pointer m_pNetAdapter;
        public Pointer m_MatchMakingJobId;
        public Pointer m_AcceptingInviteJobId;
        public NameReference m_HostMigrationMsgBoxName;
        public float m_HostMigrationTimeout;
        public float m_HostMigrationMessageMinTime;
        public int m_MatchMakingSessionDurationMs;
        public int m_MinPlayerCount;
        public int m_DesiredPlayerCount;
        public int srHostMigrationInGame;
        public int srHostMigrationInLobby;
        public int srInviteLocalPlayerError;
        public int srPopupOk;
        public int m_MultiplayerTargetVersion;
        public int m_MultiplayerProtocolVersion;
        public int m_ServerMatchMakingRulesVersion;
        public int GameSettings;
        public int GameSearch;
        public int m_PendingGameSettings;
        public int m_UpdatedGameSettings;
        public int m_RunningUpdateRequestCount;
        public int m_DelayedInvite;
        public bool m_IgnoreBlazeServerDisconnect;
        public bool m_AssertOnMatchMakingErrors;
        public bool m_HostMigrationEnabled;
        public bool m_KickedPlayerAlsoBanned;
        public bool m_HostViabilityEnabled;
        public bool bAllowMatchmaking;
        public bool m_LocalPlayerWasKicked;
        public bool m_LeaveGamePending;
    }
    public class SFXOnlineComponentBlazeGameXenon : SFXOnlineComponentBlazeGame
    {
        public Pointer _VfTable_BlazePlatformManagerXb360Listener;
        public float m_CallRestrictedFunctionPeriod;
        public float m_NextAllowedRestrictedFunctionCallTime;
        public bool m_CallRestrictedFunctionMode;
    }
    public class SFXOnlineComponentBlazeHub : SFXOnlineComponentBlaze
    {
        public Pointer VfTable_IISFXOnlineComponentAPI;
        public string BlazeServiceName;
        public string BlazeClientName;
        public Pointer CurrentBlazeHub;
        public Pointer BlazeNetworkAdapter;
        public int DirtySockTimeOutMs;
        public int DirtySockSessionTimeOutMs;
        public int DirtySockConnectionTimeOutMs;
        public bool m_bLock;
        public bool ForceDisableSecureMode;
        public SFXOnlineComponentBlazeHubEnvironment BlazeEnv;
    }
    public class SFXOnlineComponentBlazeLeaderboard : SFXOnlineComponentBlaze
    {
        public Pointer VfTable_IISFXOnlineComponentLeaderboard;
        public Pointer _VfTable_BlazeBlazeStateEventHandler;
        public LeaderboardDefinition[] mLeaderboardDefinitions;
        public LeaderboardId[] mLeaderboardIDs;
        public BlazeRequest[] mBlazeDataRequests;
        public LeaderboardNameFormula[] mLeaderboardNames;
        public int[] RankNotificationCallbacks;
        public RankBypassNotification[] RankBypassNotifications;
        public int __OnResultsRetrieved__Delegate;
        public int __OnReadLbListCompleted__Delegate;
        public int __OnGetRankNotificationsCompleted__Delegate;
        public Pointer mLeaderboardAPI;
        public Pointer mCurrentLeaderboard;
        public Pointer mGlobalLeaderboardView;
        public int srRankColumnHeader;
        public int srUserColumnHeader;
        public int srReplacementGlobalMapName;
        public int srFriendsDuplicateSuffix;
        public int mLbInfoRetrievedCount;
        public int mGlobalLbEntityCount;
    }
    public class SFXOnlineComponentBlazeLogin : SFXOnlineComponentBlaze
    {
        public Pointer VfTable_IISFXOnlineComponentLogin;
        public Pointer _VfTable_BlazeBlazeStateEventHandler;
        public Pointer _VfTable_BlazeLoginManagerLoginManagerListener;
        public AutoConnectAccount[] m_AutoConnectAccounts;
        public string PendingConnectEmail;
        public string PendingConnectPassword;
        public string PendingConnectCountryCode;
        public string PendingConnectLanguageCode;
        public string PendingConnectParentalEmail;
        public byte[] PendingConnectLoginInfo;
        public byte[] PendingConnectPersonaID;
        public SFXOfferDescriptor[] PendingBuyOffers;
        public int __OnAuthTokenRetrieved__Delegate;
        public int __OnReadFriendsComplete__Delegate;
        public int __OnImportFriendListToBlazeCompleted__Delegate;
        public Pointer ConnectionMgr;
        public Pointer LoginMgr;
        public Pointer m_pAuthComponent;
        public int m_SuspendUserPingPeriodMicroSec;
        public int m_SuspendUserPingIdleCalls;
        public int m_MinTimeOut;
        public int PendingConnectBirthDay;
        public int PendingConnectBirthMonth;
        public int PendingConnectBirthYear;
        public int PendingConnectError;
        public int PendingConnectBlazeError;
        public bool PendingConnectSilent;
        public bool PendingConnectInProgress;
        public bool AutoLoginFromIni;
        public bool m_DebugDisableBlazeTimeOut;
        public bool PendingConnectNucleusRefused;
        public bool PendingConnectCerberusRefused;
        public bool PendingConnectNucleusSuccessful;
        public bool PendingConnectProfileChanged;
        public bool PendingConnectAutoLoginAllowed;
        public bool PendingConnectAccountCreation;
        public bool PendingConnectEAProducts;
        public bool PendingConnectThirdParty;
        public bool PendingConnectSubscribeBWNewsLetter;
        public SFXOnlineConnectMode PendingConnectMode;
    }
    public class SFXOnlineComponentBlazeLoginPC : SFXOnlineComponentBlazeLogin
    {
    }
    public class SFXOnlineComponentBlazeLoginPS3 : SFXOnlineComponentBlazeLogin
    {
    }
    public class SFXOnlineComponentBlazeLoginXenon : SFXOnlineComponentBlazeLogin
    {
        public int __OnExternalUIChange__Delegate;
    }
    public class SFXOnlineComponentBlazeMessaging : SFXOnlineComponentBlaze
    {
        public Pointer VfTable_IISFXOnlineComponentMessaging;
        public Pointer _VfTable_BlazeBlazeStateEventHandler;
        public BlazeMsgRequest[] mBlazeMsgRequests;
        public Pointer mMessagingAPI;
        public int mAchievementMsgStrRef;
    }
    public class SFXOnlineComponentBlazeNotification : SFXOnlineComponentBlaze
    {
        public Pointer VfTable_FCallbackEventDevice;
        public Pointer VfTable_IISFXOnlineComponentNotification;
        public Pointer m_pBlazeUtil;
        public int PRCMessageTitle;
        public int AllianceNewsItemMessageTitle;
        public bool m_DisableLiveBINI;
        public bool bSkipLiveINIUpdateOnLogin;
        public EDownloadDataStep m_CurrentDownloadStep;
    }
    public class SFXOnlineJob : Object
    {
        public Pointer[] BlazeJobIds;
        public int JobId;
        public int SchedulingsLeft;
        public int RescheduleCount;
        public bool JobIsCanceled;
        public bool IsProcessing;
        public OnlineJobErrorCode RunningError;
        public OnlineJobCategory JobCategory;
        public OnlineJobType JobType;
    }
    public class SFXOnlineComponentBlazeStats : SFXOnlineComponentBlaze
    {
        public Pointer VfTable_IISFXOnlineComponentStats;
        public Pointer _VfTable_BlazeBlazeStateEventHandler;
        public string[] mStatsGroupNames;
        public BlazeStatsRequest[] mBlazeStatsRequests;
        public int[] FlushOnlineStatsCompleteDelegates;
        public int __OnResultsRetrieved__Delegate;
        public int __OnReadStatsGroupListCompleted__Delegate;
        public int __OnGetRankNotifications__Delegate;
        public int __OnFlushOnlineStatsComplete__Delegate;
        public int __OnReadOnlineStatsComplete__Delegate;
        public int __OnRegisterHostStatGuidComplete__Delegate;
        public Pointer mStatsAPI;
        public int mGameReportingJob;
        public int srRankColumnHeader;
        public int srUserColumnHeader;
    }
    public class SFXOnlineComponentBlazeTelemetry : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponentTelemetry;
        public Pointer _VfTable_BlazeBlazeStateEventHandler;
        public int __CanCollect__Delegate;
        public int __OnAuthenticate__Delegate;
        public int __OnDisconnect__Delegate;
        public int bConnectedToChannel;
    }
    public class SFXOnlineComponentCommerce : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponentCommerce;
        public Pointer _VfTable_BlazeBlazeStateEventHandler;
        public Pointer _VfTable_DIMEDimeStrategy;
        public SFXOnlineEntitlementLookupInfo[] aServerEntitlementGrantIds;
        public int[] aServerEntitlementRevokeIds;
        public SFXOnlineEntitlementLookupInfo[] aNamEntitlements;
        public BWEntitlementInfo[] aCachedEntitlements;
        public BWEntitlementInfo[] aCachedDIMEEntitlements;
        public BWOfferInfo[] aCachedOffers;
        public BWConsumableInfo[] aCachedConsumables;
        public string sWalletBalance;
        public BWOfferId[] aFetchDetailsIDList;
        public SFXOnlineEntitlementLookupInfo[] aDLCEntitlementInfo;
        public int __OnRefreshDigitalRightsResult__Delegate;
        public int __OnConsumeResult__Delegate;
        public int __OnGrantEntitlementResult__Delegate;
        public int __OnProcessAutoGrantsComplete__Delegate;
        public int __OnPromptRedeemCodeResult__Delegate;
        public int __OnPurchaseOfferIdResult__Delegate;
        public int __OnFetchOfferDetailsComplete__Delegate;
        public int __OnDimeConfigLoaded__Delegate;
        public int CurrentDimeState;
        public bool bAwaitingDimeForRefresh;
    }
    public class SFXOnlineComponentCoordinator : Object
    {
        public Pointer VfTable_IISFXOnlineComponent;
        public int __OnEvent__Delegate;
        public int EventList;
        public int EventNotifier;
    }
    public class SFXOnlineComponentGalaxyAtWar : SFXOnlineComponentBlaze
    {
        public Pointer VfTable_IISFXOnlineComponentGalaxyAtWar;
        public string PersonaId;
        public string BaseUrl;
        public string SessionKey;
        public int[] m_CachedSecurityRatings;
        public int[] m_CachedWarAssets;
        public int __AuthenticateCompleted__Delegate;
        public int __OnGetRatingsComplete__Delegate;
        public int __OnIncreaseRatingsComplete__Delegate;
        public int __OnSendMessageComplete__Delegate;
        public int __OnGetMessagesComplete__Delegate;
        public int __OnTouchMessagesComplete__Delegate;
        public int LevelChangeStrRef;
        public int m_CachedLevel;
        public bool m_CachedRatingsValid;
        public bool m_CachedWarAssetsValid;
    }
    public class SFXOnlineComponentGameFlow : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponent;
        public NameReference[] m_TestStateNames;
        public NameReference[] m_TestInputNames;
        public NameReference m_Substate;
        public float m_TimeElapsedInState;
        public float m_LobbyLongWaitingTime;
        public float m_GameLongActionTime;
        public JoinFailureReason m_JoinFailureReason;
        public SFXOnlineGameStatus m_MatchMakingTimeStatus;
    }
    public class SFXOnlineComponentHTTPManager : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponent;
        public int[] mRequests;
        public Pointer mHttpRef;
        public Pointer mDataResponse;
        public int mCurrentRequest;
        public int mDataCount;
        public int mRequestTimeout;
        public int mRequestBuffer;
        public int mDebugVerbosity;
        public bool mServiceStarted;
        public ECHTTPManagerState mState;
    }
    public class SFXOnlineComponentImageManager : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponent;
        public SFXOnlineImageRequest[] mPendingRequests;
        public SFXOnlineImageRequest[] mCompletedRequests;
        public string mBaseUrl;
        public int __OnImageRequestCompleted__Delegate;
        public int mMaxImages;
        public int mMaxBytes;
    }
    public class SFXOnlineComponentJobQueue : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponent;
        public int[] PendingJobs;
        public int[] ProcessingJobs;
        public int __JobPredicate__Delegate;
        public int JobThrottlesMS;
        public int ThrottleValuesMS;
        public int NextJobId;
        public bool SkipJobProcessing;
    }
    public class SFXOnlineComponentOrigin : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponent;
        public QWord mUserId;
        public string mPresenceString;
        public string mGamePresenceString;
        public string mSessionPresenceString;
        public string mDisplayName;
        public PCFriend[] mFriendsListCache;
        public PCFriend[] mBlockListCache;
        public SFXOnlineEntitlementLookupInfo[] mEntitlementCache;
        public string mOriginVersion;
        public string mInviteInfo;
        public int[] mOriginClosedDelegates;
        public int[] mOriginAuthKeyDelegates;
        public int[] mWalletBalanceDelegates;
        public string mContentId;
        public string mMultiplayerId;
        public string mCurrencyId;
        public string mOfferGroup;
        public string mAccessEntitlement;
        public int __OnOriginClosedDelegate__Delegate;
        public int __OnOriginAuthKey__Delegate;
        public int __OnWalletBalanceAvailable__Delegate;
        public int mTitleStringRef;
        public float mTimeBetweenOnlineChecks;
        public int mCheckoutTimeout;
        public int mFriendQueryTimeout;
        public int mEntitlementQueryTimeout;
        public float mTimeSinceLastOnlineCheck;
        public bool mDisableOrigin;
        public bool mServiceStarted;
        public bool mIsLoggedIn;
        public bool mIsOriginDisabled;
        public bool mIsEntitlementCacheAvailable;
        public bool mIsPendingConnection;
        public bool mIsOverlayUp;
        public bool mIsOverlayEnabled;
        public bool mOldClient;
        public bool mFriendsListUpToDate;
        public bool mIsOnline;
        public bool mPendingInviteJoin;
        public EPCPresenceStates mPresenceState;
    }
    public class SFXOnlineComponentPlatformPC : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponentPlatform;
        public OnlineFriend[] CachedFriendListPC;
    }
    public class SFXOnlineComponentPlatformPS3 : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponentPlatform;
        public UniqueNetId mInviterId;
        public SFXPS3_MinimumAgeData[] MinimumAgeByCountry;
        public UniqueNetId[] PendingRecentPlayers;
        public int __OnSignInComplete__Delegate;
        public int srInviteFriend;
        public int mAttachmentDataId;
        public int CachedFriendsListVersion;
        public int LastInputDeviceConnectedMask;
        public bool mDispatchInviteOnNextTick;
        public bool m_bLaunchedSignInUI;
    }
    public class SFXOnlineComponentPlatformXenon : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponentPlatform;
        public CachedLoginState LastLoginState;
        public Pointer[] OverlappedTasks;
        public OnlineFriend[] CachedFriendList;
        public int NumLogins;
        public int MaxNumFriends;
        public int LastInputDeviceConnectedMask;
        public float SigninCountDownDelay;
        public int NumPartyMembers;
        public bool bIsInSignInUI;
        public byte CachedLocalUserNumForAsyncRequest;
    }
    public class SFXOnlineComponentUnrealPlayer : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponent;
        public SFXProfileSettingsCache ProfileCache;
        public BioPerUserDelegateLists PerUserDelegates;
        public LoginStatusDelegates PlayerLoginStatusDelegates;
        public SFXCachedAchievements[] CachedAchievementList;
        public int[] LocalPlayerStorageReadDelegates;
        public int[] LocalPlayerStorageWriteDelegates;
        public int[] RemotePlayerStorageReadDelegates;
        public int[] ReadFriendsDelegates;
        public int[] LoginCancelledDelegates;
        public int[] LoginFailedDelegates;
        public int[] LogoutCompletedDelegates;
        public int[] LoginChangeDelegates;
        public string ProfileDataDirectory;
        public string ProfileDataDirectoryInstalled;
        public string ProfileDataExtension;
        public string LoggedInPlayerName;
        public int __OnProfileDataChanged__Delegate;
        public int __OnLoginChange__Delegate;
        public int __OnLoginCancelled__Delegate;
        public int __OnMutingChange__Delegate;
        public int __OnFriendsChange__Delegate;
        public int __OnLoginFailed__Delegate;
        public int __OnLogoutCompleted__Delegate;
        public int __OnLoginStatusChange__Delegate;
        public int __OnReadProfileSettingsComplete__Delegate;
        public int __OnWriteProfileSettingsComplete__Delegate;
        public int __OnReadPlayerStorageComplete__Delegate;
        public int __OnReadPlayerStorageForNetIdComplete__Delegate;
        public int __OnWritePlayerStorageComplete__Delegate;
        public int __OnReadFriendsComplete__Delegate;
        public int __OnKeyboardInputComplete__Delegate;
        public int __OnAddFriendByNameComplete__Delegate;
        public int __OnFriendInviteReceived__Delegate;
        public int __OnReceivedGameInvite__Delegate;
        public int __OnJoinFriendGameComplete__Delegate;
        public int __OnFriendMessageReceived__Delegate;
        public int __OnReadAchievementsComplete__Delegate;
        public int __OnUnlockAchievementComplete__Delegate;
        public int PlayerStorageCache;
    }
    public class SFXOnlineComponentUnrealPlayerEx : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponent;
        public SFXDeviceIdCache DeviceCache;
        public int __OnDeviceSelectionComplete__Delegate;
        public int __OnProfileDataChanged__Delegate;
    }
    public class SFXOnlineComponentUnrealSystem : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponent;
        public int[] ExternalUIChangeDelegates;
        public int[] ControllerChangeDelegates;
        public TitleFile[] TitleManagedFiles;
        public int[] ReadTitleFileCompleteDelegates;
        public int[] StorageDeviceChangeDelegates;
        public int[] ConnectionStatusChangeDelegates;
        public int[] LinkStatusChangeDelegates;
        public int __OnLinkStatusChange__Delegate;
        public int __OnExternalUIChange__Delegate;
        public int __OnControllerChange__Delegate;
        public int __OnConnectionStatusChange__Delegate;
        public int __OnStorageDeviceChange__Delegate;
        public int __OnReadTitleFileComplete__Delegate;
        public ENetworkNotificationPosition CurrentNotificationPosition;
    }
    public class SFXOnlineComponentVoiceInterface : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponent;
        public SFXOnlineRemoteTalker[] RemoteTalkers;
        public int[] TalkingDelegates;
        public int __OnPlayerTalkingStateChange__Delegate;
        public int __OnRecognitionComplete__Delegate;
        public Pointer VoiceEngine;
        public LocalTalker LocalTalkers;
    }
    public class SFXOnlineComponentXenonLiveParty : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponent;
        public PartyGameInviteDelegates PartyChatGameInviteDelegates;
        public Pointer[] AsyncTasks;
        public int __OnSendPartyGameInvitesComplete__Delegate;
    }
    public class SFXOnlineComponentXMLParser : SFXOnlineComponent
    {
        public Pointer VfTable_IISFXOnlineComponent;
        public Pointer mXmlSource;
    }
    public class SFXOnlineEvent_Integer : SFXOnlineEvent
    {
        public int m_nInteger;
    }
    public class SFXOnlineEvent_Invite : SFXOnlineEvent
    {
        public OnlineGameSearchResult SearchResult;
    }
    public class SFXOnlineEvent_String : SFXOnlineEvent
    {
        public string StringData;
    }
    public class SFXOnlineEvent_Notification : SFXOnlineEvent_String
    {
        public string m_sImageName;
        public int m_nPriority;
    }
    public class SFXOnlineEvent_PlatformKeyboardUI : SFXOnlineEvent
    {
        public string Response;
        public string TitleText;
        public string DescriptionText;
        public string DefaultText;
        public Pointer ResponseBuffer;
        public bool ShouldValidate;
        public bool RouteThroughConsole;
        public byte LocalUserNum;
    }
    public class SFXOnlineEvent_QuickMatch : SFXOnlineEvent
    {
        public int GameToCreate;
        public int GameId;
        public SFXOnlineQuickMatchOutcome SearchOutcome;
    }
    public class SFXOnlineEvent_SeenPlayer : SFXOnlineEvent
    {
        public Pointer SeenPlayer;
    }
    public class SFXOnlineEvent_Tick : SFXOnlineEvent
    {
        public Double LastTickTime;
        public float DeltaTime;
    }
    public class SFXOnlineEventList : Object
    {
        public int[] EventList;
    }
    public class SFXOnlineEventNotifier : Object
    {
        public SFXOnlineEventNotify OnlineEventNotifyTable;
        public SFXOnlineNotifyQueueInfo[] EventNotifyAddQueue;
        public SFXOnlineNotifyQueueInfo[] EventNotifyRemoveQueue;
        public int __OnEvent__Delegate;
        public bool bQueuingEnabled;
    }
    public class SFXOnlineGameSearch : OnlineGameSearch
    {
    }
    public class SFXOnlineGameSettings : OnlineGameSettings
    {
        public UniqueNetId invitedUserId;
        public MPMapInfo[] MasterMapList;
        public string[] AvailableMaps;
        public MPPrivacyInfo[] PrivacyTypes;
        public MPEnemyInfo[] EnemyTypes;
        public MPChallengeInfo[] ChallengeTypes;
        public string AnyMapImage;
        public string AnyEnemyImage;
        public string AnyChallengeImage;
        public string mME3MapName;
        public int srAnyMap;
        public int srAnyEnemy;
        public int srAnyChallenge;
        public int EnemyType;
        public bool mMapIsRequired;
        public bool mCreateNewMatch;
        public bool mFromGalaxyMap;
        public SFXOnlineGameDifficulty Difficulty;
    }
    public class SFXOnlineHTTPRequest : Object
    {
        public string mURL;
        public string mConnectionString;
        public string mResultBody;
        public byte[] mResultBinary;
        public string mResultHeader;
        public HTTPParameter[] mParameters;
        public HTTPParameter[] mHeaderParameters;
        public int mResultSize;
        public int mResultResponseCode;
        public bool mPost;
        public bool mBinary;
        public bool mResultSuccess;
        public bool mComplete;
        public bool mInProgress;
        public EHTTPRequest mRequestType;
    }
    public class SFXOnlineJobGameReporting : SFXOnlineJob
    {
        public string ReportName;
        public int __GameReportingCallback__Delegate;
        public Pointer mGameReport;
    }
    public class SFXOnlineJobGaWHTTPRequest : SFXOnlineJob
    {
        public int mAuthHTTPRequest;
        public int mSecondHTTPRequest;
        public int mBlazeErrorCode;
        public bool bKickedOffAuthRequest;
        public bool bKickedOffSecondRequest;
    }
    public class SFXOnlineJobGaWHTTPGetMessages : SFXOnlineJobGaWHTTPRequest
    {
        public int __OnGetMessagesComplete__Delegate;
        public int mMsgType;
    }
    public class SFXOnlineJobGaWHTTPGetRatings : SFXOnlineJobGaWHTTPRequest
    {
        public int __OnGetRatingsComplete__Delegate;
        public int MaxSecurityRating;
        public bool getWarAssets;
    }
    public class SFXOnlineJobGaWHTTPIncreaseRatings : SFXOnlineJobGaWHTTPRequest
    {
        public MapEntry[] securityRatingIncrease;
        public MapEntry[] warAssetIncrease;
        public int __OnIncreaseRatingsComplete__Delegate;
        public int defaultRatingIncrease;
    }
    public class SFXOnlineJobGaWHTTPSendMessage : SFXOnlineJobGaWHTTPRequest
    {
        public string mSendMsgParam1;
        public string mSendMsgParam2;
        public string mSendMsgParam3;
        public int __OnSendMessageComplete__Delegate;
        public int mMsgType;
    }
    public class SFXOnlineJobGaWHTTPTouchMessages : SFXOnlineJobGaWHTTPRequest
    {
        public int __OnTouchMessagesComplete__Delegate;
        public int mMsgType;
    }
    public class SFXOnlineJobGetAuthToken : SFXOnlineJob
    {
        public int __OnAuthTokenRetrieved__Delegate;
    }
    public class SFXOnlineJobGetLeaderboardData : SFXOnlineJob
    {
        public UniqueNetId mPlayerId;
        public LeaderboardStatScope Scope;
        public int __OnJobCompletion__Delegate;
        public int __OnResultsRetrieved__Delegate;
        public Pointer ExternalData;
        public int nLeaderboardId;
        public int nRankStart;
        public int nRankRange;
        public bool bCenteredLeaderboard;
        public bool bFriendLeaderboard;
    }
    public class SFXOnlineJobGetLeaderboardList : SFXOnlineJob
    {
        public int __OnJobCompletion__Delegate;
    }
    public class SFXOnlineJobGetStatsGroupList : SFXOnlineJob
    {
        public int __OnJobCompletion__Delegate;
    }
    public class SFXOnlineJobHTTPRequest : SFXOnlineJob
    {
        public int __OnJobComplete__Delegate;
        public int mRequest;
    }
    public class SFXOnlineJobImageRequest : SFXOnlineJob
    {
        public SFXOnlineImageRequest mRequest;
        public int __OnJobComplete__Delegate;
    }
    public class SFXOnlineJobImportFriendListToBlaze : SFXOnlineJob
    {
        public int __OnJobCompletion__Delegate;
        public bool bCallPostImportFriendListToBlaze;
    }
    public class SFXOnlineJobLoadSettings : SFXOnlineJob
    {
        public SettingsPair[] Settings;
        public int __LoadSettingsCallback__Delegate;
        public int CallbackArg;
        public OnlineJobErrorCode RunningErrorCode;
    }
    public class SFXOnlineJobPurgeMessages : SFXOnlineJob
    {
        public int MapId;
        public bool PurgeAllMessages;
    }
    public class SFXOnlineJobReceiveMessage : SFXOnlineJob
    {
        public int nMapId;
    }
    public class SFXOnlineJobSaveSettings : SFXOnlineJob
    {
        public SettingsPair[] Settings;
        public int __SaveSettingsCallback__Delegate;
        public int CallbackArg;
        public int OutstandingSubJobs;
        public bool CallbackHasRun;
    }
    public class SFXOnlineJobSendMessage : SFXOnlineJob
    {
        public string[] sendToPersonaNames;
        public string[] sParams;
        public SFXOnlineMessageType MessageType;
    }
    public class SFXOnlineStatsWrite : OnlineStatsWrite
    {
    }
    public class SFXOnlineSubsystem : OnlineSubsystem
    {
        public string GameProtocolVersion;
        public string m_IsolatedMatchMakingCode;
        public SFXOnlineComponentDescription[] ComponentClassList;
        public string OnlineUIClass;
        public string OnlineBotClass;
        public string OnlineGameEntryFlowClass;
        public string FontPackageName;
        public int TickEvent;
        public int IniVersionId;
    }
    public class SFXPowerCustomActionMP_Barrier : SFXPowerCustomAction_Barrier
    {
    }
    public class SFXPowerCustomActionMP_DarkChannel : SFXPowerCustomAction_DarkChannel
    {
    }
    public class SFXPowerCustomActionMP_GethShieldBoost : SFXPowerCustomAction_GethShieldBoost
    {
    }
    public class SFXPowerCustomActionMP_Marksman : SFXPowerCustomAction_Marksman
    {
    }
    public class SFXPowerCustomActionMP_Slam : SFXPowerCustomAction_Slam
    {
    }
    public class SFXPowerCustomActionMP_TechArmor_Turian : SFXPowerCustomActionMP_TechArmor
    {
    }
    public class SFXPowerCustomActionMP_TurianMeleePassive : SFXPowerCustomActionMP_MeleePassiveBase
    {
    }
    public class SFXGameEffect_WeaponStabilityBonus : SFXGameEffect
    {
    }
    public class SFXPowerCustomActionMP_TurianPassive : SFXPowerCustomActionMP_PassiveBase
    {
        public PowerData WeaponStability;
        public float Evolve_WeaponStabilityBonus1;
        public float Evolve_WeaponStabilityBonus2;
    }
    public class SFXPowerCustomAction_SentryTurretDisruptorAmmo : SFXPowerCustomAction_AmmoPower
    {
    }
    public class SFXPowerCustomAction_ShieldDroneBuff : SFXPowerCustomAction
    {
        public float ShieldBonus;
    }
    public class BioSeqAct_CreatureLog : BioSequenceLatentAction
    {
        public string[] CreatureToProfile;
    }
    public class BioSeqAct_StatLog : SequenceAction
    {
    }
    public class BioTestArrayPropHelperObject : Object
    {
        public BioTestArrayPropStruct[] m_lstElements;
    }
    public class BioTestPlayerInput : BioPlayerInput
    {
        public int __OnPreProcessInput__Delegate;
        public int __OnPostProcessInput__Delegate;
    }
    public class BioUnitTest2DAs : UnitTestCase
    {
    }
    public class BioUnitTestAppearance : UnitTestCase
    {
    }
    public class BioUnitTestBINI : UnitTestCase
    {
        public byte[] UTF8Buffer;
        public byte[] UTF16Buffer;
        public byte[] UTF16ValueBuffer;
        public string BINIFilename;
        public string Platform;
        public Pointer m_pBINI;
    }
    public class BioUnitTestCaseMP : Actor
    {
        public string m_sRequiredMap;
        public int m_nSimulatedPacketLoss;
        public int m_nSimulatedPacketOrder;
        public int m_nSimulatedPacketDup;
        public int m_nSimulatedPacketLag;
        public int m_nSimulatedPacketLagVariance;
        public int m_nSessionID;
        public int m_pController;
        public int m_pRunner;
        public bool m_bNeedsClientReconnect;
        public bool m_bRequiresLevelLoads;
        public bool m_bPerformNetStressTest;
    }
    public class BioUnitTestConversations : UnitTestCase
    {
        public string m_sTestPawnAsset;
        public string m_sTestConversation;
        public string m_sTestPoseAnim;
        public string m_sTestGestureAnim;
        public int[] m_aTestActors;
        public Pointer m_pReplayScript;
        public int m_pConversation;
        public int m_pStartConvKismetAction;
        public int m_pStartConvKismetEvent;
        public int m_pTestStage;
        public int m_nConvResRefID;
        public float m_fReplayScriptTimeout;
        public int m_nStageTestState;
        public bool m_bConversationSetUp;
    }
    public class BioUnitTestMisc : UnitTestCase
    {
    }
    public class BioUnitTestMPCover : BioUnitTestCaseMP
    {
    }
    public class BioUnitTestMPMatchMakingBot : UnitTestCase
    {
        public int AttempCount;
        public int MaxAttemptToGetInGame;
        public float DelayBetweenAttempts;
        public bool m_bSkipMMBotTest;
    }
    public class BioUnitTestMPMatchMakingStates : BioUnitTestCaseMP
    {
    }
    public class BioUnitTestMPMonitor : Actor
    {
        public int[] m_lstReferences;
        public bool m_bClientIsSetup;
    }
    public class BioUnitTestMPPlayerMovement : BioUnitTestCaseMP
    {
    }
    public class BioUnitTestMPPurchasableItems : BioUnitTestCaseMP
    {
    }
    public class BioUnitTestMPSample : BioUnitTestCaseMP
    {
    }
    public class BioUnitTestMPWeapons : BioUnitTestCaseMP
    {
    }
    public class BioUnitTestReplication : UnitTestCase
    {
    }
    public class BioUnitTestReplication_SFXModule : SFXModule
    {
        public int m_nTestReplication;
        public int m_nTestConditionList1;
        public int m_nTestConditionList2;
        public int m_nTestIntReplication;
        public float m_fTestFloatReplication;
        public int m_nTestNetDirty;
        public int m_nTestNetInitial;
        public int m_nTestNetOwner;
        public int m_nTestRepNotify;
        public bool m_bTestBoolReplication;
    }
    public class BioUnitTestReplication_SFXModuleNonReplicated : SFXModule
    {
        public int m_nTestReplication;
        public int m_nTestConditionList1;
        public int m_nTestConditionList2;
        public int m_nTestIntReplication;
        public float m_fTestFloatReplication;
        public int m_nTestNetDirty;
        public int m_nTestNetInitial;
        public int m_nTestNetOwner;
        public int m_nTestRepNotify;
        public bool m_bTestBoolReplication;
    }
    public class BioUnitTestReplication_SFXModuleOverflow : SFXModule
    {
        public int m_lstVariables1;
        public int m_lstVariables2;
        public int m_lstVariables3;
        public int m_lstVariables4;
    }
    public class BioUnitTestReplicationMP : BioUnitTestCaseMP
    {
        public int m_nAttemptsRemaining;
    }
    public class BioUnitTestRunnerMP : TestFrameworkBase
    {
        public Map_Mirror m_mapActorNameToPose;
        public string m_sFilterClass;
        public string m_sFilterFunction;
        public int[] SignalledControllers;
        public PendingUnitTest[] m_lstPendingUnitTests;
        public string m_sFailureFileName;
        public string m_sFailureMessage;
        public int[] m_lstMonitorActors;
        public int[] m_lstClientUnitTestCases;
        public int[] m_lstReferences;
        public Pointer SpawnInstanceManager;
        public NameReference nmPendingSignalFunction;
        public int ClientCount;
        public float m_fSignalTimeRemaining;
        public int m_nTestsRun;
        public int m_nTestsFailed;
        public int m_nFailureLineNumber;
        public int m_nTestsExecuted;
        public int m_nHeapCheckFrequency;
        public int m_nCurrentSessionID;
        public int m_nSignalStepId;
        public int m_pHostUnitTestCase;
        public int m_pExecuteOnContext;
        public bool m_bIsConsoleDriven;
        public bool m_bSignalHasTimeOut;
        public bool m_bSignalTimedOut;
        public bool m_bIsProcessingTest;
        public bool m_bIsWaitingForNewTest;
        public bool m_bHasSetupListenServer;
        public bool m_bNeedsSpawnInstances;
        public bool m_bIsSpawning;
        public bool m_bNeedsClientFrameworkSetup;
        public bool m_bNeedInstanceCleanup;
        public bool m_bIsUnitTestFinishCalled;
        public bool m_bTestSucceeded;
        public bool m_bConsoleStartReceived;
        public bool m_bIsReadyForTestEntry;
        public bool m_bFailureError;
        public bool m_bSetupFailed;
        public bool m_bTickedDeferralsLastFrame;
        public bool m_bIsPendingExit;
        public bool m_bShouldPollThreadHealth;
    }
    public class BioUnitTestRunnerSP : UnitTestRunner
    {
        public int[] m_lstReferences;
    }
    public class BioUnitTestSave : UnitTestCase
    {
        public string m_sCareerName;
        public string m_sME2SaveNamePC;
        public string m_sME2SaveNameXbox;
        public string m_sME2SaveNamePS3;
        public string m_sLevelName;
        public string m_sPlayerName;
        public string m_sClassName;
        public int m_nPendingAction;
        public int m_nPendingType;
        public int m_nSaveSlot;
        public float m_fMaxLoadTime;
        public int m_nLoadTime;
        public int m_nSaveTime;
        public int m_nDeleteTime;
        public int m_nOverwriteTime;
        public int m_nGalaxyState;
        public int m_nGalaxyStateIndex;
        public int m_nGalaxyState_Galaxy;
        public int m_nGalaxyState_System;
        public float m_fLocationX;
        public float m_fLocationY;
        public float m_fLocationZ;
        public float m_fCurrentXP;
        public int m_nNotoriety;
        public int m_nLevel;
        public int m_nTalentPoints;
        public int m_SaveGameLoaded;
    }
    public class BioUnitTestSerialization : UnitTestCase
    {
    }
    public class BioUnitTestSFXModules : UnitTestCase
    {
        public Vector m_vOriginalLocation;
        public NameReference m_nmModuleStreamInWaypointTag;
        public int m_nNumOriginalActors;
    }
    public class BioUnitTestSpawnKillDeadMP : BioUnitTestCaseMP
    {
        public string EnemyName;
        public int EnemyPawn;
    }
    public class BioUnitTestTPoseMP : BioUnitTestCaseMP
    {
    }
    public class BioUnitTestUnrealScript : UnitTestCase
    {
        public InterpCurveFloat Curve;
        public int __DelegateTest__Delegate;
    }
    public class BioUnitTestUnrealScript_TestBase : Object
    {
        public Pointer VfTable_IBioUnitTestUnrealScript_TestInterface;
    }
    public class BioUnitTestUnrealScript_TestDerived : BioUnitTestUnrealScript_TestBase
    {
    }
    public class BioUnitTestUnrealScript_TestInterface : Interface
    {
    }
    public class ISFXNativeInterfaceWithDelegate : Interface
    {
        public int __OnTestFunction__Delegate;
    }
    public class RvrUnitTestConditional : UnitTestCase
    {
        public RvrUnitTestConditional_PlotBool[] Bools;
        public RvrUnitTestConditional_PlotInt[] Ints;
        public RvrUnitTestConditional_PlotFloat[] Floats;
        public string Description;
        public int ConditionalID;
        public int Argument;
        public bool ExpectedResult;
        public bool IsReal;
    }
    public class SFXGUIUnitTestMovieExtension : SFXGUIMovieExtension
    {
        public string LobbyModeOverride;
        public int LobbyPreviousSubScreenOverride;
        public bool bMessageBoxAPressed;
        public bool bMessageBoxBPressed;
        public bool bCharacterCreationStarted;
        public bool bCharacterSelected;
        public bool bCharacterDeleted;
        public bool bTintSwatchSelected;
        public bool bCharacterCreated;
    }
    public class SFXImplementNativeInterfaceWithDelegateNative : Object
    {
        public Pointer VfTable_IISFXNativeInterfaceWithDelegate;
        public int __OnTestFunction__Delegate;
        public int TestInt;
    }
    public class SFXUnitTestAsyncLoading : UnitTestCase
    {
        public SFXUnitTestAsyncLoading_CallbackState CurrentState;
        public string TestFilename;
        public string RequestSourceFile;
        public Pointer Buffer;
    }
    public class SFXUnitTestDynamicArraySort : UnitTestCase
    {
        public int __StringSort__Delegate;
        public int __NameSort__Delegate;
    }
    public class SFXUnitTestGUI : UnitTestCase
    {
        public UnitTestInputEvent CurrentEvent;
        public UnitTestInputEvent[] InputQueue;
        public int __DelayedFunction__Delegate;
        public int PC;
        public int GUIController;
    }
    public class SFXUnitTestGUIMain : SFXUnitTestGUI
    {
        public int UnitTestMovieResource;
        public int UnitTestMovie;
        public int messageBox;
        public bool bMessageBox_APressed;
        public bool bMessageBox_BPressed;
    }
    public class SFXUnitTestGUIMainMP : SFXUnitTestGUI
    {
        public SubTestParams CurrentSubTest;
        public SubTestParams[] PendingTests;
        public string CustomMatchButtonPath;
        public string LeaderboardsButtonPath;
        public string CharacterButtonPath;
        public string WeaponsButtonPath;
        public string StoreButtonPath;
        public string ReadyButtonPath;
        public string MatchSettingsButtonPath;
        public string LobbyLeaderboardsButtonPath;
        public string ReadyButtonCheckboxPath;
        public string PlayerIndicatorPath;
        public string CustomMatchScreenBackButton;
        public string MatchSettingsScreenBackButton;
        public string LeaderboardScreenBackButton;
        public string TalentsLevelUpScreenBackButton;
        public string StoreScreenBackButton;
        public string ToggleDetailsButtonPath;
        public string MatchResultsContinueButtonPath;
        public string MatchRewardsContinueButtonPath;
        public string TintSwatch1Path;
        public string ObjectiveProgressBarPath;
        public string MarkerClipName;
        public string ScoreTagPath;
        public string MODE_Menu;
        public string MODE_Lobby;
        public int __SubTestFunction__Delegate;
        public int __SuccessFunction__Delegate;
        public int LobbyScreen;
        public int CustomMatchScreen;
        public int MatchSettingsScreen;
        public int LeaderboardScreen;
        public int TalentsLevelUpScreen;
        public int WeaponsScreen;
        public int StoreScreen;
        public int MatchResultsScreen;
        public int AppearanceScreen;
        public int MarkersMovie;
        public int MPHudMovie;
        public int ScoreTagsMovie;
        public float CurrentTestStartTime;
        public float DefaultTestDelay;
        public float DefaultTestTimeout;
        public int ReadyButtonOnFrame;
        public int PlayerIndicatorOnFrame;
        public int NumTintSwatchRows;
        public bool bSkipGUITests;
    }
    public class SFXUnitTestNativeInterfaceDelegates : UnitTestCase
    {
        public int[] TargetInterfaces;
        public int[] TargetClasses;
    }
    public class SFXTreasureDataLive : SFXTreasureData
    {
    }
    public class SFXWeapon_AssaultRifle_Collector : SFXWeapon_AssaultRifle_Base
    {
    }
    public class SFXWeapon_AssaultRifle_Valkyrie : SFXWeapon_AssaultRifle_Base
    {
        public float MaxProjectileCount;
    }
    public class SFXDamageType_ArcProjector : SFXDamageType
    {
    }
    public class SFXWeapon_Heavy_ArcProjector : SFXHeavyWeapon
    {
        public EAICustomAction[] AnimatedReactions;
        public ScreenShakeStruct ImpactCameraShake;
        public NameReference BeamEffectCategory;
        public int ImpactEffect;
        public int PSC_Beam;
        public int PSC_HoloSight;
        public int PSC_HoloChargeUp;
        public int Rumble;
        public int ArcFireSound;
        public int NumberOfCharges;
        public float MaxJumpDistance;
        public float JumpDelay;
        public float DamageDuration;
        public float RobotDamageMultiplier;
        public float RobotStunLength;
        public float DamageFalloff;
        public float HoloEmitterDelay;
        public float TraceZOffset;
        public bool BeamStarted;
        public bool HoloSightEnabled;
    }
    public class SFXDamageType_FreezeGun : SFXDamageType_HeavyWeapon
    {
    }
    public class SFXProjectile_FreezeBlast : SFXProjectile_Explosive
    {
        public EAICustomAction[] AnimatedReactions;
        public float FreezeDuration;
    }
    public class SFXWeapon_Heavy_Avalanche : SFXHeavyWeapon
    {
        public int Rumble;
        public int ChargeEffect;
    }
    public class SFXProjectile_Grenade : SFXProjectile_Explosive
    {
        public float ProjectileSpeedMin;
        public float ProjectileSpeedMax;
        public float RotationsPerSecond;
        public int FuseSound;
    }
    public class SFXWeapon_Heavy_GrenadeLauncher : SFXHeavyWeapon
    {
    }
    public class SFXWeapon_Heavy_ParticleBeam : SFXWeapon_Heavy_Beam_Base
    {
    }
    public class SFXWeapon_Pistol_Eagle : SFXWeapon_Pistol_Base
    {
    }
    public class SFXDamageType_Crusader : SFXDamageType_Weapon
    {
    }
    public class SFXWeapon_Shotgun_Crusader : SFXWeapon_Shotgun_Base
    {
    }
    public class SFXDamageType_Raider : SFXDamageType_Weapon
    {
    }
    public class SFXWeapon_Shotgun_Raider : SFXWeapon_Shotgun_Base
    {
    }
    public class SFXWeapon_Shotgun_Striker : SFXWeapon_Shotgun_Eviscerator
    {
    }
    public class SFXWeapon_SniperRifle_Indra : SFXWeapon_SniperRifle_Base
    {
    }
    public class SFXWeapon_SniperRifle_Valiant : SFXWeapon_SniperRifle_Base
    {
    }
    public class SFXCharacterClassMP_Sentinel_Turian : SFXCharacterClass_ContentMP
    {
    }
    public class SFXCharacterClassMP_Soldier_Turian : SFXCharacterClass_ContentMP
    {
    }
    public class ActorFactoryWwiseAmbientSound : ActorFactory
    {
    }
    public class ActorFactoryWwiseDistanceRTPC : ActorFactory
    {
    }
    public class ActorFactoryWwiseMicPosOrient : ActorFactory
    {
    }
    public class AnimNotify_WwiseEvent : AnimNotify
    {
        public WwiseEventPair AudioEvent;
        public NameReference BoneName;
        public bool bFollowActor;
    }
    public class InterpTrackInstWwiseEvent : InterpTrackInst
    {
        public float LastUpdatePosition;
    }
    public class InterpTrackInstWwiseRTPC : InterpTrackInst
    {
    }
    public class InterpTrackWwiseEvent : InterpTrack
    {
        public WwiseEventTrackKey[] WwiseEvents;
    }
    public class InterpTrackWwiseRTPC : InterpTrackFloatBase
    {
        public string Param;
    }
    public class InterpTrackWwiseSoundEffect : InterpTrackWwiseEvent
    {
    }
    public class SeqAct_WwiseLockMic : SequenceAction
    {
    }
    public class SeqAct_WwiseMusicVolumeDisable : SequenceAction
    {
        public int m_MusicVolume;
    }
    public class SeqAct_WwiseMusicVolumeEnable : SequenceAction
    {
        public int m_MusicVolume;
    }
    public class SeqAct_WwisePostEvent : SeqAct_Latent
    {
        public int WwiseObject;
    }
    public class SeqAct_WwisePostTrigger : SequenceAction
    {
        public string Trigger;
    }
    public class SeqAct_WwiseSetRTPCValue : SeqAct_Latent
    {
        public string Param;
        public float Value;
    }
    public class SeqAct_WwiseSetState : SequenceAction
    {
        public string StateGroup;
        public string State;
    }
    public class SeqAct_WwiseSetSwitch : SequenceAction
    {
        public string SwitchGroup;
        public string Switch;
    }
    public class SeqAct_WwiseStartAudioObjects : SequenceAction
    {
    }
    public class SeqAct_WwiseStopAll : SequenceAction
    {
    }
    public class WwiseAmbientSound : Keypoint
    {
        public WwiseEventPair AudioEvent;
        public bool bAutoPlay;
        public bool bIsPlaying;
    }
    public class WwiseAudioComponent : ActorComponent
    {
        public Vector location;
        public Vector Orientation;
        public Vector ComponentLocation;
        public Vector ComponentOrientation;
        public NameReference m_ComponentGroup;
        public int m_nAttachBoneIndex;
        public float m_fDistanceToListener;
        public float m_fMaxAudible3DSoundDistance;
        public int m_nMaxAudible3DSoundEventPlayingID;
        public int m_nNumberOf3DSoundsPlaying;
        public int m_nNumberOfSoundsUseAttenuation;
        public int m_nNumberOfSoundsWithUserDefinedPositioning;
        public float m_fDotToListener;
        public float ObstructionUpdateSpeed;
        public bool bUseOwnerLocation;
        public bool m_bEnableEnvAudio;
        public bool m_bEnableObstructionOcclusion;
        public bool m_bUpdateAudioEnginePosition;
    }
    public class WwiseAudioComponentMultiLoc : WwiseAudioComponent
    {
        public Map_Mirror m_Locations;
    }
    public class WwiseVolume : Volume
    {
    }
    public class WwiseAudioVolume : WwiseVolume
    {
        public WwiseEventPair[] WwiseEventArray;
        public int AudioComponent;
        public float m_fTimeBetweenLineChecks;
        public bool bAutoPlay;
    }
    public class WwiseFile : Object
    {
        public Pointer Data;
        public int Id;
    }
    public class WwiseBank : WwiseFile
    {
        public int Parent;
        public bool IsLocalised;
        public bool GenerateDefinition;
    }
    public class WwiseBundleArchive : Object
    {
    }
    public class WwiseCollection : Object
    {
        public int[] Events;
        public int[] EventPairs;
        public int[] Streams;
        public int Bank;
    }
    public class WwiseComponentCallback : Interface
    {
    }
    public class WwiseEvent : WwiseBaseSoundObject
    {
        public WwiseRelationships Relationships;
        public string Notes;
        public int Id;
        public float DurationMilliseconds;
        public bool IsLocalised;
        public bool bUsesOrientationRTPC;
        public bool bUsesDistanceRTPC;
    }
    public class WwiseDialogueEvent : WwiseEvent
    {
        public WwiseDialogueArgument[] Arguments;
    }
    public class WwiseDistanceRTPC : Actor
    {
        public string RTPCName;
        public float TickDelay;
        public float m_fTimeSinceLastUpdate;
    }
    public class WwiseEnvironmentSettings : Object
    {
        public string Environment;
        public float fPrimaryControlValue;
        public float fOverrideControlValue;
        public int ConvolutionReverbSoundBank;
        public bool bOverrideLowerPriorityEnvironments;
    }
    public class WwiseEnvironmentVolume : Volume
    {
        public float Priority;
        public int Settings;
    }
    public class WwiseEventPairObject : WwiseBaseSoundObject
    {
        public int Play;
        public int Stop;
    }
    public class WwiseFaceFXStopper : Object
    {
        public Pointer VfTable_IWwiseComponentCallback;
        public int m_SkelMeshComp;
        public int m_WwiseAudioComp;
        public int m_WwiseAudioEvent;
    }
    public class WwiseMicPosOrient : Actor
    {
    }
    public class WwiseMusicVolume : WwiseVolume
    {
        public NameReference MusicID;
        public int MusicPriority;
        public int m_oTrackPawn;
        public int m_nCurrentMusicState;
        public int m_pMusicEventPair;
        public bool InitiallyEnabled;
        public bool m_bContainsPawn;
        public bool m_bMyMusicIsPlaying;
        public bool m_bEnabled;
    }
    public class WwiseOcclusionVolume : Volume
    {
    }
    public class WwiseProcFoleyComponent : ActorComponent
    {
        public ProcFoleyInfo Info;
        public int m_AudioComp;
        public int m_FoleySound;
        public float m_fLastMaxVel;
        public float m_fSmoothFactor;
        public float m_fMaxThreshold;
        public int m_nProcFoleyRTPCId;
        public bool m_bIsPlaying;
    }
    public class WwiseStream : WwiseFile
    {
        public NameReference Filename;
    }
    public class WwiseVolumeTimer : Info
    {
        public int m_oVolume;
    }
    public class SFXGameEffect_UniqueArmor_CerberusHeavy : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_WeaponMod_ExtraWeight : SFXGameEffect_WeaponMod
    {
    }
    public class SFXGameEffect_WeaponMod_ThermalScope : SFXGameEffect_WeaponMod
    {
        public int[] OutlineGlowActors;
        public int WeaponOwner;
        public float UpdateFrequency;
        public float LastUpdate;
        public bool bEffectActive;
    }
    public class SFXOutlineGlowActorMP_ThermalScope : SFXOutlineGlowActorMP
    {
    }
    public class SFXSkeletalMeshComponent_ThermalScope : SkeletalMeshComponent
    {
    }
    public class SFXWeaponMod_AssaultRifleMelee : SFXWeaponMod
    {
        public int BladeImpactEffect;
        public int BladeImpactSound;
    }
    public class SFXWeaponMod_AssaultRifleSuperPen : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_AssaultRifleSuperScope : SFXWeaponMod
    {
    }
    public class SFXGameEffect_WeaponMod_HeadshotBonus : SFXGameEffect_WeaponMod
    {
    }
    public class SFXGameEffect_WeaponMod_WeightBonus_Shared : SFXGameEffect_WeaponMod
    {
    }
    public class SFXWeaponMod_PistolHeadShot : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_PistolSuperDamage : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_PistolUltraLight : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_ShotgunDamageAndPen : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_ShotgunSuperMelee : SFXWeaponMod
    {
        public int BladeImpactEffect;
        public int BladeImpactSound;
    }
    public class SFXWeaponMod_SMGPenetration : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_SMGStabilization : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_SniperRifleDamageAndPen : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_SniperRifleSuperScope : SFXWeaponMod
    {
    }
    public class SFXPowerCustomAction_MarksmanAshley : SFXPowerCustomAction
    {
        public PowerData RateOfFireIncrease;
        public PowerData HeadShotDamageIncrease;
        public PowerData AccuracyIncrease;
        public PowerData SquadBonusEffectiveness;
        public float Evolve_AccuracyBonus;
        public float Evolve_RateOfFireBonus;
        public float Evolve_DurationBonus;
        public float Evolve_HeadShotDamageBonus;
        public float Evolve_CooldownBonus;
        public float Evolve_AccuracyAndRoFBonus;
        public int MarksmanSound;
        public bool bEffectEnded;
    }
    public class SFXSeqAct_RemoveHenchmanWeapons : SeqAct_Latent
    {
        public int Henchman;
        public bool bEnded;
    }
    public class SFXDamageType_EMPGrenade : SFXDamageType_Power_Electrocute
    {
    }
    public class SFXDamageType_EMPGrenade_Armor : SFXDamageType_EMPGrenade
    {
    }
    public class SFXDamageType_EMPGrenade_Shields : SFXDamageType_EMPGrenade
    {
    }
    public class SFXPowerCustomAction_EMPGrenade : SFXPowerCustomAction_GrenadeBase
    {
        public PowerData MaxGrenadeBonus;
        public float Evolve_DamageBonus;
        public float Evolve_RadiusBonus;
        public int Evolve_GrenadeCountBonus;
        public float Evolve_ShieldDamageBonus;
        public float Evolve_ArmorDamageBonus;
        public float Evolve_DoTDamage;
        public float Evolve_DoTDuration;
        public float ElectricComboDuration;
        public float Evolve_ElectricComboDuration;
        public int Rank2GrenadeUpgrade;
        public int CE_GrenadeImpact;
        public int EMPGrenadeSound;
    }
    public class SFXProjectile_PowerCustomAction_EMPGrenade : SFXProjectile_PowerCustomAction_Grenade
    {
    }
    public class SFXDamageType_BatarianBlade : SFXDamageType_Power
    {
    }
    public class SFXDamageType_BatarianBladeExplosion : SFXDamageType_BatarianBlade
    {
    }
    public class SFXGameEffect_BatarianBladeDamageOverTime : SFXGameEffect_DamageOverTime
    {
        public int ExplosionDamageType;
        public float ExplosionDelay;
        public int Power;
        public int Caster;
        public int CE_ExplosionTemplate;
        public int ExplosionSound;
        public bool ShouldExplode;
    }
    public class SFXPowerCustomAction_BatarianAttack : SFXPowerCustomAction
    {
        public PowerData BleedDuration;
        public PowerData ConeAngle;
        public PowerData ExplosionDamage;
        public PowerData ExplosionForce;
        public PowerData ExplosionRadius;
        public AreaEffectParameters ExplosionParameters;
        public float ExplosionDelay;
        public float InstantDamagePercent;
        public float Evolve_DamageBonus;
        public float Evolve_ConeBonus;
        public float Evolve_RadiusBonus;
        public float Evolve_RechargeSpeedBonus;
        public float Evolve_DamageComboBonus;
        public float Evolve_DurationComboBonus;
        public int BatarianBladeImpact;
        public int BatarianBladeMuzzle;
        public int BatarianBladeImpactExplosion;
        public int WallImpact;
        public int WallImpactSound;
        public int MaxProjectilesStuck;
    }
    public class SFXShake_Power_BatarianAttack : SFXShake_Power
    {
    }
    public class SFXPowerCustomAction_BubbleShield : SFXPowerCustomAction
    {
        public PowerData FriendlyDamageReduction;
        public PowerData EnemyDamageTakenIncrease;
        public PowerData Evolve_WarpDamageAmount;
        public AffectedPawn[] AffectedPawns;
        public int Evolve_WarpDamageType;
        public Guid GUID_BubbleVFX;
        public Vector BubbleLocation;
        public NameReference BubbleGECategory;
        public int CE_Bubble;
        public int CE_Bubble_Off;
        public float BaseBubbleSize;
        public float Evolve_ImpactRadius;
        public float Evolve_FriendlyDamageReduction;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_ShieldRegenBonus2;
        public float Evolve_EnemyDamageTakenIncrease;
        public float Evolve_FriendlyDamageReduction2;
        public float Evolve_WarpArmorReduction;
        public int Evolve_MaxWarpTargets;
        public int StatBarTitle_EnemyDamageTakenIncrease;
        public int CE_DeathEffect;
        public int CE_Biotics;
        public float UpdateFrequency;
        public int WWise_BubbleOn;
        public int WWise_BubbleOff;
        public bool bBubbleActive;
    }
    public class SFXDamageType_WhipSmash : SFXDamageType_Power
    {
    }
    public class SFXDamageType_WhipSmash_Armor : SFXDamageType_WhipSmash
    {
    }
    public class SFXPowerCustomAction_WhipSmash : SFXPowerCustomAction
    {
        public PowerData NumShockwaveImpacts;
        public PowerData GravityLevel;
        public PowerData GravityDuration;
        public PowerData TimeBetweenImpacts;
        public PowerData Range;
        public int[] ImpactedActors;
        public int ImpactRumbleClass;
        public int ImpactScreenShakeClass;
        public int ImpactActorScreenShakeClass;
        public Guid ImpactGUID;
        public float Evolve_DamageBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_RadiusBonus2;
        public float Evolve_CooldownBonus;
        public float Evolve_ComboDuration;
        public float Evolve_DoTDamage;
        public float Evolve_DoTDuration;
        public float Evolve_MaximumImpactTargets;
        public float GravityValue;
        public float GravityEffectDuration;
        public float LashForceMultiplier;
        public float Evolve_ArmourBonus;
        public int CE_Whip;
        public int CE_WhipImpact;
        public int ImpactActorSound;
        public int NumTargetsHit;
        public bool bStopMovement;
    }
    public class SFXProjectile_PowerCustomAction_WhipSmash : SFXProjectile_PowerCustomAction
    {
        public float TimeBetweenImpacts;
        public float TimeToNextImpact;
        public float FirstImpactDelay;
        public int NumShockwaves;
        public int WhipPower;
        public int LastShockwaveSound;
        public int HenchmanLastShockwaveSound;
    }
    public class SFXDamageType_BatarianNet : SFXDamageType_Power_Electrocute
    {
    }
    public class SFXDamageType_BatarianNet_Shields : SFXDamageType_BatarianNet
    {
    }
    public class SFXGameEffect_BatarianNet : SFXGameEffect_WeldPhysics
    {
        public int ElectricPulseDamageType;
        public Guid TargetCrustGuid;
        public NameReference BeamAttachBoneName;
        public int OwnerPawn;
        public float IncapacitateDuration;
        public float IncapacitateResistThreshold;
        public int CE_TargetCrust;
        public int CE_ExitCrust;
        public int CE_ElectricPulseCrust;
        public float ElectricPulseFrequency;
        public float ElectricPulseDamage;
        public float ElectricPulseRange;
        public float ElectricPulseForce;
        public int PSC_Beam;
        public float BeamDuration;
        public int BeamTarget;
        public int ElectricPulseSound;
        public int WWise_On;
        public int WWise_Off;
        public int Power;
        public bool bWasInMatinee;
        public bool bWasDisabled;
    }
    public class SFXPowerCustomAction_BatarianNet : SFXPowerCustomAction
    {
        public PowerData DoTDamage;
        public PowerData IncapacitateDuration;
        public PowerData Evolve_AoEPulseDamage;
        public PowerData Evolve_SlowTargetDuration;
        public int LastTarget;
        public float IncapacitateResistThreshold;
        public float Evolve_DamageBonus;
        public float Evolve_IncapacitateBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_SlowTargetAmount;
        public float Evolve_RechargeSpeedBonus;
        public float Evolve_ShieldDamageBonus;
        public float Evolve_AoEPulseFrequency;
        public float Evolve_AoEPulseRange;
        public int PS_ImpactWall;
    }
    public class SFXProjectile_PowerCustomAction_BatarianNet : SFXProjectile_PowerCustomAction_SuperSeeking
    {
        public Guid TrapGuid;
        public float TrapDuration;
        public float ProximityRadius;
        public float ProximityCheckFrequency;
        public int CE_TrapEffect;
        public float TrapSurfaceOffset;
    }
    public class SFXDamageType_Annihilation : SFXDamageType_Power_Fire
    {
    }
    public class SFXDamageType_AnnihilationBlast : SFXDamageType_Power
    {
    }
    public class SFXGameEffect_AnnihilationDamageOverTime : SFXGameEffect_DamageOverTime
    {
        public float TotalDamageDone;
        public float PowerComboDamageThreshold;
        public int ComboPower;
        public float ForceMag;
        public bool bComboEffectApplied;
        public bool bCanCauseCombo;
    }
    public class SFXPowerCustomAction_AnnihilationSphere : SFXPowerCustomAction
    {
        public PowerData BlastRadius;
        public PowerData BlastDamage;
        public PowerData BlastForce;
        public AffectedPawn[] AffectedPawns;
        public int BlastDamageType;
        public int RumbleClass;
        public int ScreenShakeClass;
        public AreaEffectParameters BlastParameters;
        public Guid GUID_SphereVFX;
        public Vector SphereLocation;
        public NameReference BeamAttachBoneName;
        public int CE_Sphere;
        public int CE_BurnCrust;
        public int PSC_Beam;
        public int MaxBurnTargets;
        public int CE_DeathEffect;
        public float UpdateFrequency;
        public int WWise_SphereOn;
        public int WWise_SphereOff;
        public int WWise_HenchmanSphereOn;
        public int WWise_HenchmanSphereOff;
        public int CE_BlastEffect;
        public int BlastMaxTargets;
        public int BlastMaxRagdoll;
        public int BlastSound;
        public float Evolve_DamageBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_ImpactRadiusBonus;
        public float Evolve_MovementSpeedBonus;
        public float Evolve_DurationBonus;
        public float Evolve_DamageTakenBonus;
        public float ShieldDrainConversion;
        public bool bSphereActive;
    }
    public class SFXCameraMode_Slash : SFXCameraMode_Combat
    {
    }
    public class SFXDamageType_SonicSlash : SFXDamageType_Power
    {
    }
    public class SFXDamageType_SonicSlash_NoRagdoll : SFXDamageType_SonicSlash
    {
    }
    public class SFXPowerCustomAction_Slash : SFXPowerCustomAction
    {
        public PowerData Range;
        public PowerData NumShockwaveImpacts;
        public PowerData GravityLevel;
        public PowerData GravityDuration;
        public PowerData TimeBetweenImpacts;
        public PowerData EarlyImpactRadius;
        public PowerData MaximumEarlyImpactTargets;
        public int[] ImpactedActors;
        public int ImpactRumbleClass;
        public int ImpactScreenShakeClass;
        public int ImpactActorScreenShakeClass;
        public int EarlyImpactDamageType;
        public AreaEffectParameters EarlyImpactParameters;
        public Guid GUID_Slash;
        public NameReference SwordSocket;
        public int CE_Slash;
        public int ImpactActorSound;
        public int EarlySlashSound;
        public int CE_ShockwaveImpact;
        public int PS_Slice;
        public float SliceDistance;
        public int SwordMesh;
        public float GravityValue;
        public float GravityEffectDuration;
        public float StopMovementDuration;
        public float EarlyImpactDamagePercent;
        public float LeaveCoverDistance;
        public float ForceEndLeaveCoverTime;
        public float EarlyImpactTime1;
        public float EarlyImpactTime2;
        public int NumTargetsHit;
        public bool bDoingEarlyImpact;
    }
    public class SFXPowerCustomAction_SonicSlash : SFXPowerCustomAction_Slash
    {
        public float Evolve_Damage1;
        public float Evolve_ImpactRadius;
        public float Evolve_ComboBonus;
        public float Evolve_Cooldown;
        public float Evolve_Damage2;
        public float Evolve_NumShockwavesBonus;
    }
    public class SFXProjectile_PowerCustomAction_Slash : SFXProjectile_PowerCustomAction
    {
        public float TimeBetweenImpacts;
        public float TimeToNextImpact;
        public float FirstImpactDelay;
        public int NumShockwaves;
        public int SlashPower;
        public int LastShockwaveSound;
        public int HenchmanLastShockwaveSound;
    }
    public class SFXProjectile_PowerCustomAction_SonicSlash : SFXProjectile_PowerCustomAction_Slash
    {
    }
    public class SFXAI_GethTurret : SFXAI_Core
    {
    }
    public class SFXAICmd_Base_GethTurret : SFXAICommand_Base_Combat
    {
        public NameReference AttackPower;
        public NameReference HealPower;
        public float FlamethrowerRangeSq;
        public int PowerTarget;
    }
    public class SFXDamageType_GethTurretAttack : SFXDamageType_Power
    {
    }
    public class SFXDamageType_GethTurretAttack_Armor : SFXDamageType_GethTurretAttack
    {
    }
    public class SFXDamageType_GethTurretFlameThrower : SFXDamageType_Weapon
    {
    }
    public class SFXPawn_GethTurret : SFXPawn
    {
        public Guid TurretVFXGuid;
        public Guid TurretBaseVFXGuid;
        public ReplicatedTurretCreator ReplicatedTurretCreatorInfo;
        public int CE_TurretTemplate;
        public int CE_TurretDeathTemplate;
        public int SpawnSound;
        public int DiedSound;
        public int LoopingSound;
        public int StopLoopingSound;
        public int Caster;
        public bool bLoopSoundActive;
        public bool bHasShock;
        public bool bIsClientSideInitialized;
    }
    public class SFXPowerCustomAction_GethSentryTurret : SFXPowerCustomAction
    {
        public PowerData TurretShields;
        public PowerData AttackCooldown;
        public PowerData FlamethrowerDamagePerSec;
        public PowerData FlamethrowerDamageDuration;
        public PowerData HealCooldown;
        public PowerData HealAmount;
        public PowerData HealRadius;
        public Guid TurretBaseGuid;
        public Vector SpawnLocation;
        public float Evolve_ShieldBonus;
        public float Evolve_DamageBonus;
        public float Evolve_ShieldRestoreBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_ArmorDamageBonus;
        public float Evolve_ShieldRestoreBonus2;
        public float Evolve_ShieldRadiusBonus;
        public float Evolve_ShieldFrequencyBonus;
        public int Turret;
        public int NotRecommended_TurretDeployed;
        public float SpawnDelay;
        public float SpawnZOffset;
        public int CE_TurretBase;
    }
    public class SFXPowerCustomAction_GethTurretAttack : SFXPowerCustomAction
    {
        public int MuzzleEffect;
        public float MuzzleEffectOffset;
        public float MuzzleEffectLifetime;
    }
    public class SFXPowerCustomAction_GethTurretHeal : SFXPowerCustomAction
    {
        public Vector BeamSourceLocation;
        public NameReference BeamAttachBoneName;
        public float HealThreshold;
        public int CE_HealCrust;
        public int PSC_Beam;
        public float BeamDuration;
        public int BeamTarget;
        public bool bBeamIsActive;
    }
    public class SFXProjectile_PowerCustomAction_GethTurret : SFXProjectile_PowerCustomAction_BouncingGrenade
    {
    }
    public class SFXProjectile_PowerCustomAction_GethTurretAttack : SFXProjectile_PowerCustomAction_SuperSeeking
    {
    }
    public class SFXRumble_Power_GethTurretAttack : SFXRumble_Power
    {
    }
    public class SFXShake_Power_GethTurretAttack : SFXShake_Power
    {
    }
    public class SFXWeapon_Heavy_FlameThrower_GethTurret : SFXWeapon_Heavy_Beam_Base
    {
        public Rotator MuzzleRotation;
        public float DamagePerSecond;
        public float DamageDuration;
        public int WindUpSound;
        public int WindDownSound;
        public int TurretPower;
    }
    public class SFXPowerCustomAction_MultiFragGrenade : SFXPowerCustomAction_GrenadeBase
    {
        public PowerData MaxGrenadeBonus;
        public float Evolve_DamageBonus;
        public float Evolve_ForceBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_DamageBonus3;
        public float Evolve_ForceBonus2;
        public float Evolve_ForceBonus3;
        public float Evolve_RadiusBonus;
        public int Evolve_GrenadeCountBonus;
        public float Evolve_ShieldDamageBonus;
        public float Evolve_ArmorDamageBonus;
        public float Evolve_DoTDamage;
        public float Evolve_DoTDuration;
        public int NumChildPieces;
        public int AdditionalChildPieces;
        public int Rank2GrenadeUpgrade;
        public int CE_GrenadeImpact;
    }
    public class SFXProjectile_PowerCustomAction_MultiFragGrenade : SFXProjectile_PowerCustomAction_Grenade
    {
    }
    public class SFXGameEffect_PowerDamageTakenBonus : SFXGameEffect
    {
    }
    public class SFXDamageType_Damping : SFXDamageType_Power
    {
    }
    public class SFXGameEffect_ScanGlowActor : SFXGameEffect
    {
        public int GlowActor;
        public int OwnerPawn;
    }
    public class SFXOutlineGlowActorMP_QuarianScan : SFXOutlineGlowActorMP
    {
    }
    public class SFXPowerCustomAction_Damping : SFXPowerCustomAction
    {
        public PowerData AdditionalDamageTaken;
        public PowerData MovementSpeedModifier;
        public NameReference[] InstantKillEnemies;
        public Guid PlayerScanVFXGuid;
        public Guid TargetScanVFXGuid;
        public Guid PlayerOmniToolVFXGuid;
        public Guid PlayerOmniToolInfoVFXGuid;
        public Guid PlayerOmniToolScanBeamVFXGuid;
        public Rotator InitialRot;
        public Vector HealthColor;
        public Vector ArmorColor;
        public Vector ShieldColor;
        public Vector BioticColor;
        public NameReference DampingUniqueCategory;
        public NameReference GlowActorUniqueCategory;
        public Vector2D EnemySizeRange;
        public Vector2D HoloMeshScaleRange;
        public Vector2D HighlightSizeRange;
        public float Evolve_WeaponDamageBonus;
        public float Evolve_PowerDamageBonus;
        public float Evolve_HeadShotBonus;
        public float Evolve_MovementSpeedBonus;
        public float Evolve_DamageTakenBonus;
        public float Evolve_DurationBonus;
        public float Evolve_AreaScanRadius;
        public float Evolve_AreaScanDuration;
        public int CE_PlayerScanTemplate;
        public int CE_TargetScanTemplate;
        public int CE_PlayerOmniToolTemplate;
        public int CE_PlayerOmniToolInfoTemplate;
        public int CE_PlayerOmniToolScanBeamTemplate;
        public int CurrentlyAffectedPawn;
        public int CurrentPawnMeshCopy;
        public int HologramEmitter;
        public int HologramDistanceEmitter;
        public int TargetEmitter;
        public int PS_HealthShieldTemplate;
        public int PS_HoloHealthShieldTemplate;
        public int PS_HoloDistanceTemplate;
        public float AttachMeshDelay;
        public float ShowDistanceMeterDelay;
        public float UpdatePawnFrequency;
        public float HoloHighlightSize;
        public float HoloHealthBarSize;
        public float ShutOffOmniToolDelay;
        public int ScanImpactSound;
        public bool bOmniToolActive;
    }
    public class SFXSkeletalMeshComponent_QuarianScan : SkeletalMeshComponent
    {
    }
    public class SFXAI_Demo : SFXAI_Cover
    {
        public NameReference GrenadeAttack;
        public NameReference DronePower;
        public int DroneRef;
        public float GrenadeInterval;
        public float GrenadeConeAngle;
        public float DroneSpawnInterval;
        public int DroneGlobalLimit;
        public bool bDroneActive;
    }
    public class SFXAI_DisruptionDrone : SFXAI_Core
    {
    }
    public class SFXAI_FemmeFatale : SFXAI_Cover
    {
        public float FemmeFataleAimDelay;
        public float AimTrackingDuration;
        public float MinTimeBetweenCloaks;
        public float LastCloakTime;
        public bool bCloaked;
    }
    public class SFXAI_Heavy : SFXAI_Cover
    {
        public Vector2D MoveTimeoutInterval;
        public float BreachFrequency;
        public float ShieldDamageBreachThreshold;
        public float ShieldResetDuration;
        public float ShieldBashInterval;
        public float TurretPointSearchDist;
        public float MaxDistanceFromMe;
        public float MinDistanceFromTarget;
        public float MaxDistanceFromTarget;
        public float DisabledDuration;
        public float UnderFireSpeedMod;
        public float SlowDownDuration;
        public bool bWantsToFire;
    }
    public class SFXAI_Sniper : SFXAI_Cover
    {
        public float AimDelay;
        public float AimTrackingDuration;
        public float SmokeInterval;
        public float LastSmokedTime;
        public float DOTDuration;
    }
    public class SFXAICmd_Base_Demo : SFXAICmd_Base_Cover
    {
    }
    public class SFXAICmd_Base_DisruptionDrone : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Base_FemmeFatale : SFXAICmd_Base_Cover
    {
    }
    public class SFXAICmd_Base_Heavy : SFXAICommand_Base_Combat
    {
        public int NumFailedFire;
        public int MaxFailedFire;
        public float DistanceToMove;
    }
    public class SFXAICmd_Base_Sniper : SFXAICmd_Base_Cover
    {
    }
    public class SFXAICmd_Heavy_Cover : SFXAICmd_Base_Cover
    {
    }
    public class SFXAICmd_Heavy_Melee : SFXAICmd_Base_Melee
    {
    }
    public class SFXAICmd_Heavy_TurretMode : SFXAICommand_Base_Combat
    {
        public int TP;
    }
    public class SFXAICmd_Reaction_FemmeFlee : SFXAICommand_Base_Combat
    {
        public int FleeTarget;
    }
    public class SFXAICmd_Reaction_HeavyLoseShield : SFXAICmd_CustomAction
    {
    }
    public class SFXAICmd_Reaction_SniperFlee : SFXAICommand_Base_Combat
    {
        public int FleeTarget;
    }
    public class SFXCustomAction_CloneFightStagger_Backward : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_CloneFightStagger_Forward : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_CloneFightStagger_Left : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_CloneFightStagger_Right : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_CloneSyncPartner : SFXCustomAction_SyncPawnPartner_Base
    {
        public float CloneAPSThreshold;
    }
    public class SFXCustomAction_DemoSpawnDrone : SFXCustomAction_SingleAnim
    {
        public bool bUninterrupted;
    }
    public class SFXCustomAction_DroneExplosion : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_DropSmoke : SFXCustomAction_SingleAnim
    {
        public int ProjectileClass;
        public NameReference ProjectileAttachPoint;
    }
    public class SFXCustomAction_HeavyAddShield : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_HeavyBoostDown : SFXCustomAction_BoostDown
    {
    }
    public class SFXCustomAction_HeavyBoostUp : SFXCustomAction_BoostUp
    {
    }
    public class SFXCustomAction_HeavyGreatPain : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_HeavyShieldAndFire : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_HeavyShieldStumble : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_SniperBoostDown : SFXCustomAction_BoostDown
    {
        public bool bPreviouslyCloaked;
    }
    public class SFXCustomAction_SniperBoostUp : SFXCustomAction_BoostUp
    {
        public bool bPreviouslyCloaked;
    }
    public class SFXDamageType_DisruptorZap : SFXDamageType_Power
    {
    }
    public class SFXDamageType_MIRVBlast : SFXDamageType
    {
    }
    public class SFXGameEffect_DisruptionZap : SFXGameEffect
    {
        public int DamageType;
        public NameReference EffectCategory;
        public int CE_ImpactTemplate;
        public int CE_TargetCrustTemplate;
        public int ImpactSound;
        public float CrustDuration;
        public float AccuracyPenalty;
        public float DisruptedMaxSelectionRange;
    }
    public class SFXPawn_SpecOps_Base : SFXPawn
    {
        public bool bIsInPortArms;
    }
    public class SFXPawn_DisruptionDrone : SFXPawn
    {
        public Guid DroneGuid;
        public Guid AttackingDroneGuid;
        public Guid DeathExplosionGuid;
        public Guid ImpactGUID;
        public NameReference EffectCategory;
        public int CE_Drone;
        public int CE_AttackingDrone;
        public int CE_DeathExplosion;
        public float ShockDamage;
        public float ShockDuration;
        public float ShockRadius;
        public float DisruptedMaxTargetingRange;
        public float AccuracyPenalty;
        public int PersistentSoundStart;
        public int PersistentSoundEnd;
        public int DeathSound;
        public int ImpactSound;
    }
    public class SFXPawn_Demo : SFXPawn_SpecOps_Base
    {
        public Guid CasterCrustGuid;
        public int DroneArchetype;
        public int CE_ReleaseEffectTemplate;
        public int CE_CasterCrustTemplate;
        public int CastSound;
    }
    public class SFXPawn_FemmeFatale : SFXPawn
    {
        public float AIDelayOnResurrect;
        public int PlotStateForBeingDead;
    }
    public class SFXPawn_Heavy : SFXPawn_SpecOps_Base
    {
        public BodyStance BS_ShieldHits;
        public Guid PersistentGuid;
        public NameReference Socket_Shield;
        public int ShieldAnimSet;
        public int ShieldAnimSet2;
        public int SMC_Shield;
        public float LoseShieldForceThreshold;
        public float StaggerForceThreshold;
        public float BreachForceThreshold;
        public float ShieldArc;
        public float PullArc;
        public float SabotagedExplosionRadius;
        public float SabotagedExplosionDamage;
        public float ShieldWalkSpeed;
        public float ShieldGroundSpeed;
        public float NoShieldWalkSpeed;
        public float NoShieldGroundSpeed;
        public int CE_ShieldBreak;
        public int CE_Explosion;
        public int CE_PersistentCrust;
        public int CE_RetractShield;
        public int ShieldsHitSound;
        public int ExplosionSound;
        public float PercentDamageFromPenetration;
        public bool bCarryingShield;
    }
    public class SFXPawn_Sniper : SFXPawn_SpecOps_Base
    {
        public int ProjectileClass;
        public NameReference ProjectileAttachPoint;
        public int LaserTarget;
        public int BeamStartSound;
        public int BeamStopSound;
        public int LaserPSC;
        public int LaserLFC;
        public int CloakSound;
        public int UnCloakSound;
        public int CloakVocSound;
        public int MITV_CloakFlickerTemplate;
        public float DefaultSmokeDistance;
    }
    public class SFXPowerCustomAction_MIRVGrenade : SFXPowerCustomAction_EnemyGrenade
    {
    }
    public class SFXProjectile_MIRVShard : SFXProjectile_Explosive
    {
        public float GravityScale;
        public float HenchDamageTaken;
    }
    public class SFXProjectile_PowerCustomAction_MIRV : SFXProjectile_PowerCustomAction_Grenade
    {
        public int ShardClass;
        public int NumShardsToSpawn;
        public float TargetDistanceThreshold;
        public float TargetCoverDistanceThreshold;
    }
    public class SFXSeqAct_AnchorHeavy : SequenceAction
    {
        public int TurretNav;
    }
    public class SFXSeqAct_ChangeTheClone : SequenceAction
    {
    }
    public class SFXSeqAct_CloneFightInit : SequenceAction
    {
    }
    public class SFXSeqAct_DemoFireMIRV : SequenceAction
    {
        public int GrenadeTarget;
    }
    public class SFXSeqAct_HeavyUnequipShield : SequenceAction
    {
    }
    public class SFXSeqAct_SpawnDrone : SequenceAction
    {
    }
    public class SFXSeqAct_StumbleInDirection : SequenceAction
    {
        public float StumbleDirectionInDegrees;
    }
    public class SFXSeqEvt_CloneMedigelUsed : SequenceEvent
    {
    }
    public class SFXWeapon_AI_Crusader : SFXWeapon_Shotgun_Crusader
    {
    }
    public class SFXWeapon_AI_Incisor : SFXWeapon_SniperRifle_Incisor
    {
    }
    public class SFXWeapon_AI_Revenant : SFXWeapon_AssaultRifle_Revenant
    {
        public Vector2D ShieldedBurstFireCount;
        public Vector2D ShieldedBurstFireDelay;
        public bool bFiringWhenShielded;
    }
    public class SFXWeapon_Pistol_Silencer : SFXWeapon_Pistol_Base
    {
    }
    public class SFXWeapon_AI_Silencer : SFXWeapon_Pistol_Silencer
    {
    }
    public class SFXWeapon_AI_Tempest : SFXWeapon_SMG_Tempest
    {
    }
    public class SFXCustomAction_GethBomberClimbDown_Shared : SFXCustomAction_LargeCoverClimbDown
    {
    }
    public class SFXCustomAction_GethBomberClimbUp_Shared : SFXCustomAction_LargeCoverClimbUp
    {
    }
    public class SFXCustomAction_GethBomberDropDown_Shared : SFXCustomAction_BoostDownBase
    {
    }
    public class SFXCustomAction_GethBomberMantle_Shared : SFXCustomAction_LargeCoverMantle
    {
    }
    public class SFXCustomAction_GethBomberStandard_Shared : SFXCustomAction_DamageReaction
    {
    }
    public class SFXSeqAct_DH_AppearanceHack : SequenceAction
    {
    }
    public class DLCHACK_GUIOptions : BioSFHandler_Options
    {
        public int proxy;
    }
    public class SFXSeqCnd_CheckTextLanguage : SequenceCondition
    {
        public int proxy;
    }
    public class SFXGAWEndingsHandler_DirectorsCut : Object
    {
        public EndGameOptionSet[] EndGameOptionSets;
        public EndGameOption[] EndGameOptions;
        public int[] EndingPlotStates;
        public int[] SaveAndersonStates;
        public CutscenePlotState[] ThresholdStates;
        public int FinalGAWRatingIntID;
        public int AchievementThreshold;
        public int SaveAndersonScoreBonus;
        public int ShepardLivesThreshold;
        public int SaveAndersonStateID;
        public bool bBrainUsed;
        public bool bEvaluateAchievement;
    }
    public class SFXSeqAct_DidNotShootAnderson_DirectorsCut : SequenceAction
    {
        public int EndingsHandler;
    }
    public class SFXSeqAct_SetEndGameOptions_DirectorsCut : SequenceAction
    {
        public int EndingsHandler;
        public int DirectorsCutStateID;
        public int BrainPlotStateID;
        public bool bEvaluateEndGameAchievement;
    }
    public class SFXWeapon_AssaultRifle_Cerb_GUN01 : SFXWeapon_AssaultRifle_Base
    {
    }
    public class SFXDamageType_QuarianPulse : SFXDamageType_Weapon
    {
    }
    public class SFXProjectile_Quarian : SFXProjectile_SeekingMissile
    {
        public int TravelStart;
        public int TravelStop;
    }
    public class SFXWeapon_AssaultRifle_Quarian : SFXWeapon_AssaultRifle_Base
    {
        public Guid WeaponCrustGuid;
        public int CE_WeaponCrust;
        public bool bWeaponCrustActive;
    }
    public class SFXDamageType_QuarianShotgun_GUN01 : SFXDamageType_Shotgun
    {
    }
    public class SFXWeapon_Heavy_Beam_Base_DLC_GUN01 : SFXWeapon_Shotgun_Base
    {
        public Vector2D BeamInterpSpeed;
        public int DecalFrequency;
        public float BeamInterpTime;
        public float VFXUpdateInterval;
    }
    public class SFXWeapon_Shotgun_Quarian_GUN01 : SFXWeapon_Heavy_Beam_Base_DLC_GUN01
    {
        public Guid ChargeEffectGuid;
        public Guid FireChargeEffectGuid;
        public int PlayerPowerUpSound1;
        public int PlayerPowerDownSound1;
        public int PowerUpSound1;
        public int PowerDownSound1;
        public int CE_ChargeUp;
        public int CE_FireChargeUp;
        public float MinROF;
        public float RampTime;
        public int ShotgunShotAnimset;
    }
    public class SFXDamageType_Bloodpack : SFXDamageType_AutoPistol
    {
    }
    public class SFXDamageType_BloodpackAPRound : SFXDamageType_AutoPistol
    {
    }
    public class SFXWeapon_SMG_Bloodpack : SFXWeapon_SMG_Base
    {
        public int APDamageType;
        public NameReference APMuzzleSocketName;
        public int ShotsPerAPRound;
        public float APDamageMultiplier;
        public float APRecoilMultiplier;
        public float APZoomRecoilMultiplier;
        public int APFireSound;
        public int APPlayerFireSound;
        public int PSC_APRoundMuzzle;
    }
    public class SFXWeapon_SMG_Geth_GUN01 : SFXWeapon_SMG_Base
    {
        public Guid ChargeEffectGuid;
        public Guid ChargeDownEffectGuid;
        public int PowerUpSound1;
        public int PowerDownSound1;
        public int SteamMuzzle;
        public int ChargeRing;
        public int CE_ChargeUp;
        public int CE_ChargeDown;
        public float MinROF;
        public float RampTime;
        public float DamageMultiplier;
        public float GetHotTime;
        public float FullyChargedTime;
        public bool bIsHot;
    }
    public class SFXDamageType_Turian_GUN01 : SFXDamageType_Gib
    {
    }
    public class SFXGUI_TurianSniperZoomReticle_GUN01 : SFXGUI_CerberusSniperZoomReticle
    {
        public float fCurrentZoom;
    }
    public class SFXProjectile_Turian_GUN01 : SFXProjectile_Proximity
    {
        public int NPExplosionSound;
    }
    public class SFXWeapon_SniperRifle_Turian_GUN01 : SFXWeapon_SniperRifle_Base
    {
        public InterpCurveFloat FOVInterpCurve;
        public float ViewHeight;
        public float TotalInterpTime;
        public float ShouldZoomTime;
        public float FOVInterpRate;
        public int LockedOnEvent;
        public int LockedOffEvent;
        public float ZoomedFOV;
        public bool bLocked;
        public bool bShouldAutoZoom;
    }
    public class SFXDamageType_AssaultRifle_Krogan_GUN02 : SFXDamageType_Gib
    {
    }
    public class SFXProjectile_KroganAR_GUN02 : SFXProjectile_Proximity
    {
        public int NPExplosionSound;
    }
    public class SFXWeapon_AssaultRifle_Krogan_GUN02 : SFXWeapon_AssaultRifle_Base
    {
        public float MinROF;
        public float RampTime;
    }
    public class SFXDamageType_HeavyMachinegun_GUN02 : SFXDamageType_Machinegun
    {
    }
    public class SFXGameEffect_LMGDamageTakenBonus_GUN02 : SFXGameEffect
    {
        public float MaxDamageReduction;
        public bool bIsActive;
    }
    public class SFXWeapon_AssaultRifle_LMG_GUN02 : SFXWeapon_AssaultRifle_Base
    {
        public int PowerUpSound1;
        public int PowerDownSound1;
        public int NPPowerUpSound;
        public int NPPowerDownSound;
        public int SteamMuzzle;
        public float MinROF;
        public float RampTime;
        public float DamageMultiplier;
        public float GetHotTime;
        public float FullyChargedTime;
        public float DamageReductionAmount;
        public bool bIsHot;
    }
    public class SFXDamageType_Asari_GUN02 : SFXDamageType_Weapon
    {
    }
    public class SFXProjectile_Asari_GUN02 : SFXProjectile_Proximity
    {
        public int NPExplosionSound;
        public int CE_TargetCrustTemplate;
        public float HitWallProximityRadius;
        public float NewAccelRate;
        public float GravityScale;
        public bool bHitWall;
    }
    public class SFXWeapon_Pistol_Asari_GUN02 : SFXWeapon_Pistol_Base
    {
        public Guid ChargeEffectGuid;
        public int ChargeRumble;
        public int CE_ChargeUp;
    }
    public class SFXDamageType_Pistol_Bloodpack : SFXDamageType_HeavyPistol
    {
    }
    public class SFXWeapon_Pistol_Bloodpack : SFXWeapon_Pistol_Base
    {
    }
    public class SFXWeapon_Shotgun_Assault_GUN02 : SFXWeapon_Shotgun_Base
    {
        public int ShellSound;
        public int ShotgunShotAnimset;
    }
    public class SFXDamageType_SalarianBlast : SFXDamageType_Weapon
    {
    }
    public class SFXDamageType_SalarianShard : SFXDamageType_Gib
    {
    }
    public class SFXProjectile_SalarianBlast : SFXProjectile_Explosive
    {
        public float GravityScale;
    }
    public class SFXProjectile_SalarianBlastShard : SFXProjectile_Proximity
    {
        public float GravityScale;
        public float LowShardExplosionDelay;
        public float HighShardExplosionDelay;
    }
    public class SFXProjectile_SalarianBlastSplitter : SFXProjectile_SeekingMissile
    {
        public float GravityScale;
        public float HitGravityScale;
        public int NumShardsToSpawn;
        public float ProximityRadius;
        public float ProximityRadiusTightAim;
        public float PercentVelocityInherited;
        public float ConeAngle;
        public float ExplosionDamage;
        public bool bHitTarget;
    }
    public class SFXWeapon_Shotgun_Salarian : SFXWeapon_Shotgun_Base
    {
        public Guid ChargeEffectGuid;
        public int SteamMuzzle;
        public int CE_ChargeUp;
        public int ChargeRumble;
        public int PlayerShotSound;
        public int ShotSound;
        public int PlayerChargedShotSound;
        public int ChargedShotSound;
    }
    public class SFXDamageType_Kishock_GUN02 : SFXDamageType
    {
    }
    public class SFXGUI_BatarianSniperReticle_GUN02 : SFXGUI_CerberusSniperZoomReticle
    {
    }
    public class SFXProjectile_BatarianSniperRound_GUN02 : SFXProjectile_Explosive
    {
        public int KishockImpactTemplate;
        public int KishockBloodyImpactTemplate;
        public float DirectDamageProportion;
        public float BleedDuration;
    }
    public class SFXWeapon_Sniperrifle_Batarian_GUN02 : SFXWeapon_SniperRifle_Base
    {
        public Guid ChargeEffectGuid;
        public int ShellSound;
        public float KishockDamageMultiplier;
        public float KishockRecoilMultiplier;
        public int ChargePlayerFireSound;
        public int ChargeFireSound;
        public int SmokeEffect;
        public int CE_ChargeUp;
        public int ChargeRumble;
        public int PSC_Harpoon;
    }
    public class SFXCharacterClassMP_Adept_AsariCommando : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Adept_AsariCommando : SFXPawn_PlayerMP_Adept
    {
    }
    public class SFXPowerCustomActionMP_AsariCommandoPassive : SFXPowerCustomActionMP_PassiveBase
    {
        public PowerData PowerDurationBonus;
        public float Evolve_PowerDurationBonus;
    }
    public class SFXPowerCustomActionMP_AsariMeleePassive_Commando : SFXPowerCustomActionMP_AsariMeleePassive
    {
    }
    public class SFXPowerCustomActionMP_BubbleShield : SFXPowerCustomAction
    {
        public PowerData FriendlyDamageReduction;
        public PowerData EnemyDamageTakenIncrease;
        public PowerData Evolve_WarpDamageAmount;
        public AffectedPawn[] AffectedPawns;
        public int Evolve_WarpDamageType;
        public Guid GUID_BubbleVFX;
        public Vector BubbleLocation;
        public NameReference BubbleGECategory;
        public int CE_Bubble;
        public int CE_Bubble_Off;
        public float BaseBubbleSize;
        public float Evolve_ImpactRadius;
        public float Evolve_FriendlyDamageReduction;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_ShieldRegenBonus2;
        public float Evolve_EnemyDamageTakenIncrease;
        public float Evolve_FriendlyDamageReduction2;
        public float Evolve_WarpArmorReduction;
        public int Evolve_MaxWarpTargets;
        public int StatBarTitle_EnemyDamageTakenIncrease;
        public int CE_DeathEffect;
        public int CE_Biotics;
        public float UpdateFrequency;
        public int WWise_BubbleOn;
        public int WWise_BubbleOff;
        public bool bBubbleActive;
    }
    public class SFXPowerCustomActionMP_Pull_Asari : SFXPowerCustomActionMP_Pull
    {
    }
    public class SFXPowerCustomActionMP_Reave_Asari : SFXPowerCustomActionMP_Reave
    {
    }
    public class SFXCameraMode_BatarianMelee : SFXCameraMode_Melee
    {
    }
    public class SFXCharacterClassMP_Sentinel_Batarian : SFXCharacterClass_ContentMP
    {
    }
    public class SFXCustomAction_BatarianMeleeOne : SFXCustomAction_PlayerMeleeBase
    {
        public int AnimSet;
        public float BladeImpactScale;
    }
    public class SFXCustomAction_BatarianPistolMeleeOne : SFXCustomAction_PlayerMeleeBase
    {
        public int AnimSet;
    }
    public class SFXCustomAction_BatarianPistolMeleeTwo : SFXCustomAction_BatarianPistolMeleeOne
    {
    }
    public class SFXCustomAction_BatarianPistolMeleeThree : SFXCustomAction_BatarianPistolMeleeTwo
    {
    }
    public class SFXCustomAction_BatarianPunch : SFXCustomAction_PlayerHeavyMeleeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_BatarianRifleMeleeTwo : SFXCustomAction_BatarianMeleeOne
    {
    }
    public class SFXCustomAction_BatarianRifleMeleeThree : SFXCustomAction_BatarianRifleMeleeTwo
    {
    }
    public class SFXCustomAction_BatarianSyncCoverGrab : SFXCustomAction_SyncCoverGrab
    {
    }
    public class SFXDamageType_BatarianArmorThorns : SFXDamageType_Power
    {
    }
    public class SFXGameEffect_BatarianArmor : SFXGameEffect_DamageTakenBonus
    {
        public int OwnerPawn;
        public float EnableArmorDelay;
        public float DisableArmorDelay;
    }
    public class SFXPawn_PlayerMP_Sentinel_Batarian : SFXPawn_PlayerMP_Sentinel
    {
    }
    public class SFXPowerCustomActionMP_BatarianArmor : SFXPowerCustomAction
    {
        public PowerData DamageReduction;
        public PowerData EncumbrancePenalty;
        public PowerData MeleeDamageBonus;
        public PowerData ThornsDamage;
        public float ThornsDamageCap;
        public float DamageToForceMultiplier;
        public float Evolve_DamageReductionBonus;
        public float Evolve_MeleeDamageBonus;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_ThornsDamageBonus;
        public float Evolve_EncumbranceBonus;
        public float Evolve_DamageReductionBonus2;
        public int srArmorActive;
        public int CE_BladesOn;
        public int CE_BladesOff;
        public int WWise_PlayerCast_On;
        public int WWise_NPCCast_On;
        public int WWise_PlayerCast_Off;
        public int WWise_NPCCast_Off;
        public bool bArmorDestroyed;
    }
    public class SFXPowerCustomActionMP_BatarianMeleePassive : SFXPowerCustomActionMP_TurianMeleePassive
    {
    }
    public class SFXPowerCustomActionMP_BatarianNet : SFXPowerCustomAction
    {
        public PowerData DoTDamage;
        public PowerData IncapacitateDuration;
        public PowerData Evolve_AoEPulseDamage;
        public PowerData Evolve_SlowTargetDuration;
        public int LastTarget;
        public float IncapacitateResistThreshold;
        public float Evolve_DamageBonus;
        public float Evolve_IncapacitateBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_SlowTargetAmount;
        public float Evolve_RechargeSpeedBonus;
        public float Evolve_ShieldDamageBonus;
        public float Evolve_AoEPulseFrequency;
        public float Evolve_AoEPulseRange;
        public int PS_ImpactWall;
    }
    public class SFXPowerCustomActionMP_BatarianPassive : SFXPowerCustomActionMP_PassiveBase
    {
        public PowerData WeaponSpareAmmoBonus;
        public float Evolve_WeaponSpareAmmo1;
        public float Evolve_WeaponSpareAmmo2;
    }
    public class SFXPowerCustomActionMP_Shockwave_Batarian : SFXPowerCustomActionMP_Shockwave
    {
    }
    public class SFXCharacterClassMP_Soldier_Batarian : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Soldier_Batarian : SFXPawn_PlayerMP_Soldier
    {
    }
    public class SFXPowerCustomActionMP_BatarianAttack : SFXPowerCustomAction
    {
        public PowerData BleedDuration;
        public PowerData ConeAngle;
        public PowerData ExplosionDamage;
        public PowerData ExplosionForce;
        public PowerData ExplosionRadius;
        public AreaEffectParameters ExplosionParameters;
        public float ExplosionDelay;
        public float InstantDamagePercent;
        public float Evolve_DamageBonus;
        public float Evolve_ConeBonus;
        public float Evolve_RadiusBonus;
        public float Evolve_RechargeSpeedBonus;
        public float Evolve_DamageComboBonus;
        public float Evolve_DurationComboBonus;
        public int BatarianBladeImpact;
        public int BatarianBladeMuzzle;
        public int BatarianBladeImpactExplosion;
        public int WallImpact;
        public int WallImpactSound;
        public int MaxProjectilesStuck;
    }
    public class SFXPowerCustomActionMP_InfernoGrenade_Batarian : SFXPowerCustomActionMP_InfernoGrenade
    {
    }
    public class SFXCharacterClassMP_Engineer_Geth : SFXCharacterClass_ContentMP
    {
    }
    public class SFXCustomAction_GethPistolMelee : SFXCustomAction_PlayerMeleeBase
    {
    }
    public class SFXCustomAction_GethPunch : SFXCustomAction_Loop
    {
        public int DamageType;
        public AreaEffectParameters MeleeImpactParameters;
        public int AnimInfo;
        public int Power;
        public float StartShieldReduction;
        public float ShieldReduction;
        public float SuperShieldReduction;
        public int PlayerChargeEndSound;
        public int NonPlayerChargeEndSound;
    }
    public class SFXCustomAction_GethRifleMelee : SFXCustomAction_PlayerMeleeBase
    {
        public float BladeImpactScale;
    }
    public class SFXCustomAction_GethSyncCoverGrab : SFXCustomAction_SyncCoverGrab
    {
    }
    public class SFXDamageType_GethHeavyMelee : SFXDamageType_HeavyMelee
    {
    }
    public class SFXDamageType_GethSyncGrab : SFXDamageType_CoverMelee
    {
    }
    public class SFXGameEffect_Supercharge : SFXGameEffect
    {
        public Guid CrustGuid;
        public Guid EyeFlareGuid;
        public int CE_CrustEffect;
        public int CE_EyeFlare;
        public float UpdateFrequency;
        public int Supercharge;
        public bool bActive;
    }
    public class SFXOutlineGlowActorMP_Supercharge : SFXOutlineGlowActorMP
    {
    }
    public class SFXPawn_PlayerMP_Engineer_Geth : SFXPawn_PlayerMP_Engineer
    {
        public int LF_GethLensFlare;
    }
    public class SFXPowerCustomActionMP_GethMeleePassive : SFXPowerCustomActionMP_MeleePassiveBase
    {
        public PowerData ShieldRegenBonus;
    }
    public class SFXPowerCustomActionMP_GethPassive : SFXPowerCustomActionMP_PassiveBase
    {
        public PowerData GethWeaponDamage;
        public string[] RegisteredGethWeapons;
        public float Evolve_GethWeaponDamage;
    }
    public class SFXPowerCustomActionMP_GethSentryTurret : SFXPowerCustomAction
    {
        public PowerData TurretShields;
        public PowerData AttackCooldown;
        public PowerData FlamethrowerDamagePerSec;
        public PowerData FlamethrowerDamageDuration;
        public PowerData HealCooldown;
        public PowerData HealAmount;
        public PowerData HealRadius;
        public Guid TurretBaseGuid;
        public Vector SpawnLocation;
        public float Evolve_ShieldBonus;
        public float Evolve_DamageBonus;
        public float Evolve_ShieldRestoreBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_ArmorDamageBonus;
        public float Evolve_ShieldRestoreBonus2;
        public float Evolve_ShieldRadiusBonus;
        public float Evolve_ShieldFrequencyBonus;
        public int Turret;
        public int NotRecommended_TurretDeployed;
        public float SpawnDelay;
        public float SpawnZOffset;
        public int CE_TurretBase;
    }
    public class SFXPowerCustomActionMP_GethTurretAttack : SFXPowerCustomAction
    {
        public int MuzzleEffect;
        public float MuzzleEffectOffset;
        public float MuzzleEffectLifetime;
    }
    public class SFXPowerCustomActionMP_GethTurretHeal : SFXPowerCustomAction
    {
        public Vector BeamSourceLocation;
        public NameReference BeamAttachBoneName;
        public float HealThreshold;
        public int CE_HealCrust;
        public int PSC_Beam;
        public float BeamDuration;
        public int BeamTarget;
        public bool bBeamIsActive;
    }
    public class SFXPowerCustomActionMP_Overload_Geth : SFXPowerCustomActionMP_Overload
    {
    }
    public class SFXPowerCustomActionMP_Supercharge : SFXPowerCustomAction
    {
        public PowerData VisionRange;
        public PowerData MovementSpeedBonus;
        public PowerData DamageBonus;
        public PowerData WeaponAccuracyBonus;
        public int[] OutlineGlowActors;
        public float ShieldPercentPenalty;
        public float GlowCullDistanceOffset;
        public float Evolve_PowerRechargeBonus;
        public float Evolve_WeaponAccuracyBonus;
        public float Evolve_PowerDamageBonus;
        public float Evolve_WeaponRoFBonus;
        public float Evolve_MovementSpeedBonus;
        public float Evolve_VisionRangeBonus;
        public float Evolve_DamageBonus;
        public int srArmorActive;
        public int WWise_VisionOn;
        public int WWise_VisionOff;
        public float UpdateFrequency;
    }
    public class SFXSkeletalMeshComponent_Supercharge : SkeletalMeshComponent
    {
    }
    public class SFXCharacterClassMP_Infiltrator_Geth : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Infiltrator_Geth : SFXPawn_PlayerMP_Infiltrator
    {
        public int LF_GethLensFlare;
    }
    public class SFXPowerCustomActionMP_Cloak_Geth : SFXPowerCustomActionMP_Cloak
    {
    }
    public class SFXPowerCustomActionMP_ProximityMine_Geth : SFXPowerCustomActionMP_ProximityMine
    {
    }
    public class SFXCharacterClassMP_Vanguard_Krogan : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Vanguard_Krogan : SFXPawn_PlayerMP_Vanguard
    {
    }
    public class SFXPowerCustomActionMP_Barrier_KroganVanguard : SFXPowerCustomActionMP_Barrier
    {
        public string[] ExcludedMaps;
        public int PlayerDetonation;
        public int NPCDetonation;
    }
    public class SFXPowerCustomActionMP_BioticCharge_Krogan : SFXPowerCustomActionMP_BioticCharge
    {
        public float Evolve_TimedMeleeDamageBonus;
        public float Evolve_TimedMeleeDamageDuration;
    }
    public class SFXPowerCustomActionMP_Carnage_KroganVanguard : SFXPowerCustomActionMP_Carnage
    {
    }
    public class SFXPowerCustomActionMP_KroganMeleePassive_Vanguard : SFXPowerCustomActionMP_KroganMeleePassive
    {
    }
    public class SFXPowerCustomActionMP_KroganPassive_Vanguard : SFXPowerCustomActionMP_KroganPassive
    {
    }
    public class SFXGameInfoMP_Lobby_DLC : SFXGameInfoMP_Lobby
    {
    }
    public class SFXGUI_MPSelectKit_DLC : SFXGUI_MPSelectKit
    {
        public KitDescriptionData[] KitDescriptions;
    }
    public class SFXGameEffect_MatchConsumable_HeadshotDamage : SFXGameEffect_MatchConsumableBase
    {
        public float[] DmgMultiplier;
    }
    public class SFXGameEffect_MatchConsumable_MeleeDamage : SFXGameEffect_MatchConsumableBase
    {
        public float[] DmgMultiplier;
    }
    public class SFXGameEffect_MatchConsumable_ShieldRegenBonus : SFXGameEffect_MatchConsumableBase
    {
        public float[] ShieldBonus;
    }
    public class SFXGameEffect_MatchConsumable_StabilityBonus : SFXGameEffect_MatchConsumableBase
    {
        public float[] Bonus;
    }
    public class SFXDamageType_AssaultRifle_Krogan : SFXDamageType_Gib
    {
    }
    public class SFXProjectile_KroganAR : SFXProjectile_Proximity
    {
        public int NPExplosionSound;
    }
    public class SFXWeapon_AssaultRifle_Krogan : SFXWeapon_AssaultRifle_Base
    {
        public float MinROF;
        public float RampTime;
    }
    public class SFXWeapon_SMG_Geth : SFXWeapon_SMG_Base
    {
        public Guid ChargeEffectGuid;
        public Guid ChargeDownEffectGuid;
        public int PowerUpSound1;
        public int PowerDownSound1;
        public int SteamMuzzle;
        public int ChargeRing;
        public int CE_ChargeUp;
        public int CE_ChargeDown;
        public float MinROF;
        public float RampTime;
        public float DamageMultiplier;
        public float GetHotTime;
        public float FullyChargedTime;
        public bool bIsHot;
    }
    public class SFXDamageType_Kishock : SFXDamageType
    {
    }
    public class SFXGUI_BatarianSniperReticle : SFXGUI_CerberusSniperZoomReticle
    {
    }
    public class SFXProjectile_BatarianSniperRound : SFXProjectile_Explosive
    {
        public int KishockImpactTemplate;
        public int KishockBloodyImpactTemplate;
        public float DirectDamageProportion;
        public float BleedDuration;
        public float HeadShotMultiplier;
    }
    public class SFXWeapon_SniperRifle_Batarian : SFXWeapon_SniperRifle_Base
    {
        public Guid ChargeEffectGuid;
        public int ShellSound;
        public float KishockDamageMultiplier;
        public float KishockRecoilMultiplier;
        public int ChargePlayerFireSound;
        public int ChargeFireSound;
        public int SmokeEffect;
        public int CE_ChargeUp;
        public int ChargeRumble;
        public int PSC_Harpoon;
    }
    public class SFXCharacterClassMP_Infiltrator_Asari : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Infiltrator_Asari : SFXPawn_PlayerMP_Infiltrator
    {
    }
    public class SFXPowerCustomActionMP_AsariCloak : SFXPowerCustomActionMP_Cloak
    {
        public float Evolve_PowerDamageBonus;
    }
    public class SFXPowerCustomActionMP_AsariPassive_Infiltrator : SFXPowerCustomActionMP_AsariPassive
    {
    }
    public class SFXDamageTypeMP_DarkChannel_Shared : SFXDamageType_DarkChannel
    {
    }
    public class SFXDamageTypeMP_DarkChannel_Improved_Shared : SFXDamageTypeMP_DarkChannel_Shared
    {
    }
    public class SFXGameEffectMP_DarkChannel_Shared : SFXGameEffect_DarkChannel
    {
        public float SlowPercent;
        public bool bBeamActive;
    }
    public class SFXPowerCustomActionMP_DarkChannel2_Shared : SFXPowerCustomAction_DarkChannel
    {
    }
    public class SFXCharacterClassMP_Sentinel_Asari : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Sentinel_Asari : SFXPawn_PlayerMP_Sentinel
    {
    }
    public class SFXPowerCustomActionMP_AsariPassive_Sentinel : SFXPowerCustomActionMP_AsariPassive
    {
    }
    public class SFXDamageType_Annihilation_Shared : SFXDamageType_Power_Fire
    {
    }
    public class SFXDamageType_AnnihilationBlast_Shared : SFXDamageType_Power
    {
    }
    public class SFXGameEffect_AnnihilationDamageOverTime_Shared : SFXGameEffect_DamageOverTime
    {
        public float TotalDamageDone;
        public float PowerComboDamageThreshold;
        public int ComboPower;
        public float ForceMag;
        public bool bComboEffectApplied;
        public bool bCanCauseCombo;
    }
    public class SFXPowerCustomActionMP_AnnihilationSphere_Shared : SFXPowerCustomAction
    {
        public PowerData BlastRadius;
        public PowerData BlastDamage;
        public PowerData BlastForce;
        public AffectedPawn[] AffectedPawns;
        public int BlastDamageType;
        public int RumbleClass;
        public int ScreenShakeClass;
        public AreaEffectParameters BlastParameters;
        public Guid GUID_SphereVFX;
        public Vector SphereLocation;
        public NameReference BeamAttachBoneName;
        public int CE_Sphere;
        public int CE_BurnCrust;
        public int PSC_Beam;
        public int MaxBurnTargets;
        public int CE_DeathEffect;
        public float UpdateFrequency;
        public int WWise_SphereOn;
        public int WWise_SphereOff;
        public int WWise_HenchmanSphereOn;
        public int WWise_HenchmanSphereOff;
        public int CE_BlastEffect;
        public int BlastMaxTargets;
        public int BlastMaxRagdoll;
        public int BlastSound;
        public float Evolve_DamageBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_ImpactRadiusBonus;
        public float Evolve_MovementSpeedBonus;
        public float Evolve_DurationBonus;
        public float Evolve_DamageTakenBonus;
        public float ShieldDrainConversion;
        public bool bSphereActive;
    }
    public class SFXCharacterClassMP_Adept_Batarian : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Adept_Batarian : SFXPawn_PlayerMP_Adept
    {
    }
    public class SFXCameraMode_BatarianMelee_Shared : SFXCameraMode_Melee
    {
    }
    public class SFXCustomAction_BatarianMeleeOne_Shared : SFXCustomAction_PlayerMeleeBase
    {
        public int AnimSet;
        public float BladeImpactScale;
    }
    public class SFXCustomAction_BatarianPistolMeleeOne_Shared : SFXCustomAction_PlayerMeleeBase
    {
        public int AnimSet;
    }
    public class SFXCustomAction_BatarianPistolMeleeTwo_Shared : SFXCustomAction_BatarianPistolMeleeOne_Shared
    {
    }
    public class SFXCustomAction_BatarianPistolMeleeThree_Shared : SFXCustomAction_BatarianPistolMeleeTwo_Shared
    {
    }
    public class SFXCustomAction_BatarianPunch_Shared : SFXCustomAction_PlayerHeavyMeleeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_BatarianRifleMeleeTwo_Shared : SFXCustomAction_BatarianMeleeOne_Shared
    {
    }
    public class SFXCustomAction_BatarianRifleMeleeThree_Shared : SFXCustomAction_BatarianRifleMeleeTwo_Shared
    {
    }
    public class SFXCustomAction_BatarianSyncCoverGrab_Shared : SFXCustomAction_SyncCoverGrab
    {
    }
    public class SFXDamageType_Lash_Shared : SFXDamageType_Power
    {
    }
    public class SFXGameEffect_LashLift_Shared : SFXGameEffect_PhysicsPower
    {
        public Vector Direction;
        public float Force;
        public int OwnerPawn;
        public float MinimumVelocity;
        public float MinimumVelocityForceMult;
    }
    public class SFXPowerCustomActionMP_BatarianMeleePassive_Shared : SFXPowerCustomActionMP_TurianMeleePassive
    {
    }
    public class SFXPowerCustomActionMP_BatarianPassive_Shared : SFXPowerCustomActionMP_PassiveBase
    {
        public PowerData WeaponSpareAmmoBonus;
        public float Evolve_WeaponSpareAmmo1;
        public float Evolve_WeaponSpareAmmo2;
    }
    public class SFXPowerCustomActionMP_Lash_Shared : SFXPowerCustomAction
    {
        public PowerData PullForce;
        public PowerData PowerComboDuration;
        public LashForceMultiplierShared[] ForceMultipliers;
        public int PullDamageType;
        public Vector PawnHitNormal;
        public float AntiGravityAmount;
        public float InitialForce;
        public float TowardCasterScale;
        public float Evolve_DamageBonus;
        public float Evolve_PowerComboBonus;
        public float Evolve_RechargeBonus;
        public float Evolve_DoTPercent;
        public float Evolve_DoTDuration;
        public float Evolve_NoCooldownChance;
        public float Evolve_ComboDurationBonus;
        public float GuardianShieldForceModifier;
        public float ResistanceForceMultiplier;
        public int PawnToPull;
        public float PullAnimDelayAfterRelease;
        public float TimeSinceRelease;
        public int PullSound;
        public int NPPullSound;
        public bool bStopMovement;
        public bool bPowerCancelled;
    }
    public class SFXProjectile_PowerCustomAction_Lash_Shared : SFXProjectile_PowerCustomAction_SuperSeeking
    {
    }
    public class SFXCharacterClassMP_Vanguard_Batarian : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Vanguard_Batarian : SFXPawn_PlayerMP_Vanguard
    {
    }
    public class SFXDamageType_BatarianArmorThorns_Shared : SFXDamageType_Power
    {
    }
    public class SFXGameEffect_BatarianArmor_Shared : SFXGameEffect_DamageTakenBonus
    {
        public int OwnerPawn;
        public float EnableArmorDelay;
        public float DisableArmorDelay;
    }
    public class SFXPowerCustomActionMP_BatarianArmor_Shared : SFXPowerCustomAction
    {
        public PowerData DamageReduction;
        public PowerData EncumbrancePenalty;
        public PowerData MeleeDamageBonus;
        public PowerData ThornsDamage;
        public float ThornsDamageCap;
        public float DamageToForceMultiplier;
        public float Evolve_DamageReductionBonus;
        public float Evolve_MeleeDamageBonus;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_ThornsDamageBonus;
        public float Evolve_EncumbranceBonus;
        public float Evolve_DamageReductionBonus2;
        public int srArmorActive;
        public int CE_BladesOn;
        public int CE_BladesOff;
        public int WWise_PlayerCast_On;
        public int WWise_NPCCast_On;
        public int WWise_PlayerCast_Off;
        public int WWise_NPCCast_Off;
        public bool bArmorDestroyed;
    }
    public class SFXDamageType_KillerBees : SFXDamageType
    {
    }
    public class SFXDamageType_ReactorCore : SFXDamageType
    {
    }
    public class SFXDynamicPhysicsVolume_ReactorCore : DynamicPhysicsVolume
    {
    }
    public class SFXSimpleDialogActor : Actor
    {
        public int SimpleDialogPlayer;
    }
    public class SFXSimpleDlgActor_Rctr2 : SFXSimpleDialogActor
    {
    }
    public class SFXPointOfInterestMP : Actor
    {
    }
    public class SFXSeqAct_PlaySimpleDialog : SequenceAction
    {
        public int DialogType;
        public NameReference EventToPlayName;
        public int EventToPlayIndex;
        public int DialogProxy;
    }
    public class SFXSeqAct_SetTargetableMP : SFXSeqAct_SetTargetable
    {
    }
    public class SFXDamageType_AcidRain : SFXDamageType
    {
    }
    public class SFXCharacterClassMP_Infiltrator_Drell : SFXCharacterClass_ContentMP
    {
    }
    public class SFXDamageType_ReconMine : SFXDamageType_Power
    {
    }
    public class SFXDamageType_ReconMineArmor : SFXDamageType_ReconMine
    {
    }
    public class SFXGameEffect_ReconMineGlowActor : SFXGameEffect
    {
        public int GlowActor;
        public int OwnerPawn;
    }
    public class SFXPawn_PlayerMP_Infiltrator_Drell : SFXPawn_PlayerMP_Infiltrator
    {
    }
    public class SFXPowerCustomActionMP_ReconMine : SFXPowerCustomAction
    {
        public PowerData ScanRadius;
        public int[] TrackedPawns;
        public Guid OmniToolGuid;
        public NameReference GlowActorUniqueCategory;
        public float Evolve_DamageBonus1;
        public float Evolve_DamageBonus2;
        public float Evolve_RadiusBonus;
        public float Evolve_CooldownBonus;
        public float Evolve_ArmorDamageBonus;
        public float Evolve_DamageDebuff;
        public float Evolve_SpeedDebuff;
        public float ArmingDelay;
        public float StopGlowDelay;
        public int DetonateAnimSet;
        public int ActiveMine;
        public int CE_EnemyInRange;
        public int CE_MineActiveOmniTool;
        public bool bOmniToolActive;
    }
    public class SFXProjectile_PowerCustomAction_ReconMine : SFXProjectile_PowerCustomAction
    {
        public Guid ImpactGUID;
        public Vector MineHitNormal;
        public float ArmingDelay;
        public float UpdateFrequency;
        public float LastUpdateTime;
        public float StartTime;
        public float ScanRange;
        public int MinePower;
        public int CE_MineDeployedTemplate;
        public int CE_MineDeployedTemplate_Local;
        public int CE_MineExplosion;
        public int CE_EnemyInRange;
        public int AttachToWallSound;
        public int HenchAttachToWallSound;
        public int ArmingSound;
        public int NonPlayerArmingSound;
        public int MineExplosionSound;
        public int NonPlayerMineExplosionSound;
    }
    public class SFXDamageType_HomingGrenade_Shared : SFXDamageType_Power_Fire
    {
    }
    public class SFXDamageType_HomingGrenade_Improved_Shared : SFXDamageType_HomingGrenade_Shared
    {
    }
    public class SFXPowerCustomActionMP_HomingGrenade_Shared : SFXPowerCustomAction_GrenadeBase
    {
        public PowerData MaxGrenadeBonus;
        public AreaEffectParameters SecondTargetParams;
        public Guid GrenadeSpawnGuid;
        public Vector SecondLocation;
        public float Evolve_DamageBonus;
        public float Evolve_ImpactRadiusBonus;
        public int Evolve_GrenadeCountBonus;
        public float Evolve_DoTDamage;
        public float Evolve_DoTDuration;
        public float Evolve_ArmorDebuffPercent;
        public float Evolve_ArmorDebuffDuration;
        public float Evolve_ArmorDamageBonus;
        public float Evolve_SplitDamage;
        public float SecondProjectileDelay;
        public float SecondProjectileMaxRange;
        public int SecondTarget;
        public float CastConeHalfAngleDeg;
        public int Rank2GrenadeUpgrade;
        public int CE_GrenadeImpact;
        public int CE_GrenadeSpawn;
        public int CE_FireDoTTemplate;
        public bool bSecondProjectile;
    }
    public class SFXProjectile_PowerCustomAction_HomingGrenade_Shared : SFXProjectile_PowerCustomAction_SuperSeeking
    {
        public Vector InitialOffset;
        public float LaunchDelay;
        public float LaunchTimer;
        public float AccelRateOverride;
        public float SpeedOverride;
        public float MaxSpeedOverride;
        public int PS_MuzzleFlash;
        public bool bLaunched;
    }
    public class SFXCharacterClassMP_Soldier_Geth : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Soldier_Geth : SFXPawn_PlayerMP_Soldier
    {
        public int LF_GethLensFlare;
    }
    public class SFXCustomAction_GethPistolMelee_Shared : SFXCustomAction_PlayerMeleeBase
    {
    }
    public class SFXCustomAction_GethPunch_Shared : SFXCustomAction_Loop
    {
        public int DamageType;
        public AreaEffectParameters MeleeImpactParameters;
        public int AnimInfo;
        public int Power;
        public float StartShieldReduction;
        public float ShieldReduction;
        public float SuperShieldReduction;
        public int PlayerChargeEndSound;
        public int NonPlayerChargeEndSound;
    }
    public class SFXCustomAction_GethRifleMelee_Shared : SFXCustomAction_PlayerMeleeBase
    {
        public float BladeImpactScale;
    }
    public class SFXCustomAction_GethSyncCoverGrab_Shared : SFXCustomAction_SyncCoverGrab
    {
    }
    public class SFXDamageType_Flamer_Shared : SFXDamageType_Power_Fire
    {
    }
    public class SFXDamageType_Flamer_AntiArmor_Shared : SFXDamageType_Flamer_Shared
    {
    }
    public class SFXDamageType_Flamer_AntiShield_Shared : SFXDamageType_Flamer_Shared
    {
    }
    public class SFXDamageType_GethHeavyMelee_Shared : SFXDamageType_HeavyMelee
    {
    }
    public class SFXDamageType_GethSyncGrab_Shared : SFXDamageType_CoverMelee
    {
    }
    public class SFXGameEffect_Supercharge_Shared : SFXGameEffect
    {
        public Guid CrustGuid;
        public Guid EyeFlareGuid;
        public int CE_CrustEffect;
        public int CE_EyeFlare;
        public float UpdateFrequency;
        public int Supercharge;
        public bool bActive;
    }
    public class SFXOutlineGlowActorMP_Supercharge_Shared : SFXOutlineGlowActorMP
    {
    }
    public class SFXPowerCustomActionMP_Flamer_Shared : SFXPowerCustomAction
    {
        public int[] ComboActorTracker;
        public int DamageType_ImprovedAntiArmor;
        public int DamageType_ImprovedAntiShield;
        public Guid GUID_OmniFlamer;
        public NameReference FlamerSocket;
        public float Evolve_Damage1;
        public float Evolve_Damage2;
        public float Evolve_Range;
        public float Evolve_Duration;
        public float Evolve_ArmorMultiplier;
        public float Evolve_ShieldMultiplier;
        public float UpdateFrequency;
        public int CE_DeathEffectTemplate;
        public int CE_FireDoTTemplate;
        public int CE_OmniFlamer;
        public float DoTDuration;
        public float DotPercent;
        public float MinimumCooldown;
        public float TimeFlamerStarted;
        public int PSC_Flamer;
        public int PSC_ElectricFlamer;
        public float FlamerPSScale;
        public int WWise_FlamerStart_Player;
        public int WWise_FlamerStart_NonPlayer;
        public int WWise_FlamerStop_Player;
        public int WWise_FlamerStop_NonPlayer;
        public int MaxCombosPerCast;
        public bool bActive;
    }
    public class SFXPowerCustomActionMP_GethMeleePassive_Shared : SFXPowerCustomActionMP_MeleePassiveBase
    {
        public PowerData ShieldRegenBonus;
    }
    public class SFXPowerCustomActionMP_GethPassive_Shared : SFXPowerCustomActionMP_PassiveBase
    {
        public PowerData GethWeaponDamage;
        public string[] RegisteredGethWeapons;
        public float Evolve_GethWeaponDamage;
    }
    public class SFXPowerCustomActionMP_Supercharge_Shared : SFXPowerCustomAction
    {
        public PowerData VisionRange;
        public PowerData MovementSpeedBonus;
        public PowerData DamageBonus;
        public PowerData WeaponAccuracyBonus;
        public int[] OutlineGlowActors;
        public float ShieldPercentPenalty;
        public float GlowCullDistanceOffset;
        public float Evolve_PowerRechargeBonus;
        public float Evolve_WeaponAccuracyBonus;
        public float Evolve_PowerDamageBonus;
        public float Evolve_WeaponRoFBonus;
        public float Evolve_MovementSpeedBonus;
        public float Evolve_VisionRangeBonus;
        public float Evolve_DamageBonus;
        public int srArmorActive;
        public int WWise_VisionOn;
        public int WWise_VisionOff;
        public float UpdateFrequency;
    }
    public class SFXSkeletalMeshComponent_Supercharge_Shared : SkeletalMeshComponent
    {
    }
    public class SFXGUI_CollectorHUDOverlay : SFXGUIMovie
    {
    }
    public class SFXCharacterClassMP_Adept_Krogan : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Adept_Krogan : SFXPawn_PlayerMP_Adept
    {
    }
    public class SFXPowerCustomActionMP_Barrier_Shared : SFXPowerCustomActionMP_Barrier
    {
        public string[] ExcludedMaps;
        public int PlayerDetonation;
        public int NPCDetonation;
    }
    public class SFXGAWReinforcementMatchConsumable_Gear : SFXGAWReinforcementMatchConsumable
    {
        public GearDescriptionTokens[] GearTokensList;
    }
    public class SFXGUI_MPChallenges : SFXGUIMovie
    {
        public ChallengeDisplayItem[] GeneralChallenges;
        public ChallengeDisplayItem[] AlienChallenges;
        public ChallengeDisplayItem[] WeaponChallenges;
        public int __ChallengeSort_Rank_Index__Delegate;
        public int __ChallengeSort_Parent__Delegate;
        public int TitleText;
        public int ExitText;
        public int BackText;
        public int CloseSubListText;
        public int Tab1Text;
        public int Tab2Text;
        public int Tab3Text;
        public int ViewText;
        public int ContinueText;
        public int MarkAllViewedText;
        public int TitleTemplateString;
        public int BodyTemplateString;
        public int TimesCompletedString;
        public int ChallengePointsString;
        public int SetTitleConfirmString;
    }
    public class SFXGUI_MPLobby_DLC : SFXGUI_MPLobby
    {
    }
    public class SFXGUI_MPMatchConsumables_DLC : SFXGUI_MPMatchConsumables
    {
    }
    public class SFXGUI_MPReinforcementsReveal_DLC : SFXGUI_MPReinforcementsReveal
    {
    }
    public class SFXGUI_MPWeaponSelection_DLC : SFXGUI_WeaponSelection
    {
    }
    public class SFXCharacterClassMP_Soldier_MQuarian : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Soldier_MQuarian : SFXPawn_PlayerMP_Soldier
    {
    }
    public class SFXDamageType_Damping_Shared : SFXDamageType_Power
    {
    }
    public class SFXGameEffect_ScanGlowActor_Shared : SFXGameEffect
    {
        public int GlowActor;
        public int OwnerPawn;
    }
    public class SFXOutlineGlowActorMP_QuarianScan_Shared : SFXOutlineGlowActorMP
    {
    }
    public class SFXPowerCustomActionMP_Damping_Shared : SFXPowerCustomAction
    {
        public PowerData AdditionalDamageTaken;
        public PowerData MovementSpeedModifier;
        public NameReference[] InstantKillEnemies;
        public DampingEyeHeightShared[] DampingEyeHeights;
        public Guid PlayerScanVFXGuid;
        public Guid TargetScanVFXGuid;
        public Guid PlayerOmniToolVFXGuid;
        public Guid PlayerOmniToolInfoVFXGuid;
        public Guid PlayerOmniToolScanBeamVFXGuid;
        public Rotator InitialRot;
        public Vector HealthColor;
        public Vector ArmorColor;
        public Vector ShieldColor;
        public Vector BioticColor;
        public NameReference DampingUniqueCategory;
        public NameReference GlowActorUniqueCategory;
        public Vector2D EnemySizeRange;
        public Vector2D HoloMeshScaleRange;
        public Vector2D HighlightSizeRange;
        public float Evolve_WeaponDamageBonus;
        public float Evolve_PowerDamageBonus;
        public float Evolve_HeadShotBonus;
        public float Evolve_MovementSpeedBonus;
        public float Evolve_DamageTakenBonus;
        public float Evolve_DurationBonus;
        public float Evolve_AreaScanRadius;
        public float Evolve_AreaScanDuration;
        public int CE_PlayerScanTemplate;
        public int CE_TargetScanTemplate;
        public int CE_PlayerOmniToolTemplate;
        public int CE_PlayerOmniToolInfoTemplate;
        public int CE_PlayerOmniToolScanBeamTemplate;
        public int CurrentlyAffectedPawn;
        public int CurrentPawnMeshCopy;
        public int HologramEmitter;
        public int HologramDistanceEmitter;
        public int TargetEmitter;
        public int PS_HealthShieldTemplate;
        public int PS_HoloHealthShieldTemplate;
        public int PS_HoloDistanceTemplate;
        public float AttachMeshDelay;
        public float ShowDistanceMeterDelay;
        public float UpdatePawnFrequency;
        public float HoloHighlightSize;
        public float HoloHealthBarSize;
        public float ShutOffOmniToolDelay;
        public int ScanImpactSound;
        public bool bOmniToolActive;
    }
    public class SFXPowerCustomActionMP_MaleQuarianMeleePassive_Shared : SFXPowerCustomActionMP_MeleePassiveBase
    {
    }
    public class SFXPowerCustomActionMP_MaleQuarianPassive_Shared : SFXPowerCustomActionMP_PassiveBase
    {
    }
    public class SFXSkeletalMeshComponent_QuarianScan_Shared : SkeletalMeshComponent
    {
    }
    public class SFXCameraMode_TurianPack : SFXCameraMode_Combat
    {
    }
    public class SFXCharacterClassMP_N7Infiltrator_Turian : SFXCharacterClass_ContentMP
    {
    }
    public class SFXCustomAction_TurianEvadeBase : SFXCustomAction_PlayerEvadeBase
    {
        public Vector MoveOffset;
        public int AnimSet;
        public float FinalMoveSpeed;
        public float Decay;
        public float GravityCompensationForExtremeDistance;
    }
    public class SFXCustomAction_TurianEvadeBackward : SFXCustomAction_TurianEvadeBase
    {
    }
    public class SFXCustomAction_TurianEvadeForward : SFXCustomAction_TurianEvadeBase
    {
    }
    public class SFXCustomAction_TurianEvadeLeft : SFXCustomAction_TurianEvadeBase
    {
    }
    public class SFXCustomAction_TurianEvadeRight : SFXCustomAction_TurianEvadeBase
    {
    }
    public class SFXCustomAction_TurianMeleeOne : SFXCustomAction_PlayerMeleeBase
    {
        public int AnimSet;
        public float BladeImpactScale;
    }
    public class SFXCustomAction_TurianPistolMeleeOne : SFXCustomAction_PlayerMeleeBase
    {
        public int AnimSet;
    }
    public class SFXCustomAction_TurianPistolMeleeTwo : SFXCustomAction_TurianPistolMeleeOne
    {
    }
    public class SFXCustomAction_TurianPistolMeleeThree : SFXCustomAction_TurianPistolMeleeTwo
    {
    }
    public class SFXCustomAction_TurianPunch : SFXCustomAction_PlayerHeavyMeleeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_TurianRifleMeleeTwo : SFXCustomAction_TurianMeleeOne
    {
    }
    public class SFXCustomAction_TurianRifleMeleeThree : SFXCustomAction_TurianRifleMeleeTwo
    {
    }
    public class SFXDamageType_JetPackCharge : SFXDamageType_Power
    {
    }
    public class SFXDamageType_TurianHeavyMelee : SFXDamageType_HeavyMelee
    {
    }
    public class SFXGameEffect_StimPack : SFXGameEffect
    {
        public int StimPack;
    }
    public class SFXPawn_PlayerMP_N7Infiltrator_Turian : SFXPawn_PlayerMP_Infiltrator
    {
    }
    public class SFXPowerCustomActionMP_JetPackCharge_Base : SFXPowerCustomAction
    {
        public Charge_PendingVolume[] VolumeList;
        public int CustomDetonationRumbleClass;
        public int CustomDetonationScreenShakeClass;
        public ScreenShakeStruct HitShake;
        public float FrozenTargetForceMult;
        public float ConeAngle;
        public float TeleportStartDelay;
        public float TeleportDelay;
        public float ImpactDelay;
        public float ImpactDelay_Min;
        public float ImpactDelay_Max;
        public float TimeStingerDelay;
        public float CameraImpactDelay;
        public int PS_TeleportIn;
        public int PS_TeleportOut;
        public int CE_CrustEffect;
        public int CE_JetCrustEffect;
        public int CE_ChargeImpact;
        public int CE_HeavyChargeImpact;
        public int ChargeProjectile;
        public int CamTransition;
        public int CamMode;
        public int HitForceFeedback;
        public float CameraDelay;
        public int ChargeCast;
        public int HenchChargeCast;
        public int ChargeImpact;
        public int HenchChargeImpact;
        public int ChargeTakeoff;
        public int HenchChargeTakeoff;
        public bool bCachedTargetImpacted;
        public bool bUseOwnerRotation;
        public bool bFailedToMoveCaster;
        public bool bCollectedVolumes;
        public bool bLineCheckToHead;
    }
    public class SFXPowerCustomActionMP_JetPackCharge : SFXPowerCustomActionMP_JetPackCharge_Base
    {
        public PowerData DamageReduction;
        public PowerData DamageReductionDuration;
        public float ChargeSpeedMultiplier;
        public float Evolve_CooldownBonus;
        public float Evolve_TimedMeleeDamageDuration;
        public float Evolve_MeleeDamageBonus;
        public float Evolve_DamageForceBonus2;
        public float Evolve_DamageForceBonus;
        public float Evolve_ImpactRadiusBonus;
        public float Evolve_MaxImpactTargetsBonus;
        public float Evolve_TimedWeaponDamageBonus;
        public float Evolve_TimedWeaponDamageDuration;
        public float Evolve_TimedPowerDamageBonus;
        public float Evolve_TimedPowerDamageDuration;
    }
    public class SFXPowerCustomActionMP_N7TurianMeleePassive : SFXPowerCustomActionMP_MeleePassiveBase
    {
    }
    public class SFXPowerCustomActionMP_N7TurianPassive : SFXPowerCustomActionMP_TurianPassive
    {
    }
    public class SFXPowerCustomActionMP_StimPack : SFXPowerCustomAction_GrenadeBase
    {
        public PowerData MaxGrenadeBonus;
        public PowerData ShieldStrength;
        public PowerData Duration;
        public PowerData DamageBonus;
        public int Evolve_GrenadeCountBonus;
        public int Rank2GrenadeUpgrade;
        public float Evolve_DamageBonus;
        public float Evolve_Duration;
        public float Evolve_ShieldStrengthBonus;
        public float Evolve_ShieldStrengthBonus2;
        public float Evolve_WeaponDamageBonus;
        public float Evolve_MeleeDamageBonus;
        public int CE_HealCrust;
        public int CE_SuperHealCrust;
        public float DamageImmunityLength;
    }
    public class SFXPowerCustomActionMP_TurianCloak : SFXPowerCustomActionMP_Cloak
    {
        public float Evolve_AssaultRifleDamageBonus;
        public float AssaultRifleDuration;
    }
    public class SFXProjectile_PowerCustomActionMP_JetPack : SFXProjectile
    {
    }
    public class SFXCharacterClassMP_N7Soldier_Turian : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_N7Soldier_Turian : SFXPawn_PlayerMP_Soldier
    {
    }
    public class SFXDamageType_EraserAmmo : SFXDamageType_Power
    {
    }
    public class SFXDamageType_NeedlerAmmo : SFXDamageType_Power
    {
    }
    public class SFXDamageType_PhasicAmmo : SFXDamageType_Power
    {
    }
    public class SFXDamageType_PoloniumAmmo : SFXDamageType_Power_Fire
    {
    }
    public class SFXGameEffect_MatchConsumable_AmmoPower_Eraser : SFXGameEffect_MatchConsumable_AmmoPower
    {
        public float[] Damage;
        public float[] Penetration;
        public float[] ArmorReduction;
        public int DamageType;
        public int PS_OrganicImpactEffect;
        public int PS_NonOrganicImpactEffect;
        public float VFXSpawnChance;
    }
    public class SFXGameEffect_MatchConsumable_AmmoPower_Needler : SFXGameEffect_MatchConsumable_AmmoPower
    {
        public float[] Damage;
        public float[] ExplosionDamageCap;
        public float[] ExplosionRadius;
        public VictimWithNeedles[] NeedleVictims;
        public int[] WorldNeedles;
        public int DamageType;
        public float ExplosionDelay;
        public float LastTimeNeedlerSpawned;
        public float MinTimeBetweenNeedles;
        public int PS_Needle;
        public int PS_Explosion;
        public float LastTimeGameEffectCreated;
        public float MinTimeBetweenGameEffectSpawns;
        public int MaxNeedlesPerPawn;
        public int MaxNeedlesWorld;
    }
    public class SFXGameEffect_MatchConsumable_AmmoPower_Phasic : SFXGameEffect_MatchConsumable_AmmoPower
    {
        public float[] Damage;
        public int DamageType;
        public float ShieldRegenPenalty;
        public float ShieldRegenPenaltyDuration;
    }
    public class SFXGameEffect_MatchConsumable_AmmoPower_Polonium : SFXGameEffect_MatchConsumable_AmmoPower
    {
        public float[] DoTDamage;
        public float[] DoTDuration;
        public int DamageType;
        public float LastTimeFlameSpawned;
        public float MinTimeBetweenFlameSpawns;
        public int PS_PoloniumImpact;
    }
    public class SFXGameEffect_Needler : SFXGameEffect
    {
        public AreaEffectParameters DetonationParameters;
        public float ExplosionDamage;
        public float ExplosionRadius;
        public float ExplosionDamageCap;
        public int MaxImpactCount;
        public int NeedlerAmmoPower;
        public int WWise_ExplosionSound;
    }
    public class SFXGameEffect_PoloniumDamageOverTime : SFXGameEffect_DamageOverTime
    {
        public Guid Guid_Polonium;
        public int CE_Polonium;
    }
    public class SFXGameEffect_MatchConsumable_Gear : SFXGameEffect_MatchConsumableBase
    {
        public int CurrentLevel;
        public int PlayerVariableValueOverride;
        public int MaxLevel;
    }
    public class SFXGameEffect_MatchConsumable_Gear_CobraCapacity : SFXGameEffect_MatchConsumable_Gear
    {
        public int[] CobraCapacity;
        public float[] AmmoCapacity;
        public int ConsumablePower;
    }
    public class SFXGameEffect_MatchConsumable_Gear_MassMedigel : SFXGameEffect_MatchConsumable_Gear
    {
        public float[] Range;
    }
    public class SFXGameEffect_MatchConsumable_Gear_MedigelCapacity : SFXGameEffect_MatchConsumable_Gear
    {
        public int[] MedigelCapacity;
        public float[] RegenSpeed;
        public int ConsumablePower;
    }
    public class SFXGameEffect_MatchConsumable_Gear_SurvivalCapacity : SFXGameEffect_MatchConsumable_Gear
    {
        public int[] SurvivalCapacity;
        public float[] ShieldStrength;
        public int ConsumablePower;
    }
    public class SFXGameEffect_MatchConsumable_Gear_ThermalCapacity : SFXGameEffect_MatchConsumable_Gear
    {
        public int[] ThermalCapacity;
        public float[] WeaponDamage;
        public int ConsumablePower;
    }
    public class SFXGameEffect_MatchConsumable_Gear_WeaponDamage : SFXGameEffect_MatchConsumable_Gear
    {
        public NameReference[] WeaponTypes;
        public float[] DamageBonus;
    }
    public class SFXGameEffect_MatchConsumable_Gear_WeaponDamage_All : SFXGameEffect_MatchConsumable_Gear_WeaponDamage
    {
    }
    public class SFXAI_Abomination : SFXAI_Core
    {
        public string[] DamageFlareClasses;
        public float ChargedSpeedMod;
        public float TargetProximityInterval;
        public float DamageFlareDuration;
    }
    public class SFXAICmd_Abomination_Melee : SFXAICmd_Base_Melee
    {
    }
    public class SFXAICmd_Base_Abomination : SFXAICommand_Base_Combat
    {
    }
    public class SFXCustomAction_AbominationClimbDown : SFXCustomAction_SimpleMoveBase
    {
    }
    public class SFXCustomAction_AbominationPossession : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_AbominationSyncGrapple : SFXCustomAction_VariableExit
    {
        public float DamagePerSecond;
        public int DOTEffect;
        public bool bTargetBrokeGrapple;
    }
    public class SFXDamageType_AbominationExplosion : SFXDamageType
    {
    }
    public class SFXDamageType_AbominationSuperExplosion : SFXDamageType
    {
    }
    public class SFXPawn_Collector_Base : SFXPawn
    {
        public PossessionVisualEffectData[] PossessionVFXData;
        public PossessionData[] PossessedWaves;
        public NameReference PossessionAbility;
        public NameReference PossessionBonusesCategory;
        public Vector2D ShieldRegenDelay;
        public int CE_PossessedDeathEffect;
        public int PSC_Possession;
        public int PossessedName;
        public float PossessionBonusHealthPercent;
        public float PossessedSpeed;
        public float PossessedDamageBonus;
        public float PossessedBarrierBonus;
        public float MaxEnemyShieldRecharge;
        public float ShieldRegenPct;
        public int CE_OldBodyGib;
        public int CE_BodyGibOverride;
    }
    public class SFXPawn_Abomination : SFXPawn_Collector_Base
    {
        public Guid GUID_Flames;
        public int CE_Explosion;
        public int CE_PossessedExplosion;
        public int CE_Flames;
        public int CE_DoT;
        public float ExplosionDelay;
        public float ExplosionDamage;
        public float SuperExplosionDamage;
        public float FriendlyDamageScalar;
        public float ExplosionRadius;
        public float SuperExplosionRadius;
        public float DoTDuration;
        public float SuperDoTDuration;
        public float DoTDPS;
        public float SuperDoTDPS;
        public int ExplosionSound;
    }
    public class SFXAI_Atlas2 : SFXAI_Atlas
    {
        public float ArmourPieceDamage;
        public float ArmourDestroyedStaggerChance;
    }
    public class SFXPawn_Atlas2 : SFXPawn_Atlas
    {
    }
    public class SFXPowerCustomAction_AtlasDoTRocket : SFXPowerCustomAction
    {
        public float DoTDamagePerSecond;
        public float DoTDuration;
        public int CE_FireDoTTemplate;
    }
    public class SFXCustomAction_BansheeBlast2 : SFXCustomAction_BansheeBlast
    {
        public float DoTLength;
        public float DoTDamage;
    }
    public class SFXPawn_Banshee2 : SFXPawn_Banshee
    {
        public float BlastEvadeDist;
    }
    public class SFXProjectile_BansheeBlast2 : SFXProjectile_BansheeBlast
    {
    }
    public class SFXCustomAction_ConsumePlayerBody : SFXCustomAction_Loop
    {
        public int StopConsumeSound;
        public int KillTarget;
    }
    public class SFXPawn_Cannibal2 : SFXPawn_Cannibal
    {
    }
    public class SFXAI_CollectorCaptain : SFXAI_Cover
    {
        public NameReference GrenadeAttack;
        public float GrenadeInterval;
        public float GrenadeConeAngle;
        public float SeekerGlobalMax;
        public float SeekerLocalMax;
        public int CurrentSeekerCount;
        public bool bThrowGrenade;
    }
    public class SFXAI_Seeker : SFXAI_Core
    {
        public int CE_PossessedSwarmProjectile;
    }
    public class SFXAICmd_Base_CollectorCaptain : SFXAICmd_Base_Cover
    {
    }
    public class SFXAICmd_Base_Seeker : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Berserk_CollectorCaptain : SFXAICommand_Base_Combat
    {
    }
    public class SFXCustomAction_CaptainSpawnSeeker : SFXCustomAction_SingleAnim
    {
        public int CE_SpawnEffects;
        public int CE_PossessedSpawnEffects;
    }
    public class SFXCustomAction_CollectorBoostDown : SFXCustomAction_BoostDownBase
    {
        public Guid BoostGUID;
        public int CE_BoostStart;
        public int FlyingStartSound;
        public int FlyingStopSound;
    }
    public class SFXCustomAction_CollectorBoostUp : SFXCustomAction_ClimbUpBase
    {
        public Guid BoostGUID;
        public int CE_BoostStart;
        public int FlyingStartSound;
        public int FlyingStopSound;
    }
    public class SFXCustomAction_CollectorCaptainMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_CollectorCaptainPossession : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_SeekerClimbDown1M : SFXCustomAction_LargeCoverClimbDown
    {
    }
    public class SFXCustomAction_SeekerClimbUp1M : SFXCustomAction_LargeCoverClimbUp
    {
    }
    public class SFXCustomAction_SeekerExplosion : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_SeekerLadderClimbDown : SFXCustomAction_LadderClimbDownBase
    {
    }
    public class SFXCustomAction_SeekerLadderClimbUp : SFXCustomAction_ClimbUpBase
    {
    }
    public class SFXCustomAction_SeekerMantle : SFXCustomAction_LargeCoverMantle
    {
    }
    public class SFXCustomAction_SeekerStandard : SFXCustomAction_DamageReaction
    {
    }
    public class SFXDamageType_SeekerExplosion : SFXDamageType
    {
    }
    public class SFXPawn_Seeker : SFXPawn_Collector_Base
    {
        public int PSC_Swarm;
        public int PS_Plague;
        public int LifetimeStart;
        public int LifetimeStop;
        public int PlagueLifetimeStart;
        public int PlagueLifetimeStop;
        public int CE_SeekerDeath;
        public int CE_PlagueDeath;
        public int CE_PlagueExplosion;
        public int CE_TargetSwarmed;
        public int CE_PlagueTargetSwarmed;
        public float Damage;
        public float DamageRadius;
        public float CooldownPenalty;
        public float ExplosionDelay;
        public float AccuracyPenalty;
        public bool bIsPlague;
    }
    public class SFXPawn_CollectorCaptain : SFXPawn_Collector_Base
    {
        public Guid LifeTimeGuid;
        public NameReference AttachSocketName;
        public int SeekerArchetype;
        public int PossessedSeekerArchetype;
        public float SeekerInterval;
        public int KnifeMeshComp;
        public int PossessedAmbientVoc;
        public int CaptainPainVoc;
        public int CE_LifeTimeEffect;
    }
    public class SFXWeapon_AI_CollectorCaptain : SFXWeapon_AssaultRifle_Collector
    {
    }
    public class SFXAI_CollectorTrooper : SFXAI_Cover
    {
        public NameReference GrenadeAttack;
        public float GrenadeInterval;
        public float GrenadeConeAngle;
        public float WebPointSearchDist;
        public float WebInterval;
        public float MaxWebCount;
        public float GlobalMaxWebCount;
        public float WebSummonProximity;
        public bool bThrowGrenade;
    }
    public class SFXAI_TrooperWeb : SFXAI_None
    {
        public float SuicideTestRadius;
        public float TimeBeforeSuicide;
    }
    public class SFXAICmd_Base_CollectorTrooper : SFXAICmd_Base_Cover
    {
    }
    public class SFXAICmd_CollectorTrooper_DeployWeb : SFXAICommand_Base_Combat
    {
    }
    public class SFXCustomAction_CollectorTrooperMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_CollectorTrooperPossession : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_CollectorTrooperWeb : SFXCustomAction_SingleAnim
    {
    }
    public class SFXDamageType_SMG_Collector : SFXDamageType_AutoPistol
    {
    }
    public class SFXPawn_CollectorTrooper : SFXPawn_Collector_Base
    {
        public NameReference AttachSocketName;
        public int KnifeMeshComp;
        public int PossessedAmbientVoc;
        public int TrooperPainVoc;
    }
    public class SFXPawn_TrooperWeb : SFXPawn
    {
        public Guid WebGuid;
        public NameReference WebCategory;
        public int SpawnSound;
        public int DeathSound;
        public float WebRadius;
        public float WebDuration;
        public float VictimSlowedAmount;
        public int CE_Web;
    }
    public class SFXPowerCustomAction_CollectorGrenade : SFXPowerCustomAction_EnemyGrenade
    {
    }
    public class SFXWeapon_SMG_Collector : SFXWeapon_SMG_Base
    {
        public Guid ClientEffectFiringGuid;
        public float RechargeRatePerSecond;
        public float PartialRechargeDelay;
        public float FullRechargeDelay;
        public float AccumulatedAmmo;
        public int CE_SteamVent;
        public int CE_HeatVent;
        public float SteamDelay;
        public float HeatDelay;
        public int WeaponReloadRechargeSound;
        public float RechargeSoundDelay;
        public bool bCanPlayRechargeSound;
    }
    public class SFXWeapon_AI_Collector : SFXWeapon_SMG_Collector
    {
    }
    public class SFXAI_GethBomber : SFXAI_Core
    {
        public NameReference BombingRunAbilityName;
        public float GlobalBombingRunInterval;
        public float BombingRunInterval;
        public float NumGrenadesToDrop;
    }
    public class SFXAICmd_Base_GethBomber : SFXAICommand_Base_Combat
    {
    }
    public class SFXCustomAction_GethBomberBombingRun : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_GethBomberClimbDown : SFXCustomAction_LargeCoverClimbDown
    {
    }
    public class SFXCustomAction_GethBomberClimbUp : SFXCustomAction_LargeCoverClimbUp
    {
    }
    public class SFXCustomAction_GethBomberDropDown : SFXCustomAction_BoostDownBase
    {
    }
    public class SFXCustomAction_GethBomberEvadeLeft : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_GethBomberEvadeRight : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_GethBomberMantle : SFXCustomAction_LargeCoverMantle
    {
    }
    public class SFXCustomAction_GethBomberStandard : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_GethBomberZap : SFXCustomAction_SingleAnim
    {
        public int PS_Beam;
    }
    public class SFXDamageType_GethBomb : SFXDamageType
    {
    }
    public class SFXPawn_GethBomber : SFXPawn
    {
        public float[] PendingGrenades;
        public NameReference BeamSocket;
        public NameReference GrenadeSocket;
        public int CE_BeamMuzzle;
        public int PSC_Beam;
        public int PS_BeamImpact;
        public int LF_GethLensFlare;
        public int CE_Explosion;
        public int PS_Explosion;
        public int ExplosionSound;
        public float BombingRunDuration;
        public int IdleStartSound;
        public int IdleStopSound;
    }
    public class SFXProjectile_GethBomb : SFXProjectile_Explosive
    {
        public float GravityScale;
    }
    public class SFXPawn_GethPyro2 : SFXPawn_GethPyro
    {
    }
    public class SFXPawn_Marauder2 : SFXPawn_Marauder
    {
    }
    public class SFXAI_Phoenix : SFXAI_Core
    {
        public NameReference ChargeAbilityName;
        public float GlobalChargeInterval;
        public float EnemyDistance_MeleeAlt;
        public float EnemyDistance_Charge;
    }
    public class SFXAICmd_Base_Phoenix : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Phoenix_Melee : SFXAICmd_Base_Melee
    {
    }
    public class SFXCustomAction_PhoenixCharge : SFXCustomAction_SingleAnim
    {
        public int[] HitActors;
    }
    public class SFXCustomAction_PhoenixHeavyMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PhoenixMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXPawn_Phoenix : SFXPawn
    {
    }
    public class SFXAI_Praetorian : SFXAI_Core
    {
        public Vector2D BlastIntervalRange;
        public NameReference LeapAbilityName;
        public int MaxBlastsToFire;
        public float PreBlastDelay;
        public float InterBlastDelay;
        public float PostRocketDelay;
        public float GlobalLeapInterval;
        public float AggressiveInterval;
        public float AggressiveDuration;
        public float PreSyncDelay;
        public float SyncKillChance;
        public float ShieldFrequency;
        public float ShieldDuration;
        public float BreachDamageResetDuration;
        public float BreachDamageThreshold;
        public float MaxBreachDamageThreshold;
        public float EnemyDistance_Sync;
        public float EnemyDistance_Lasers;
        public float EnemyDistance_Flying;
    }
    public class SFXAICmd_Base_Praetorian : SFXAICmd_Base_Melee
    {
    }
    public class SFXAICmd_Praetorian_Aggressive : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Praetorian_Firing : SFXAICommand_Base_Combat
    {
    }
    public class SFXCustomAction_PraetorianAimToGround : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PraetorianAirBreach : SFXCustomAction_DamageReaction
    {
        public int BreachVoc;
        public int PossessedBreachVoc;
    }
    public class SFXCustomAction_PraetorianBoostUp : SFXCustomAction_ClimbUpBase
    {
        public BodyStance BS_FlyingStart;
        public BodyStance BS_FlyingLoop;
        public BodyStance BS_FlyingEnd;
        public float AirGroundOffset;
        public float AirEndMoveDistance;
        public float EndMoveDistance;
    }
    public class SFXCustomAction_PraetorianClimbDown : SFXCustomAction_LargeCoverClimbDown
    {
        public BodyStance BS_FlyingAnim;
    }
    public class SFXCustomAction_PraetorianClimbUp : SFXCustomAction_LargeCoverClimbUp
    {
        public BodyStance BS_FlyingAnim;
    }
    public class SFXCustomAction_PraetorianDeath : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_PraetorianDropDown : SFXCustomAction_BoostDownBase
    {
        public BodyStance BS_FlyingStart;
        public BodyStance BS_FlyingLoop;
        public BodyStance BS_FlyingEnd;
    }
    public class SFXCustomAction_PraetorianFireBlast : SFXCustomAction_Loop
    {
    }
    public class SFXCustomAction_PraetorianFiringBreach : SFXCustomAction_DamageReaction
    {
        public int BreachVoc;
        public int PossessedBreachVoc;
    }
    public class SFXCustomAction_PraetorianFlyToGround : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PraetorianGroundToAim : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PraetorianGroundToFly : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PraetorianLeap : SFXCustomAction_SingleAnim
    {
        public int[] HitActors;
        public int LeapVoc;
        public int PossessedLeapVoc;
    }
    public class SFXCustomAction_PraetorianMantle : SFXCustomAction_LargeCoverMantle
    {
        public BodyStance BS_FlyingAnim;
    }
    public class SFXCustomAction_PraetorianMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PraetorianMeleeAlt : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PraetorianMultiMissile : SFXCustomAction_Loop
    {
    }
    public class SFXCustomAction_PraetorianPossession : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PraetorianStagger : SFXCustomAction_DamageReaction
    {
        public int BreachVoc;
        public int PossessedBreachVoc;
    }
    public class SFXCustomAction_PraetorianStandard : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PraetorianStandardForward : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PraetorianStandardLeft : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PraetorianStandardRight : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PraetorianSyncMelee : SFXCustomAction_SyncBase
    {
    }
    public class SFXDamageType_PraetorianLaser : SFXDamageType
    {
    }
    public class SFXDamageType_PraetorianSyncKill : SFXDamageType
    {
    }
    public class SFXPawn_Praetorian : SFXPawn_Collector_Base
    {
        public EyeLaserData[] ActiveLasers;
        public Guid ShieldGUID;
        public Guid FlyingGUID;
        public Vector BeamDamageExtent;
        public NameReference LeftMissileSocket;
        public NameReference RightMissileSocket;
        public int InvisShieldMesh;
        public int CE_Shield;
        public int CE_Flying;
        public int FlyingStartSound;
        public int FlyingStopSound;
        public int CE_Death;
        public int PraetorianPainVoc;
        public int PossessedAmbientVoc;
        public int PossessedPainVoc;
        public int PossessedDyingSound;
        public int PS_BeamImpact;
        public float StartOffset;
        public float EndOffset;
        public float BeamDuration;
        public float BeamDamage;
        public float InterpExp;
        public int LaserSound;
        public int NumMissilesToFire;
        public int FireMissileSound;
    }
    public class SFXPraetorianBeamDummy : Actor
    {
    }
    public class SFXProjectile_PraetorianMissile : SFXProjectile_SeekingMissile
    {
        public float MissileHeadEffectsScalar;
        public float MissileTailEffectsScalar;
        public int TravelStart;
        public int TravelStop;
    }
    public class SFXAI_Scion : SFXAI_Core
    {
        public Vector2D FireDelayTime;
        public float MaxFireWaitTime;
        public float BlastInterval;
        public float SyncKillChance;
        public float EnemyDistance_SyncMelee;
        public float SackDamagePct;
        public float BreachDamageResetDuration;
        public float BreachDamageThreshold;
        public float MaxBreachDamageThreshold;
    }
    public class SFXAICmd_Base_Scion : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Scion_Melee : SFXAICmd_Base_Melee
    {
    }
    public class SFXCustomAction_ScionBlast : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_ScionStagger : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_ScionBreach : SFXCustomAction_ScionStagger
    {
    }
    public class SFXCustomAction_ScionClimbDown : SFXCustomAction_LargeCoverClimbDown
    {
    }
    public class SFXCustomAction_ScionClimbUp : SFXCustomAction_LargeCoverClimbUp
    {
    }
    public class SFXCustomAction_ScionDeath : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_ScionDropDown : SFXCustomAction_BoostDownBase
    {
    }
    public class SFXCustomAction_ScionMantle : SFXCustomAction_LargeCoverMantle
    {
    }
    public class SFXCustomAction_ScionMelee : SFXCustomAction_SingleAnim
    {
        public int[] HitActors;
    }
    public class SFXCustomAction_ScionPossession : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_ScionRoar : SFXCustomAction_SingleAnim
    {
        public int RoarSound;
        public int PossessedRoarSound;
    }
    public class SFXCustomAction_ScionStandard : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_ScionStandardForward : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_ScionStandardLeft : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_ScionStandardRight : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_ScionSyncMelee : SFXCustomAction_SyncBase
    {
    }
    public class SFXDamageType_ScionBlast : SFXDamageType
    {
    }
    public class SFXDamageType_ScionCannon : SFXDamageType
    {
    }
    public class SFXDamageType_ScionSyncKill : SFXDamageType
    {
    }
    public class SFXPawn_Scion : SFXPawn_Collector_Base
    {
        public NameReference BlastSocketName;
        public int CE_Death;
        public int CE_PossessionFade;
        public int ScionPainVoc;
        public int PossessedAmbientVoc;
        public int PossessedPainVoc;
        public int PossessedDyingSound;
    }
    public class SFXPowerCustomAction_ScionCannonEffect : SFXPowerCustomAction
    {
        public float DoTDuration;
        public int CE_DoTTemplate;
    }
    public class SFXProjectile_ScionBlast : SFXProjectile_Explosive
    {
        public float GravityScale;
        public int NumShardsToSpawn;
        public float TargetDistanceThreshold;
        public float TargetCoverDistanceThreshold;
    }
    public class SFXProjectile_ScionBlastShard : SFXProjectile_Explosive
    {
        public float GravityScale;
    }
    public class SFXProjectile_ScionCannon : SFXProjectile_SeekingMissile
    {
        public Vector AimOffset;
        public float ProjHeadEffectScale;
        public float ProjTailEffectScale;
    }
    public class SFXWeapon_AI_ScionCannon : SFXWeapon
    {
    }
    public class SFXDamageType_CollectorSniper : SFXDamageType_Gib
    {
    }
    public class SFXGUI_CollectorSniperZoomReticle : SFXGUI_CerberusSniperZoomReticle
    {
    }
    public class SFXWeapon_Heavy_Beam_Collector_Sniper : SFXWeapon_SniperRifle_Base
    {
        public Vector2D BeamInterpSpeed;
        public int DecalFrequency;
        public float BeamInterpTime;
        public float VFXUpdateInterval;
    }
    public class SFXWeapon_SniperRifle_Collector : SFXWeapon_Heavy_Beam_Collector_Sniper
    {
        public string AmmoAmountRTPC;
        public ScreenShakeStruct HoldShake;
        public Guid ClientEffectFiringGuid;
        public Guid ChargeEffectGuid;
        public float RechargeRatePerSecond;
        public float PartialRechargeDelay;
        public float FullRechargeDelay;
        public float AccumulatedAmmo;
        public int CE_HeatVent;
        public int CE_SteamVent;
        public float TimeToHeatUp;
        public float TimeToHeatUpAI;
        public float ProtheanDamageMultiplier;
        public float SteamDelay;
        public float HeatDelay;
        public int CE_ChargeUp;
        public int PowerUpSound1;
        public int PowerDownSound1;
        public int NPCPowerUpSound1;
        public int NPCPowerDownSound1;
        public int WeaponReloadRechargeSound;
        public float RechargeSoundDelay;
        public bool bFireSoundPlaying;
        public bool bIsHot;
        public bool bCanPlayRechargeSound;
    }
    public class SFXSharedMP_ForcedReference : Object
    {
    }
    public class SFXMP4_ForcedReference : SFXSharedMP_ForcedReference
    {
    }
    public class SFXWave_Horde_Cerberus2 : SFXWave_Horde
    {
    }
    public class SFXWave_Horde_Collector : SFXWave_Horde
    {
    }
    public class SFXWave_Horde_Geth2 : SFXWave_Horde
    {
    }
    public class SFXWave_Horde_Reaper2 : SFXWave_Horde
    {
    }
    public class SFXCharacterClassMP_Engineer_Turian : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Engineer_Turian : SFXPawn_PlayerMP_Engineer
    {
    }
    public class SFXCharacterClassMP_Adept_Volus : SFXCharacterClass_ContentMP
    {
    }
    public class SFXCustomAction_VolusCloakEscape : SFXCustomAction_SingleAnim
    {
        public Guid OmniToolGuid;
        public int CE_OmniTool;
        public float OmniToolDuration;
        public float CloakDuration;
        public float CloakCooldown;
        public int StartCloakPlayerSound;
        public int StartCloakNonPlayerSound;
        public int StopCloakPlayerSound;
        public int StopCloakNonPlayerSound;
    }
    public class SFXCustomAction_VolusDuck : SFXCustomAction_Loop
    {
        public int DamageType;
        public AreaEffectParameters MeleeImpactParameters;
        public int AnimInfo;
        public int Power;
        public float ShieldRegen;
        public float ImmunityWindow;
        public int PlayerChargeEndSound;
        public int NonPlayerChargeEndSound;
    }
    public class SFXCustomAction_VolusEvadeBackwards : SFXCustomAction_PlayerEvadeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_VolusEvadeForward : SFXCustomAction_PlayerEvadeBase
    {
        public Vector MoveOffset;
        public float MoveDist;
        public bool bHitWallEnabled;
    }
    public class SFXCustomAction_VolusEvadeLeft : SFXCustomAction_PlayerEvadeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_VolusEvadeRight : SFXCustomAction_PlayerEvadeBase
    {
        public float MoveDist;
    }
    public class SFXDamageType_BioticOrbs : SFXDamageType_Power
    {
    }
    public class SFXDamageType_VolusHeavyMelee : SFXDamageType_HeavyMelee
    {
    }
    public class SFXGameEffect_ShieldBoostRestore : SFXGameEffect
    {
        public float RestoreFrequency;
        public int Pawn;
        public int StartLoopPlayer;
        public int StopLoopPlayer;
        public int StartLoopNonPlayer;
        public int StopLoopNonPlayer;
    }
    public class SFXPawn_PlayerMP_Adept_Volus : SFXPawn_PlayerMP_Adept
    {
    }
    public class SFXPowerCustomActionMP_BioticOrbs : SFXPowerCustomAction
    {
        public PowerData NumberOfOrbs;
        public PowerData CooldownPerOrb;
        public int[] CE_OrbEffects;
        public Guid[] OrbGuids;
        public BodyStance SummonBodyStance;
        public NameReference DamageDebuffUniqueName;
        public float Evolve_DamageBonus1;
        public float Evolve_ImpactRadiusBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_CooldownBonus;
        public float Evolve_DamageDebuff;
        public float Evolve_DamageDebuffDuration;
        public float Evolve_MaxDebuffAmount;
        public float Evolve_OrbIncrease;
        public int CurrentOrbCount;
        public float SpawnThreeOrbDelay;
        public float SpawnFourOrbDelay;
        public int NumOrbsYetToSpawn;
        public int SummonAnimSet;
        public int LaunchOrbPlayerSound;
        public int LaunchOrbNonPlayerSound;
        public int SpawnOrbPlayerSound;
        public int SpawnOrbNonPlayerSound;
        public int LoopStartPlayerSound;
        public int LoopStartNonPlayerSound;
        public int LoopStopPlayerSound;
        public int LoopStopNonPlayerSound;
    }
    public class SFXPowerCustomActionMP_ShieldBoost : SFXPowerCustomAction
    {
        public PowerData ShieldBoost;
        public PowerData RestorePerSecond;
        public PowerData RestoreDuration;
        public float Evolve_ImpactRadius;
        public float Evolve_ShieldBoost1;
        public float Evolve_RechargeSpeed;
        public float Evolve_ShieldRegen;
        public float Evolve_ShieldRegenDuration;
        public float Evolve_ShieldBoost2;
        public float Evolve_DamageReduction;
        public float Evolve_DamageReductionDuration;
        public float Evolve_MaxDamageReduction;
        public float Evolve_RestoreDurationBonus;
        public float HiddenImmunityDuration;
        public int CE_HealCrust;
        public int CE_HealBubble;
    }
    public class SFXPowerCustomActionMP_VolusMeleePassive : SFXPowerCustomActionMP_MeleePassiveBase
    {
    }
    public class SFXPowerCustomActionMP_VolusPassive : SFXPowerCustomActionMP_PassiveBase
    {
        public float Evolve_ShieldBoostBonus;
    }
    public class SFXProjectile_PowerCustomAction_BioticOrbs : SFXProjectile_PowerCustomAction_SuperSeeking
    {
    }
    public class SFXGameEffect_CappedDamageReduction : SFXGameEffect
    {
        public float MinDamageReduction;
        public float DesiredDamageReduction;
        public int CachedDmgModule;
        public float UpdateFrequency;
    }
    public class SFXCharacterClassMP_Engineer_Volus : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Engineer_Volus : SFXPawn_PlayerMP_Engineer
    {
    }
    public class SFXCharacterClassMP_Sentinel_Volus : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_Decoy_Volus : SFXPawn_Decoy
    {
        public float DecoyZOffset;
    }
    public class SFXPawn_PlayerMP_Sentinel_Volus : SFXPawn_PlayerMP_Sentinel
    {
    }
    public class SFXPowerCustomActionMP_Decoy_Volus : SFXPowerCustomActionMP_Decoy
    {
    }
    public class SFXCharacterClassMP_Vanguard_Volus : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Vanguard_Volus : SFXPawn_PlayerMP_Vanguard
    {
    }
    public class SFXCharacterClassMP_Engineer_Vorcha : SFXCharacterClass_ContentMP
    {
    }
    public class SFXPawn_PlayerMP_Engineer_Vorcha : SFXPawn_PlayerMP_Engineer
    {
        public int[] PawnsKilled;
        public float PollFrequency;
        public int PowerBloodlust;
    }
    public class SFXCustomAction_VorchaEvadeBackwards_Shared : SFXCustomAction_PlayerEvadeBase
    {
        public float MoveDist;
        public int AnimInfo;
        public float GravityCompensationForExtremeDistance;
    }
    public class SFXCustomAction_VorchaEvadeForward_Shared : SFXCustomAction_PlayerEvadeBase
    {
        public Vector MoveOffset;
        public int AnimInfo;
        public float GravityCompensationForExtremeDistance;
        public bool bHitWallEnabled;
    }
    public class SFXCustomAction_VorchaEvadeLeft_Shared : SFXCustomAction_PlayerEvadeBase
    {
        public float MoveDist;
        public int AnimInfo;
        public float GravityCompensationForExtremeDistance;
    }
    public class SFXCustomAction_VorchaEvadeRight_Shared : SFXCustomAction_PlayerEvadeBase
    {
        public float MoveDist;
        public int AnimInfo;
        public float GravityCompensationForExtremeDistance;
    }
    public class SFXCustomAction_VorchaPistolMeleeOne_Shared : SFXCustomAction_PlayerMeleeBase
    {
        public int AnimSet;
    }
    public class SFXCustomAction_VorchaPistolMeleeTwo_Shared : SFXCustomAction_VorchaPistolMeleeOne_Shared
    {
    }
    public class SFXCustomAction_VorchaPistolMeleeThree_Shared : SFXCustomAction_VorchaPistolMeleeTwo_Shared
    {
    }
    public class SFXCustomAction_VorchaPunch_Shared : SFXCustomAction_PlayerHeavyMeleeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_VorchaRifleMeleeOne_Shared : SFXCustomAction_PlayerMeleeBase
    {
        public int AnimSet;
    }
    public class SFXCustomAction_VorchaRifleMeleeTwo_Shared : SFXCustomAction_VorchaRifleMeleeOne_Shared
    {
    }
    public class SFXCustomAction_VorchaRifleMeleeThree_Shared : SFXCustomAction_VorchaRifleMeleeTwo_Shared
    {
    }
    public class SFXCustomAction_VorchaRoar_Shared : SFXCustomAction_SingleAnim
    {
        public int AnimInfo;
        public int LocalPlayerRoar;
        public int NonLocalPlayerRoar;
    }
    public class SFXCustomAction_VorchaSyncCoverGrab_Shared : SFXCustomAction_SyncCoverGrab
    {
    }
    public class SFXDamageType_BatarianNet_Shared : SFXDamageType_Power_Electrocute
    {
    }
    public class SFXDamageType_BatarianNet_Shields_Shared : SFXDamageType_BatarianNet_Shared
    {
    }
    public class SFXGameEffect_BatarianNet_Shared : SFXGameEffect_WeldPhysics
    {
        public int ElectricPulseDamageType;
        public Guid TargetCrustGuid;
        public NameReference BeamAttachBoneName;
        public int OwnerPawn;
        public float IncapacitateDuration;
        public float IncapacitateResistThreshold;
        public int CE_TargetCrust;
        public int CE_ExitCrust;
        public int CE_ElectricPulseCrust;
        public float ElectricPulseFrequency;
        public float ElectricPulseDamage;
        public float ElectricPulseRange;
        public float ElectricPulseForce;
        public int PSC_Beam;
        public float BeamDuration;
        public int BeamTarget;
        public int ElectricPulseSound;
        public int WWise_On;
        public int WWise_Off;
        public int Power;
        public bool bWasInMatinee;
        public bool bWasDisabled;
    }
    public class SFXPowerCustomActionMP_BatarianNet_Shared : SFXPowerCustomAction
    {
        public PowerData DoTDamage;
        public PowerData IncapacitateDuration;
        public PowerData Evolve_AoEPulseDamage;
        public PowerData Evolve_SlowTargetDuration;
        public int LastTarget;
        public float IncapacitateResistThreshold;
        public float Evolve_DamageBonus;
        public float Evolve_IncapacitateBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_SlowTargetAmount;
        public float Evolve_RechargeSpeedBonus;
        public float Evolve_ShieldDamageBonus;
        public float Evolve_AoEPulseFrequency;
        public float Evolve_AoEPulseRange;
        public int PS_ImpactWall;
    }
    public class SFXPowerCustomActionMP_Bloodlust_Shared : SFXPowerCustomAction
    {
        public PowerData MovementSpeedBonus;
        public PowerData HealthRegenerationBonus;
        public PowerData MeleeDamageBonus;
        public PowerData EncumbrancePenalty;
        public Guid BloodLustGuid;
        public int CE_BloodLust;
        public float Evolve_MeleeDamageBonus;
        public float Evolve_HealthRegenerationBonus1;
        public float Evolve_PowerDamageBonus;
        public float Evolve_WeaponDamageBonus;
        public float Evolve_MovementComboBonus;
        public float Evolve_MeleeDamageComboBonus;
        public float Evolve_HealthRegenerationBonus2;
        public float ChanceToGrowl1;
        public float ChanceToGrowl2;
        public float ChanceToGrowl3;
        public int Growl;
        public float LastTimeChecked;
        public int MaxCharges;
        public int CurrentCharges;
        public float UpdateFrequency;
        public bool IsActive;
        public bool bStopMovement;
    }
    public class SFXPowerCustomActionMP_VorchaMeleePassive_Shared : SFXPowerCustomActionMP_MeleePassiveBase
    {
        public PowerData MovementSpeedBonus;
    }
    public class SFXPowerCustomActionMP_VorchaPassive_Shared : SFXPowerCustomActionMP_PassiveBase
    {
    }
    public class SFXProjectile_PowerCustomAction_BatarianNet_Shared : SFXProjectile_PowerCustomAction_SuperSeeking
    {
        public Guid TrapGuid;
        public float TrapDuration;
        public float ProximityRadius;
        public float ProximityCheckFrequency;
        public int CE_TrapEffect;
        public float TrapSurfaceOffset;
    }
    public class SFXCameraMode_CollectorEvade : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_CollectorEvadeLeft : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_CollectorEvadeRight : SFXCameraMode_Combat
    {
    }
    public class SFXCameraMode_Prothean : SFXCameraMode_Melee
    {
    }
    public class SFXCharacterClassMP_Adept_Collector : SFXCharacterClass_ContentMP
    {
    }
    public class SFXCustomAction_CollectorEvadeBase : SFXCustomAction_PlayerEvadeBase
    {
        public Vector MoveOffset;
        public int AnimSet;
        public float FinalMoveSpeed;
        public float Decay;
        public float GravityCompensationForExtremeDistance;
        public int FlyStartSound;
        public int FlyStopSound;
    }
    public class SFXCustomAction_CollectorEvadeBackward : SFXCustomAction_CollectorEvadeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_CollectorEvadeForward : SFXCustomAction_CollectorEvadeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_CollectorEvadeLeft : SFXCustomAction_CollectorEvadeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_CollectorEvadeRight : SFXCustomAction_CollectorEvadeBase
    {
        public float MoveDist;
    }
    public class SFXCustomAction_CollectorHeavyPunch : SFXCustomAction_PlayerHeavyMeleeBase
    {
    }
    public class SFXCustomAction_CollectorSyncCoverGrab : SFXCustomAction_SyncCoverGrab
    {
    }
    public class SFXCustomAction_ProtheanMeleeOne : SFXCustomAction_PlayerMeleeBase
    {
        public int AnimSet;
    }
    public class SFXDamageType_DarkSingularity : SFXDamageType_Power
    {
    }
    public class SFXDamageType_ProtheanMelee : SFXDamageType_HeavyMelee
    {
    }
    public class SFXDamageType_SeekerSwarm : SFXDamageType_Power_Electrocute
    {
    }
    public class SFXDamageTypeMP_DarkChannel_MP5 : SFXDamageType_DarkChannel
    {
    }
    public class SFXDamageTypeMP_DarkChannel_Improved_MP5 : SFXDamageTypeMP_DarkChannel_MP5
    {
    }
    public class SFXDamageTypeMP_ProtheanDarkChannel : SFXDamageType_DarkChannel
    {
    }
    public class SFXDamageTypeMP_ProtheanDarkChannel_Improved : SFXDamageTypeMP_ProtheanDarkChannel
    {
    }
    public class SFXGameEffect_CollectorDamageOverTime : SFXGameEffect_DamageOverTime
    {
        public Guid CrustGuid;
        public int TargetCrustVFX;
    }
    public class SFXGameEffectMP_DarkChannel_MP5 : SFXGameEffect_DarkChannel
    {
        public float SlowPercent;
        public bool bBeamActive;
    }
    public class SFXGameEffectMP_ProtheanDarkChannel : SFXGameEffect_DarkChannel
    {
        public float SlowPercent;
        public bool bBeamActive;
    }
    public class SFXPawn_PlayerMP_Adept_Collector : SFXPawn_PlayerMP_Adept
    {
        public NameReference KnifeHandSocket;
        public int KnifeMeshComp;
    }
    public class SFXPowerCustomAction_DarkSingularity : SFXPowerCustomAction
    {
        public PowerData DoTDamage;
        public PowerData DoTRadius;
        public PowerData DOTDuration;
        public BodyStance BS_DetonateAnimation;
        public int[] TrackedPawns;
        public int[] ImpactedActors;
        public Guid HandChargeGUID;
        public Guid OmniToolGuid;
        public float Evolve_DamageBonus1;
        public float Evolve_DamageBonus2;
        public float Evolve_DoTDamage;
        public float Evolve_DOTDamage1;
        public float Evolve_DOTDuration1;
        public float Evolve_DOTDamage2;
        public float Evolve_DOTDuration2;
        public float Evolve_RadiusBonus;
        public float Evolve_RadiusBonus2;
        public float Evolve_NegativeRadiusBonus;
        public float Evolve_CooldownBonus;
        public float ArmingDelay;
        public float TimeBetweenImpacts;
        public int MaxComboTargets;
        public int DetonateAnimSet;
        public float DetonateReleaseTime;
        public int ActiveMine;
        public int NumTargetsHit;
        public int PlayerChargeStartSound;
        public int NonPlayerChargeStartSound;
        public bool bOmniToolActive;
    }
    public class SFXPowerCustomActionMP_CollectorPassive : SFXPowerCustomActionMP_PassiveBase
    {
        public PowerData CollectorWeaponDamage;
        public string[] RegisteredGethWeapons;
        public float Evolve_CollectorWeaponDamage;
        public float Evolve_PowerDamageBonus3;
    }
    public class SFXPowerCustomActionMP_DarkChannel2_MP5 : SFXPowerCustomAction_DarkChannel
    {
    }
    public class SFXPowerCustomActionMP_DarkChannelProthean : SFXPowerCustomActionMP_DarkChannel2_MP5
    {
    }
    public class SFXPowerCustomActionMP_ProtheanMeleePassive : SFXPowerCustomActionMP_MeleePassiveBase
    {
        public PowerData DamageBonus;
        public PowerData DamageTaken;
        public PowerData CooldownBonus;
        public Guid AscensionGuid;
        public NameReference AscensionModeCategory;
        public int CE_AscensionCrust;
        public float Evolve_DamageBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_PowerRechargeBonus;
        public float Evolve_PowerRechargeBonus2;
        public float Evolve_DamageTaken2;
        public float AscensionDuration;
        public bool bAscended;
    }
    public class SFXPowerCustomActionMP_SeekerSwarm : SFXPowerCustomAction
    {
        public PowerData NumberOfOrbs;
        public PowerData SlowTargetAmount;
        public PowerData SlowEffectDuration;
        public int[] CE_OrbEffects;
        public Guid[] OrbGuids;
        public BodyStance SummonBodyStance;
        public NameReference DamageDebuffUniqueName;
        public int LastTarget;
        public float Evolve_DamageBonus1;
        public float Evolve_DamageBonus2;
        public float Evolve_CooldownBonus;
        public float Evolve_OrbIncrease;
        public float Evolve_SlowTargetAmount;
        public float Evolve_SlowTargetDuration;
        public float Evolve_SlowTargetAmount2;
        public float Evolve_SlowTargetDuration2;
        public float Evolve_DamageTaken;
        public int CurrentOrbCount;
        public int CE_SeekerCrust;
        public int CE_SeekerSummonCrust;
        public float SpawnThreeOrbDelay;
        public float SpawnFourOrbDelay;
        public float ThrowReleaseTime;
        public int NumOrbsYetToSpawn;
        public int SummonAnimSet;
        public int SpawnOrbPlayerSound;
        public int SpawnOrbNonPlayerSound;
        public int LoopStartPlayerSound;
        public int LoopStartNonPlayerSound;
        public int LoopStopPlayerSound;
        public int LoopStopNonPlayerSound;
        public int PlayerChargeStartSound;
        public int NonPlayerChargeStartSound;
    }
    public class SFXProjectile_PowerCustomAction_DarkSingularity : SFXProjectile_PowerCustomAction
    {
        public Guid ImpactGUID;
        public float TimeBetweenImpacts;
        public float TimeToNextImpact;
        public int CE_MineDeployedTemplate;
        public int CE_MineDeployedTemplate_Local;
        public int CE_ImplosionTemplate;
        public int CE_LargeExplosionTemplate;
        public int MineExplosionSound;
        public int NonPlayerMineExplosionSound;
        public float MineDuration;
    }
    public class SFXProjectile_PowerCustomAction_SeekerSwarm : SFXProjectile_PowerCustomAction_SuperSeeking
    {
    }
    public class SFXCharacterClassMP_Infiltrator_Fembot : SFXCharacterClass_ContentMP
    {
    }
    public class SFXCustomAction_FembotEvadeBackward : SFXCustomAction_PlayerEvadeBase
    {
        public int AnimSet;
    }
    public class SFXCustomAction_FembotEvadeBase : SFXCustomAction_PlayerEvadeBase
    {
        public Vector MoveOffset;
        public int AnimSet;
        public float FinalMoveSpeed;
        public float Decay;
        public float GravityCompensationForExtremeDistance;
    }
    public class SFXCustomAction_FembotEvadeForward : SFXCustomAction_PlayerEvadeBase
    {
        public int AnimSet;
    }
    public class SFXCustomAction_FembotEvadeLeft : SFXCustomAction_FembotEvadeBase
    {
        public float MoveDist;
        public int AnimInfo;
    }
    public class SFXCustomAction_FembotEvadeRight : SFXCustomAction_PlayerEvadeBase
    {
        public float MoveDist;
        public int AnimInfo;
    }
    public class SFXCustomAction_FembotMeleeOne : SFXCustomAction_PlayerMeleeBase
    {
        public float BladeImpactScale;
        public int AnimSet;
    }
    public class SFXCustomAction_FembotMeleeTwo : SFXCustomAction_FembotMeleeOne
    {
    }
    public class SFXCustomAction_FembotMeleeThree : SFXCustomAction_FembotMeleeTwo
    {
    }
    public class SFXCustomAction_FembotPunch : SFXCustomAction_PlayerHeavyMeleeBase
    {
    }
    public class SFXCustomAction_FembotSyncCoverGrab : SFXCustomAction_SyncCoverGrab
    {
    }
    public class SFXDamageType_FembotHeavyMelee : SFXDamageType_HeavyMelee
    {
    }
    public class SFXDamageType_SnapFreeze : SFXDamageType_Power_Freeze
    {
    }
    public class SFXGameEffect_FembotCloak : SFXGameEffect_Cloak
    {
    }
    public class SFXGameEffect_FembotHealShieldOverTime : SFXGameEffect
    {
    }
    public class SFXGameEffect_RepairMatrix : SFXGameEffect
    {
        public float RepairDelay;
    }
    public class SFXGameEffect_SnapFreeze : SFXGameEffect_CryoFreeze
    {
        public Guid CryoConeGuid;
    }
    public class SFXPawn_PlayerMP_Infiltrator_Fembot : SFXPawn_PlayerMP_Infiltrator
    {
    }
    public class SFXPowerCustomActionMP_FembotCloak : SFXPowerCustomActionMP_Cloak
    {
        public float Evolve_ShotgunDamageBonus;
        public float ShotgunDuration;
    }
    public class SFXPowerCustomActionMP_FembotMeleePassive : SFXPowerCustomActionMP_HumanMeleePassive_Infiltrator
    {
    }
    public class SFXPowerCustomActionMP_FembotPassive : SFXPowerCustomActionMP_PassiveBase
    {
    }
    public class SFXPowerCustomActionMP_RepairMatrix : SFXPowerCustomAction_GrenadeBase
    {
        public PowerData ShieldStrength;
        public PowerData ShieldRegenerationBonus;
        public PowerData DamageReduction;
        public PowerData MovementSpeedBonus;
        public PowerData MaxGrenadeBonus;
        public Guid HealGuid;
        public int Evolve_GrenadeCountBonus;
        public int Rank2GrenadeUpgrade;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_ShieldRegenBonus2;
        public float Evolve_DamageReductionBonus;
        public float Evolve_DamageReductionBonus1;
        public float Evolve_RepairDuration;
        public float Evolve_DownedRepairDuration;
        public float Evolve_RepairDamageReductionBonus;
        public float Evolve_DamageBonus;
        public float Evolve_MovementSpeedBonus;
        public int CE_HealCrust;
        public float DamageImmunityLength;
    }
    public class SFXPowerCustomActionMP_SnapFreeze : SFXPowerCustomAction
    {
        public PowerData ArmorWeakness;
        public PowerData SpeedReduction;
        public Guid GUID_CryoCone;
        public float Evolve_Damage1;
        public float Evolve_Range;
        public float Evolve_DurationBonus;
        public float Evolve_SpeedReductionBonus;
        public float Evolve_DamageTakenBonus;
        public float Evolve_ArmorReductionBonus;
        public float Evolve_Damage2;
        public float Evolve_ComboBonus;
        public float SnapFreezeDelay;
        public int RagdollCount;
        public int CE_HalfFrozenTemplate;
        public int CE_CryoCone;
        public float VFXDuration;
    }
    public class SFXAI_GethTurret_MP5 : SFXAI_Core
    {
    }
    public class SFXAICmd_Base_GethTurret_MP5 : SFXAICommand_Base_Combat
    {
        public NameReference AttackPower;
        public NameReference HealPower;
        public float FlamethrowerRangeSq;
        public int PowerTarget;
    }
    public class SFXCharacterClassMP_Soldier_GethDestroyer : SFXCharacterClass_ContentMP
    {
    }
    public class SFXCustomAction_DisarmObject_GethDestroyer : SFXCustomAction_DisarmObject
    {
    }
    public class SFXCustomAction_GethDestroyerMelee : SFXCustomAction_SyncBase
    {
        public NameReference[] ValidSyncPawns;
        public int[] PSC_Beams;
        public int DamageType;
        public int RagdollDamageType;
        public int ElectricDamageType;
        public Guid TargetCrustGuid;
        public Guid OmniToolCrustGuid;
        public Guid OmniToolCrustGuid2;
        public NameReference BeamAttachBoneName;
        public int Power;
        public float SyncDuration;
        public float RagdollDuration;
        public float RagdollForce;
        public float OutOfRangeDistance;
        public float ActionCooldown;
        public float PostDeathMaxDuration;
        public float SyncPartnerTimeOfDeath;
        public float StartTime;
        public float MinSyncDuration;
        public int TargetCrustVFX;
        public int OmniToolCrustVFX;
        public int OmniToolCrustVFX2;
        public int DamageSoundPlayer;
        public int DamageSoundNonPlayer;
        public float SoundInterval;
        public float VFXInterval;
        public int PlayerChargeStartSound;
        public int NonPlayerChargeStartSound;
        public int PlayerChargeEndSound;
        public int NonPlayerChargeEndSound;
        public bool bInputReleased;
        public bool bTargetPlayedSyncAnim;
        public bool bTargetIsValidSyncPawn;
        public bool bMoveToOffset;
        public bool bRotateTarget;
        public bool bBeamsAttached;
    }
    public class SFXCustomAction_GethDestroyerStomp : SFXCustomAction_PlayerMeleeBase
    {
    }
    public class SFXCustomAction_OmniWave_GethDestroyer : SFXCustomAction_OmniWave
    {
    }
    public class SFXDamageType_GethDestroyerMelee : SFXDamageType_HeavyMelee
    {
    }
    public class SFXDamageType_GethDestroyerMelee_Electric : SFXDamageType_Power_Electrocute
    {
    }
    public class SFXDamageType_GethDestroyerMelee_Ragdoll : SFXDamageType_HeavyMelee
    {
    }
    public class SFXDamageType_GethDestroyerStomp : SFXDamageType_HeavyMelee
    {
    }
    public class SFXDamageType_GethTurretAttack_MP5 : SFXDamageType_Power
    {
    }
    public class SFXDamageType_GethTurretAttack_Armor_MP5 : SFXDamageType_GethTurretAttack_MP5
    {
    }
    public class SFXDamageType_GethTurretFlameThrower_MP5 : SFXDamageType_Weapon
    {
    }
    public class SFXDamageType_HexShield : SFXDamageType_Power_Electrocute
    {
    }
    public class SFXDamageType_SiegePulse : SFXDamageType_Power
    {
    }
    public class SFXDamageType_SiegePulse_AntiArmor : SFXDamageType_SiegePulse
    {
    }
    public class SFXGameEffect_GethDestroyerMeleeDamage : SFXGameEffect_DamageOverTime
    {
        public int MeleePower;
        public int OwnerPawn;
    }
    public class SFXGameEffect_GethDestroyerShieldHeal : SFXGameEffect
    {
        public Guid HealGuid;
        public float RestoreFrequency;
        public int Pawn;
        public int CE_HealTemplate;
    }
    public class SFXGethHexShield : StaticMeshActor
    {
        public NameReference[] BlockedProjectiles;
        public Guid ShieldGUID;
        public int Power;
        public int CE_ShieldCrust;
        public float DestroyDelay;
        public int ShieldPersistentEffectLoop;
        public int ShieldPersistentEffectStopLoop;
        public bool bNotifyOnTouchEvents;
        public bool bDestroyed;
    }
    public class SFXGethHexShield_Large : SFXGethHexShield
    {
    }
    public class SFXPawn_GethTurret_MP5 : SFXPawn
    {
        public Guid TurretVFXGuid;
        public Guid TurretBaseVFXGuid;
        public ReplicatedTurretCreator ReplicatedTurretCreatorInfo;
        public int CE_TurretTemplate;
        public int CE_TurretDeathTemplate;
        public int SpawnSound;
        public int DiedSound;
        public int LoopingSound;
        public int StopLoopingSound;
        public int Caster;
        public bool bLoopSoundActive;
        public bool bHasShock;
        public bool bIsClientSideInitialized;
    }
    public class SFXPawn_PlayerMP_Soldier_GethDestroyer : SFXPawn_PlayerMP_Soldier
    {
        public int PSC_AllyZone;
        public float HiddenMoveSpeedModifier;
        public bool bAllyZoneEnabled;
    }
    public class SFXPowerCustomActionMP_GethDestroyerMeleePassive : SFXPowerCustomActionMP_MeleePassiveBase
    {
        public PowerData MeleeStompMaxTargets;
        public PowerData MeleeStompMaxRagdollTargets;
        public PowerData HeavyMeleeHealPerSecond;
        public PowerData HeavyMeleeDamageReduction;
        public int[] BuffedPlayers;
        public NameReference UniqueAllyBuffCategory;
        public float Evolve_MoveSpeedBonus;
        public float Evolve_MoveSpeedDuration;
        public float Evolve_MeleeDamageBonus3;
        public float Evolve_AllyDamageBonus;
        public float Evolve_AllyDamageBonusRange;
        public float Evolve_DamagePenalty;
        public float Evolve_ShieldRestoreBonus1;
        public float Evolve_ShieldRestoreBonus2;
        public float CheckForAlliesFrequency;
        public float InitialCheckForAlliesDelay;
    }
    public class SFXPowerCustomActionMP_GethDestroyerPassive : SFXPowerCustomActionMP_PassiveBase
    {
        public PowerData WeaponSpareAmmoBonus;
        public PowerData WeaponStabilityBonus;
        public string[] RegisteredGethWeapons;
        public float Evolve_GethWeaponDamage;
        public float Evolve_WeaponSpareAmmo;
        public float Evolve_WeaponStabilityBonus;
    }
    public class SFXPowerCustomActionMP_GethSentryTurret_MP5 : SFXPowerCustomAction
    {
        public PowerData TurretShields;
        public PowerData AttackCooldown;
        public PowerData FlamethrowerDamagePerSec;
        public PowerData FlamethrowerDamageDuration;
        public PowerData HealCooldown;
        public PowerData HealAmount;
        public PowerData HealRadius;
        public Guid TurretBaseGuid;
        public Vector SpawnLocation;
        public float Evolve_ShieldBonus;
        public float Evolve_DamageBonus;
        public float Evolve_ShieldRestoreBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_ArmorDamageBonus;
        public float Evolve_ShieldRestoreBonus2;
        public float Evolve_ShieldRadiusBonus;
        public float Evolve_ShieldFrequencyBonus;
        public int Turret;
        public int NotRecommended_TurretDeployed;
        public float SpawnDelay;
        public float SpawnZOffset;
        public int CE_TurretBase;
    }
    public class SFXPowerCustomActionMP_GethTurretAttack_MP5 : SFXPowerCustomAction
    {
        public int MuzzleEffect;
        public float MuzzleEffectOffset;
        public float MuzzleEffectLifetime;
    }
    public class SFXPowerCustomActionMP_GethTurretHeal_MP5 : SFXPowerCustomAction
    {
        public Vector BeamSourceLocation;
        public NameReference BeamAttachBoneName;
        public float HealThreshold;
        public int CE_HealCrust;
        public int PSC_Beam;
        public float BeamDuration;
        public int BeamTarget;
        public bool bBeamIsActive;
    }
    public class SFXPowerCustomActionMP_HexShield : SFXPowerCustomAction
    {
        public PowerData ShieldStrength;
        public PowerData ShieldSpawnDamage;
        public PowerData Evolve_ShockDamage;
        public int SpawnExplosionRumbleClass;
        public int SpawnExplosionScreenShakeClass;
        public float Evolve_ShieldStrength1;
        public float Evolve_ShockDuration;
        public float Evolve_ShockForce;
        public float Evolve_DurationBonus;
        public float Evolve_ShieldStrength2;
        public float Evolve_ShieldDamageRadius;
        public float Evolve_DamageBuff;
        public float DistanceFromCaster;
        public float BottomDistAboveFloor;
        public float TopDistAboveFloor;
        public int ShieldActor;
        public int CE_SpawnExplosion;
        public int SpawnExplosionSound;
        public float SpawnLocationZOffset;
        public float BottomFloorDistThreshold;
        public float TopFloorDistThreshold;
    }
    public class SFXPowerCustomActionMP_SiegePulse : SFXPowerCustomAction
    {
        public PowerData ChanceToRagdoll;
        public PowerData NumberOfProjectiles;
        public BodyStance SummonBodyStance;
        public ChargeData[] CE_ChargeEffects;
        public float DelayBetweenProjectiles;
        public float Evolve_DamageBonus;
        public float Evolve_ImpactRadiusBonus;
        public float Evolve_DamageReduction;
        public float Evolve_CooldownBonus;
        public int Evolve_NumShotsBonus;
        public float Evolve_KnockdownChanceBonus;
        public float Evolve_ArmorDamageBonus;
        public int RagdollCount;
        public float MinTargetDistanceSq;
        public int CurrentChargeCount;
        public int SummonAnimSet;
        public int ProjectileFireSound;
    }
    public class SFXProjectile_PowerCustomAction_GethTurret_MP5 : SFXProjectile_PowerCustomAction_BouncingGrenade
    {
    }
    public class SFXProjectile_PowerCustomAction_GethTurretAttack_MP5 : SFXProjectile_PowerCustomAction_SuperSeeking
    {
    }
    public class SFXProjectile_PowerCustomAction_SiegePulse : SFXProjectile_PowerCustomAction_SuperSeeking
    {
        public int TravelStart;
        public int TravelStop;
    }
    public class SFXRumble_Power_GethTurretAttack_MP5 : SFXRumble_Power
    {
    }
    public class SFXShake_Power_GethTurretAttack_MP5 : SFXShake_Power
    {
    }
    public class SFXWeapon_Heavy_FlameThrower_GethTurret_MP5 : SFXWeapon_Heavy_Beam_Base
    {
        public Rotator MuzzleRotation;
        public float DamagePerSecond;
        public float DamageDuration;
        public int WindUpSound;
        public int WindDownSound;
        public int TurretPower;
    }
    public class SFXCameraMode_WarlordKroganMelee : SFXCameraMode_Melee
    {
    }
    public class SFXCharacterClassMP_Sentinel_KroganWarlord : SFXCharacterClass_ContentMP
    {
    }
    public class SFXCustomAction_KroganWarlordRoar : SFXCustomAction_SingleAnim
    {
        public NameReference RageEffectCategory;
        public int AnimInfo;
        public float RageDuration;
        public int LocalPlayerRoar;
        public int NonLocalPlayerRoar;
    }
    public class SFXCustomAction_WarlordMeleeOne : SFXCustomAction_PlayerMeleeBase
    {
        public int AnimSet;
        public float KroDamageReductionLength;
        public float KroDamageReductionAmount;
        public bool bAllowKroDamageReduction;
    }
    public class SFXCustomAction_WarlordMeleeTwo : SFXCustomAction_WarlordMeleeOne
    {
    }
    public class SFXCustomAction_WarlordMeleeThree : SFXCustomAction_WarlordMeleeTwo
    {
        public float ThirdHitMeleeMultiplier;
        public float ThirdHitForceMultiplier;
    }
    public class SFXCustomActionMP_WarlordKroganPunch : SFXCustomAction_PlayerHeavyMeleeBase
    {
        public Vector ImpactOffset;
        public float MoveDist;
        public float KroDamageReductionLength;
        public float KroDamageReductionAmount;
        public float HammerImpactOffset;
        public int PS_BloodImpactTemplate;
        public int oPower;
        public int CE_ImpactTemplate;
        public int CE_SecondaryImpactTemplate;
        public bool bAllowKroDamageReduction;
    }
    public class SFXDamageType_BioticHammer : SFXDamageType_Power
    {
    }
    public class SFXDamageType_BioticHammer_Armor : SFXDamageType_BioticHammer
    {
    }
    public class SFXDamageType_BioticHammer_Armor_Gib : SFXDamageType_BioticHammer
    {
    }
    public class SFXDamageType_BioticHammer_Gib : SFXDamageType_BioticHammer
    {
    }
    public class SFXDamageType_TechHammer : SFXDamageType_Power_Electrocute
    {
    }
    public class SFXDamageType_TechHammer_Shield : SFXDamageType_TechHammer
    {
    }
    public class SFXDamageType_TechHammerFireDoT : SFXDamageType_Power_Fire
    {
    }
    public class SFXDamageType_TechHammer_ShieldFireDoT : SFXDamageType_TechHammerFireDoT
    {
    }
    public class SFXDamageType_WarlordKroganHeavyMelee : SFXDamageType_HeavyMelee
    {
    }
    public class SFXDamageType_WarlordKroganHeavyMelee_Biotic : SFXDamageType_WarlordKroganHeavyMelee
    {
    }
    public class SFXDamageType_WarlordKroganHeavyMelee_Tech : SFXDamageType_WarlordKroganHeavyMelee
    {
    }
    public class SFXPawn_PlayerMP_Sentinel_KroganWarlord : SFXPawn_PlayerMP_Sentinel
    {
        public NameReference HammerHandSocket;
        public NameReference HammerBackSocket;
        public int HammerMesh;
        public int CollapsedHammerMesh;
        public float HiddenMoveSpeedModifier;
        public bool bHammerDetached;
        public bool bHammerAttached;
        public bool bHammerHidden;
    }
    public class SFXPowerCustomActionMP_WarlordModalBase : SFXPowerCustomAction
    {
        public PowerData NumberOfCharges;
        public HammerChargeData[] HammerCharges;
        public Guid GUID_ArmorCrustTemplate;
        public int CE_ArmorCrustTemplate;
        public int ChargesRemaining;
        public int MeleePower;
        public float HammerImpactOffset;
        public bool bArmorVFXOn;
        public MPMedalType MedalAwardType;
    }
    public class SFXPowerCustomActionMP_BioticHammerModal : SFXPowerCustomActionMP_WarlordModalBase
    {
        public Vector VFXImpactOffset;
        public float Evolve_DamageBonus1;
        public float Evolve_ForceBonus1;
        public float Evolve_ForceBonus2;
        public float Evolve_CooldownBonus;
        public float Evolve_ComboDamage;
        public float Evolve_BioticChargeAmount;
        public float Evolve_ArmorDamage;
        public float fRagdollDuration;
        public float HammerVFXImpactOffset;
    }
    public class SFXPowerCustomActionMP_TechArmor_Warlord : SFXPowerCustomActionMP_TechArmor
    {
    }
    public class SFXPowerCustomActionMP_TechHammerModal : SFXPowerCustomActionMP_WarlordModalBase
    {
        public PowerData Evolve_DoTDamageAmount;
        public Vector VFXImpactOffset;
        public float Evolve_MoveSpeedPenalty;
        public float Evolve_TechChargeAmount;
        public float Evolve_ComboDamage;
        public float Evolve_ShieldDamage;
        public float Evolve_DamageTakenBonus;
        public float Evolve_RadiusBonus1;
        public float Evolve_RadiusBonus2;
        public float Evolve_FireDOTDuration;
        public float Evolve_FreezeDuration;
        public float HammerVFXImpactOffset;
        public int CE_HalfFrozenTemplate;
        public int CE_FrozenImpactTemplate;
        public int CE_FireImpactTemplate;
        public int CE_LargeImpactTemplate;
    }
    public class SFXPowerCustomActionMP_WarlordMeleePassive : SFXPowerCustomActionMP_KroganMeleePassive
    {
        public PowerData HealthRegen;
        public PowerData RageHealthRegen;
        public int ActiveHammerPower;
        public float Evolve_RageHealthRegen;
        public float Evolve_RageHealthRegen2;
    }
    public class SFXPowerCustomActionMP_WarlordPassive : SFXPowerCustomActionMP_KroganPassive
    {
    }
    public class SFXCharacterClassMP_Engineer_Merc : SFXCharacterClass_ContentMP
    {
    }
    public class SFXCustomAction_MercBowBase : SFXPowerCustomAction
    {
        public Guid OmniToolGuid;
        public Vector MaxCameraHookOffset;
        public float PostReleaseEndAnimDelay;
        public float BowGlobalCooldown;
        public int CE_OmniTool;
        public int ModifyPropertyAction;
        public int GetPropertyAction;
        public int BoolValue;
        public float CameraHookTransitionFrequency;
        public int CachedPlayerPawn;
        public float CameraHookTransitionTime;
        public float CameraHookPosition;
        public int Power;
        public bool bPlayedCameraOffset;
        public bool bEndCameraHookTransition;
    }
    public class SFXCustomAction_MercBow : SFXCustomAction_MercBowBase
    {
        public int StartPlayerBowChargeStartSound;
        public int StartNonPlayerBowChargeStartSound;
        public int StopPlayerBowChargeStartSound;
        public int StopNonPlayerBowChargeStartSound;
        public int ArrowReleaseSoundPlayer;
        public int ArrowReleaseSound;
    }
    public class SFXCustomAction_MercBow_Charged : SFXCustomAction_MercBowBase
    {
        public string InputAlias;
        public Vector StartingCameraDir;
        public float MinChargeTime;
        public float FullChargeTime;
        public float MaxChargeTime;
        public float StartTime;
        public float SyncCone;
        public int Target;
        public float CameraTransitionTime;
        public int StartPlayerBowChargeStartSound;
        public int StartNonPlayerBowChargeStartSound;
        public int StopPlayerBowChargeStartSound;
        public int StopNonPlayerBowChargeStartSound;
        public int ChargedArrowReleaseSoundPlayer;
        public int ChargedArrowReleaseSound;
        public int CameraSetupOverride;
        public int CachedCameraSetup;
        public bool bInputReleased;
        public bool bLookDisabled;
        public bool bPowerIsActive;
        public bool bShotFired;
    }
    public class SFXDamageType_CainMine : SFXDamageType_Power
    {
    }
    public class SFXDamageType_CainMine_AntiArmor : SFXDamageType_CainMine
    {
    }
    public class SFXDamageType_MercBow : SFXDamageType_Power
    {
    }
    public class SFXDamageType_MercBow_ModalOne : SFXDamageType_MercBow
    {
    }
    public class SFXDamageType_MercBow_ModalOne_Electric : SFXDamageType_Power_Electrocute
    {
    }
    public class SFXDamageType_MercBow_ModalTwo : SFXDamageType_MercBow
    {
    }
    public class SFXDamageType_MercBow_ModalTwo_AntiArmor : SFXDamageType_MercBow_ModalTwo
    {
    }
    public class SFXGameEffect_ChillArrowDebuff : SFXGameEffect
    {
        public Guid CrustGuid;
        public int StackCount;
        public int MaxStackCount;
        public int CE_CrustEffect;
    }
    public class SFXGameModeDefault_Merc : SFXGameModeDefault
    {
    }
    public class SFXPawn_PlayerMP_Engineer_Merc : SFXPawn_PlayerMP_Engineer
    {
    }
    public class SFXPowerCustomActionMP_CainMine : SFXPowerCustomAction_GrenadeBase
    {
        public PowerData MaxGrenadeBonus;
        public float Evolve_DamageBonus1;
        public float Evolve_DamageBonus2;
        public float Evolve_RadiusBonus;
        public float Evolve_RadiusBonus2;
        public float Evolve_ArmorDamage;
        public int Evolve_GrenadeCountBonus;
        public int Rank2GrenadeUpgrade;
        public int MaxActiveMines;
        public float ArmingDelay;
    }
    public class SFXPowerCustomActionMP_MercBowModalBase : SFXPowerCustomAction_GrenadeBase
    {
        public PowerData MaxGrenadeBonus;
        public PowerData NumberOfCharges;
        public PowerData ArrowsPerShot;
        public PowerData BonusForce;
        public BowChargeData[] BowCharges;
        public int Rank2GrenadeUpgrade;
        public int MeleePower;
    }
    public class SFXPowerCustomActionMP_MercBowModalOne : SFXPowerCustomActionMP_MercBowModalBase
    {
        public PowerData KnockdownChance;
        public PowerData KnockdownForce;
        public float[] LastKnockdownTimes;
        public NameReference ChillArrowCategory;
        public float KnockdownCooldown;
        public float Evolve_DamageBonus;
        public float Evolve_GrenadeCount1;
        public float Evolve_ShockDamage;
        public float Evolve_ShockDuration;
        public float Evolve_ChillSlow;
        public float Evolve_ChillDamage;
        public float Evolve_ChillDuration;
        public float Evolve_ChillStack;
        public float Evolve_NumArrows;
        public float Evolve_GrenadeCount2;
    }
    public class SFXPowerCustomActionMP_MercBowModalTwo : SFXPowerCustomActionMP_MercBowModalBase
    {
        public NameReference ArmorWeaknessCategory;
        public float Evolve_DamageBonus;
        public float Evolve_GrenadeCount1;
        public float Evolve_BleedDamage;
        public float Evolve_BleedDuration;
        public float Evolve_ArmorDamageBonus;
        public float Evolve_ArmorDebuff;
        public float Evolve_ArmorDebuffDuration;
        public float Evolve_NumArrows;
        public float Evolve_GrenadeCount2;
    }
    public class SFXPowerCustomActionMP_MercMeleePassive : SFXPowerCustomActionMP_MeleePassiveBase
    {
        public PowerData ArrowsPerShot;
        public Rotator[] ShotDirections;
        public Vector CachedShotOrigin;
        public NameReference BowKillCategory;
        public float LastBowEndTime;
        public float Evolve_BowSpreeBonus;
        public float Evolve_BowSpreeDuration;
        public float FullyChargedSpeedBonus;
        public int CachedPlayerController;
        public float CachedChargeAmount;
        public float ConeAngle;
        public int ArrowFiredCount;
        public float DelayBetweenArrows;
        public int ActiveBowPower;
        public int ChargesRemaining;
        public int LaserTemplate;
        public bool bBeamsActive;
    }
    public class SFXPowerCustomActionMP_MercPassive : SFXPowerCustomActionMP_PassiveBase
    {
        public PowerData ChargeCooldown;
        public float Evolve_ChargeCooldownBonus;
        public int RegenGrenadeSound;
    }
    public class SFXProjectile_PowerCustomAction_CainMine : SFXProjectile_PowerCustomAction
    {
        public Guid ImpactGUID;
        public Vector MineHitNormal;
        public Vector BeamStart;
        public Vector BeamEnd;
        public float ArmingDelay;
        public float UpdateFrequency;
        public float ScanRangeThreshold;
        public float LastUpdateTime;
        public float StartTime;
        public float ScanRange;
        public int CE_MineDeployedTemplate;
        public int CE_MineDeployedTemplate_Local;
        public int CE_MineExplosion;
        public int ArmingSound;
        public int NonPlayerArmingSound;
        public int MineExplosionSound;
        public int NonPlayerMineExplosionSound;
        public float StartOffset;
        public bool bMineIsArmed;
    }
    public class SFXProjectile_PowerCustomAction_MercBowBase : SFXProjectile_PowerCustomAction_Seeking
    {
        public TargetAimOffset[] PawnAimOffsets;
        public Vector ArrowVelocity;
        public int StickImpactTemplate;
        public int BloodyImpactTemplate;
        public int StickImpactSoundPlayer;
        public int StickImpactSound;
        public float StartDistToTargetSq;
        public int ModalPower;
    }
    public class SFXProjectile_PowerCustomAction_MercBowOne : SFXProjectile_PowerCustomAction_MercBowBase
    {
    }
    public class SFXProjectile_PowerCustomAction_MercBowTwo : SFXProjectile_PowerCustomAction_MercBowBase
    {
    }
    public class SFXCameraMode_BatarianMelee_MP5 : SFXCameraMode_Melee
    {
    }
    public class SFXCustomAction_BatarianGauntletPunch : SFXCustomAction_PlayerHeavyMeleeBase
    {
        public float MoveDist;
        public float DamageOverride;
        public float ForceOverride;
        public float CustomDamageReduction;
        public float CustomDamageReductionLength;
    }
    public class SFXGameEffect_MatchConsumable_Gear_BatarianGauntlet : SFXGameEffect_MatchConsumable_Gear
    {
        public float[] MeleeForce;
        public float[] MeleeDamage;
    }
    public class SFXGameEffect_MatchConsumable_Gear_VisionHelmet : SFXGameEffect_MatchConsumable_Gear
    {
        public int[] OutlineGlowActors;
        public float[] VisionRanges;
        public NameReference[] GlowEffects;
        public NameReference[] VisualEffects;
        public Guid CrustGuid;
        public int CE_CrustEffect;
        public float GlowCullDistanceOffset;
        public float UpdateFrequency;
        public bool bActive;
        public bool bVFXActive;
    }
    public class SFXOutlineGlowActorMP_Supercharge_MP5 : SFXOutlineGlowActorMP
    {
    }
    public class SFXSkeletalMeshComponent_Supercharge_MP5 : SkeletalMeshComponent
    {
    }
    public class SFXGameEffect_WeaponMod_PowerDamage_MP5 : SFXGameEffect_WeaponMod
    {
        public float UpdateFrequency;
    }
    public class SFXWeaponMod_AssaultRifleUltraLight_MP5 : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_PistolPowerDamage_MP5 : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_ShotgunUltraLight_MP5 : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_SMGPowerDamage_MP5 : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_SniperRifleUltraLight_MP5 : SFXWeaponMod
    {
    }
    public class SFXPawn_GethPrime2 : SFXPawn_GethPrime
    {
    }
    public class SFXPawn_GethPrimeShieldDrone2 : SFXPawn_GethPrimeShieldDrone
    {
    }
    public class SFXPowerCustomAction_GethPrimeDroneRocket2 : SFXPowerCustomAction_GethPrimeDroneRocket
    {
    }
    public class SFXPowerCustomAction_GethPrimeShieldDrone2 : SFXPowerCustomAction_GethPrimeShieldDrone
    {
    }
    public class SFXProjectile_GethPrimePulse2 : SFXProjectile_GethPrimePulse
    {
    }
    public class SFXProjectile_PowerCustomAction_CombatDroneRocket2 : SFXProjectile_PowerCustomAction_CombatDroneRocket
    {
    }
    public class SFXWeapon_AI_GethPrimeRifle2 : SFXWeapon_AI_GethPrimeRifle
    {
    }
    public class SFXDamageType_Adas : SFXDamageType_Weapon
    {
    }
    public class SFXProjectile_Adas_MP : SFXProjectile_SeekingMissile
    {
        public int TravelStart;
        public int TravelStop;
    }
    public class SFXWeapon_AssaultRifle_Adas_MP : SFXWeapon_AssaultRifle_Base
    {
        public Guid WeaponCrustGuid;
        public int CE_WeaponCrust;
        public bool bWeaponCrustActive;
    }
    public class SFXWeapon_AssaultRifle_Lancer_MP : SFXWeapon_AssaultRifle_Base
    {
        public float RechargeRatePerSecond;
        public float PartialRechargeDelay;
        public float FullRechargeDelay;
        public float AccumulatedAmmo;
        public int CE_HeatVent;
        public int CE_SteamVent;
        public float SteamDelay;
        public float HeatDelay;
        public int WeaponReloadRechargeSound;
        public float RechargeSoundDelay;
        public bool bCanPlayRechargeSound;
    }
    public class SFXDamageType_Spitfire : SFXDamageType_Gib
    {
    }
    public class SFXWeapon_AssaultRifle_Spitfire : SFXWeapon_AssaultRifle_Base
    {
        public RetrieveMoveSpeedOverride[] MovementSpeedOverrides;
        public int PowerUpSound1;
        public int PowerDownSound1;
        public int NPCPowerUpSound1;
        public int NPCPowerDownSound1;
        public int SteamMuzzle;
        public float MinROF;
        public float RampTime;
        public float IsHotDamageMultiplier;
        public float MovementSpeedDecrease;
        public bool bIsHot;
        public bool bSlowed;
    }
    public class SFXDamageType_Pistol_Bloodpack_MP : SFXDamageType_HeavyPistol
    {
    }
    public class SFXWeapon_Pistol_Bloodpack_MP : SFXWeapon_Pistol_Base
    {
    }
    public class SFXWeapon_Pistol_Silencer_MP : SFXWeapon_Pistol_Base
    {
    }
    public class SFXDamageType_SalarianBlast_MP : SFXDamageType_Weapon
    {
    }
    public class SFXDamageType_SalarianShard_MP : SFXDamageType_Gib
    {
    }
    public class SFXProjectile_SalarianBlast_MP : SFXProjectile_Explosive
    {
        public float GravityScale;
        public int NPCExplosionSound;
    }
    public class SFXProjectile_SalarianBlastShard_MP : SFXProjectile_Proximity
    {
        public float GravityScale;
        public float LowShardExplosionDelay;
        public float HighShardExplosionDelay;
        public int NPCExplosionSound;
    }
    public class SFXProjectile_SalarianBlastSplitter_MP : SFXProjectile_SeekingMissile
    {
        public float GravityScale;
        public float HitGravityScale;
        public int NumShardsToSpawn;
        public float ProximityRadius;
        public float ProximityRadiusTightAim;
        public float PercentVelocityInherited;
        public float ConeAngle;
        public float ExplosionDamage;
        public int NPCExplosionSound;
        public bool bHitTarget;
    }
    public class SFXWeapon_Shotgun_Salarian_MP : SFXWeapon_Shotgun_Base
    {
        public Guid ChargeEffectGuid;
        public int SteamMuzzle;
        public int CE_ChargeUp;
        public int ChargeRumble;
        public int PlayerShotSound;
        public int ShotSound;
        public int PlayerChargedShotSound;
        public int ChargedShotSound;
        public float ChargedDamageMultiplier;
    }
    public class SFXDamageType_Bloodpack_MP : SFXDamageType_AutoPistol
    {
    }
    public class SFXDamageType_BloodpackAPRound_MP : SFXDamageType_AutoPistol
    {
    }
    public class SFXWeapon_SMG_Bloodpack_MP : SFXWeapon_SMG_Base
    {
        public int APDamageType;
        public NameReference APMuzzleSocketName;
        public int ShotsPerAPRound;
        public float APDamageMultiplier;
        public float APRecoilMultiplier;
        public float APZoomRecoilMultiplier;
        public int APFireSound;
        public int APPlayerFireSound;
        public int PSC_APRoundMuzzle;
    }
    public class SFXCameraTransition_FemTurianPunch : SFXCameraTransition_Animated
    {
        public InterpCurveFloat RotationCurve;
        public InterpCurveFloat FOVCurve;
        public Vector StartLocation;
        public Rotator StartRotation;
        public Vector EndLocation;
        public Rotator EndRotation;
        public float StartFOV;
        public float EndFOV;
    }
    public class SFXCameraTransition_LineStrike : SFXCameraTransition_Animated
    {
        public InterpCurveFloat RotationCurve;
        public InterpCurveFloat FOVCurve;
        public Vector StartLocation;
        public Rotator StartRotation;
        public Vector EndLocation;
        public Rotator EndRotation;
        public float StartFOV;
        public float EndFOV;
    }
    public class SFXCameraTransition_TeleportEvade : SFXCameraTransition_Animated
    {
        public InterpCurveFloat RotationCurve;
        public InterpCurveFloat FOVCurve;
        public Vector StartLocation;
        public Rotator StartRotation;
        public Vector EndLocation;
        public Rotator EndRotation;
        public float StartFOV;
        public float EndFOV;
    }
    public class SFXCharacterClassMP_Vanguard_TurianFemale : SFXCharacterClass_ContentMP
    {
    }
    public class SFXCustomAction_FemTeleportPunchBase : SFXCustomAction_PlayerHeavyMeleeBase
    {
        public Guid CloakEffectGuid;
        public Vector TeleportLocation;
        public int CE_CloakEffect;
        public float CameraTransitionMax;
        public float CameraTransitionMin;
        public int CamTransition;
        public float StopSyncTargetDuration;
        public float NoTargetTeleportDistance;
        public float NavPointSearchRange;
        public float HeightNavCheckDistance;
        public float BarrierReduction;
        public float ExtraDistFromTarget;
        public bool bCloakEffectStarted;
        public bool bFoundTeleportLocation;
    }
    public class SFXCustomAction_TeleportEvadeBase : SFXCustomAction_PlayerEvadeBase
    {
        public Guid CloakEffectGuid;
        public Vector TeleportLocation;
        public int AnimSet;
        public float NavPointSearchRange;
        public float HeightNavCheckDistance;
        public int CE_CloakEffect;
        public float CameraTransitionTime;
        public int CamTransition;
        public float MovementX;
        public float MovementY;
        public float Decay;
        public float BarrierReduction;
        public bool bCloakEffectStarted;
        public bool bFoundTeleportLocation;
    }
    public class SFXCustomAction_FemTurianEvadeBackward : SFXCustomAction_TeleportEvadeBase
    {
    }
    public class SFXCustomAction_FemTurianEvadeForward : SFXCustomAction_TeleportEvadeBase
    {
    }
    public class SFXCustomAction_FemTurianEvadeLeft : SFXCustomAction_TeleportEvadeBase
    {
    }
    public class SFXCustomAction_FemTurianEvadeRight : SFXCustomAction_TeleportEvadeBase
    {
    }
    public class SFXCustomAction_FemTurianPunch : SFXCustomAction_FemTeleportPunchBase
    {
        public BodyStance BS_AnimEnd;
        public int BladeImpact;
        public int PS_BloodImpactTemplate;
        public int PS_BladeImpactTemplate;
        public int CE_PoisonImpactTemplate;
        public float TurDamageReductionLength;
        public float TurDamageReductionAmount;
        public bool bSecondPhase;
        public bool bAllowTurDamageReduction;
    }
    public class SFXCustomAction_FemTurMeleeBase : SFXCustomAction_PlayerMeleeBase
    {
        public int CE_PoisonImpactTemplate;
    }
    public class SFXCustomAction_FemTurPistolMeleeOne : SFXCustomAction_FemTurMeleeBase
    {
        public int AnimSet;
    }
    public class SFXCustomAction_FemTurPistolMeleeTwo : SFXCustomAction_FemTurPistolMeleeOne
    {
    }
    public class SFXCustomAction_FemTurPistolMeleeThree : SFXCustomAction_FemTurPistolMeleeTwo
    {
    }
    public class SFXCustomAction_FemTurRifleMeleeOne : SFXCustomAction_FemTurMeleeBase
    {
        public int AnimSet;
    }
    public class SFXCustomAction_FemTurRifleMeleeTwo : SFXCustomAction_FemTurRifleMeleeOne
    {
    }
    public class SFXCustomAction_FemTurRifleMeleeThree : SFXCustomAction_FemTurRifleMeleeTwo
    {
    }
    public class SFXCustomAction_FemTurSyncCoverGrab : SFXCustomAction_ClassMelee
    {
        public BodyStance BS_AttackerMirror;
        public BodyStance BS_VictimMirror;
        public BasedPosition VictimLocation;
        public int PlaceholderCylinder;
    }
    public class SFXDamageType_FemTurianPunch : SFXDamageType_HeavyMelee
    {
    }
    public class SFXDamageType_LineStrike : SFXDamageType_Power
    {
    }
    public class SFXDamageType_LineStrike_Ragdoll : SFXDamageType_LineStrike
    {
    }
    public class SFXDamageType_VenomBlade : SFXDamageType_Power_Control
    {
    }
    public class SFXGameEffect_LineStrikeDamageOverTime : SFXGameEffect
    {
        public int DamageType;
        public Guid TargetCrustGuid;
        public float DamageInterval;
        public int CE_TargetCrust;
    }
    public class SFXGameEffect_VenomBlade : SFXGameEffect_WeldPhysics
    {
        public NameReference BeamAttachBoneName;
        public int OwnerPawn;
        public float PostStasisRagdollDuration;
        public float IncapacitateResistThreshold;
        public int PSC_Beam;
        public float BeamDuration;
        public int BeamTarget;
        public int ElectricPulseSound;
        public int WWise_On;
        public int WWise_Off;
        public int Power;
        public bool bWasInMatinee;
        public bool bWasDisabled;
    }
    public class SFXGameEffect_VenomBladeDamageOverTime : SFXGameEffect_DamageOverTime
    {
        public Guid TargetCrustGuid;
        public float ExplosionDelay;
        public int Power;
        public int Caster;
        public int CE_TargetCrust;
        public int CE_ExplosionTemplate;
        public int ExplosionSound;
        public bool ShouldExplode;
    }
    public class SFXPawn_PlayerMP_Vanguard_TurianFemale : SFXPawn_PlayerMP_Vanguard
    {
        public NameReference BladeLeftHandSocket;
        public NameReference BladeRightHandSocket;
        public int BladeRightMesh;
        public int BladeLeftMesh;
        public bool bBladesAttached;
    }
    public class SFXPowerCustomActionMP_BioticFocus : SFXPowerCustomAction
    {
        public PowerData HealthShieldDamageTaken;
        public PowerData MeleeDamageBonus;
        public PowerData MovementSpeedBonus;
        public float Evolve_HealthShieldDamageTaken;
        public float Evolve_HealthShieldDamageTaken2;
        public float Evolve_DurationBonus;
        public float Evolve_MeleeDamageBonus;
        public float Evolve_MovementSpeedBonus;
        public float Evolve_MeleeDamageBonus2;
        public float Evolve_MovementSpeedBonus2;
        public float Evolve_ShieldIncrease;
        public float DamageInvul;
        public int CE_AdrenalineTemplate;
    }
    public class SFXPowerCustomActionMP_FemTurianMeleePassive : SFXPowerCustomActionMP_TurianMeleePassive
    {
        public float PoisonDamage;
        public float PoisonDamageDuration;
    }
    public class SFXPowerCustomActionMP_FemTurianPassive : SFXPowerCustomActionMP_TurianPassive
    {
    }
    public class SFXPowerCustomActionMP_LineStrike : SFXPowerCustomAction
    {
        public PowerData TeleportDistance;
        public PowerData ImpactDelay;
        public PowerData PoisonDamagePerSec;
        public PowerData PoisonDuration;
        public NameReference[] MaxCountExceptionList;
        public int[] ImpactedPawns;
        public int ImpactRumbleClass;
        public int ImpactScreenShakeClass;
        public Guid CloakEffectGuid;
        public Guid ShockWaveGuid;
        public Guid PoisonImpactGuid;
        public Vector CurrentImpactLocation;
        public Vector StrikeDirection;
        public Vector TeleportLocation;
        public Vector StartLocation;
        public float HeightNavCheckDistance;
        public float NavPointSearchRange;
        public float CasterCrustEffectDuration;
        public float ExposeBladesTime;
        public float StartVFXTime;
        public float TeleportPawnTime;
        public float StopVFXTime;
        public float DamageImmunityDuration;
        public float CameraTransitionTime;
        public float StartDistanceFromCaster;
        public float FirstImpactDelay;
        public float MinimumJumpDistanceSq;
        public float TeleportHeightThreshold;
        public float Evolve_DamageBonus;
        public float Evolve_DistanceBonus;
        public float Evolve_DurationBonus;
        public float Evolve_CooldownBonus;
        public float Evolve_PoisonDamageBonus;
        public int Evolve_NumParalyzedEnemies;
        public float Evolve_ParalysisDuration;
        public float Evolve_DistancePenalty;
        public int Evolve_CooldownTeleportCount;
        public int DashCounter;
        public float ScaledCameraTransitionTime;
        public int CE_CloakEffect;
        public int CE_ShockwaveTemplate;
        public int CE_PoisonImpactTemplate;
        public int CE_PoisonDashTemplate;
        public int PS_PoisonImpactTemplate;
        public int BladeImpactSound;
        public int CE_CasterCrustEffect;
        public int CamTransition;
        public int RagdollCounter;
        public int ParalysisCounter;
        public bool bPawnTeleported;
        public bool bFoundTeleportLocation;
        public bool bCloakEffectStarted;
        public bool bIsInCustomAction;
        public bool bIsInputLocked;
    }
    public class SFXPowerCustomActionMP_VenomTippedBlades : SFXPowerCustomAction_GrenadeBase
    {
        public PowerData PoisonDuration;
        public PowerData PoisonDamagePerSecond;
        public PowerData ConeAngle;
        public PowerData ExplosionDamage;
        public PowerData ExplosionForce;
        public PowerData ExplosionRadius;
        public PowerData ParalyzeDuration;
        public PowerData MaxGrenadeBonus;
        public AreaEffectParameters ExplosionParameters;
        public float IncapacitateResistThreshold;
        public float ExplosionDelay;
        public float SlowTargetAmount;
        public int Rank2GrenadeUpgrade;
        public float Evolve_DamageBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_PoisonDamageBonus;
        public float Evolve_ConeBonus;
        public float Evolve_RadiusBonus;
        public float Evolve_ParalyzeDuration;
        public float Evolve_PoisonDurationBonus;
        public int Evolve_GrenadeCountBonus;
        public int VenomBladeImpact;
        public int VenomBladeMuzzle;
        public int VenomBladeImpactExplosion;
        public int WallImpact;
        public int CE_VenomVialCrustTemplate;
        public int WallImpactSound;
        public int VenomShotSound;
        public int MaxProjectilesStuck;
        public int LastTarget;
    }
    public class SFXShake_Power_Linestrike : SFXShake_Power
    {
    }
    public class SFXSeqAct_ToggleShadows : SequenceAction
    {
    }
    public class BioSeqVar_SFXArray : SeqVar_Int
    {
        public int[] m_ArrayData;
    }
    public class SFXSeqAct_AccessIntArray : BioSequenceLatentAction
    {
        public int m_iIndex;
        public int m_iValue;
        public int m_iLength;
    }
    public class SFXSeqAct_SortIntArray : BioSequenceLatentAction
    {
        public int __IntSortUp__Delegate;
        public int __IntSortDown__Delegate;
        public bool m_bHighLowSort;
    }
    public class SFXSeqAct_SetCameraOffset : SequenceAction
    {
        public Vector New_CameraOffset;
        public int Player;
    }
    public class SFXGUIData_Elevator_DocksRT : SFXGUIData_Elevator
    {
    }
    public class SFXGUIData_Elevator_LabRT : SFXGUIData_Elevator
    {
    }
    public class SFXSeqAct_GetPawnRotationTarget : SequenceAction
    {
        public string sTestCasePath;
        public string sTestcaseName;
        public float fThreshold;
        public int oPawn;
        public int oTarget;
    }
    public class SFXSeqAct_DropHeavyWeapons : SequenceAction
    {
        public int PlayerObject;
    }
    public class SFXSeqCond_HasWeaponType : SequenceCondition
    {
        public int[] WeaponTypes;
        public int[] Targets;
        public bool MustBeEquipped;
    }
    public class BioSeqAct_GetAbsoluteValue : SequenceAction
    {
        public int intVar;
        public float FloatVar;
        public int outInt;
        public float OutFloat;
    }
    public class SFXCustomAction_AtlasHeavyMelee_Triton : SFXCustomAction_SingleAnim
    {
        public NameReference ClawSocketName;
        public int CE_GroundPound;
    }
    public class SFXCustomAction_AtlasMelee_Triton : SFXCustomAction_SingleAnim
    {
        public int[] HitActors;
    }
    public class SFXCustomAction_DivingAtlasClimbDown : SFXCustomAction_AtlasClimbDown
    {
    }
    public class SFXCustomAction_DivingAtlasClimbUp : SFXCustomAction_AtlasClimbUp
    {
    }
    public class SFXCustomAction_DivingAtlasMantle : SFXCustomAction_AtlasMantle
    {
    }
    public class SFXGUI_DivingAtlasHUD : SFXGUI_AtlasHUD
    {
    }
    public class SFXPawn_DivingAtlas : SFXPawn_Atlas
    {
        public int StartUnderwaterDrivingSound;
        public int StopUnderwaterDrivingSound;
    }
    public class SFXPowerCustomAction_TritonRocket_Player : SFXPowerCustomAction_TitanRocket_Player
    {
    }
    public class SFXProjectile_DropPod_Waterworld : SFXProjectile_DropPod
    {
    }
    public class SFXSeqAct_AttachBackpack : SequenceAction
    {
        public NameReference AttachSocketName;
        public int TargetPawn;
        public int BackpackMeshComponent;
        public int BackpackPowerBarComponent;
        public int BackpackSparksComponent;
    }
    public class SFXSeqAct_ForceEnterAtlas : SequenceAction
    {
        public int TargetPlayer;
    }
    public class SFXSeqAct_PickShuttleTargetVolume : SequenceAction
    {
        public int[] PossibleVolumes;
        public NameReference[] PreferredEnemyTypes;
        public int PreferredEnemyBonus;
        public int SelectedVolume;
        public ESFXTeam TeamToTarget;
    }
    public class SFXSeqAct_RainInteriorManager : BioSequenceLatentAction
    {
        public int RainVolume;
        public int Rain;
        public float InterpSpeed;
        public float TargetRainStartDistance;
        public float OutdoorRainStartDistance;
        public bool bInside;
    }
    public class SFXSeqAct_SetDiveAtlasHUDParams : SequenceAction
    {
        public DivingAtlasHUDParams Params;
    }
    public class SFXSeqAct_ShipPowerManager : BioSequenceLatentAction
    {
        public Difficulty[] DifficultySettings;
        public LinearColor BackpackFullyChargedColour;
        public LinearColor BackpackAlmostEmptyColour;
        public LinearColor BackpackCompletelyEmptyColour;
        public NameReference BackpackMaterialGlow;
        public NameReference BackpackMaterialColour;
        public NameReference BackpackBarFill;
        public int Player;
        public int CurrentPowerLevel;
        public float TimeSinceLastUpdate;
        public int PowerRemainingInCarriedCell;
        public float PermanentPowerGain;
        public int DifficultyToUse;
        public int PowerStableLabel;
        public int PowerChargingLabel;
        public int PowerDrainingLabel;
        public int CompletionThreshhold;
        public float TimeToGainPower;
        public int PowerGainPerChargeUpdate;
        public float TimeBeforePowerDrains;
        public int ColourWhenStable;
        public int ColourWhenDraining;
        public int ColourWhenCharging;
        public int BackpackMaterial;
        public int BackpackPowerBarMaterial;
        public float BackpackMaxGlow;
        public float BackpackMinGlow;
        public bool bIsUsedPowercell;
        public ePowerState PowerState;
    }
    public class SFXSeqAct_ToggleAtlasFireWeapon : SequenceAction
    {
    }
    public class SFXSeqAct_ToggleExitAtlas : SequenceAction
    {
    }
    public class SFXSeqAct_ToggleUnderwaterAtlas : SequenceAction
    {
    }
    public class SFXStuntActor_AimingShuttle : SFXStuntActor
    {
        public int GunAimSkelControl;
    }
    public class SFXSeqAct_RepairShadowParent : SequenceAction
    {
    }
    public class SFXPlanetFeatureGAWUpdate : SFXPlanetFeatureGAWAsset
    {
    }
    public class SFXGUI_DLC_Docks : SFXGUIMovie
    {
        public DockButton[] DockButtons;
        public int __DLCDocksButtonPressedCallback__Delegate;
        public int __DLCDocksCancelCallback__Delegate;
        public bool bIsCancelAllowed;
    }
    public class SFXSeqAct_DLCDocksGUI : BioSequenceLatentAction
    {
        public string PressedButtonID;
        public string m_PressedButtonID;
        public int DLCDocksGUIClass;
        public NameReference MovieTag_DLCDocks;
        public int DLCDocksGUIResource;
    }
    public class SFXGameEffect_Dominate : SFXGameEffect
    {
        public Guid TargetCrustGuid;
        public int OriginalTeam;
        public int OwnerPawn;
        public int OwnerAI;
        public int CE_TargetCrust;
        public int StartLoop;
        public int EndLoop;
    }
    public class SFXPowerCustomAction_Dominate : SFXPowerCustomAction
    {
        public PowerData Evolve_DamageOverTime;
        public NameReference[] UnaffectedPawns;
        public float Evolve_DurationBonus;
        public float Evolve_RechargeBonus;
        public float Evolve_DamageBonus1;
        public float Evolve_DamageTakenBonus;
        public float Evolve_DamageBonus2;
        public float Evolve_DamageReduction;
        public float TimeTargetIgnored;
        public int DominatedTarget;
    }
    public class SFXAI_Rampart : SFXAI_Cover
    {
        public float ChanceToHitReact;
        public float ShieldDamageScalePct;
        public float EvadeDamageScalePct;
        public float ShieldFrequency;
        public float AggroDistanceThreshold;
    }
    public class SFXAICmd_Base_Rampart : SFXAICmd_Base_Cover
    {
    }
    public class SFXAICmd_Rampart_Aggressive : SFXAICmd_Base_Melee
    {
        public Vector TargetInitialLoc;
    }
    public class SFXCustomAction_RampartAggressive : SFXCustomAction_SingleAnim
    {
        public bool bBatonOut;
    }
    public class SFXCustomAction_RampartMelee : SFXCustomAction_SingleAnim
    {
        public bool bBatonOut;
    }
    public class SFXCustomAction_RampartShield : SFXCustomAction_Loop
    {
    }
    public class SFXDamageType_RampartBurn : SFXDamageType_Melee
    {
    }
    public class SFXGameEffect_RampartBurn : SFXGameEffect
    {
    }
    public class SFXOmegaForcefieldVolume : TriggerVolume
    {
        public int TransitionSound;
        public int TransitionVFX;
    }
    public class SFXPawn_Rampart : SFXPawn
    {
        public int BurnDamageType;
        public int RumbleClass;
        public int ScreenShakeClass;
        public Guid MeleeBatonGUID;
        public Guid AggressiveGuid;
        public Guid ShieldGenGuid;
        public Guid ShieldGUID;
        public NameReference ShieldSocket;
        public float PlayerCooldown;
        public float EnemyCooldown;
        public float BurnDamage;
        public int BurnSound;
        public int PlayDeathLoop;
        public int StopDeathLoop;
        public float BurnAOERadius;
        public float BurnTimeLeft;
        public float BurnImpactInterval;
        public float CoverDecayValue;
        public int ShieldsBreakSound;
        public int ShieldsUpSound;
        public int CE_DeathCrust;
        public int CE_DeathImpact;
        public int CE_MeleeBatonIn;
        public int CE_MeleeBatonOut;
        public int CE_AggressiveMode;
        public int AggressiveSound;
        public int CE_ShieldGenerator;
        public int InvisShieldMesh;
        public int CE_ShieldOn;
        public bool bIsBatonRetracted;
        public bool bIsAggressive;
        public bool bDiedBySabotageExplode;
        public bool bAggressive;
        public bool bNeverTurnAggressive;
    }
    public class SFXWeapon_AI_Katana : SFXWeapon_Shotgun_Katana
    {
    }
    public class SFXAdjutantPoisonVolume : Volume
    {
        public float Lifetime;
        public float CoverDecayValue;
        public int CE_Template;
        public int BeginSound;
        public int EndSound;
        public float PoisonRadius;
    }
    public class SFXAI_Adjutant : SFXAI_Core
    {
        public Vector2D FireDelayTime;
        public NameReference ChargeAbilityName;
        public NameReference BlastAbilityName;
        public float ShortRangeSpeedMultiplier;
        public float GlobalChargeInterval;
        public float ChargeInterval;
        public float ChargeSeekTime;
        public float GlobalBlastInterval;
        public float BlastDamage;
        public float PoisonRadius;
        public float PoisonDPS;
        public float ShortChargeDistance;
        public float MediumChargeDistance;
        public float ForwardEvadeDistance;
        public float SidewaysEvadeDistance;
    }
    public class SFXAICmd_Base_Adjutant : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_MoveToGoal2 : SFXAICommand
    {
    }
    public class SFXAICmd_MoveToMeleeRange2 : SFXAICommand
    {
    }
    public class SFXCustomAction_AdjutantBlast : SFXCustomAction_SingleAnim
    {
        public int CE_WarmUp;
    }
    public class SFXCustomAction_AdjutantChargeBase : SFXCustomAction_SingleAnim
    {
        public int[] HitActors;
        public int __ShouldDoAOE__Delegate;
        public float ChargeSeekTime;
    }
    public class SFXCustomAction_AdjutantCharge : SFXCustomAction_AdjutantChargeBase
    {
    }
    public class SFXCustomAction_AdjutantChargeMedium : SFXCustomAction_AdjutantChargeBase
    {
    }
    public class SFXCustomAction_AdjutantChargeShort : SFXCustomAction_AdjutantChargeBase
    {
    }
    public class SFXCustomAction_AdjutantDeath : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_AdjutantEvadeBack : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_AdjutantEvadeForward : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_AdjutantEvadeLeft : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_AdjutantEvadeRight : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_AdjutantMelee : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_AdjutantMelee2 : SFXCustomAction_AdjutantMelee
    {
    }
    public class SFXDamageType_AdjutantBlast : SFXDamageType
    {
    }
    public class SFXGameEffect_AdjutantBlast : SFXGameEffect_DamageOverTime
    {
        public int[] PoisonSources;
        public Guid AdjutantBlastEffectGuid;
        public int CE_AdjutantBlastEffect;
        public int AdjutantBlastEffectMaterial;
        public float PoisonRadius;
        public float PoisonScale;
        public float SourceUpdateInterval;
        public float ShutdownDelay;
        public int LoopingSound;
        public int StopLoopingSound;
        public bool bShuttingDown;
    }
    public class SFXPawn_Adjutant : SFXPawn
    {
        public Guid EyeGlowGuid;
        public int CE_EyeGlow;
        public bool bEyeGlowOn;
    }
    public class SFXProjectile_AdjutantBlast : SFXProjectile_SeekingMissile
    {
        public int BeginFlightSound;
        public int EndFlightSound;
        public float WallOffset;
        public bool bHitWall;
    }
    public class SFXSeqAct_PopAdjutantSac : SequenceAction
    {
    }
    public class SFXSeqAct_SpawnAdjutantPoison : SequenceAction
    {
    }
    public class SFXSeqCond_CombatPose : SequenceCondition
    {
        public int Target;
    }
    public class SFXNav_InteractionSniperSweep : SFXNav_InteractionPoint
    {
    }
    public class SFXSeqAct_BreakAtlasCockpitImproved : SequenceAction
    {
    }
    public class SFXSeqAct_RenderToTexture3Dizer : BioSequenceLatentAction
    {
        public int m_aPlayerCam;
        public int m_aScreen;
        public int m_aRTTCam;
        public int m_aRTTCamTarget;
        public float m_fCamDistance;
    }
    public class SFXSeqAct_TriggerSuperHenchman : SequenceAction
    {
    }
    public class SFXSeqAct_ResetCombatPlaceables : SequenceAction
    {
        public int[] Placeables;
    }
    public class SFXGUIData_Store_Omega : SFXGUIData_Store
    {
    }
    public class SFXDamageType_AriaLash : SFXDamageType_Power
    {
    }
    public class SFXDamageType_AriaLashImproved : SFXDamageType_AriaLash
    {
    }
    public class SFXDamageType_BioticFlare : SFXDamageType_Power_Fire
    {
    }
    public class SFXDamageType_BioticFlareImproved : SFXDamageType_BioticFlare
    {
    }
    public class SFXGameEffect_AriaLashLift : SFXGameEffect_PhysicsPower
    {
        public Vector Direction;
        public float Force;
        public int OwnerPawn;
        public float MinimumVelocity;
        public float MinimumVelocityForceMult;
    }
    public class SFXPawn_Aria : SFXPawn_Henchman
    {
    }
    public class SFXPowerCustomAction_AriaLash : SFXPowerCustomAction
    {
        public PowerData PullForce;
        public PowerData PowerComboDuration;
        public LashForceMultiplier[] ForceMultipliers;
        public int PullDamageType;
        public Vector PawnHitNormal;
        public float AntiGravityAmount;
        public float InitialForce;
        public float TowardCasterScale;
        public float Evolve_DamageBonus;
        public float Evolve_PowerComboBonus;
        public float Evolve_RechargeBonus;
        public float Evolve_DoTPercent;
        public float Evolve_DoTDuration;
        public float Evolve_NoCooldownChance;
        public float Evolve_ComboDurationBonus;
        public float GuardianShieldForceModifier;
        public float ResistanceForceMultiplier;
        public int PawnToPull;
        public float PullAnimDelayAfterRelease;
        public float TimeSinceRelease;
        public int PullSound;
        public int NPPullSound;
        public int CE_LashImpactTemplate;
        public bool bStopMovement;
        public bool bPowerCancelled;
    }
    public class SFXPowerCustomAction_AriaPassive : SFXPowerCustomAction_HenchmanPassive
    {
        public float Evolve_PowerDamageBonus;
        public float Evolve_PowerDamageBonus2;
        public float Evolve_WeaponDamageBonus;
        public float Evolve_HealthShieldBonus;
        public float Evolve_SquadHealthShieldBonus;
        public float Evolve_HealthShieldBonus2;
    }
    public class SFXPowerCustomAction_BioticFlare : SFXPowerCustomAction
    {
        public int ImprovedDamageType;
        public float Evolve_RechargeBonus1;
        public float Evolve_DamageForceBonus;
        public float Evolve_Radius;
        public float Evolve_Radius2;
        public float Evolve_PowerComboBonus;
        public float Evolve_ImprovedDamage;
        public int CE_ImpactTemplate1;
        public int CE_ImpactTemplate2;
        public int CE_ImpactTemplate3;
        public int CE_ImpactTemplate4;
    }
    public class SFXProjectile_PowerCustomAction_BioticFlare : SFXProjectile_PowerCustomAction_SuperSeeking
    {
        public float DamageModifier;
    }
    public class SFXAI_Nyreen : SFXAI_Henchman
    {
    }
    public class SFXPawn_Nyreen : SFXPawn_Henchman
    {
        public int InvisShieldMesh;
    }
    public class SFXPowerCustomAction_NyreenBubbleShield : SFXPowerCustomAction
    {
        public BodyStance BS_Loop;
        public int RumbleClass;
        public int ScreenShakeClass;
        public AreaEffectParameters BlastParameters;
        public Guid GUID_BubbleVFX;
        public Vector BubbleLocation;
        public NameReference BubbleGECategory;
        public int CE_Bubble;
        public int CE_Bubble_Off;
        public float BaseBubbleSize;
        public float BlastForce;
        public int BlastMaxTargets;
        public float Evolve_Duration;
        public float Evolve_RechargeSpeed;
        public float Evolve_NoCooldownChance;
        public float Evolve_BlastRadius;
        public float Evolve_BlastDamage;
        public float Evolve_DamageReductionDuration;
        public float Evolve_DamageReductionPct;
        public float Evolve_WeaponDamageBonusDuration;
        public float Evolve_WeaponDamageBonusPct;
        public int CE_BlastEffect;
        public int CE_Biotics;
        public int WWise_BubbleOn;
        public int WWise_BubbleOff;
        public float PlayRate;
        public float BlendInTime;
        public float BlendOutTime;
        public float StartTime;
        public bool bBubbleActive;
        public ERootMotionMode RootMotionMode;
    }
    public class SFXPowerCustomAction_NyreenPassive : SFXPowerCustomAction_HenchmanPassive
    {
        public float Evolve_WeaponDamageBonus;
        public float Evolve_HealthShieldBonus;
        public float Evolve_BioticPowerDamageBonus;
        public float Evolve_TechPowerDamageBonus;
        public float Evolve_SquadBioticTechPowerDamageBonus;
        public float Evolve_PowerDamageBonus;
    }
    public class SFXGUI_Store_NoPurchase : SFXGUI_Store
    {
    }
    public class SFXGUIData_Store_Decorator : SFXGUIData_Store
    {
    }
    public class SFXSeqAct_StoreGUI_AutoClose : SFXSeqAct_StoreGUI
    {
        public NameReference StoreGUITag;
        public float CloseState;
        public int srConfirmationMessage;
        public int srConfirm;
        public int srCancel;
    }
    public class SFXSeqAct_StoreGUI_NoPurchase : SFXSeqAct_StoreGUI_AutoClose
    {
        public int StoreGUIClass;
    }
    public class SFXCustomAction_PartyHack : SFXCustomAction_Loop
    {
        public Guid OmniToolGuid;
        public int AnimInfo;
        public int HackKismet;
        public int CE_OmniTool;
    }
    public class SFXSeqAct_GiveCredits : SequenceAction
    {
        public int CreditPercent;
        public EME3Level Level;
    }
    public class SFXSeqAct_StartPartyHack : SeqAct_Latent
    {
        public int HackAction;
        public int PlayerPawn;
        public bool bEndCalled;
    }
    public class SFXSeqAct_RestoreUpdateSkelFlag : SequenceAction
    {
    }
    public class SFXGameEffect_MobileInputTrap : SFXGameEffect
    {
        public int TrapKismet;
        public float LastUpdateTime_Up;
        public float LastUpdateTime_Down;
        public float LastUpdateTime_Left;
        public float LastUpdateTime_Right;
        public float UpdateFrequency;
        public bool bRightTriggerActive;
        public bool bLeftTriggerActive;
        public bool bAActive;
        public bool bBActive;
        public bool bXActive;
        public bool bDUpActive;
        public bool bDDownActive;
        public bool bDLeftActive;
        public bool bDRightActive;
    }
    public class SFXSeqAct_MobileInputTrap : SeqAct_Latent
    {
        public int TrapEffect;
        public int PlayerPawn;
        public bool bEndCalled;
        public bool bTrapEnabled_Directional;
        public bool bTrapEnabled_A;
        public bool bTrapEnabled_B;
        public bool bTrapEnabled_X;
        public bool bTrapEnabled_DUp;
        public bool bTrapEnabled_DDown;
        public bool bTrapEnabled_DLeft;
        public bool bTrapEnabled_DRight;
        public bool bTrapEnabled_LT;
        public bool bTrapEnabled_RT;
    }
    public class SFXGUIData_TerminalApt : SFXGUIData_Terminal
    {
    }
    public class SFXGUIData_TerminalApt_NoGuestList : SFXGUIData_TerminalApt
    {
    }
    public class SFXSeqAct_TerminalGUI_Apt : BioSequenceLatentAction
    {
        public int TerminalDataClass;
        public int ExitRequestPin;
        public int m_TerminalGUIResource;
    }
    public class SFXGUIData_Store_CharacterMoment : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_PartyPeople : SFXGUIData_Store
    {
    }
    public class SFXSeqAct_AttachToStuntActor : SequenceAction
    {
        public NameReference m_nmBoneName;
    }
    public class SFXGUIData_Elevator_CasinoRT : SFXGUIData_Elevator
    {
    }
    public class SFXGUIData_Elevator_CasinoRT_LEV : SFXGUIData_Elevator
    {
    }
    public class SFXGUIData_Elevator_GoodbyeRT : SFXGUIData_Elevator
    {
    }
    public class SFXSeqAct_GamblingPayout : SequenceAction
    {
        public int Amount;
    }
    public class SFXSeqAct_GetPlayerCredits : SequenceAction
    {
        public int CreditCheckValue;
        public int TotalPlayerCredits;
    }
    public class SFXSeqAct_SortEmitters_Base : SequenceAction
    {
        public float ActiveNameEmitterScalerValue;
        public float InactiveNameEmitterScalerValue;
        public float MaxNumericEmitterValue;
        public float MinNumericEmitterValue;
    }
    public class SFXSeqAct_SortCombatSimScores : SFXSeqAct_SortEmitters_Base
    {
    }
    public class SFXSeqAct_SetForcedLOD : SequenceAction
    {
        public int m_nForcedLODModel;
    }
    public class SFXGUIData_Store_Furniture : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Bartender : SFXGUIData_Store
    {
    }
    public class SFXCustomAction_InputTrap : SFXCustomAction_Loop
    {
        public int AnimInfo;
        public int TrapKismet;
        public float LastUpdateTime_Up;
        public float LastUpdateTime_Down;
        public float LastUpdateTime_Left;
        public float LastUpdateTime_Right;
        public float UpdateFrequency;
        public bool bRightTriggerActive;
        public bool bLeftTriggerActive;
        public bool bAActive;
        public bool bBActive;
        public bool bXActive;
    }
    public class SFXGameEffect_WeaponMod_PowerDamage : SFXGameEffect_WeaponMod
    {
        public float UpdateFrequency;
    }
    public class SFXSeqAct_AwardWeaponMod : SequenceAction
    {
        public int WeaponModClass;
        public EME3Level SelectedLevel;
    }
    public class SFXSeqAct_StartInputTrap : SeqAct_Latent
    {
        public int TrapAction;
        public int PlayerPawn;
        public float MaxMoveFrequency_PC;
        public float MaxMoveFrequency_Console;
        public bool bEndCalled;
        public bool bMeleeExitOff;
    }
    public class SFXWeaponMod_AssaultRifleUltraLight : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_PistolPowerDamage : SFXWeaponMod
    {
    }
    public class SFXWeaponMod_SMGPowerDamage : SFXWeaponMod
    {
    }
    public class SFXSeqAct_POISelection : SeqAct_Latent
    {
        public int[] m_allPOIs;
        public int m_NewPointOfInterest;
        public int m_LastPointOfInterest;
        public int m_PlayerSelection;
        public bool bEndCalled;
    }
    public class SFXWeaponMod_ShotgunUltraLight : SFXWeaponMod
    {
    }
    public class SFXSeqAct_SetAreaMap_DLC : SequenceAction
    {
        public int AreaMapClassReference;
        public Vector RefPoint1_Image_Px;
        public Vector RefPoint2_Image_Px;
        public NameReference Floor;
        public NameReference AreaMapTag;
        public int OverrideGroupID;
        public int Ref1;
        public int Ref2;
        public int AreaMapMovieReference;
    }
    public class SFXSeqAct_SetAreaMap_Pack003 : SFXSeqAct_SetAreaMap_DLC
    {
    }
    public class SFXSFHandler_AreaMap_DLC : SFXGUIMovieLegacyAdapter
    {
        public string[] LocationIcons;
        public bool m_bFromBrowserWheel;
    }
    public class SFXSFHandler_AreaMap_Pack003 : SFXSFHandler_AreaMap_DLC
    {
    }
    public class SFXAreaMapData_DLC : SFXAreaMapData
    {
        public SFXMapAssetData_DLC[] MapAssetData_DLC;
        public SFXCharacterMapData_DLC[] CharacterMapData_DLC;
        public SFXMapLocationData_DLC[] MapLocationData_DLC;
        public int __SortLocationMapData_DLC__Delegate;
        public NameReference Floor_DLC;
    }
    public class SFXGUIData_Mail_CombatSim : SFXGUIData_Mail
    {
    }
    public class SFXGUIData_Store_PhantomArmor : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_SimToken_Bronze_Top : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_SimToken_Gold_Top : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_SimToken_Silver_Top : SFXGUIData_Store
    {
    }
    public class SFXSeqAct_GetIntArrayLength : BioSequenceLatentAction
    {
        public int m_iLength;
    }
    public class SFXSeqAct_GetMeshMaterial : SequenceAction
    {
        public int SourceMesh;
        public int SourceMaterial;
        public int MaterialIndex;
    }
    public class SFXSeqAct_GetMiniGameBaseBet : SequenceAction
    {
        public MiniGameBasePay[] MiniGameBasePayouts;
        public MiniGame SelectedGame;
    }
    public class SFXSeqAct_GetPlayerVariable : SequenceAction
    {
        public NameReference PlayerVariable;
    }
    public class SFXSeqAct_SetMeshMaterial : SequenceAction
    {
        public int[] TargetMesh;
        public int SourceMaterial;
        public int MaterialIndex;
    }
    public class SFXSeqAct_SetPlayerVariable : SequenceAction
    {
        public NameReference PlayerVariable;
        public int Value;
    }
    public class SFXPawn_Atlas_Citadel2 : SFXPawn_Atlas
    {
    }
    public class SFXSeqAct_KillChildCreatures : SequenceAction
    {
        public NameReference[] ChildCreatures;
        public int Parent;
    }
    public class SFXSeqAct_SetActorDrawScale : SequenceAction
    {
        public Vector vDrawScale3D;
        public int Target;
        public float fDrawScale;
    }
    public class SFXSeqEvt_SimDeathMoment : SequenceEvent
    {
    }
    public class SFXCustomAction_SimDeath : SFXCustomAction_SingleAnim
    {
        public int AnimInfo;
    }
    public class SFXEmitter_DroneFollower : EmitterSpawnable
    {
        public Rotator DirectionFromFollowedActor;
        public Rotator RotationOffset;
        public int FollowedActor;
        public int FollowedController;
        public float DistanceFromFollowedActor;
        public float DroneMoveSpeed;
        public float DroneRotSpeed;
        public float DefaultFOV;
        public float MinFOV;
        public bool bFollowingPlayerController;
    }
    public class SFXEmitter_DroneScoreboard : SFXEmitter_DroneFollower
    {
    }
    public class SFXGameEffect_Skull_LowShields : SFXGameEffect_ShieldPercentBonus
    {
    }
    public class SFXSeqAct_GiveStartingConsumables_Citadel : SequenceAction
    {
    }
    public class SFXSeqAct_InitScoreDrone : SequenceAction
    {
        public Rotator DirectionFromFollowedActor;
        public Rotator RotationOffset;
        public int InputDrone;
        public int FollowedActor;
        public float DistanceFromFollowedActor;
        public float DroneMoveSpeed;
        public float DroneRotSpeed;
        public float DefaultFOV;
        public float MinFOV;
        public bool bRenderForeground;
    }
    public class SFXSeqAct_SetSimulatorDifficulty : SequenceAction
    {
        public EDifficultyOptions NewDifficulty;
    }
    public class SFXSeqAct_SimDeath : SeqAct_Latent
    {
        public int pPawn;
        public float TimeToDowned;
        public bool bFinished;
    }
    public class SFXSeqAct_SimScoreSummary : BioSeqAct_ShowMessage
    {
        public int token;
    }
    public class SFXSeqAct_Skull_EnemyShields : SequenceAction
    {
        public float ShieldMultiplier;
        public float ShieldToHealthRatio;
        public int Enemy;
    }
    public class SFXSeqAct_Skull_HighDamage_Enemy : SequenceAction
    {
        public float DamageBonus;
        public int Enemy;
    }
    public class SFXSeqAct_Skull_HighDamage_Player : SequenceAction
    {
        public float DamageBonus;
    }
    public class SFXSeqAct_Skull_LowShields : SequenceAction
    {
        public float ShieldPenalty;
        public float UpdateFrequency;
    }
    public class SFXSeqAct_Skull_NoMedigel : SequenceAction
    {
    }
    public class SFXShield_SkullBiotic : SFXShield_Biotic
    {
    }
    public class SFXShield_SkullEnergy : SFXShield_Energy
    {
    }
    public class SFXAI_CloneShepard : SFXAI_Cover
    {
        public Guid Guid_DefensiveCrust;
        public float GrenadeInterval;
        public float PowerInterval;
        public float GrenadeConeAngle;
        public float MedigelHealthThreshold;
        public int CE_TechArmor_Male;
        public int CE_TechArmor_Female;
        public int CE_Barrier;
        public int CE_AdrenalineRush;
        public int CE_DefensiveMatrix;
        public int PS_FireHologramTemplate;
        public int PS_FireIconTemplate;
        public int WWise_FireAmmoSound;
        public int PS_FireMuzzleVFX;
        public int PS_FireMuzzleLoopVFX;
        public float PowerToFiringRatio;
        public float StageTwo_ShieldRechargeDelayMultiplier;
        public float StageTwo_ShieldBonusMultiplier;
        public float StageTwo_WeaponDamageMultiplier;
        public float StageTwo_NewIdealRange;
        public float StageTwo_SentinelDamageReduction;
        public float StageTwo_VanguardChargeFrequencyBonus;
        public float StageTwo_InfiltratorAgressiveFrequencyMultiplier;
        public float StageTwo_AdeptPowerDamageBonus;
        public float StageTwo_SoldierGrenadeFrequencyMultiplier;
        public float StageTwo_SoldierWeaponDamageMultiplier;
        public float MinTimeBetweenDrones;
        public float LastDroneTime;
        public float Shield_StartingMax;
        public float Shield_StartRegenDelay;
        public float CloneRetreatDistance;
        public float CloneSpeedBoostDuration;
        public float CLoneSpeedIncrease;
        public float InfiltratorSpeedIncrease;
        public float RushTimeout;
        public float Rush_CloneSyncRange;
        public float Rush_CloneHealthMinPercent;
        public float Rush_StopFiringRange;
        public float MinTimeBetweenCloaks;
        public float LastCloakTime;
        public int TeleportLocation;
        public float LastTeleportTime;
        public float MinTeleportInterval;
        public float MinTeleportInterval_Rush;
        public float TeleportChance;
        public int MaxChargesPerRush;
        public int ChargeCountThisRush;
        public float EnemyDistance_VanguardMelee;
        public float SyncMeleeAttackInterval_Vanguard;
        public int FemmePawn;
        public float MaxRezDistance;
        public float PlayerCampingDistance;
        public int GameName_Soldier;
        public int GameName_Adept;
        public int GameName_Engineer;
        public int GameName_Sentinel;
        public int GameName_Vanguard;
        public int GameName_Infiltrator;
        public bool bThrowGrenade;
        public bool bMedigelDisabled;
        public bool bStageTwoActive;
        public bool bPlayerLockedOn;
        public bool bPlayerSynced;
        public bool bCloaked;
        public bool bRushChargingActive;
        public bool bEndBehaviorActive;
        public bool bHasRushPriority;
        public bool bSimFightActive;
        public CloneClassType CloneClass;
    }
    public class SFXAICmd_AcquireCover_Clone : SFXAICmd_AcquireCover
    {
    }
    public class SFXAICmd_Base_CloneShepard : SFXAICmd_Base_Cover
    {
        public int GEManager;
    }
    public class SFXAICmd_MoveToCover_Clone : SFXAICmd_MoveToCover
    {
    }
    public class SFXAICmd_MoveToGoal_Clone : SFXAICmd_MoveToGoal
    {
    }
    public class SFXAICmd_MoveToMeleeRange_Clone : SFXAICmd_MoveToMeleeRange
    {
        public float CloneSyncRange;
        public float CloneHealthMinPercent;
        public float StopFiringRange;
    }
    public class SFXCustomAction_CloneCharge : SFXCustomAction_SingleAnim
    {
        public int AnimInfo;
        public int TeleportLocation;
        public float NavPointSearchRange;
        public float NavPointMinRange;
        public float AcceptablePlayerArc;
        public int PS_TeleportOut;
        public int PS_TeleportIn;
    }
    public class SFXCustomAction_CloneGrapple : SFXCustomAction_VariableExit
    {
        public Guid Guid_OmniBlade_Player;
        public Guid Guid_OmniBlade_Clone;
        public float DamagePerSecond;
        public int DOTEffect;
        public float APSThreshold_Hard;
        public int CE_OmniBlade;
        public int CE_BioticFist;
        public int CE_FireFist;
        public int CE_ElectricFist;
        public int SyncedPlayer;
        public float SafetyDelay;
        public float MinLoopTime;
        public float LoopTimeDecreaseForDifficultyIncrease;
        public int WWise_Biotic_Enter_NP;
        public int WWise_Biotic_Enter_P;
        public int WWise_Blade_Enter_NP;
        public int WWise_Blade_Enter_P;
        public int WWise_Fire_Enter_NP;
        public int WWise_Fire_Enter_P;
        public int WWise_Lightning_Enter_NP;
        public int WWise_lightning_Enter_P;
        public int WWise_Exit;
        public bool bTargetBrokeGrapple;
    }
    public class SFXCustomAction_CloneMedigel : SFXCustomAction_SingleAnim
    {
        public Guid OmniToolGuid;
        public int CE_OmniTool;
        public int CE_HealCrust;
        public float HealthRestoreDelay;
        public float HealthPerTick;
        public int Wwise_CastSound;
    }
    public class SFXCustomAction_ClonePunch_Adept : SFXCustomAction_SingleAnim
    {
        public int AnimInfo;
    }
    public class SFXCustomAction_ClonePunch_Engineer : SFXCustomAction_SingleAnim
    {
        public int AnimInfo;
    }
    public class SFXCustomAction_ClonePunch_Infiltrator : SFXCustomAction_SingleAnim
    {
        public int AnimInfo;
    }
    public class SFXCustomAction_ClonePunch_Sentinel : SFXCustomAction_SingleAnim
    {
        public int AnimInfo;
    }
    public class SFXCustomAction_ClonePunch_Soldier : SFXCustomAction_SingleAnim
    {
        public int AnimInfo;
    }
    public class SFXCustomAction_ClonePunch_Vanguard : SFXCustomAction_SingleAnim
    {
        public int AnimInfo;
    }
    public class SFXCustomAction_FemmeRes : SFXCustomAction_SingleAnim
    {
        public Guid OmniToolGuid;
        public int CE_OmniTool;
        public int CE_HealCrust;
        public float HealthRestoreDelay;
        public float HealthPerTick;
        public int Wwise_CastSound;
        public int FemmePawn;
    }
    public class SFXCustomAction_RollBackward_Clone : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_RollForward_Clone : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_RollLeft_Clone : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_RollRight_Clone : SFXCustomAction_SingleAnim
    {
    }
    public class SFXGameEffect_PreferHenchmen : SFXGameEffect
    {
        public int PreferredTarget;
        public float UpdateFrequency;
    }
    public class SFXModule_Damage_Clone : SFXModule_Damage
    {
        public float MinimumHealthPercent;
    }
    public class SFXPawn_CloneDrone : SFXPawn_ProtectorDrone
    {
    }
    public class SFXPawn_CloneShepard : SFXPawn
    {
        public int Loadout_Assault;
        public int Loadout_Sniper;
        public int Loadout_Shotgun;
        public int Loadout_Pistol;
        public float LastReactionTime;
        public float ReactionInterval;
    }
    public class SFXPawn_CloneShepard_Female : SFXPawn_CloneShepard
    {
    }
    public class SFXPowerCustomAction_CloneDenial : SFXPowerCustomAction_EnemyGrenade
    {
        public DenialZone[] DenialZones;
        public int MaxActiveGrenades;
        public int CE_DenialArea;
        public float DenialUpdateFrequency;
        public float DenialRadius;
        public float DenialDamage;
        public int DenialMaxTargets;
    }
    public class SFXPowerCustomAction_CloneDenial_Biotic : SFXPowerCustomAction_CloneDenial
    {
    }
    public class SFXPowerCustomAction_CloneDrone : SFXPowerCustomAction_ProtectorDroneBase
    {
        public float DroneDamage;
        public float DroneZapRadius;
        public float ZapCooldown;
        public int Drone;
        public int CE_DroneExplosionTemplate;
        public int DroneDeathSound;
    }
    public class SFXPowerCustomAction_CloneProjectile : SFXPowerCustomAction
    {
    }
    public class SFXPowerCustomAction_CloneProjectile_Carnage : SFXPowerCustomAction_CloneProjectile
    {
    }
    public class SFXPowerCustomAction_CloneProjectile_Incinerate : SFXPowerCustomAction_CloneProjectile
    {
    }
    public class SFXPowerCustomAction_CloneProjectile_Warp : SFXPowerCustomAction_CloneProjectile
    {
    }
    public class SFXProjectile_PowerCustomAction_CloneDenial : SFXProjectile_PowerCustomAction_Grenade
    {
    }
    public class SFXProjectile_PowerCustomAction_ClonePower : SFXProjectile_PowerCustomAction_Seeking
    {
        public float EvadeDistance;
    }
    public class SFXProjectile_PowerCustomAction_ClonePower_Carnage : SFXProjectile_PowerCustomAction_ClonePower
    {
    }
    public class SFXSeqAct_InitSimClone : SequenceAction
    {
        public int SimClone;
        public CloneClassType CloneClass;
    }
    public class SFXWeapon_AI_BlackWidow : SFXWeapon_SniperRifle_BlackWidow
    {
    }
    public class SFXWeapon_AI_Hurricane : SFXWeapon_SMG_Hurricane
    {
    }
    public class SFXWeapon_AI_Valkyrie : SFXWeapon_AssaultRifle_Valkyrie
    {
    }
    public class SFXWeapon_AI_Wraith : SFXWeapon_Shotgun_Striker
    {
    }
    public class SFXPawn_CloneShepard_Male : SFXPawn_CloneShepard
    {
    }
    public class SFXSeqAct_FindUIHenchmen : SequenceAction
    {
        public int Hench1;
        public int Hench2;
    }
    public class SFXAI_Wrex : SFXAI_Henchman
    {
        public float MeleeEngagementRange;
    }
    public class SFXAICmd_Wrex : SFXAICmd_Combat_Henchman
    {
    }
    public class SFXCustomAction_WrexPunch : SFXCustomAction_SingleAnim
    {
        public int AnimInfo;
    }
    public class SFXDamageType_WrexPunch : SFXDamageType_HeavyMelee
    {
    }
    public class SFXPawn_Henchman_Citadel : SFXPawn_Henchman
    {
        public float MinPowerRank;
    }
    public class SFXPawn_Wrex : SFXPawn_Henchman_Citadel
    {
    }
    public class SFXPowerCustomAction_StimPack : SFXPowerCustomAction_GrenadeBase
    {
        public PowerData MaxGrenadeBonus;
        public PowerData ShieldStrength;
        public PowerData Duration;
        public PowerData DamageBonus;
        public int Evolve_GrenadeCountBonus;
        public int Rank2GrenadeUpgrade;
        public float Evolve_DamageBonus;
        public float Evolve_Duration;
        public float Evolve_ShieldStrengthBonus;
        public float Evolve_ShieldStrengthBonus2;
        public float Evolve_WeaponDamageBonus;
        public float Evolve_MeleeDamageBonus;
        public int CE_HealCrust;
        public int CE_SuperHealCrust;
        public float DamageImmunityLength;
    }
    public class SFXPowerCustomAction_WrexPassive : SFXPowerCustomAction_HenchmanPassive
    {
        public float Evolve_HealthShieldBonus;
        public float Evolve_WeaponDamageBonus;
        public float Evolve_PowerDamageBonus;
        public float Evolve_ShieldRegenBonus;
        public float Evolve_SquadHealthShieldBonus;
        public float Evolve_HealthShieldBonus2;
        public float Evolve_MeleeDamageBonus;
    }
    public class SFXGUIData_Store_SimToken_Bronze_Bottom : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_SimToken_Bronze_Summary : SFXGUIData_Store
    {
    }
    public class SFXPowerCustomAction_GruntPassive : SFXPowerCustomAction_WrexPassive
    {
    }
    public class SFXPowerCustomAction_JackPassive : SFXPowerCustomAction_LiaraPassive
    {
        public float Evolve_PowerCooldownBonus2;
    }
    public class SFXPowerCustomAction_JacobPassive : SFXPowerCustomAction_JimmyPassive
    {
    }
    public class SFXPowerCustomAction_KasumiPassive : SFXPowerCustomAction_EDIPassive
    {
    }
    public class SFXPowerCustomAction_MirandaPassive : SFXPowerCustomAction_KaidenPassive
    {
    }
    public class SFXPowerCustomAction_SamaraPassive : SFXPowerCustomAction_ProtheanPassive
    {
    }
    public class SFXPowerCustomAction_ZaeedPassive : SFXPowerCustomAction_AshleyPassive
    {
    }
    public class SFXGameEffect_UniqueArmor_Phantom : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_UniqueArmor_Phantom_Powers : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_UniqueArmor_Phantom_Weapons : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGUIData_Store_SimToken_Gold_Bottom : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_SimToken_Gold_Summary : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_KhansNetworkExposed : SFXGUIData_Store
    {
    }
    public class SFXWeaponMod_SniperRifleUltraLight : SFXWeaponMod
    {
    }
    public class SFXGUIData_Store_Decorator_Bathroom : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Decorator_Bed : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Decorator_Kitchen : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Decorator_Seating : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Decorator_Table : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Decorator_WallDecorations : SFXGUIData_Store
    {
    }
    public class SFXWeapon_AssaultRifle_Lancer : SFXWeapon_AssaultRifle_Base
    {
        public float RechargeRatePerSecond;
        public float PartialRechargeDelay;
        public float FullRechargeDelay;
        public float AccumulatedAmmo;
        public int CE_HeatVent;
        public int CE_SteamVent;
        public float SteamDelay;
        public float HeatDelay;
        public int WeaponReloadRechargeSound;
        public float RechargeSoundDelay;
        public bool bCanPlayRechargeSound;
    }
    public class SFXDamageType_Spitfire_Cit001 : SFXDamageType_Weapon
    {
    }
    public class SFXWeapon_Heavy_Spitfire_Cit001 : SFXHeavyWeapon
    {
        public int PowerUpSound1;
        public int PowerDownSound1;
        public int SteamMuzzle;
        public float MinROF;
        public float RampTime;
        public bool bIsHot;
    }
    public class SFXWeapon_Pistol_Silencer_Cit001 : SFXWeapon_Pistol_Silencer
    {
    }
    public class SFXGUIData_Store_SimToken_Silver_Bottom : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_SimToken_Silver_Summary : SFXGUIData_Store
    {
    }
    public class SFXCloneMedigelUseModule : SFXModule_SavedUse
    {
        public int MedigelCount;
        public float RechargeTime;
    }
    public class SFXCloneMedigelKit : DynamicSMActor
    {
        public int HealthCrossA;
        public int HealthCrossB;
    }
    public class SFXSeqAct_ForceEncumbranceUpdate : SequenceAction
    {
    }
    public class SFXSeqAct_ShouldChangeDress : SequenceAction
    {
        public int MainGameDressID;
    }
    public class SFXCustomAction_StoryMedigel : SFXCustomAction_SingleAnim
    {
        public int KismetAction;
    }
    public class SFXPawn_Henchman_Fake : SFXPawn_Henchman
    {
    }
    public class SFXSeqAct_ActivateMedigelMarker : SequenceAction
    {
        public int TargetActor;
    }
    public class SFXSeqAct_GiveXPByLevel : SequenceAction
    {
        public float RewardAmount;
        public EME3Level Level;
    }
    public class SFXSeqAct_GuardLOS : SeqAct_Latent
    {
        public int Guard;
        public float UpdateTime;
        public float ConeAngle;
        public float MaxDistance;
        public float AutoDetectDistance;
        public float MinDetectionTime;
        public bool bEnded;
        public bool bCheckHead;
    }
    public class SFXSeqAct_SetSightRadius : SequenceAction
    {
        public float NewSightRadius;
    }
    public class SFXSeqAct_StoryMedigelAction : SeqAct_Latent
    {
        public int pPawn;
        public bool bEndCalled;
    }
    public class SFXDamageType_Slam : SFXDamageType_Power_Ragdoll
    {
    }
    public class SFXGameEffect_DummyOverloadBeam : SFXGameEffect
    {
        public int PSC_Beam;
        public int OriginActor;
    }
    public class SFXProjectile_DummyPower_ConcussiveShot : SFXProjectile_DummyPower
    {
    }
    public class SFXProjectile_DummyPower_Overload : SFXProjectile_DummyPower
    {
        public float RegenPenaltyDuration;
    }
    public class SFXProjectile_DummyPower_Slam : SFXProjectile_DummyPower
    {
        public float LiftDuration;
        public float LiftForce;
        public float SlamForce;
        public float LastPhysicsCallbackTime;
        public float MinTimeBetweenPhysicsCallbacks;
        public float PhysicsToDamageMultiplier;
    }
    public class SFXProjectile_DummyPower_Stasis : SFXProjectile_DummyPower
    {
        public NameReference[] EffectsToRemove;
        public float StasisDuration;
        public float HealthDamageThreshold;
    }
    public class SFXSeqAct_ConeCheck : SequenceAction
    {
        public float Value;
        public int OriginActor;
        public int TargetActor;
        public ConeCheck ConeDirection;
    }
    public class SFXPawn_Atlas_Citadel : SFXPawn_Atlas
    {
    }
    public class SFXSeqAct_RemoveEdisVisor : SequenceAction
    {
        public int EDI;
        public int NoVisorMaterial;
        public int NoVisorMaterial_APP01;
    }
    public class SFXSeqAct_AdjustPlayerCam : SeqAct_Latent
    {
        public Vector HookOffset;
        public Vector ArmOffset;
        public float InterpSpeed;
        public int TargetPlayer;
    }
    public class SFXSeqAct_ClearCustomActions : SequenceAction
    {
    }
    public class SFXSeqAct_MakeAINoise : SequenceAction
    {
        public NameReference NoiseType;
        public float Loudness;
    }
    public class SFXSeqAct_SetAnimtree : SequenceAction
    {
        public int CurrentObject;
        public int CurrentPawn;
        public int NewAnimTree;
    }
    public class SFXSeqAct_ToggleCrouch : SequenceAction
    {
        public NameReference AnimNodeName;
        public float BlendTime;
        public float CrouchSpeed;
        public float CamPitchDownLimit;
    }
    public class SFXSeqAct_TintCloneArmor : SequenceAction
    {
        public LinearColor AlternateStipeColor;
        public LinearColor AlternateArmorColor;
        public int Clone;
    }
    public class SFXGUIData_Elevator_DocksRT_EXP3 : SFXGUIData_Elevator
    {
    }
    public class SFXGUIData_Elevator_DocksRT_EXP3b : SFXGUIData_Elevator
    {
    }
    public class SFXGUIData_Elevator_DocksRT_EXP3c : SFXGUIData_Elevator
    {
    }
    public class SFXGUIData_Elevator_DocksRT_EXP3d : SFXGUIData_Elevator
    {
    }
    public class SFXAI_Abomination_Shared : SFXAI_Core
    {
        public string[] DamageFlareClasses;
        public float ChargedSpeedMod;
        public float TargetProximityInterval;
        public float DamageFlareDuration;
    }
    public class SFXAI_Praetorian_Shared : SFXAI_Core
    {
        public Vector2D BlastIntervalRange;
        public NameReference LeapAbilityName;
        public int MaxBlastsToFire;
        public float PreBlastDelay;
        public float InterBlastDelay;
        public float PostRocketDelay;
        public float GlobalLeapInterval;
        public float AggressiveInterval;
        public float AggressiveDuration;
        public float PreSyncDelay;
        public float SyncKillChance;
        public float ShieldFrequency;
        public float ShieldDuration;
        public float BreachDamageResetDuration;
        public float BreachDamageThreshold;
        public float MaxBreachDamageThreshold;
        public float EnemyDistance_Sync;
        public float EnemyDistance_Lasers;
        public float EnemyDistance_Flying;
    }
    public class SFXAICmd_Abomination_Melee_Shared : SFXAICmd_Base_Melee
    {
    }
    public class SFXAICmd_Base_Abomination_Shared : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Base_Praetorian_Shared : SFXAICmd_Base_Melee
    {
    }
    public class SFXAICmd_Praetorian_Aggressive_Shared : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Praetorian_Firing_Shared : SFXAICommand_Base_Combat
    {
    }
    public class SFXCustomAction_AbominationClimbDown_Shared : SFXCustomAction_SimpleMoveBase
    {
    }
    public class SFXCustomAction_AbominationPossession_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_AbominationSyncGrapple_Shared : SFXCustomAction_VariableExit
    {
        public float DamagePerSecond;
        public int DOTEffect;
        public bool bTargetBrokeGrapple;
    }
    public class SFXCustomAction_PraetorianAimToGround_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PraetorianAirBreach_Shared : SFXCustomAction_DamageReaction
    {
        public int BreachVoc;
        public int PossessedBreachVoc;
    }
    public class SFXCustomAction_PraetorianBoostUp_Shared : SFXCustomAction_ClimbUpBase
    {
        public BodyStance BS_FlyingStart;
        public BodyStance BS_FlyingLoop;
        public BodyStance BS_FlyingEnd;
        public float AirGroundOffset;
        public float AirEndMoveDistance;
        public float EndMoveDistance;
    }
    public class SFXCustomAction_PraetorianClimbDown_Shared : SFXCustomAction_LargeCoverClimbDown
    {
        public BodyStance BS_FlyingAnim;
    }
    public class SFXCustomAction_PraetorianClimbUp_Shared : SFXCustomAction_LargeCoverClimbUp
    {
        public BodyStance BS_FlyingAnim;
    }
    public class SFXCustomAction_PraetorianDeath_Shared : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_PraetorianDropDown_Shared : SFXCustomAction_BoostDownBase
    {
        public BodyStance BS_FlyingStart;
        public BodyStance BS_FlyingLoop;
        public BodyStance BS_FlyingEnd;
    }
    public class SFXCustomAction_PraetorianFireBlast_Shared : SFXCustomAction_Loop
    {
    }
    public class SFXCustomAction_PraetorianFiringBreach_Shared : SFXCustomAction_DamageReaction
    {
        public int BreachVoc;
        public int PossessedBreachVoc;
    }
    public class SFXCustomAction_PraetorianFlyToGround_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PraetorianGroundToAim_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PraetorianGroundToFly_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PraetorianLeap_Shared : SFXCustomAction_SingleAnim
    {
        public int[] HitActors;
        public int LeapVoc;
        public int PossessedLeapVoc;
    }
    public class SFXCustomAction_PraetorianMantle_Shared : SFXCustomAction_LargeCoverMantle
    {
        public BodyStance BS_FlyingAnim;
    }
    public class SFXCustomAction_PraetorianMelee_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PraetorianMeleeAlt_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PraetorianMultiMissile_Shared : SFXCustomAction_Loop
    {
    }
    public class SFXCustomAction_PraetorianPossession_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PraetorianStagger_Shared : SFXCustomAction_DamageReaction
    {
        public int BreachVoc;
        public int PossessedBreachVoc;
    }
    public class SFXCustomAction_PraetorianStandard_Shared : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PraetorianStandardForward_Shared : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PraetorianStandardLeft_Shared : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PraetorianStandardRight_Shared : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_PraetorianSyncMelee_Shared : SFXCustomAction_SyncBase
    {
    }
    public class SFXDamageType_AbominationExplosion_Shared : SFXDamageType
    {
    }
    public class SFXDamageType_AbominationSuperExplosion_Shared : SFXDamageType
    {
    }
    public class SFXDamageType_PraetorianLaser_Shared : SFXDamageType
    {
    }
    public class SFXDamageType_PraetorianSyncKill_Shared : SFXDamageType
    {
    }
    public class SFXPawn_Collector_Base_Shared : SFXPawn
    {
        public PossessionVisualEffectData_Shared[] PossessionVFXData;
        public PossessionData_Shared[] PossessedWaves;
        public NameReference PossessionAbility;
        public NameReference PossessionBonusesCategory;
        public Vector2D ShieldRegenDelay;
        public int CE_PossessedDeathEffect;
        public int PSC_Possession;
        public int PossessedName;
        public float PossessionBonusHealthPercent;
        public float PossessedSpeed;
        public float PossessedDamageBonus;
        public float PossessedBarrierBonus;
        public float MaxEnemyShieldRecharge;
        public float ShieldRegenPct;
        public int CE_OldBodyGib;
        public int CE_BodyGibOverride;
    }
    public class SFXPawn_Abomination_Shared : SFXPawn_Collector_Base_Shared
    {
        public Guid GUID_Flames;
        public int CE_Explosion;
        public int CE_PossessedExplosion;
        public int CE_Flames;
        public int CE_DoT;
        public float ExplosionDelay;
        public float ExplosionDamage;
        public float SuperExplosionDamage;
        public float FriendlyDamageScalar;
        public float ExplosionRadius;
        public float SuperExplosionRadius;
        public float DOTDuration;
        public float SuperDoTDuration;
        public float DoTDPS;
        public float SuperDoTDPS;
        public int ExplosionSound;
    }
    public class SFXPawn_Praetorian_Shared : SFXPawn_Collector_Base_Shared
    {
        public EyeLaserData_Shared[] ActiveLasers;
        public Guid ShieldGUID;
        public Guid FlyingGUID;
        public Vector BeamDamageExtent;
        public NameReference LeftMissileSocket;
        public NameReference RightMissileSocket;
        public int InvisShieldMesh;
        public int CE_Shield;
        public int CE_Flying;
        public int FlyingStartSound;
        public int FlyingStopSound;
        public int CE_Death;
        public int PraetorianPainVoc;
        public int PossessedAmbientVoc;
        public int PossessedPainVoc;
        public int PossessedDyingSound;
        public int PS_BeamImpact;
        public float StartOffset;
        public float EndOffset;
        public float BeamDuration;
        public float BeamDamage;
        public float InterpExp;
        public int LaserSound;
        public int NumMissilesToFire;
        public int FireMissileSound;
    }
    public class SFXPraetorianBeamDummy_Shared : Actor
    {
    }
    public class SFXProjectile_PraetorianMissile_Shared : SFXProjectile_SeekingMissile
    {
        public float MissileHeadEffectsScalar;
        public float MissileTailEffectsScalar;
        public int TravelStart;
        public int TravelStop;
    }
    public class SFXAI_Phoenix_Shared : SFXAI_Core
    {
        public NameReference ChargeAbilityName;
        public float GlobalChargeInterval;
        public float EnemyDistance_MeleeAlt;
        public float EnemyDistance_Charge;
    }
    public class SFXAICmd_Base_Phoenix_Shared : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Phoenix_Melee_Shared : SFXAICmd_Base_Melee
    {
    }
    public class SFXCustomAction_PhoenixCharge_Shared : SFXCustomAction_SingleAnim
    {
        public int[] HitActors;
    }
    public class SFXCustomAction_PhoenixHeavyMelee_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_PhoenixMelee_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXPawn_Phoenix_Shared : SFXPawn
    {
    }
    public class SFXSeqAct_MarauderArmorBuff : SequenceAction
    {
        public int Enemy;
    }
    public class SFXAI_CollectorCaptain_Shared : SFXAI_Cover
    {
        public int[] SpawnedSeekers;
        public NameReference GrenadeAttack;
        public float GrenadeInterval;
        public float GrenadeConeAngle;
        public float SeekerGlobalMax;
        public float SeekerLocalMax;
        public int CurrentSeekerCount;
        public bool bThrowGrenade;
    }
    public class SFXAI_CollectorTrooper_Shared : SFXAI_Cover
    {
        public NameReference GrenadeAttack;
        public float GrenadeInterval;
        public float GrenadeConeAngle;
        public float WebPointSearchDist;
        public float WebInterval;
        public float MaxWebCount;
        public float GlobalMaxWebCount;
        public float WebSummonProximity;
        public bool bThrowGrenade;
    }
    public class SFXAI_Seeker_Shared : SFXAI_Core
    {
        public int CE_PossessedSwarmProjectile;
    }
    public class SFXAI_TrooperWeb_Shared : SFXAI_None
    {
        public float SuicideTestRadius;
        public float TimeBeforeSuicide;
    }
    public class SFXAICmd_Base_CollectorCaptain_Shared : SFXAICmd_Base_Cover
    {
    }
    public class SFXAICmd_Base_CollectorTrooper_Shared : SFXAICmd_Base_Cover
    {
    }
    public class SFXAICmd_Base_Seeker_Shared : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Berserk_CollectorCaptain_Shared : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_CollectorTrooper_DeployWeb_Shared : SFXAICommand_Base_Combat
    {
    }
    public class SFXCustomAction_CaptainSpawnSeeker_Shared : SFXCustomAction_SingleAnim
    {
        public int CE_SpawnEffects;
        public int CE_PossessedSpawnEffects;
    }
    public class SFXCustomAction_CollectorBoostDown_Shared : SFXCustomAction_BoostDownBase
    {
        public Guid BoostGUID;
        public int CE_BoostStart;
        public int FlyingStartSound;
        public int FlyingStopSound;
    }
    public class SFXCustomAction_CollectorBoostUp_Shared : SFXCustomAction_ClimbUpBase
    {
        public Guid BoostGUID;
        public int CE_BoostStart;
        public int FlyingStartSound;
        public int FlyingStopSound;
    }
    public class SFXCustomAction_CollectorCaptainMelee_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_CollectorCaptainPossession_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_CollectorTrooperMelee_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_CollectorTrooperPossession_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_CollectorTrooperWeb_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_SeekerClimbDown1M_Shared : SFXCustomAction_LargeCoverClimbDown
    {
    }
    public class SFXCustomAction_SeekerClimbUp1M_Shared : SFXCustomAction_LargeCoverClimbUp
    {
    }
    public class SFXCustomAction_SeekerExplosion_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_SeekerLadderClimbDown_Shared : SFXCustomAction_LadderClimbDownBase
    {
    }
    public class SFXCustomAction_SeekerLadderClimbUp_Shared : SFXCustomAction_ClimbUpBase
    {
    }
    public class SFXCustomAction_SeekerMantle_Shared : SFXCustomAction_LargeCoverMantle
    {
    }
    public class SFXCustomAction_SeekerStandard_Shared : SFXCustomAction_DamageReaction
    {
    }
    public class SFXDamageType_SeekerExplosion_Shared : SFXDamageType
    {
    }
    public class SFXDamageType_SMG_Collector_Shared : SFXDamageType_AutoPistol
    {
    }
    public class SFXPawn_Seeker_Shared : SFXPawn_Collector_Base_Shared
    {
        public int PSC_Swarm;
        public int PS_Plague;
        public int LifetimeStart;
        public int LifetimeStop;
        public int PlagueLifetimeStart;
        public int PlagueLifetimeStop;
        public int CE_SeekerDeath;
        public int CE_PlagueDeath;
        public int CE_PlagueExplosion;
        public int CE_TargetSwarmed;
        public int CE_PlagueTargetSwarmed;
        public float Damage;
        public float DamageRadius;
        public float CooldownPenalty;
        public float ExplosionDelay;
        public float AccuracyPenalty;
        public bool bIsPlague;
    }
    public class SFXPawn_CollectorCaptain_Shared : SFXPawn_Collector_Base_Shared
    {
        public Guid LifeTimeGuid;
        public NameReference AttachSocketName;
        public int SeekerArchetype;
        public int PossessedSeekerArchetype;
        public float SeekerInterval;
        public int KnifeMeshComp;
        public int PossessedAmbientVoc;
        public int CaptainPainVoc;
        public int CE_LifeTimeEffect;
    }
    public class SFXPawn_CollectorTrooper_Shared : SFXPawn_Collector_Base_Shared
    {
        public NameReference AttachSocketName;
        public int KnifeMeshComp;
        public int PossessedAmbientVoc;
        public int TrooperPainVoc;
    }
    public class SFXPawn_TrooperWeb_Shared : SFXPawn
    {
        public Guid WebGuid;
        public NameReference WebCategory;
        public int SpawnSound;
        public int DeathSound;
        public float WebRadius;
        public float WebDuration;
        public float VictimSlowedAmount;
        public int CE_Web;
    }
    public class SFXPowerCustomAction_CollectorGrenade_Shared : SFXPowerCustomAction_EnemyGrenade
    {
    }
    public class SFXWeapon_SMG_Collector_Shared : SFXWeapon_SMG_Base
    {
        public Guid ClientEffectFiringGuid;
        public float RechargeRatePerSecond;
        public float PartialRechargeDelay;
        public float FullRechargeDelay;
        public float AccumulatedAmmo;
        public int CE_SteamVent;
        public int CE_HeatVent;
        public float SteamDelay;
        public float HeatDelay;
        public int WeaponReloadRechargeSound;
        public float RechargeSoundDelay;
        public bool bCanPlayRechargeSound;
    }
    public class SFXWeapon_AI_Collector_Shared : SFXWeapon_SMG_Collector_Shared
    {
    }
    public class SFXWeapon_AI_CollectorCaptain_Shared : SFXWeapon_AssaultRifle_Collector
    {
    }
    public class SFXAI_Scion_Shared : SFXAI_Core
    {
        public Vector2D FireDelayTime;
        public float MaxFireWaitTime;
        public float BlastInterval;
        public float SyncKillChance;
        public float EnemyDistance_SyncMelee;
        public float SackDamagePct;
        public float BreachDamageResetDuration;
        public float BreachDamageThreshold;
        public float MaxBreachDamageThreshold;
    }
    public class SFXAICmd_Base_Scion_Shared : SFXAICommand_Base_Combat
    {
    }
    public class SFXAICmd_Scion_Melee_Shared : SFXAICmd_Base_Melee
    {
    }
    public class SFXCustomAction_ScionBlast_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_ScionStagger_Shared : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_ScionBreach_Shared : SFXCustomAction_ScionStagger_Shared
    {
    }
    public class SFXCustomAction_ScionClimbDown_Shared : SFXCustomAction_LargeCoverClimbDown
    {
    }
    public class SFXCustomAction_ScionClimbUp_Shared : SFXCustomAction_LargeCoverClimbUp
    {
    }
    public class SFXCustomAction_ScionDeath_Shared : SFXCustomAction_DeathReaction
    {
    }
    public class SFXCustomAction_ScionDropDown_Shared : SFXCustomAction_BoostDownBase
    {
    }
    public class SFXCustomAction_ScionMantle_Shared : SFXCustomAction_LargeCoverMantle
    {
    }
    public class SFXCustomAction_ScionMelee_Shared : SFXCustomAction_SingleAnim
    {
        public int[] HitActors;
    }
    public class SFXCustomAction_ScionPossession_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_ScionRoar_Shared : SFXCustomAction_SingleAnim
    {
        public int RoarSound;
        public int PossessedRoarSound;
    }
    public class SFXCustomAction_ScionStandard_Shared : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_ScionStandardForward_Shared : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_ScionStandardLeft_Shared : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_ScionStandardRight_Shared : SFXCustomAction_DamageReaction
    {
    }
    public class SFXCustomAction_ScionSyncMelee_Shared : SFXCustomAction_SyncBase
    {
    }
    public class SFXDamageType_ScionBlast_Shared : SFXDamageType
    {
    }
    public class SFXDamageType_ScionCannon_Shared : SFXDamageType
    {
    }
    public class SFXDamageType_ScionSyncKill_Shared : SFXDamageType
    {
    }
    public class SFXPawn_Scion_Shared : SFXPawn_Collector_Base_Shared
    {
        public NameReference BlastSocketName;
        public int CE_Death;
        public int CE_PossessionFade;
        public int ScionPainVoc;
        public int PossessedAmbientVoc;
        public int PossessedPainVoc;
        public int PossessedDyingSound;
    }
    public class SFXPowerCustomAction_ScionCannonEffect_Shared : SFXPowerCustomAction
    {
        public float DOTDuration;
        public int CE_DoTTemplate;
    }
    public class SFXProjectile_ScionBlast_Shared : SFXProjectile_Explosive
    {
        public float GravityScale;
        public int NumShardsToSpawn;
        public float TargetDistanceThreshold;
        public float TargetCoverDistanceThreshold;
    }
    public class SFXProjectile_ScionBlastShard_Shared : SFXProjectile_Explosive
    {
        public float GravityScale;
    }
    public class SFXProjectile_ScionCannon_Shared : SFXProjectile_SeekingMissile
    {
        public Vector AimOffset;
        public float ProjHeadEffectScale;
        public float ProjTailEffectScale;
    }
    public class SFXWeapon_AI_ScionCannon_Shared : SFXWeapon
    {
    }
    public class SFXAI_GethBomber_Shared : SFXAI_Core
    {
        public NameReference BombingRunAbilityName;
        public float GlobalBombingRunInterval;
        public float BombingRunInterval;
        public float NumGrenadesToDrop;
    }
    public class SFXAICmd_Base_GethBomber_Shared : SFXAICommand_Base_Combat
    {
    }
    public class SFXCustomAction_GethBomberBombingRun_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_GethBomberEvadeLeft_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_GethBomberEvadeRight_Shared : SFXCustomAction_SingleAnim
    {
    }
    public class SFXCustomAction_GethBomberZap_Shared : SFXCustomAction_SingleAnim
    {
        public int PS_Beam;
    }
    public class SFXDamageType_GethBomb_Shared : SFXDamageType
    {
    }
    public class SFXPawn_GethBomber_Shared : SFXPawn
    {
        public float[] PendingGrenades;
        public NameReference BeamSocket;
        public NameReference GrenadeSocket;
        public int CE_BeamMuzzle;
        public int PSC_Beam;
        public int PS_BeamImpact;
        public int LF_GethLensFlare;
        public int CE_Explosion;
        public int PS_Explosion;
        public int ExplosionSound;
        public float BombingRunDuration;
        public int IdleStartSound;
        public int IdleStopSound;
    }
    public class SFXProjectile_GethBomb_Shared : SFXProjectile_Explosive
    {
        public float GravityScale;
    }
    public class SFXAmmoContainer_Simulator : SFXAmmoContainer
    {
        public float AmmoPctMultiplier;
        public int PSC_AmmoBox;
        public bool bSkullDisableOn;
    }
    public class SFXSeqAct_DetectHenchmanFall : SeqAct_Latent
    {
        public int PlayerPawn;
        public int HeightCheckDistance;
    }
    public class SFXSeqAct_Skull_PlacedAmmo : SequenceAction
    {
        public int[] AmmoPickups;
    }
    public class SFXDamageType_Throw_Explosion : SFXDamageType_Throw
    {
    }
    public class SFXSeqAct_Layout8Explosion : SequenceAction
    {
        public int ExplosionDamageType;
        public int FireDamageType;
        public int ElectricDamageType;
        public int BioticDamageType;
        public int InputDrone;
        public int SourcePoint;
        public float ExplosionRadius;
        public float ExplosionDamage;
        public float ExplosionForce;
        public float FireRadius;
        public float FireDamage;
        public float FireForce;
        public float ElectricRadius;
        public float ElectricDamage;
        public float ElectricForce;
        public float BioticRadius;
        public float BioticDamage;
        public float BioticForce;
    }
    public class SFXSeqAct_SetTrainMaterialScrollSpeed : SequenceAction
    {
        public NameReference ScalarParameterName;
        public float ScalarValue;
        public int ScrollingMaterial;
    }
    public class SFXAI_SimRavager : SFXAI_Ravager
    {
        public int[] SpawnedSwarmers;
    }
    public class SFXPawn_SimRavager : SFXPawn_Ravager
    {
    }
    public class SFXPawn_Grunt : SFXPawn_Henchman_Citadel
    {
    }
    public class SFXPawn_Jack : SFXPawn_Henchman_Citadel
    {
    }
    public class SFXPawn_Jacob : SFXPawn_Henchman_Citadel
    {
    }
    public class SFXPawn_Kasumi : SFXPawn_Henchman_Citadel
    {
    }
    public class SFXPowerCustomAction_Cloak_Kasumi : SFXPowerCustomAction_Cloak
    {
    }
    public class SFXPawn_Miranda : SFXPawn_Henchman_Citadel
    {
    }
    public class SFXPawn_Samara : SFXPawn_Henchman_Citadel
    {
    }
    public class SFXPawn_Zaeed : SFXPawn_Henchman_Citadel
    {
    }
    public class SFXDamageType_Prothean : SFXDamageType_Gib
    {
    }
    public class SFXWeapon_Heavy_Beam_Base_DLC : SFXWeapon_AssaultRifle_Base
    {
        public Vector2D BeamInterpSpeed;
        public int DecalFrequency;
        public float BeamInterpTime;
        public float VFXUpdateInterval;
    }
    public class SFXWeapon_AssaultRifle_Prothean : SFXWeapon_Heavy_Beam_Base_DLC
    {
        public string AmmoAmountRTPC;
        public ScreenShakeStruct HoldShake;
        public Guid ClientEffectFiringGuid;
        public float RechargeRatePerSecond;
        public float PartialRechargeDelay;
        public float FullRechargeDelay;
        public float AccumulatedAmmo;
        public int CE_HeatVent;
        public float TimeToHeatUp;
        public float TimeToHeatUpAI;
        public float ProtheanDamageMultiplier;
        public float FireStartTime;
        public float SteamDelay;
        public bool bFireSoundPlaying;
        public bool bIsHot;
    }
    public class SFXSeqAct_GiveProtheanGun : SequenceAction
    {
        public int ProtheanGunClass;
        public int NewGamePlusID;
    }
    public class SFXWeapon_AssaultRifle_Gladius : SFXWeapon_AssaultRifle_Base
    {
    }
    public class SFXGUIData_Store_Engineering : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_ME2Weapons : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Morlans : SFXGUIData_Store
    {
    }
    public class SFXGUIData_TerminalApt_ManifestGUI : SFXGUIData_TerminalApt
    {
    }
    public class SFXGUIData_Store_Dealer_Weapons : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Alliance : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Dealer_Artifacts : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_Squad : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_Nor : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_Pers : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Hercules : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Paladin_Ground : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Paladin_Support : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Paladin_Air : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_Implants : SFXGUIData_Store
    {
    }
    public class SFXGameEffect_UniqueArmor_N7_Fury : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_UniqueArmor_Spec_Operative : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_UniqueArmor_N7_Paladin_Arms : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_UniqueArmor_N7_Shdw : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_UniqueArmor_N7_Slayer_Arms : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_UniqueArmor_N7_Demolisher_A : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_MOLGrenadeBonus : SFXGameEffect
    {
    }
    public class SFXGameEffect_pActiveMaxAmmoBonus : SFXGameEffect_PassiveWeaponBonus
    {
    }
    public class SFXGameEffect_MOLSpeedBonus : SFXGameEffect_MovementSpeedBonus
    {
    }
    public class SFXGameContent
    {
    }
    public class SFXGameEffect_UniqueArmor_Corsairs : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_UniqueArmor_Devastor : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGameEffect_UniqueArmor_GarmrHvy : SFXGameEffect_UniqueArmor_Base
    {
    }
    public class SFXGUIData_Store_Intel_Prothean : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Upgrades : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_WeaponUpgrades_AR : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_WeaponUpgrades_AP : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_WeaponUpgrades_SMG : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_WeaponUpgrades_STG : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_WeaponUpgrades_SNP : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_Team : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_XO : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_LT : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_Eqp : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_Range : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_Pet : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_Range : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_Medic : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_Medics : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Dealer_Contracts : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_Veh : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_Marines : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_Chef : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_Engineer : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_Engineers : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_CHENG : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Intel_Avatars : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_Mech : SFXGUIData_Store
    {
    }
    public class SFXGUIData_Store_Manifest_Mechs : SFXGUIData_Store
    {
    }
    public class SFXAI_SentryTurrMP : SFXAI_Core
    {
    }
    public class SFXAICmd_Base_SentryTurrMP : SFXAICommand_Base_Combat
    {
        public NameReference ShockPower;
        public NameReference RocketPower;
        public NameReference CryoAmmoPower;
        public NameReference ArmorPiercingAmmoPower;
        public NameReference PowerToUse;
        public float FlamethrowerRangeSq;
        public int PowerTarget;
    }
    public class SFXDamageType_SentryTurrMPShock : SFXDamageType_Power
    {
    }
    public class SFXPawn_SentryTurrMP : SFXPawn
    {
        public int __OnTurretKilled__Delegate;
        public Guid TurretVFXGuid;
        public Guid TurretBaseVFXGuid;
        public ReplicatedTurretCreator ReplicatedTurretCreatorInfo;
        public int CE_TurretTemplate;
        public int CE_PlayerTurretTemplate;
        public int SpawnSound;
        public int DiedSound;
        public int LoopingSound;
        public int StopLoopingSound;
        public int Caster;
        public bool bLoopSoundActive;
        public bool bHasShock;
        public bool bIsClientSideInitialized;
    }
    public class SFXPowerCustomAction_SentryTurrMP : SFXPowerCustomAction
    {
        public PowerData TurretShields;
        public PowerData RocketCooldown;
        public PowerData RocketDamage;
        public PowerData RocketForce;
        public PowerData RocketRadius;
        public PowerData FlamethrowerDamagePerSec;
        public PowerData FlamethrowerDamageDuration;
        public PowerData FreezeDuration;
        public PowerData ShockCooldown;
        public PowerData ShockDamage;
        public PowerData ShockForce;
        public PowerData ShockRadius;
        public Guid TurretBaseGuid;
        public Vector SpawnLocation;
        public float Evolve_CryoFreezeChance;
        public float Evolve_ArmorPiercingDamage;
        public float Evolve_ShieldBonus;
        public float Evolve_DamageBonus;
        public int Turret;
        public int NotRecommended_TurretDeployed;
        public float SpawnDelay;
        public int CE_TurretBase;
        public int CE_ShutdownEffect;
        public int CE_DeathEffect;
        public float SpawnZOffset;
        public float NonCombatTimeout_Length;
        public float NonCombatTimeout_UpdateFrequency;
        public bool DeathByShutdown;
    }
    public class SFXPowerCustomAction_SentryTurrMPArmorPiercingAmmo : SFXPowerCustomAction_AmmoPower
    {
    }
    public class SFXPowerCustomAction_SentryTurrMPCryoAmmo : SFXPowerCustomAction_AmmoPower
    {
        public float FreezeChance;
    }
    public class SFXPowerCustomAction_SentryTurrMPRocket : SFXPowerCustomAction
    {
    }
    public class SFXPowerCustomAction_SentryTurrMPShock : SFXPowerCustomAction
    {
    }
    public class SFXProjectile_PowerCustomAction_SentryTurrMP : SFXProjectile_PowerCustomAction_BouncingGrenade
    {
    }
    public class SFXProjectile_PowerCustomAction_SentryTurrMPRocket : SFXProjectile_PowerCustomAction_Seeking
    {
    }
    public class SFXWeapon_AssaultRifle_SentryTurrMP : SFXWeapon_AssaultRifle_Base
    {
    }
    public class SFXWeapon_Heavy_FlameThrower_SentryTurrMP : SFXWeapon_Heavy_Beam_Base
    {
        public Rotator MuzzleRotation;
        public float DamagePerSecond;
        public float DamageDuration;
        public int WindUpSound;
        public int WindDownSound;
        public int SentryTurrMPPower;
    }
    public class Name
    {
    }
    public class SFXGUIData_Store_BCM : SFXGUIData_Store
    {
    }
    public class SFXSeqAct_AttachToSocket : SequenceAction
    {
        public NameReference AttachSocketName;
        public int TargetPawn;
        public int SkMeshComponent;
        public int PSC1Component;
        public int PSC2Component;
    }
    public class BioSeqAct_ShowMedals : SequenceAction
    {
        public int m_oGuiReferenced;
        public bool bFromMainMenu;
    }
    public class SFXSeqAct_SetFaceFX : SequenceAction
    {
        public int m_pDefaultFaceFXAsset;
        public int[] m_aoTargets;
    }
}
