<global:WPFBase
    xmlns:global="clr-namespace:ME3Explorer" x:Class="ME3Explorer.Pathfinding_Editor.PathfindingEditorWPF"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ME3Explorer.Pathfinding_Editor"
        xmlns:properties="clr-namespace:ME3Explorer.Properties"
        xmlns:Converters="clr-namespace:ME3Explorer.SharedUI.Converters"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:fa="http://schemas.fontawesome.com/icons/"
        xmlns:SharedUI="clr-namespace:ME3Explorer.SharedUI"
        mc:Ignorable="d"
        d:DataContext="{Binding RelativeSource={RelativeSource Self}}"
        DragOver="Window_DragOver"
        Drop="Window_Drop"
        AllowDrop="True"
        Loaded="PathfindingEditorWPF_Loaded"
        Closing="PathfinderEditorWPF_Closing"
        Title="Pathfinding Editor WPF" Height="750" Width="1300" MinWidth="900" MinHeight="200">
    <Window.Resources>
        <Converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        <Converters:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter"/>
        <Converters:NullEnabledConverter x:Key="NullEnabledConverter"/>
        <Converters:IsIntEqualConverter x:Key="IsIntEqualConverter"/>
        <Converters:IsIntNotEqualConverter x:Key="IsIntNotEqualConverter"/>
        <Converters:NullVisibilityConverter x:Key="NullVisibilityConverter"/>
        <local:EZFilteringActiveConverter x:Key="EZFilteringActiveConverter"/>
        <Converters:GameTypeConverter x:Key="GameTypeConverter"/>
        <ContextMenu x:Key="nodeContextMenu" Closed="ContextMenu_Closed">
            <MenuItem Header="{Binding CurrentNodeXY}" HeaderStringFormat="Set node X,Y to graph position ({0})" Click="SetGraphXY_Clicked" 
                      ToolTip="Sets the X,Y position of this node to the same coordinates as on the graph." Visibility="{Binding SplineNodeSelected, Converter={StaticResource InverseBoolToVisibilityConverter}}"/>
            <MenuItem Header="Create Connection to new SplineActor" Command="{Binding AddNewSplineActorToChainCommand}" SharedUI:Bindings.VisibilityToEnabled="True"/>
            <MenuItem Header="Create Connection to existing SplineActor" Click="CreateSplineConnection_Click" Visibility="{Binding SplineNodeSelected, Converter={StaticResource BoolToVisibilityConverter}}"/>
            <MenuItem Header="Break Connection" Click="BreakSplineConnectionClick" ToolTip="Breaks connection to another SplineActor" 
                      Visibility="{Binding SplineNodeSelected, Converter={StaticResource BoolToVisibilityConverter}}"/>
            <MenuItem Header="Clone node" Click="CloneNode_Clicked" ToolTip="Create a new node as a duplicate of this one" />
            <MenuItem Header="Remove from level" Command="{Binding RemoveFromLevelCommand}" ToolTip="Removes this object from the level"/>
            <MenuItem Header="Trash and Remove from level" Command="{Binding TrashAndRemoveFromLevelCommand}" ToolTip="Removes this object from the level and Trashes it"/>
            <MenuItem Header="Generate new nav GUID" Click="RegenerateGUID_Clicked" ToolTip="Generates a new GUID for this navigation point. If there are external nodes referencing this node, they will no longer work"/>

            <MenuItem Header="Filter nodes by Z value"  IsChecked="{Binding ZFilteringMode, Converter={StaticResource EZFilteringActiveConverter}, ConverterParameter='NotNone'}">
                <MenuItem IsEnabled="False" Header="{Binding CurrentFilteringText}"/>
                <Separator/>
                <MenuItem Header="Show all nodes" Click="ShowNodes_All_Click"/>
                <MenuItem Header="Show only nodes above this one" Click="ShowNodes_Above_Click"/>
                <MenuItem Header="Show only nodes below this one" Click="ShowNodes_Below_Click"/>
                <MenuItem Header="Show only nodes at or above this one" Click="ShowNodes_AboveEqual_Click"/>
                <MenuItem Header="Show only nodes at or below this one" Click="ShowNodes_BelowEqual_Click"/>
            </MenuItem>
            <Separator />
            <MenuItem Header="Open sequence reference in Sequence Editor" ItemsSource="{Binding CurrentNodeSequenceReferences}" IsEnabled="{Binding Path=CurrentNodeSequenceReferences.Count, Converter={StaticResource IsIntNotEqualConverter}, ConverterParameter=0}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="Header" Value="{Binding InstancedFullPath}"/>
                        <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=MenuItem}, Path=DataContext.OpenRefInSequenceEditorCommand}" />
                        <Setter Property="CommandParameter" Value="{Binding}" />
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <MenuItem Header="Open in Package Editor" ToolTip="Open this export in Package Editor. Initialization of the tree may take a few seconds." Click="OpenInPackageEditor_Clicked" />
        </ContextMenu>
    </Window.Resources>
    <Window.InputBindings>
        <KeyBinding Key="F1" Command="{Binding TogglePathfindingCommand}"/>
        <KeyBinding Key="F2" Command="{Binding ToggleSplinesCommand}"/>
        <KeyBinding Key="F3" Command="{Binding ToggleActorsCommand}"/>
        <KeyBinding Key="F4" Command="{Binding ToggleArtCommand}"/>
        <KeyBinding Key="F5" Command="{Binding RefreshCommand}"/>
        <KeyBinding Key="F6" Command="{Binding ToggleEverythingElseCommand}"/>
        <KeyBinding Key="F10" Command="{Binding ToggleAllCollectionsCommand}"/>
        <KeyBinding Key="F" Modifiers="Control" Command="{Binding FocusFindCommand}"/>
        <KeyBinding Key="G" Modifiers="Control" Command="{Binding FocusGotoCommand}"/>
        <KeyBinding Key="O" Modifiers="Control" Command="{Binding OpenCommand}"/>
        <KeyBinding Key="S" Modifiers="Control" Command="{Binding SaveCommand}"/>
        <KeyBinding Key="S" Modifiers="Control+Shift" Command="{Binding SaveAsCommand}"/>
        <KeyBinding Key="P" Modifiers="Control" Command="{Binding PopoutInterpreterCommand}"/>
    </Window.InputBindings>
    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="File" Padding="4" >
                <MenuItem Header="_Open" Command="{Binding OpenCommand}" InputGestureText="Ctrl+O" ToolTip="Open a package file"/>
                <MenuItem Header="_Save"  Command="{Binding SaveCommand}" InputGestureText="Ctrl+S" ToolTip="Save package file in-place" IsEnabled="{Binding Pcc, Converter={StaticResource NullEnabledConverter}}"/>
                <MenuItem Header="Save as" Command="{Binding SaveAsCommand}" InputGestureText="Ctrl+Shift+S" ToolTip="Save package file to another location" IsEnabled="{Binding Pcc, Converter={StaticResource NullEnabledConverter}}"/>
                <Separator />
                <MenuItem Name="Recents_MenuItem" Header="Recent" IsEnabled="false"/>
            </MenuItem>

            <MenuItem Header="Tools" Padding="4">
                <MenuItem Header="Add export to level" Command="{Binding AddExportToLevelCommand}" ToolTip="Add an export to this file's level"/>
                <MenuItem Header="Find node via Tag" Command="{Binding FocusFindCommand}" InputGestureText="CTRL+F" ToolTip="Find a node by it's custom tag"/>
                <MenuItem Header="Find node via UIndex" Command="{Binding FocusGotoCommand}" InputGestureText="CTRL+G" ToolTip="Find a node by it's UIndex"/>

            </MenuItem>

            <MenuItem Header="View Options" Padding="4">
                <MenuItem Header="Refresh" Command="{Binding RefreshCommand}" InputGestureText="F5" ToolTip="Refreshes the pathing graph"/>
                <MenuItem Header="Filter nodes by Z value"  IsChecked="{Binding ZFilteringMode, Converter={StaticResource EZFilteringActiveConverter}, ConverterParameter='NotNone'}">
                    <MenuItem IsEnabled="False" Header="{Binding CurrentFilteringText}"/>
                    <Separator/>
                    <MenuItem Header="Show all nodes" Click="ShowNodes_All_Click"/>
                    <MenuItem Header="Show only nodes above this one" Click="ShowNodes_Above_Click"/>
                    <MenuItem Header="Show only nodes below this one" Click="ShowNodes_Below_Click"/>
                    <MenuItem Header="Show only nodes at or above this one" Click="ShowNodes_AboveEqual_Click"/>
                    <MenuItem Header="Show only nodes at or below this one" Click="ShowNodes_BelowEqual_Click"/>
                </MenuItem>
                <Separator/>
                <MenuItem Header="Pathfinding" Command="{Binding TogglePathfindingCommand}" IsChecked="{Binding ShowPathfindingNodesLayer}" StaysOpenOnClick="True" InputGestureText="F1" ToolTip="Shows the pathing network that AI uses to traverse a 3D space"/>
                <MenuItem Header="Splines" Command="{Binding ToggleSplinesCommand}" IsChecked="{Binding ShowSplinesLayer}" StaysOpenOnClick="True" InputGestureText="F2" ToolTip="Shows splines and their layout"/>
                <MenuItem Header="Design (Dynamic Actors)" Command="{Binding ToggleActorsCommand}" IsChecked="{Binding ShowActorsLayer}" StaysOpenOnClick="True" InputGestureText="F3" ToolTip="Shows actors used in designed gameplay (NPCs, Trigger Volumes, Interpactors)"/>
                <MenuItem Header="Art (Static Actors + Collections)" Command="{Binding ToggleArtCommand}" IsChecked="{Binding ShowArtLayer}" StaysOpenOnClick="True" InputGestureText="F4" ToolTip="Shows static actors used for art (StaticMeshes, Lights, Audio, Blocking Volumes)"/>
                <MenuItem Header="Everything else" Command="{Binding ToggleEverythingElseCommand}" IsChecked="{Binding ShowEverythingElseLayer}" StaysOpenOnClick="True" InputGestureText="F6" ToolTip="Shows everything else that is not parsed by the other layers"/>
                <Separator/>
                <MenuItem Header="Sequence References" Command="{Binding ToggleSequenceReferencesCommand}" IsChecked="{Binding ShowSequenceReferences}" StaysOpenOnClick="True"  ToolTip="Adds comments and right click options for sequences that reference this node"/>
                <MenuItem Header="Toggle All Collections" Command="{Binding ToggleAllCollectionsCommand}" InputGestureText="F10"  ToolTip="Show or Hide all the collection actors."/>
                <Separator/>
                <MenuItem Header="Show volumes instead of nodes for...">
                    <MenuItem Header="BioTriggerVolumes" Command="{Binding ShowBioTriggerVolumesCommand}" IsCheckable="True" IsChecked="{Binding ShowVolumes_BioTriggerVolumes}" StaysOpenOnClick="True" ToolTip="Shows BioTriggerVolumes as top down polygons of their brush"/>
                    <MenuItem Header="BioTriggerStream" Command="{Binding ShowBioTriggerStreamsCommand}" IsCheckable="True" IsChecked="{Binding ShowVolumes_BioTriggerStreams}" StaysOpenOnClick="True" ToolTip="Shows BioTriggerStreams as top down polygons of their brush"/>
                    <MenuItem Header="BlockingVolume" Command="{Binding ShowBlockingVolumesCommand}" IsCheckable="True" IsChecked="{Binding ShowVolumes_BlockingVolumes}" StaysOpenOnClick="True" ToolTip="Shows BlockingVolumes as top down polygons of their brush"/>
                    <MenuItem Header="DynamiceBlockingVolume" Command="{Binding ShowDynamicBlockingVolumesCommand}" IsCheckable="True" IsChecked="{Binding ShowVolumes_DynamicBlockingVolumes}" StaysOpenOnClick="True" ToolTip="Shows DynamicBlockingVolumes as top down polygons of their brush"/>
                    <MenuItem Header="SFXBlockingVolume_Ledge" IsCheckable="True" IsChecked="{Binding ShowVolumes_SFXBlockingVolume_Ledges}" StaysOpenOnClick="True" ToolTip="Shows ledge SFXBlockingVolumes as top down polygons of their brush"/>
                    <MenuItem Header="SFXCombatZone" IsCheckable="True" IsChecked="{Binding ShowVolumes_SFXCombatZones}" StaysOpenOnClick="True" ToolTip="Shows SFXCombatZones as top down polygons of their brush"/>
                    <MenuItem Header="WwiseAudioVolume" Command="{Binding ShowWwiseAudioVolumesCommand}" IsCheckable="True" IsChecked="{Binding ShowVolumes_WwiseAudioVolumes}" StaysOpenOnClick="True" ToolTip="Shows WwiseAudioVolumes as top down polygons of their brush"/>
                    <MenuItem Header="Other Volumes" Command="{Binding ShowGenericVolumesCommand}" IsCheckable="True" IsChecked="{Binding ShowVolumes_GenericVolumes}" StaysOpenOnClick="True" ToolTip="Shows other generic volumes as top down polygons of their brush"/>
                </MenuItem>
                <MenuItem Header="Show node sizes" Name="ShowNodeSizes_MenuItem"  Command="{Binding ShowNodeSizesCommand}" IsChecked="{Binding Source={x:Static properties:Settings.Default}, Path=PathfindingEditorShowNodeSizes, Mode=TwoWay}" StaysOpenOnClick="True" ToolTip="Toggles the size of nodes being listed beneath their UIndex. BS = Boss, MB = Miniboss, M = Mooks."/>
            </MenuItem>
            <MenuItem Header="Experiments" Padding="4">
                <MenuItem Header="Flip level upside down" Command="{Binding FlipLevelCommand}"/>
                <MenuItem Header="Build linear pathfinding chain from path logger (ASI)" Command="{Binding BuildPathfindingChainCommand}"/>
                <MenuItem Header="Pop out interpreter for current node" Command="{Binding PopoutInterpreterCommand}" InputGestureText="CTRL + P"/>
                <MenuItem Header="Check all game files for navigation points that editor does not support" Click="CheckGameFileNavs_Clicked"/>
                <MenuItem Header="Check all NetIndexes" Command="{Binding CheckNetIndexesCommand}"/>
                <MenuItem Header="Load overlay file" Command="{Binding LoadOverlayFileCommand}"/>
                <MenuItem Header="Calculate Interp Start and End against anchored Targetpoint" Command="{Binding CalculateInterpAgainstTargetPointCommand}"/>
                <MenuItem Header="Show Experimental Level Tools" Command="{Binding ToggleArtToolsCommand}" IsCheckable="True" IsChecked="{Binding ShowArtTools}"/>
            </MenuItem>
        </Menu>
        <StatusBar Height="23" DockPanel.Dock="Bottom">
            <SharedUI:StatusBarGameIDIndicator Visibility="{Binding Pcc, Converter={StaticResource NullVisibilityConverter}}"
                                               GameType="{Binding Pcc, Converter={StaticResource GameTypeConverter}}" Margin="0,-4"/>
            <StatusBarItem>
                <TextBlock Name="StatusBar_LeftMostText" Text="{Binding StatusText}"/>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Right">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Name="StatusBar_RightSide_LastSaved" Text="{Binding Pcc.LastSaved, StringFormat='Last saved at {0}'}" Foreground="Gray"/>
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
        <!-- Main Content panel-->
        <DockPanel>
            <DockPanel DockPanel.Dock="Right" Width="300" Visibility="{Binding Pcc, Converter={StaticResource NullVisibilityConverter}}">
                <StatusBar DockPanel.Dock="Bottom">
                    <StatusBarItem HorizontalAlignment="Right">
                        <TextBlock Name="StatusBar_RightSideFiltering" Text="{Binding CurrentFilteringText}"/>
                    </StatusBarItem>
                </StatusBar>
                <StackPanel DockPanel.Dock="Top" Margin="3">
                    <Viewbox StretchDirection="DownOnly" Stretch="Uniform" HorizontalAlignment="Left" Height="24" >
                        <TextBlock Text="{Binding NodeName, FallbackValue=PathNode_X57}" FontWeight="Bold" FontSize="20" TextAlignment="Left"/>
                    </Viewbox>
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Name="NodePosition_Panel" IsEnabled="False">
                        <TextBlock Text="{Binding NodeNameSubText, FallbackValue=Export 57}" FontWeight="Bold" FontSize="10" VerticalAlignment="Center"/>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                            <TextBlock Text="X:" FontWeight="Bold" FontSize="10" Margin="10,0,4,0"  VerticalAlignment="Center" />
                            <TextBox Width="50" Name="NodePositionX_TextBox" KeyUp="PositionBoxes_KeyUp" GotFocus="CoordinateEditor_GotFocus"/>
                            <TextBlock Text="Y:" FontWeight="Bold" FontSize="10" Margin="10,0,4,0" VerticalAlignment="Center" />
                            <TextBox Width="50" Name="NodePositionY_TextBox" KeyUp="PositionBoxes_KeyUp" GotFocus="CoordinateEditor_GotFocus"/>
                            <TextBlock Text="Z:" FontWeight="Bold" FontSize="10" Margin="10,0,4,0" VerticalAlignment="Center" />
                            <TextBox Width="50" Name="NodePositionZ_TextBox" KeyUp="PositionBoxes_KeyUp" GotFocus="CoordinateEditor_GotFocus"/>
                        </StackPanel>
                    </StackPanel>
                    <TextBlock Text="{Binding NodeTypeDescriptionText, FallbackValue=This is AsyncState}" TextWrapping="Wrap" FontStyle="Italic" FontSize="11" MinHeight="60"/>

                </StackPanel>

                <!-- Pathfinding Tools-->
                <TabControl Name="PathfindingNodeTabControl">
                    <TabItem Name="ReachSpecs_TabItem" Header="ReachSpecs">
                        <local:ReachSpecsPanel x:Name="PathfindingEditorWPF_ReachSpecsPanel"/>
                    </TabItem>
                    <TabItem Name="CombatZones_TabItem" Header="Zones">
                        <DockPanel Margin="3">
                            <TextBlock DockPanel.Dock="Top" Text="This node is part of the following combat zones and playpens:" TextWrapping="Wrap" FontWeight="Bold"/>
                            <xctk:CheckListBox ItemsSource="{Binding CurrentNodeCombatZones}" DisplayMemberPath="DisplayString" SelectedMemberPath="Active" MinHeight="150" ItemSelectionChanged="CurrentCombatZones_SelectionChanged"/>
                        </DockPanel>
                    </TabItem>
                    <TabItem Name="NodeType_TabItem" Header="Type">
                        <DockPanel Margin="3">
                            <TextBlock DockPanel.Dock="Top" Text="Double click a type below to change this node to that type." TextWrapping="Wrap" FontWeight="Bold" Margin="3"/>
                            <ListBox Name="AvailableNodeTypes_ListBox" MinHeight="50" ItemsSource="{Binding AvailableNodeChangeableTypes}" HorizontalContentAlignment="Stretch">
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <Grid Margin="0">

                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="20" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <Grid.InputBindings>
                                                <MouseBinding Gesture="LeftDoubleClick" Command="{Binding NodeTypeChangeCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"/>
                                            </Grid.InputBindings>
                                            <fa:ImageAwesome Icon="Solid_CheckSquare" Grid.Column="0" Foreground="Gray" Height="16" HorizontalAlignment="Left">
                                                <fa:ImageAwesome.Style>
                                                    <Style TargetType="{x:Type fa:ImageAwesome}">
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Path=Active}" Value="false">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </fa:ImageAwesome.Style>
                                            </fa:ImageAwesome>

                                            <TextBlock Text="{Binding DisplayString}" Grid.Column="1" >
                                                <TextBlock.Style>
                                                    <Style TargetType="{x:Type TextBlock}">
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Path=Active}" Value="true">
                                                                <Setter Property="FontWeight" Value="Bold"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </TextBlock.Style>
                                            </TextBlock>


                                            <!--<TextBlock Grid.Column="1">
                                                <TextBlock.Text>
                                                    <MultiBinding StringFormat="{}{0}_{1}">
                                                        <Binding Path="ClassName" />
                                                        <Binding Path="indexValue" />
                                                    </MultiBinding>
                                                </TextBlock.Text>
                                            </TextBlock>-->
                                        </Grid>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </DockPanel>
                    </TabItem>
                    <TabItem Name="ValidationPanel_Tab" Header="Validation">
                        <local:ValidationPanel x:Name="PathfindingEditorWPF_ValidationPanel"/>
                    </TabItem>
                    <!-- Art Tools-->
                    <TabItem Name="LevelTools_Tab" Header="Level Tools" Visibility="{Binding ShowArtTools, Converter={StaticResource BoolToVisibilityConverter}}">
                        <StackPanel Margin="3">
                            <TextBlock Text="Experimental Tools for editing levels" FontSize="15" FontWeight="Bold" HorizontalAlignment="Center"/>
                            <TextBlock Text="Warning use at own risk. Make Backups." Foreground="Red" HorizontalAlignment="Center"/>
                            <Separator/>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <StackPanel Name="LightingToolsControl">
                                    <TextBlock Text="Lighting Tools" FontWeight="Black"  FontSize="13" HorizontalAlignment="Center" Margin="3"/>
                                    <TextBlock Text="Change every light in the level (static and dynamic)" HorizontalAlignment="Center" TextWrapping="Wrap" Margin="3"/>
                                    <DockPanel Margin="3,5" ToolTip="Overwrite the Red channel of all lights with another channel.">
                                        <CheckBox Content="Ignore switch if light is already Red" IsChecked="{Binding SwitchIgnoreRed}" DockPanel.Dock="Bottom"/>
                                        <TextBlock Text="Switch Red Channel to:" Margin="0,0,5,0" VerticalAlignment="Center" DockPanel.Dock="Left"/>
                                        <ComboBox  ItemsSource="{Binding rgbChannels}" SelectedItem="{Binding SwitchRedTo}" DockPanel.Dock="Right"/>
                                    </DockPanel>
                                    <DockPanel Margin="3,5" ToolTip="Overwrite the Green channel of all lights with another channel.">
                                        <CheckBox Content="Ignore switch if light is already Green" IsChecked="{Binding SwitchIgnoreGreen}" DockPanel.Dock="Bottom"/>
                                        <TextBlock Text="Switch Green Channel to:" Margin="0,0,5,0" VerticalAlignment="Center" DockPanel.Dock="Left"/>
                                        <ComboBox  ItemsSource="{Binding rgbChannels}" SelectedItem="{Binding SwitchGreenTo}" DockPanel.Dock="Right"/>
                                    </DockPanel>
                                    <DockPanel Margin="3,5" ToolTip="Overwrite the Blue channel of all lights with another channel.">
                                        <CheckBox Content="Ignore switch if light is already Blue" IsChecked="{Binding SwitchIgnoreBlue}" DockPanel.Dock="Bottom"/>
                                        <TextBlock Text="Switch Blue Channel to:" Margin="0,0,5,0" VerticalAlignment="Center" DockPanel.Dock="Left"/>
                                        <ComboBox  ItemsSource="{Binding rgbChannels}" SelectedItem="{Binding SwitchBlueTo}" DockPanel.Dock="Right"/>
                                    </DockPanel>
                                    <DockPanel ToolTip="Adjust the brightness of all lights. Use a percentage difference to existing brightness">
                                        <TextBlock Text="Adjust lighting brightness (%+/-)"/>
                                        <!--<xctk:DecimalUpDown Value="{Binding BrightnessAdjustment}" Minimum="-100" Maximum="100"/>-->
                                    </DockPanel>
                                </StackPanel>
                            </Grid>
                            <Button Content="Execute Lighting Changes" Command="{Binding EditLevelLightingCommand}" Margin="5"/>
                        </StackPanel>
                    </TabItem>
                </TabControl>
            </DockPanel>
            <DockPanel DockPanel.Dock="Bottom" MinHeight="200" MaxHeight="200" HorizontalAlignment="Stretch" LastChildFill="True" Visibility="{Binding Pcc, Converter={StaticResource NullVisibilityConverter}, ConverterParameter='Reversed', FallbackValue=Collapsed}">
                <StackPanel DockPanel.Dock="Left">
                    <TextBlock Margin="5" Text="Welcome to Pathfinding Editor WPF, the rewritten version of Pathfinding Editor" FontWeight="Bold"/>
                    <TextBlock Margin="5">
                            Pathfinding Editor WPF is a bit different from the classic Pathfinding Editor.
                                <LineBreak/>
                                Indexes are done strictly by UIndex, which is how they appear in game code.
                                <LineBreak/>
                                <LineBreak/>
                            This means:
                                <LineBreak/>
                                -  Export references will be incremented by 1 from what you have seen in Pathfinding Editor
                            <LineBreak/>
                                -  Import references will remain the same
                            <LineBreak/>
                                -  0 indicates null, empty, or "Class", depending on the context
                             <LineBreak/>
                    </TextBlock>
                </StackPanel>
                <StackPanel HorizontalAlignment="Left" Margin="10" VerticalAlignment="Center">
                    <Grid HorizontalAlignment="Center">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="280"/>
                            <ColumnDefinition Width="280"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Text="Recently opened items" Grid.Row="0" Grid.ColumnSpan="5" TextAlignment="Center" FontSize="20" FontWeight="Light" Margin="5"/>
                        <Button Name="RecentButton1" Content="Item" Grid.Row="1" Grid.Column="0" Margin="3" Padding="3"/>
                        <Button Name="RecentButton2" Content="Item" Grid.Row="1" Grid.Column="1" Margin="3" Padding="3"/>
                        <Button Name="RecentButton3" Content="Item" Grid.Row="2" Grid.Column="0" Margin="3" Padding="3"/>
                        <Button Name="RecentButton4" Content="Item" Grid.Row="2" Grid.Column="1" Margin="3" Padding="3"/>
                        <Button Name="RecentButton5" Content="Item" Grid.Row="3" Grid.Column="0" Margin="3" Padding="3"/>
                        <Button Name="RecentButton6" Content="Item" Grid.Row="3" Grid.Column="1" Margin="3" Padding="3"/>
                        <Button Name="RecentButton7" Content="Item" Grid.Row="4" Grid.Column="0" Margin="3" Padding="3"/>
                        <Button Name="RecentButton8" Content="Item" Grid.Row="4" Grid.Column="1" Margin="3" Padding="3"/>
                        <Button Name="RecentButton9" Content="Item" Grid.Row="5" Grid.Column="0" Margin="3" Padding="3"/>
                        <Button Name="RecentButton10" Content="Item" Grid.Row="5" Grid.Column="1" Margin="3" Padding="3"/>
                    </Grid>
                </StackPanel>
            </DockPanel>
            <DockPanel DockPanel.Dock="Bottom" MinHeight="300" MaxHeight="300" HorizontalAlignment="Stretch" LastChildFill="True" Visibility="{Binding Pcc, Converter={StaticResource NullVisibilityConverter}, FallbackValue=Visible}">
                <DockPanel DockPanel.Dock="Left">
                    <Expander DockPanel.Dock="Left" Name="CombatZonesSMC_Expander" ExpandDirection="Right" IsExpanded="False" Background="Orange" Padding="2" MaxWidth="310">
                        <Expander.Header>
                            <TextBlock Text="Zones &amp; Actor Collections" VerticalAlignment="Center" Margin="0,0,4,0">
                                <TextBlock.LayoutTransform>
                                    <RotateTransform Angle="-90"/>
                                </TextBlock.LayoutTransform>
                            </TextBlock>
                        </Expander.Header>
                        <ScrollViewer VerticalScrollBarVisibility="Auto" Margin="0,3,4,3">
                            <StackPanel Background="White">
                                <TextBlock Text="Actor Collections" Margin="5,5,5,0" FontWeight="Bold" TextAlignment="Center"/>
                                <TextBlock Text="Select items to show actors in that collection" Foreground="Gray" FontSize="10" TextWrapping="Wrap" TextAlignment="Center"/>
                                <xctk:CheckListBox x:Name="Collections_chkbx" MinHeight="70" ItemsSource="{Binding CollectionActors}" DisplayMemberPath="DisplayString" SelectedMemberPath="Active" ItemSelectionChanged="CollectionActors_ItemSelectionChanged"/>
                                <TextBlock Text="Zones" FontWeight="Bold"  TextAlignment="Center" Margin="0,10,0,0"/>
                                <TextBlock Text="Select an item to highlight nodes in that combat zone" Foreground="Gray" FontSize="10" Margin="3,0" TextWrapping="Wrap"  TextAlignment="Center"/>
                                <xctk:CheckListBox MinHeight="70" ItemsSource="{Binding CombatZones}" DisplayMemberPath="DisplayString" SelectedMemberPath="DisplayActive" ItemSelectionChanged="CombatZones_ItemSelectionChanged"/>
                            </StackPanel>
                        </ScrollViewer>
                    </Expander>
                    <!--<DockPanel>-->
                    <!-- Control to use if there are items.-->
                    <DockPanel Width="330">
                        <Grid DockPanel.Dock="Bottom">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="45"/>
                                <ColumnDefinition Width="2*"/>
                                <ColumnDefinition Width="3*"/>
                                <ColumnDefinition Width="2*"/>
                            </Grid.ColumnDefinitions>
                            <TextBox Grid.Column="0" Name="FindByNumber_TextBox" KeyUp="FindByNumber_OnKeyUp"/>
                            <Button Grid.Column="1" Name="FindByNumber_Button" Content="Find by #" Click="FindByNumber_Click" Padding="4,0"/>
                            <ComboBox Grid.Column="2" Name="FindByTag_ComboBox" ItemsSource="{Binding TagsList}" KeyUp="FindByTag_OnKeyUp"/>
                            <Button Grid.Column="3" Name="FindByTag_Button"  Content="Find by tag" Click="FindByTag_Click" Padding="4,0"/>
                        </Grid>

                        <ListBox Name="ActiveNodes_ListBox" ItemsSource="{Binding ActiveNodes}" SelectionChanged="ActiveNodesList_SelectedItemChanged" HorizontalContentAlignment="Stretch">
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <Grid Margin="0">
                                        <Grid.Style>
                                            <Style TargetType="{x:Type Grid}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=EntryHasPendingChanges}" Value="true">
                                                        <Setter Property="Background" Value="Yellow"/>
                                                        <Setter Property="ToolTip" Value="This export has been modified but the file has not yet been saved"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Grid.Style>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="40" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Text="{Binding UIndex}" />
                                        <TextBlock Grid.Column="1" Text="{Binding Path=ObjectName.Instanced}"/>
                                    </Grid>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                            <ListBox.ItemContainerStyle>
                                <Style>
                                    <Style.Triggers>
                                        <Trigger Property="Selector.IsSelected" Value="True">
                                            <Setter Property="TextElement.FontWeight" Value="Bold"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </ListBox.ItemContainerStyle>
                            <ListBox.Resources>
                                <Style TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=Items.Count}" Value="0">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <StackPanel VerticalAlignment="Center" Width="330">
                                                            <StackPanel VerticalAlignment="Center" Width="220">

                                                                <TextBlock Text="No items displayable with the current view options" FontSize="12" FontWeight="Bold" TextAlignment="Center" TextWrapping="Wrap"/>
                                                                <TextBlock Text="Turn additional layers on in View Options or enable Static Mesh Collection Actors to the left." FontSize="10" Foreground="Gray" TextWrapping="Wrap" TextAlignment="Center"/>
                                                            </StackPanel>
                                                        </StackPanel>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ListBox.Resources>
                        </ListBox>
                    </DockPanel>
                </DockPanel>

                <!-- Visibility="{Binding Pcc, Converter={StaticResource NullVisibilityConverter}}" -->
                <global:InterpreterWPF x:Name="Properties_InterpreterWPF" HideHexBox="True"/>
            </DockPanel>
            <WindowsFormsHost Name="GraphHost" VerticalAlignment="Stretch">
                <local:PathingGraphEditor DragEnter="GraphEditor_DragEnter" DragDrop="GraphEditor_DragDrop"/>
            </WindowsFormsHost>
        </DockPanel>
    </DockPanel>
</global:WPFBase>
